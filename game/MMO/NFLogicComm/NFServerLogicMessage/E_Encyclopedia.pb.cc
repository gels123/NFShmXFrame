// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Encyclopedia.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Encyclopedia.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_EncyclopediaHandbookLviattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaHandbookLviattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaHandbookStariattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaHandbookStariattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaHandbook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaHandbook_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_EncyclopediaHandbook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_EncyclopediaHandbook_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaHandbookfateAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaHandbookfateAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaHandbookfate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaHandbookfate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_EncyclopediaHandbookfate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_EncyclopediaHandbookfate_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaHandbookresolve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaHandbookresolve_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_EncyclopediaHandbookresolve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_EncyclopediaHandbookresolve_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaHandbooklv_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaHandbooklv_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_EncyclopediaHandbooklv_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_EncyclopediaHandbooklv_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaHandbookstar_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaHandbookstar_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_EncyclopediaHandbookstar_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_EncyclopediaHandbookstar_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaBeastBeastDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaBeastBeastDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaBeast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaBeast_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_EncyclopediaBeast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_EncyclopediaBeast_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaEquipexpvalueBeaststarDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaEquipexpvalueBeaststarDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaEquipexpvalueGoldstarDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaEquipexpvalueGoldstarDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaEquipexpvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaEquipexpvalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_EncyclopediaEquipexpvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_EncyclopediaEquipexpvalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaBeastexpand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaBeastexpand_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_EncyclopediaBeastexpand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_EncyclopediaBeastexpand_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaBeastprivilegeAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaBeastprivilegeAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaBeastprivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaBeastprivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_EncyclopediaBeastprivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_EncyclopediaBeastprivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaBeastexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaBeastexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_EncyclopediaBeastexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_EncyclopediaBeastexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaEmployLviattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaEmployLviattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaEmploy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaEmploy_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_EncyclopediaEmploy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_EncyclopediaEmploy_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaTableLviattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaTableLviattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_EncyclopediaTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_EncyclopediaTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_EncyclopediaTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_EncyclopediaTable_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fEncyclopedia_2eproto() {
  protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Encyclopedia.proto");
  GOOGLE_CHECK(file != NULL);
  E_EncyclopediaHandbookLviattributeDesc_descriptor_ = file->message_type(0);
  static const int E_EncyclopediaHandbookLviattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookLviattributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookLviattributeDesc, m_type_),
  };
  E_EncyclopediaHandbookLviattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaHandbookLviattributeDesc_descriptor_,
      E_EncyclopediaHandbookLviattributeDesc::default_instance_,
      E_EncyclopediaHandbookLviattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookLviattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookLviattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaHandbookLviattributeDesc));
  E_EncyclopediaHandbookStariattributeDesc_descriptor_ = file->message_type(1);
  static const int E_EncyclopediaHandbookStariattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookStariattributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookStariattributeDesc, m_type_),
  };
  E_EncyclopediaHandbookStariattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaHandbookStariattributeDesc_descriptor_,
      E_EncyclopediaHandbookStariattributeDesc::default_instance_,
      E_EncyclopediaHandbookStariattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookStariattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookStariattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaHandbookStariattributeDesc));
  E_EncyclopediaHandbook_descriptor_ = file->message_type(2);
  static const int E_EncyclopediaHandbook_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_handbookid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_handbookname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_handbookquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_handbooktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_handbooktype_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_handz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_handzname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_handbooklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_lvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_lvnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_lviattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_awakeskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, m_stariattribute_),
  };
  E_EncyclopediaHandbook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaHandbook_descriptor_,
      E_EncyclopediaHandbook::default_instance_,
      E_EncyclopediaHandbook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaHandbook));
  Sheet_EncyclopediaHandbook_descriptor_ = file->message_type(3);
  static const int Sheet_EncyclopediaHandbook_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbook, e_encyclopediahandbook_list_),
  };
  Sheet_EncyclopediaHandbook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_EncyclopediaHandbook_descriptor_,
      Sheet_EncyclopediaHandbook::default_instance_,
      Sheet_EncyclopediaHandbook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_EncyclopediaHandbook));
  E_EncyclopediaHandbookfateAttributeDesc_descriptor_ = file->message_type(4);
  static const int E_EncyclopediaHandbookfateAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookfateAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookfateAttributeDesc, m_type_),
  };
  E_EncyclopediaHandbookfateAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaHandbookfateAttributeDesc_descriptor_,
      E_EncyclopediaHandbookfateAttributeDesc::default_instance_,
      E_EncyclopediaHandbookfateAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookfateAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookfateAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaHandbookfateAttributeDesc));
  E_EncyclopediaHandbookfate_descriptor_ = file->message_type(5);
  static const int E_EncyclopediaHandbookfate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookfate, m_fateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookfate, m_fatename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookfate, m_fatequality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookfate, m_fatehand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookfate, m_attribute_),
  };
  E_EncyclopediaHandbookfate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaHandbookfate_descriptor_,
      E_EncyclopediaHandbookfate::default_instance_,
      E_EncyclopediaHandbookfate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookfate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookfate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaHandbookfate));
  Sheet_EncyclopediaHandbookfate_descriptor_ = file->message_type(6);
  static const int Sheet_EncyclopediaHandbookfate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbookfate, e_encyclopediahandbookfate_list_),
  };
  Sheet_EncyclopediaHandbookfate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_EncyclopediaHandbookfate_descriptor_,
      Sheet_EncyclopediaHandbookfate::default_instance_,
      Sheet_EncyclopediaHandbookfate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbookfate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbookfate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_EncyclopediaHandbookfate));
  E_EncyclopediaHandbookresolve_descriptor_ = file->message_type(7);
  static const int E_EncyclopediaHandbookresolve_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookresolve, m_handbookquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookresolve, m_resolveitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookresolve, m_resolvenum_),
  };
  E_EncyclopediaHandbookresolve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaHandbookresolve_descriptor_,
      E_EncyclopediaHandbookresolve::default_instance_,
      E_EncyclopediaHandbookresolve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookresolve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookresolve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaHandbookresolve));
  Sheet_EncyclopediaHandbookresolve_descriptor_ = file->message_type(8);
  static const int Sheet_EncyclopediaHandbookresolve_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbookresolve, e_encyclopediahandbookresolve_list_),
  };
  Sheet_EncyclopediaHandbookresolve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_EncyclopediaHandbookresolve_descriptor_,
      Sheet_EncyclopediaHandbookresolve::default_instance_,
      Sheet_EncyclopediaHandbookresolve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbookresolve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbookresolve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_EncyclopediaHandbookresolve));
  E_EncyclopediaHandbooklv_attr_descriptor_ = file->message_type(9);
  static const int E_EncyclopediaHandbooklv_attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbooklv_attr, m_attid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbooklv_attr, m_att_),
  };
  E_EncyclopediaHandbooklv_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaHandbooklv_attr_descriptor_,
      E_EncyclopediaHandbooklv_attr::default_instance_,
      E_EncyclopediaHandbooklv_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbooklv_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbooklv_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaHandbooklv_attr));
  Sheet_EncyclopediaHandbooklv_attr_descriptor_ = file->message_type(10);
  static const int Sheet_EncyclopediaHandbooklv_attr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbooklv_attr, e_encyclopediahandbooklv_attr_list_),
  };
  Sheet_EncyclopediaHandbooklv_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_EncyclopediaHandbooklv_attr_descriptor_,
      Sheet_EncyclopediaHandbooklv_attr::default_instance_,
      Sheet_EncyclopediaHandbooklv_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbooklv_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbooklv_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_EncyclopediaHandbooklv_attr));
  E_EncyclopediaHandbookstar_attr_descriptor_ = file->message_type(11);
  static const int E_EncyclopediaHandbookstar_attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookstar_attr, m_attid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookstar_attr, m_att_),
  };
  E_EncyclopediaHandbookstar_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaHandbookstar_attr_descriptor_,
      E_EncyclopediaHandbookstar_attr::default_instance_,
      E_EncyclopediaHandbookstar_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookstar_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaHandbookstar_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaHandbookstar_attr));
  Sheet_EncyclopediaHandbookstar_attr_descriptor_ = file->message_type(12);
  static const int Sheet_EncyclopediaHandbookstar_attr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbookstar_attr, e_encyclopediahandbookstar_attr_list_),
  };
  Sheet_EncyclopediaHandbookstar_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_EncyclopediaHandbookstar_attr_descriptor_,
      Sheet_EncyclopediaHandbookstar_attr::default_instance_,
      Sheet_EncyclopediaHandbookstar_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbookstar_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaHandbookstar_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_EncyclopediaHandbookstar_attr));
  E_EncyclopediaBeastBeastDesc_descriptor_ = file->message_type(13);
  static const int E_EncyclopediaBeastBeastDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastBeastDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastBeastDesc, m_att_),
  };
  E_EncyclopediaBeastBeastDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaBeastBeastDesc_descriptor_,
      E_EncyclopediaBeastBeastDesc::default_instance_,
      E_EncyclopediaBeastBeastDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastBeastDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastBeastDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaBeastBeastDesc));
  E_EncyclopediaBeast_descriptor_ = file->message_type(14);
  static const int E_EncyclopediaBeast_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeast, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeast, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeast, m_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeast, m_beast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeast, m_skill_),
  };
  E_EncyclopediaBeast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaBeast_descriptor_,
      E_EncyclopediaBeast::default_instance_,
      E_EncyclopediaBeast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaBeast));
  Sheet_EncyclopediaBeast_descriptor_ = file->message_type(15);
  static const int Sheet_EncyclopediaBeast_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaBeast, e_encyclopediabeast_list_),
  };
  Sheet_EncyclopediaBeast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_EncyclopediaBeast_descriptor_,
      Sheet_EncyclopediaBeast::default_instance_,
      Sheet_EncyclopediaBeast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaBeast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaBeast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_EncyclopediaBeast));
  E_EncyclopediaEquipexpvalueBeaststarDesc_descriptor_ = file->message_type(16);
  static const int E_EncyclopediaEquipexpvalueBeaststarDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalueBeaststarDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalueBeaststarDesc, m_att_),
  };
  E_EncyclopediaEquipexpvalueBeaststarDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaEquipexpvalueBeaststarDesc_descriptor_,
      E_EncyclopediaEquipexpvalueBeaststarDesc::default_instance_,
      E_EncyclopediaEquipexpvalueBeaststarDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalueBeaststarDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalueBeaststarDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaEquipexpvalueBeaststarDesc));
  E_EncyclopediaEquipexpvalueGoldstarDesc_descriptor_ = file->message_type(17);
  static const int E_EncyclopediaEquipexpvalueGoldstarDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalueGoldstarDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalueGoldstarDesc, m_att_),
  };
  E_EncyclopediaEquipexpvalueGoldstarDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaEquipexpvalueGoldstarDesc_descriptor_,
      E_EncyclopediaEquipexpvalueGoldstarDesc::default_instance_,
      E_EncyclopediaEquipexpvalueGoldstarDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalueGoldstarDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalueGoldstarDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaEquipexpvalueGoldstarDesc));
  E_EncyclopediaEquipexpvalue_descriptor_ = file->message_type(18);
  static const int E_EncyclopediaEquipexpvalue_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalue, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalue, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalue, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalue, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalue, m_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalue, m_goldattall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalue, m_goldatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalue, m_beaststar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalue, m_goldstar_),
  };
  E_EncyclopediaEquipexpvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaEquipexpvalue_descriptor_,
      E_EncyclopediaEquipexpvalue::default_instance_,
      E_EncyclopediaEquipexpvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEquipexpvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaEquipexpvalue));
  Sheet_EncyclopediaEquipexpvalue_descriptor_ = file->message_type(19);
  static const int Sheet_EncyclopediaEquipexpvalue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaEquipexpvalue, e_encyclopediaequipexpvalue_list_),
  };
  Sheet_EncyclopediaEquipexpvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_EncyclopediaEquipexpvalue_descriptor_,
      Sheet_EncyclopediaEquipexpvalue::default_instance_,
      Sheet_EncyclopediaEquipexpvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaEquipexpvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaEquipexpvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_EncyclopediaEquipexpvalue));
  E_EncyclopediaBeastexpand_descriptor_ = file->message_type(20);
  static const int E_EncyclopediaBeastexpand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastexpand, m_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastexpand, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastexpand, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastexpand, m_num_),
  };
  E_EncyclopediaBeastexpand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaBeastexpand_descriptor_,
      E_EncyclopediaBeastexpand::default_instance_,
      E_EncyclopediaBeastexpand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastexpand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastexpand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaBeastexpand));
  Sheet_EncyclopediaBeastexpand_descriptor_ = file->message_type(21);
  static const int Sheet_EncyclopediaBeastexpand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaBeastexpand, e_encyclopediabeastexpand_list_),
  };
  Sheet_EncyclopediaBeastexpand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_EncyclopediaBeastexpand_descriptor_,
      Sheet_EncyclopediaBeastexpand::default_instance_,
      Sheet_EncyclopediaBeastexpand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaBeastexpand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaBeastexpand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_EncyclopediaBeastexpand));
  E_EncyclopediaBeastprivilegeAttributeDesc_descriptor_ = file->message_type(22);
  static const int E_EncyclopediaBeastprivilegeAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastprivilegeAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastprivilegeAttributeDesc, m_type_),
  };
  E_EncyclopediaBeastprivilegeAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaBeastprivilegeAttributeDesc_descriptor_,
      E_EncyclopediaBeastprivilegeAttributeDesc::default_instance_,
      E_EncyclopediaBeastprivilegeAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastprivilegeAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastprivilegeAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaBeastprivilegeAttributeDesc));
  E_EncyclopediaBeastprivilege_descriptor_ = file->message_type(23);
  static const int E_EncyclopediaBeastprivilege_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastprivilege, m_privilegetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastprivilege, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastprivilege, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastprivilege, m_expaddition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastprivilege, m_attribute_),
  };
  E_EncyclopediaBeastprivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaBeastprivilege_descriptor_,
      E_EncyclopediaBeastprivilege::default_instance_,
      E_EncyclopediaBeastprivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastprivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastprivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaBeastprivilege));
  Sheet_EncyclopediaBeastprivilege_descriptor_ = file->message_type(24);
  static const int Sheet_EncyclopediaBeastprivilege_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaBeastprivilege, e_encyclopediabeastprivilege_list_),
  };
  Sheet_EncyclopediaBeastprivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_EncyclopediaBeastprivilege_descriptor_,
      Sheet_EncyclopediaBeastprivilege::default_instance_,
      Sheet_EncyclopediaBeastprivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaBeastprivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaBeastprivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_EncyclopediaBeastprivilege));
  E_EncyclopediaBeastexp_descriptor_ = file->message_type(25);
  static const int E_EncyclopediaBeastexp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastexp, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastexp, m_exp_),
  };
  E_EncyclopediaBeastexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaBeastexp_descriptor_,
      E_EncyclopediaBeastexp::default_instance_,
      E_EncyclopediaBeastexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaBeastexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaBeastexp));
  Sheet_EncyclopediaBeastexp_descriptor_ = file->message_type(26);
  static const int Sheet_EncyclopediaBeastexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaBeastexp, e_encyclopediabeastexp_list_),
  };
  Sheet_EncyclopediaBeastexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_EncyclopediaBeastexp_descriptor_,
      Sheet_EncyclopediaBeastexp::default_instance_,
      Sheet_EncyclopediaBeastexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaBeastexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaBeastexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_EncyclopediaBeastexp));
  E_EncyclopediaEmployLviattributeDesc_descriptor_ = file->message_type(27);
  static const int E_EncyclopediaEmployLviattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmployLviattributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmployLviattributeDesc, m_type_),
  };
  E_EncyclopediaEmployLviattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaEmployLviattributeDesc_descriptor_,
      E_EncyclopediaEmployLviattributeDesc::default_instance_,
      E_EncyclopediaEmployLviattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmployLviattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmployLviattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaEmployLviattributeDesc));
  E_EncyclopediaEmploy_descriptor_ = file->message_type(28);
  static const int E_EncyclopediaEmploy_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmploy, m_employid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmploy, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmploy, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmploy, m_employname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmploy, m_employquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmploy, m_employtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmploy, m_employtype_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmploy, m_employz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmploy, m_employzname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmploy, m_lviattribute_),
  };
  E_EncyclopediaEmploy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaEmploy_descriptor_,
      E_EncyclopediaEmploy::default_instance_,
      E_EncyclopediaEmploy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmploy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaEmploy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaEmploy));
  Sheet_EncyclopediaEmploy_descriptor_ = file->message_type(29);
  static const int Sheet_EncyclopediaEmploy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaEmploy, e_encyclopediaemploy_list_),
  };
  Sheet_EncyclopediaEmploy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_EncyclopediaEmploy_descriptor_,
      Sheet_EncyclopediaEmploy::default_instance_,
      Sheet_EncyclopediaEmploy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaEmploy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaEmploy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_EncyclopediaEmploy));
  E_EncyclopediaTableLviattributeDesc_descriptor_ = file->message_type(30);
  static const int E_EncyclopediaTableLviattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaTableLviattributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaTableLviattributeDesc, m_type_),
  };
  E_EncyclopediaTableLviattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaTableLviattributeDesc_descriptor_,
      E_EncyclopediaTableLviattributeDesc::default_instance_,
      E_EncyclopediaTableLviattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaTableLviattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaTableLviattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaTableLviattributeDesc));
  E_EncyclopediaTable_descriptor_ = file->message_type(31);
  static const int E_EncyclopediaTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaTable, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaTable, m_tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaTable, m_tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaTable, m_lviattribute_),
  };
  E_EncyclopediaTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_EncyclopediaTable_descriptor_,
      E_EncyclopediaTable::default_instance_,
      E_EncyclopediaTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_EncyclopediaTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_EncyclopediaTable));
  Sheet_EncyclopediaTable_descriptor_ = file->message_type(32);
  static const int Sheet_EncyclopediaTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaTable, e_encyclopediatable_list_),
  };
  Sheet_EncyclopediaTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_EncyclopediaTable_descriptor_,
      Sheet_EncyclopediaTable::default_instance_,
      Sheet_EncyclopediaTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_EncyclopediaTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_EncyclopediaTable));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fEncyclopedia_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaHandbookLviattributeDesc_descriptor_, &E_EncyclopediaHandbookLviattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaHandbookStariattributeDesc_descriptor_, &E_EncyclopediaHandbookStariattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaHandbook_descriptor_, &E_EncyclopediaHandbook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_EncyclopediaHandbook_descriptor_, &Sheet_EncyclopediaHandbook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaHandbookfateAttributeDesc_descriptor_, &E_EncyclopediaHandbookfateAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaHandbookfate_descriptor_, &E_EncyclopediaHandbookfate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_EncyclopediaHandbookfate_descriptor_, &Sheet_EncyclopediaHandbookfate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaHandbookresolve_descriptor_, &E_EncyclopediaHandbookresolve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_EncyclopediaHandbookresolve_descriptor_, &Sheet_EncyclopediaHandbookresolve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaHandbooklv_attr_descriptor_, &E_EncyclopediaHandbooklv_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_EncyclopediaHandbooklv_attr_descriptor_, &Sheet_EncyclopediaHandbooklv_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaHandbookstar_attr_descriptor_, &E_EncyclopediaHandbookstar_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_EncyclopediaHandbookstar_attr_descriptor_, &Sheet_EncyclopediaHandbookstar_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaBeastBeastDesc_descriptor_, &E_EncyclopediaBeastBeastDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaBeast_descriptor_, &E_EncyclopediaBeast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_EncyclopediaBeast_descriptor_, &Sheet_EncyclopediaBeast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaEquipexpvalueBeaststarDesc_descriptor_, &E_EncyclopediaEquipexpvalueBeaststarDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaEquipexpvalueGoldstarDesc_descriptor_, &E_EncyclopediaEquipexpvalueGoldstarDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaEquipexpvalue_descriptor_, &E_EncyclopediaEquipexpvalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_EncyclopediaEquipexpvalue_descriptor_, &Sheet_EncyclopediaEquipexpvalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaBeastexpand_descriptor_, &E_EncyclopediaBeastexpand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_EncyclopediaBeastexpand_descriptor_, &Sheet_EncyclopediaBeastexpand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaBeastprivilegeAttributeDesc_descriptor_, &E_EncyclopediaBeastprivilegeAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaBeastprivilege_descriptor_, &E_EncyclopediaBeastprivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_EncyclopediaBeastprivilege_descriptor_, &Sheet_EncyclopediaBeastprivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaBeastexp_descriptor_, &E_EncyclopediaBeastexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_EncyclopediaBeastexp_descriptor_, &Sheet_EncyclopediaBeastexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaEmployLviattributeDesc_descriptor_, &E_EncyclopediaEmployLviattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaEmploy_descriptor_, &E_EncyclopediaEmploy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_EncyclopediaEmploy_descriptor_, &Sheet_EncyclopediaEmploy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaTableLviattributeDesc_descriptor_, &E_EncyclopediaTableLviattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_EncyclopediaTable_descriptor_, &E_EncyclopediaTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_EncyclopediaTable_descriptor_, &Sheet_EncyclopediaTable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fEncyclopedia_2eproto() {
  delete E_EncyclopediaHandbookLviattributeDesc::default_instance_;
  delete E_EncyclopediaHandbookLviattributeDesc_reflection_;
  delete E_EncyclopediaHandbookStariattributeDesc::default_instance_;
  delete E_EncyclopediaHandbookStariattributeDesc_reflection_;
  delete E_EncyclopediaHandbook::default_instance_;
  delete E_EncyclopediaHandbook_reflection_;
  delete Sheet_EncyclopediaHandbook::default_instance_;
  delete Sheet_EncyclopediaHandbook_reflection_;
  delete E_EncyclopediaHandbookfateAttributeDesc::default_instance_;
  delete E_EncyclopediaHandbookfateAttributeDesc_reflection_;
  delete E_EncyclopediaHandbookfate::default_instance_;
  delete E_EncyclopediaHandbookfate_reflection_;
  delete Sheet_EncyclopediaHandbookfate::default_instance_;
  delete Sheet_EncyclopediaHandbookfate_reflection_;
  delete E_EncyclopediaHandbookresolve::default_instance_;
  delete E_EncyclopediaHandbookresolve_reflection_;
  delete Sheet_EncyclopediaHandbookresolve::default_instance_;
  delete Sheet_EncyclopediaHandbookresolve_reflection_;
  delete E_EncyclopediaHandbooklv_attr::default_instance_;
  delete E_EncyclopediaHandbooklv_attr_reflection_;
  delete Sheet_EncyclopediaHandbooklv_attr::default_instance_;
  delete Sheet_EncyclopediaHandbooklv_attr_reflection_;
  delete E_EncyclopediaHandbookstar_attr::default_instance_;
  delete E_EncyclopediaHandbookstar_attr_reflection_;
  delete Sheet_EncyclopediaHandbookstar_attr::default_instance_;
  delete Sheet_EncyclopediaHandbookstar_attr_reflection_;
  delete E_EncyclopediaBeastBeastDesc::default_instance_;
  delete E_EncyclopediaBeastBeastDesc_reflection_;
  delete E_EncyclopediaBeast::default_instance_;
  delete E_EncyclopediaBeast_reflection_;
  delete Sheet_EncyclopediaBeast::default_instance_;
  delete Sheet_EncyclopediaBeast_reflection_;
  delete E_EncyclopediaEquipexpvalueBeaststarDesc::default_instance_;
  delete E_EncyclopediaEquipexpvalueBeaststarDesc_reflection_;
  delete E_EncyclopediaEquipexpvalueGoldstarDesc::default_instance_;
  delete E_EncyclopediaEquipexpvalueGoldstarDesc_reflection_;
  delete E_EncyclopediaEquipexpvalue::default_instance_;
  delete E_EncyclopediaEquipexpvalue_reflection_;
  delete Sheet_EncyclopediaEquipexpvalue::default_instance_;
  delete Sheet_EncyclopediaEquipexpvalue_reflection_;
  delete E_EncyclopediaBeastexpand::default_instance_;
  delete E_EncyclopediaBeastexpand_reflection_;
  delete Sheet_EncyclopediaBeastexpand::default_instance_;
  delete Sheet_EncyclopediaBeastexpand_reflection_;
  delete E_EncyclopediaBeastprivilegeAttributeDesc::default_instance_;
  delete E_EncyclopediaBeastprivilegeAttributeDesc_reflection_;
  delete E_EncyclopediaBeastprivilege::default_instance_;
  delete E_EncyclopediaBeastprivilege_reflection_;
  delete Sheet_EncyclopediaBeastprivilege::default_instance_;
  delete Sheet_EncyclopediaBeastprivilege_reflection_;
  delete E_EncyclopediaBeastexp::default_instance_;
  delete E_EncyclopediaBeastexp_reflection_;
  delete Sheet_EncyclopediaBeastexp::default_instance_;
  delete Sheet_EncyclopediaBeastexp_reflection_;
  delete E_EncyclopediaEmployLviattributeDesc::default_instance_;
  delete E_EncyclopediaEmployLviattributeDesc_reflection_;
  delete E_EncyclopediaEmploy::default_instance_;
  delete E_EncyclopediaEmploy_reflection_;
  delete Sheet_EncyclopediaEmploy::default_instance_;
  delete Sheet_EncyclopediaEmploy_reflection_;
  delete E_EncyclopediaTableLviattributeDesc::default_instance_;
  delete E_EncyclopediaTableLviattributeDesc_reflection_;
  delete E_EncyclopediaTable::default_instance_;
  delete E_EncyclopediaTable_reflection_;
  delete Sheet_EncyclopediaTable::default_instance_;
  delete Sheet_EncyclopediaTable_reflection_;
}

void protobuf_AddDesc_E_5fEncyclopedia_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024E_Encyclopedia.proto\022\010proto_ff\032\025yd_fie"
    "ldoptions.proto\"^\n&E_EncyclopediaHandboo"
    "kLviattributeDesc\022\030\n\007m_value\030\001 \001(\003B\007\302\377\024\003"
    "\345\200\274\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\"`\n(E_Enc"
    "yclopediaHandbookStariattributeDesc\022\030\n\007m"
    "_value\030\001 \001(\003B\007\302\377\024\003\345\200\274\022\032\n\006m_type\030\002 \001(\005B\n\302"
    "\377\024\006\347\261\273\345\236\213\"\241\006\n\026E_EncyclopediaHandbook\022\"\n\014"
    "m_handbookID\030\001 \001(\003B\014\302\377\024\010\345\233\276\351\211\264id\022$\n\010m_it"
    "emId\030\002 \001(\003B\022\302\377\024\016\345\205\263\350\201\224\347\211\251\345\223\201id\022,\n\016m_hand"
    "bookName\030\003 \001(\tB\024\302\377\024\014\345\233\276\351\211\264\345\220\215\347\247\260\220\301\024@\022+\n\021"
    "m_handbookQuality\030\004 \001(\005B\020\302\377\024\014\345\233\276\351\211\264\345\223\201\350\264"
    "\250\022(\n\016m_handbookType\030\005 \001(\005B\020\302\377\024\014\345\233\276\351\211\264\347\261\273"
    "\345\236\213\0227\n\023m_handbookType_name\030\006 \001(\tB\032\302\377\024\022\345\233"
    "\276\351\211\264\347\261\273\345\236\213\345\220\215\347\247\260\220\301\024@\022\036\n\007m_handZ\030\007 \001(\005B\r\302"
    "\377\024\t\345\233\276\351\211\264\347\273\204\022,\n\013m_handZName\030\010 \001(\tB\027\302\377\024\017\345"
    "\233\276\351\211\264\347\273\204\345\220\215\347\247\260\220\301\024@\022,\n\014m_handbookLv\030\t \001(\005"
    "B\026\302\377\024\022\345\233\276\351\211\264\347\255\211\347\272\247\344\270\212\351\231\220\022\"\n\006m_LvId\030\n \001(\003"
    "B\022\302\377\024\016\345\215\207\347\272\247\351\201\223\345\205\267id\022,\n\007m_LvNum\030\013 \001(\tB\033\302"
    "\377\024\022\345\215\207\347\272\247\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024\200\002\022$\n\010m_starId\030\014"
    " \001(\003B\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022-\n\tm_starNum\030\r "
    "\001(\tB\032\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024@\022X\n\016m_LvI"
    "attribute\030\016 \003(\01320.proto_ff.E_Encyclopedi"
    "aHandbookLviattributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024"
    "\004\022$\n\014m_awakeSkill\030\017 \003(\005B\016\302\377\024\006\346\212\200\350\203\275\210\301\024\003\022"
    "\\\n\020m_starIattribute\030\020 \003(\01322.proto_ff.E_E"
    "ncyclopediaHandbookStariattributeDescB\016\302"
    "\377\024\006\345\261\236\346\200\247\210\301\024\004\"j\n\032Sheet_EncyclopediaHandb"
    "ook\022L\n\033E_EncyclopediaHandbook_List\030\001 \003(\013"
    "2 .proto_ff.E_EncyclopediaHandbookB\005\210\301\024\200"
    "\004\"_\n\'E_EncyclopediaHandbookfateAttribute"
    "Desc\022\030\n\007m_value\030\001 \001(\003B\007\302\377\024\003\345\200\274\022\032\n\006m_type"
    "\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\"\221\002\n\032E_EncyclopediaHan"
    "dbookfate\022\036\n\010m_fateID\030\001 \001(\003B\014\302\377\024\010\347\276\201\347\273\212i"
    "d\022(\n\nm_fateName\030\002 \001(\tB\024\302\377\024\014\347\276\201\347\273\212\345\220\215\347\247\260\220"
    "\301\024@\022\'\n\rm_fateQuality\030\003 \001(\005B\020\302\377\024\014\347\276\201\347\273\212\345\223"
    "\201\350\264\250\022(\n\nm_fateHand\030\004 \003(\003B\024\302\377\024\014\347\276\201\347\273\212\345\233\276\351"
    "\211\264\210\301\024\004\022V\n\013m_attribute\030\005 \003(\01321.proto_ff.E"
    "_EncyclopediaHandbookfateAttributeDescB\016"
    "\302\377\024\006\345\261\236\346\200\247\210\301\024\006\"v\n\036Sheet_EncyclopediaHand"
    "bookfate\022T\n\037E_EncyclopediaHandbookfate_L"
    "ist\030\001 \003(\0132$.proto_ff.E_EncyclopediaHandb"
    "ookfateB\005\210\301\024\200\001\"\243\001\n\035E_EncyclopediaHandboo"
    "kresolve\0221\n\021m_handbookQuality\030\001 \001(\005B\026\302\377\024"
    "\022\345\233\276\351\211\264\351\201\223\345\205\267\345\223\201\350\264\250\022\'\n\rm_resolveItem\030\002 \001"
    "(\005B\020\302\377\024\014\345\210\206\350\247\243\351\201\223\345\205\267\022&\n\014m_resolveNum\030\003 \001"
    "(\005B\020\302\377\024\014\345\210\206\350\247\243\346\225\260\351\207\217\"~\n!Sheet_Encycloped"
    "iaHandbookresolve\022Y\n\"E_EncyclopediaHandb"
    "ookresolve_List\030\001 \003(\0132\'.proto_ff.E_Encyc"
    "lopediaHandbookresolveB\004\210\301\024\010\"f\n\035E_Encycl"
    "opediaHandbooklv_attr\022 \n\007m_attID\030\001 \001(\003B\017"
    "\302\377\024\013\345\261\236\346\200\247\347\273\204id\022#\n\005m_att\030\002 \003(\005B\024\302\377\024\014\345\261\236\346"
    "\200\247\347\255\211\347\272\247\210\301\024d\"\177\n!Sheet_EncyclopediaHandbo"
    "oklv_attr\022Z\n\"E_EncyclopediaHandbooklv_at"
    "tr_List\030\001 \003(\0132\'.proto_ff.E_EncyclopediaH"
    "andbooklv_attrB\005\210\301\024\200\002\"h\n\037E_EncyclopediaH"
    "andbookstar_attr\022 \n\007m_attID\030\001 \001(\003B\017\302\377\024\013\345"
    "\261\236\346\200\247\347\273\204id\022#\n\005m_att\030\002 \003(\005B\024\302\377\024\014\345\261\236\346\200\247\347\255\211"
    "\347\272\247\210\301\024\024\"\205\001\n#Sheet_EncyclopediaHandbookst"
    "ar_attr\022^\n$E_EncyclopediaHandbookstar_at"
    "tr_List\030\001 \003(\0132).proto_ff.E_EncyclopediaH"
    "andbookstar_attrB\005\210\301\024\200\002\"M\n\034E_Encyclopedi"
    "aBeastBeastDesc\022\026\n\005m_num\030\001 \001(\005B\007\302\377\024\003\345\200\274\022"
    "\025\n\005m_att\030\002 \001(\005B\006\302\377\024\002Id\"\354\001\n\023E_Encyclopedi"
    "aBeast\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010\347\245\236\345\205\275ID\022$\n\006m_"
    "name\030\002 \001(\tB\024\302\377\024\014\347\245\236\345\205\275\345\220\215\347\247\260\220\301\024@\022\035\n\005m_po"
    "s\030\003 \003(\005B\016\302\377\024\006\345\223\201\350\264\250\210\301\024\005\022M\n\007m_beast\030\004 \003(\013"
    "2&.proto_ff.E_EncyclopediaBeastBeastDesc"
    "B\024\302\377\024\014\347\245\236\345\205\275\345\261\236\346\200\247\210\301\024\006\022%\n\007m_skill\030\005 \003(\003B"
    "\024\302\377\024\014\347\245\236\345\205\275\346\212\200\350\203\275\210\301\024\003\"`\n\027Sheet_Encyclope"
    "diaBeast\022E\n\030E_EncyclopediaBeast_List\030\001 \003"
    "(\0132\035.proto_ff.E_EncyclopediaBeastB\004\210\301\024 \""
    "W\n(E_EncyclopediaEquipexpvalueBeaststarD"
    "esc\022\026\n\005m_num\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\023\n\005m_att\030\002 \001"
    "(\005B\004\302\377\024\000\"V\n\'E_EncyclopediaEquipexpvalueG"
    "oldstarDesc\022\026\n\005m_num\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\023\n\005m"
    "_att\030\002 \001(\005B\004\302\377\024\000\"\320\003\n\033E_EncyclopediaEquip"
    "expvalue\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010\346\235\220\346\226\231ID\022 \n\006"
    "m_type\030\002 \001(\003B\020\302\377\024\014\346\235\220\346\226\231\347\261\273\345\236\213\022$\n\006m_name"
    "\030\003 \001(\tB\024\302\377\024\014\346\235\220\346\226\231\345\220\215\347\247\260\220\301\024@\022\037\n\005m_exp\030\004 "
    "\001(\005B\020\302\377\024\014\345\210\235\345\247\213\347\273\217\351\252\214\022\032\n\006m_link\030\005 \001(\003B\n\302"
    "\377\024\006\346\235\245\346\272\220\022)\n\014m_goldAttAll\030\006 \001(\005B\023\302\377\024\017\344\273\231"
    "\345\223\201\345\205\261\346\235\241\346\225\260\022)\n\tm_goldAtt\030\007 \001(\005B\026\302\377\024\022\351\273\204"
    "\346\230\237\345\261\236\346\200\247\346\235\241\346\225\260\022]\n\013m_beastStar\030\010 \003(\01322.p"
    "roto_ff.E_EncyclopediaEquipexpvalueBeast"
    "starDescB\024\302\377\024\014\350\223\235\346\230\237\345\261\236\346\200\247\210\301\024\002\022[\n\nm_gold"
    "Star\030\t \003(\01321.proto_ff.E_EncyclopediaEqui"
    "pexpvalueGoldstarDescB\024\302\377\024\014\351\273\204\346\230\237\345\261\236\346\200\247\210"
    "\301\024\005\"x\n\037Sheet_EncyclopediaEquipexpvalue\022U"
    "\n E_EncyclopediaEquipexpvalue_List\030\001 \003(\013"
    "2%.proto_ff.E_EncyclopediaEquipexpvalueB"
    "\004\210\301\024@\"\250\001\n\031E_EncyclopediaBeastexpand\022\"\n\010m"
    "_number\030\001 \001(\005B\020\302\377\024\014\346\277\200\346\264\273\344\270\252\346\225\260\022\036\n\004m_lv\030"
    "\002 \001(\005B\020\302\377\024\014\346\277\200\346\264\273\347\255\211\347\272\247\022 \n\004m_id\030\003 \001(\003B\022\302"
    "\377\024\016\346\277\200\346\264\273\351\201\223\345\205\267id\022%\n\005m_num\030\004 \001(\005B\026\302\377\024\022\346\277"
    "\200\346\264\273\351\201\223\345\205\267\346\225\260\351\207\217\"r\n\035Sheet_EncyclopediaBe"
    "astexpand\022Q\n\036E_EncyclopediaBeastexpand_L"
    "ist\030\001 \003(\0132#.proto_ff.E_EncyclopediaBeast"
    "expandB\004\210\301\024\010\"a\n)E_EncyclopediaBeastprivi"
    "legeAttributeDesc\022\030\n\007m_value\030\001 \001(\003B\007\302\377\024\003"
    "\345\200\274\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\"\222\002\n\034E_En"
    "cyclopediaBeastprivilege\022)\n\017m_privilegeT"
    "ype\030\001 \001(\005B\020\302\377\024\014\347\211\271\346\235\203\347\261\273\345\236\213\022\036\n\006m_name\030\002 "
    "\001(\tB\016\302\377\024\006\345\220\215\345\255\227\220\301\024@\022!\n\007m_price\030\003 \001(\005B\020\302\377"
    "\024\014\344\273\267\346\240\274\351\223\276\346\216\245\022*\n\rm_expAddition\030\004 \001(\003B\023\302"
    "\377\024\017\347\273\217\351\252\214\345\200\274\345\212\240\346\210\220\022X\n\013m_attribute\030\005 \003(\0132"
    "3.proto_ff.E_EncyclopediaBeastprivilegeA"
    "ttributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\004\"{\n Sheet_En"
    "cyclopediaBeastprivilege\022W\n!E_Encycloped"
    "iaBeastprivilege_List\030\001 \003(\0132&.proto_ff.E"
    "_EncyclopediaBeastprivilegeB\004\210\301\024\004\"Y\n\026E_E"
    "ncyclopediaBeastexp\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006\347"
    "\255\211\347\272\247\022%\n\005m_exp\030\002 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\346\211\200\351\234\200\347\273"
    "\217\351\252\214\"j\n\032Sheet_EncyclopediaBeastexp\022L\n\033E_"
    "EncyclopediaBeastexp_List\030\001 \003(\0132 .proto_"
    "ff.E_EncyclopediaBeastexpB\005\210\301\024\200\002\"\\\n$E_En"
    "cyclopediaEmployLviattributeDesc\022\030\n\007m_va"
    "lue\030\001 \001(\003B\007\302\377\024\003\345\200\274\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006"
    "\347\261\273\345\236\213\"\336\003\n\024E_EncyclopediaEmploy\022 \n\nm_emp"
    "loyID\030\001 \001(\003B\014\302\377\024\010\346\224\266\345\275\225id\022 \n\006m_type\030\002 \001("
    "\003B\020\302\377\024\014\346\277\200\346\264\273\347\261\273\345\236\213\022\"\n\010m_itemId\030\003 \001(\003B\020\302"
    "\377\024\014\346\277\200\346\264\273\346\235\241\344\273\266\022*\n\014m_employName\030\004 \001(\tB\024\302"
    "\377\024\014\346\224\266\345\275\225\345\220\215\347\247\260\220\301\024@\022)\n\017m_employQuality\030\005"
    " \001(\005B\020\302\377\024\014\346\224\266\345\275\225\345\223\201\350\264\250\022&\n\014m_employType\030\006"
    " \001(\005B\020\302\377\024\014\346\224\266\345\275\225\347\261\273\345\236\213\0225\n\021m_employType_n"
    "ame\030\007 \001(\tB\032\302\377\024\022\346\224\266\345\275\225\347\261\273\345\236\213\345\220\215\347\247\260\220\301\024@\022 \n"
    "\tm_employZ\030\010 \001(\005B\r\302\377\024\t\346\224\266\345\275\225\347\273\204\022.\n\rm_emp"
    "loyZName\030\t \001(\tB\027\302\377\024\017\346\224\266\345\275\225\347\273\204\345\220\215\347\247\260\220\301\024@\022"
    "V\n\016m_LvIattribute\030\n \003(\0132..proto_ff.E_Enc"
    "yclopediaEmployLviattributeDescB\016\302\377\024\006\345\261\236"
    "\346\200\247\210\301\024\004\"d\n\030Sheet_EncyclopediaEmploy\022H\n\031E"
    "_EncyclopediaEmploy_List\030\001 \003(\0132\036.proto_f"
    "f.E_EncyclopediaEmployB\005\210\301\024\200\001\"[\n#E_Encyc"
    "lopediaTableLviattributeDesc\022\030\n\007m_value\030"
    "\001 \001(\003B\007\302\377\024\003\345\200\274\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345"
    "\236\213\"\324\001\n\023E_EncyclopediaTable\022\024\n\004m_ID\030\001 \001(\003"
    "B\006\302\377\024\002id\022\"\n\tm_tableid\030\002 \001(\003B\017\302\377\024\013\345\244\251\346\234\272\350"
    "\260\261id\022,\n\013m_tableName\030\003 \001(\tB\027\302\377\024\017\345\244\251\346\234\272\350\260\261"
    "\345\220\215\347\247\260\220\301\024@\022U\n\016m_LvIattribute\030\004 \003(\0132-.pro"
    "to_ff.E_EncyclopediaTableLviattributeDes"
    "cB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\004\"`\n\027Sheet_EncyclopediaT"
    "able\022E\n\030E_EncyclopediaTable_List\030\001 \003(\0132\035"
    ".proto_ff.E_EncyclopediaTableB\004\210\301\024\020", 5675);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Encyclopedia.proto", &protobuf_RegisterTypes);
  E_EncyclopediaHandbookLviattributeDesc::default_instance_ = new E_EncyclopediaHandbookLviattributeDesc();
  E_EncyclopediaHandbookStariattributeDesc::default_instance_ = new E_EncyclopediaHandbookStariattributeDesc();
  E_EncyclopediaHandbook::default_instance_ = new E_EncyclopediaHandbook();
  Sheet_EncyclopediaHandbook::default_instance_ = new Sheet_EncyclopediaHandbook();
  E_EncyclopediaHandbookfateAttributeDesc::default_instance_ = new E_EncyclopediaHandbookfateAttributeDesc();
  E_EncyclopediaHandbookfate::default_instance_ = new E_EncyclopediaHandbookfate();
  Sheet_EncyclopediaHandbookfate::default_instance_ = new Sheet_EncyclopediaHandbookfate();
  E_EncyclopediaHandbookresolve::default_instance_ = new E_EncyclopediaHandbookresolve();
  Sheet_EncyclopediaHandbookresolve::default_instance_ = new Sheet_EncyclopediaHandbookresolve();
  E_EncyclopediaHandbooklv_attr::default_instance_ = new E_EncyclopediaHandbooklv_attr();
  Sheet_EncyclopediaHandbooklv_attr::default_instance_ = new Sheet_EncyclopediaHandbooklv_attr();
  E_EncyclopediaHandbookstar_attr::default_instance_ = new E_EncyclopediaHandbookstar_attr();
  Sheet_EncyclopediaHandbookstar_attr::default_instance_ = new Sheet_EncyclopediaHandbookstar_attr();
  E_EncyclopediaBeastBeastDesc::default_instance_ = new E_EncyclopediaBeastBeastDesc();
  E_EncyclopediaBeast::default_instance_ = new E_EncyclopediaBeast();
  Sheet_EncyclopediaBeast::default_instance_ = new Sheet_EncyclopediaBeast();
  E_EncyclopediaEquipexpvalueBeaststarDesc::default_instance_ = new E_EncyclopediaEquipexpvalueBeaststarDesc();
  E_EncyclopediaEquipexpvalueGoldstarDesc::default_instance_ = new E_EncyclopediaEquipexpvalueGoldstarDesc();
  E_EncyclopediaEquipexpvalue::default_instance_ = new E_EncyclopediaEquipexpvalue();
  Sheet_EncyclopediaEquipexpvalue::default_instance_ = new Sheet_EncyclopediaEquipexpvalue();
  E_EncyclopediaBeastexpand::default_instance_ = new E_EncyclopediaBeastexpand();
  Sheet_EncyclopediaBeastexpand::default_instance_ = new Sheet_EncyclopediaBeastexpand();
  E_EncyclopediaBeastprivilegeAttributeDesc::default_instance_ = new E_EncyclopediaBeastprivilegeAttributeDesc();
  E_EncyclopediaBeastprivilege::default_instance_ = new E_EncyclopediaBeastprivilege();
  Sheet_EncyclopediaBeastprivilege::default_instance_ = new Sheet_EncyclopediaBeastprivilege();
  E_EncyclopediaBeastexp::default_instance_ = new E_EncyclopediaBeastexp();
  Sheet_EncyclopediaBeastexp::default_instance_ = new Sheet_EncyclopediaBeastexp();
  E_EncyclopediaEmployLviattributeDesc::default_instance_ = new E_EncyclopediaEmployLviattributeDesc();
  E_EncyclopediaEmploy::default_instance_ = new E_EncyclopediaEmploy();
  Sheet_EncyclopediaEmploy::default_instance_ = new Sheet_EncyclopediaEmploy();
  E_EncyclopediaTableLviattributeDesc::default_instance_ = new E_EncyclopediaTableLviattributeDesc();
  E_EncyclopediaTable::default_instance_ = new E_EncyclopediaTable();
  Sheet_EncyclopediaTable::default_instance_ = new Sheet_EncyclopediaTable();
  E_EncyclopediaHandbookLviattributeDesc::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaHandbookStariattributeDesc::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaHandbook::default_instance_->InitAsDefaultInstance();
  Sheet_EncyclopediaHandbook::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaHandbookfateAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaHandbookfate::default_instance_->InitAsDefaultInstance();
  Sheet_EncyclopediaHandbookfate::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaHandbookresolve::default_instance_->InitAsDefaultInstance();
  Sheet_EncyclopediaHandbookresolve::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaHandbooklv_attr::default_instance_->InitAsDefaultInstance();
  Sheet_EncyclopediaHandbooklv_attr::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaHandbookstar_attr::default_instance_->InitAsDefaultInstance();
  Sheet_EncyclopediaHandbookstar_attr::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaBeastBeastDesc::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaBeast::default_instance_->InitAsDefaultInstance();
  Sheet_EncyclopediaBeast::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaEquipexpvalueBeaststarDesc::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaEquipexpvalueGoldstarDesc::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaEquipexpvalue::default_instance_->InitAsDefaultInstance();
  Sheet_EncyclopediaEquipexpvalue::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaBeastexpand::default_instance_->InitAsDefaultInstance();
  Sheet_EncyclopediaBeastexpand::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaBeastprivilegeAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaBeastprivilege::default_instance_->InitAsDefaultInstance();
  Sheet_EncyclopediaBeastprivilege::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaBeastexp::default_instance_->InitAsDefaultInstance();
  Sheet_EncyclopediaBeastexp::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaEmployLviattributeDesc::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaEmploy::default_instance_->InitAsDefaultInstance();
  Sheet_EncyclopediaEmploy::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaTableLviattributeDesc::default_instance_->InitAsDefaultInstance();
  E_EncyclopediaTable::default_instance_->InitAsDefaultInstance();
  Sheet_EncyclopediaTable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fEncyclopedia_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fEncyclopedia_2eproto {
  StaticDescriptorInitializer_E_5fEncyclopedia_2eproto() {
    protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  }
} static_descriptor_initializer_E_5fEncyclopedia_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaHandbookLviattributeDesc::kMValueFieldNumber;
const int E_EncyclopediaHandbookLviattributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaHandbookLviattributeDesc::E_EncyclopediaHandbookLviattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaHandbookLviattributeDesc::InitAsDefaultInstance() {
}

E_EncyclopediaHandbookLviattributeDesc::E_EncyclopediaHandbookLviattributeDesc(const E_EncyclopediaHandbookLviattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaHandbookLviattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaHandbookLviattributeDesc::~E_EncyclopediaHandbookLviattributeDesc() {
  SharedDtor();
}

void E_EncyclopediaHandbookLviattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaHandbookLviattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaHandbookLviattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaHandbookLviattributeDesc_descriptor_;
}

const E_EncyclopediaHandbookLviattributeDesc& E_EncyclopediaHandbookLviattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaHandbookLviattributeDesc* E_EncyclopediaHandbookLviattributeDesc::default_instance_ = NULL;

E_EncyclopediaHandbookLviattributeDesc* E_EncyclopediaHandbookLviattributeDesc::New() const {
  return new E_EncyclopediaHandbookLviattributeDesc;
}

void E_EncyclopediaHandbookLviattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaHandbookLviattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaHandbookLviattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaHandbookLviattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaHandbookLviattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaHandbookLviattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaHandbookLviattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaHandbookLviattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaHandbookLviattributeDesc::MergeFrom(const E_EncyclopediaHandbookLviattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaHandbookLviattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaHandbookLviattributeDesc::CopyFrom(const E_EncyclopediaHandbookLviattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaHandbookLviattributeDesc::IsInitialized() const {

  return true;
}

void E_EncyclopediaHandbookLviattributeDesc::Swap(E_EncyclopediaHandbookLviattributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaHandbookLviattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaHandbookLviattributeDesc_descriptor_;
  metadata.reflection = E_EncyclopediaHandbookLviattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaHandbookStariattributeDesc::kMValueFieldNumber;
const int E_EncyclopediaHandbookStariattributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaHandbookStariattributeDesc::E_EncyclopediaHandbookStariattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaHandbookStariattributeDesc::InitAsDefaultInstance() {
}

E_EncyclopediaHandbookStariattributeDesc::E_EncyclopediaHandbookStariattributeDesc(const E_EncyclopediaHandbookStariattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaHandbookStariattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaHandbookStariattributeDesc::~E_EncyclopediaHandbookStariattributeDesc() {
  SharedDtor();
}

void E_EncyclopediaHandbookStariattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaHandbookStariattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaHandbookStariattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaHandbookStariattributeDesc_descriptor_;
}

const E_EncyclopediaHandbookStariattributeDesc& E_EncyclopediaHandbookStariattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaHandbookStariattributeDesc* E_EncyclopediaHandbookStariattributeDesc::default_instance_ = NULL;

E_EncyclopediaHandbookStariattributeDesc* E_EncyclopediaHandbookStariattributeDesc::New() const {
  return new E_EncyclopediaHandbookStariattributeDesc;
}

void E_EncyclopediaHandbookStariattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaHandbookStariattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaHandbookStariattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaHandbookStariattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaHandbookStariattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaHandbookStariattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaHandbookStariattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaHandbookStariattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaHandbookStariattributeDesc::MergeFrom(const E_EncyclopediaHandbookStariattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaHandbookStariattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaHandbookStariattributeDesc::CopyFrom(const E_EncyclopediaHandbookStariattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaHandbookStariattributeDesc::IsInitialized() const {

  return true;
}

void E_EncyclopediaHandbookStariattributeDesc::Swap(E_EncyclopediaHandbookStariattributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaHandbookStariattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaHandbookStariattributeDesc_descriptor_;
  metadata.reflection = E_EncyclopediaHandbookStariattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaHandbook::kMHandbookIDFieldNumber;
const int E_EncyclopediaHandbook::kMItemIdFieldNumber;
const int E_EncyclopediaHandbook::kMHandbookNameFieldNumber;
const int E_EncyclopediaHandbook::kMHandbookQualityFieldNumber;
const int E_EncyclopediaHandbook::kMHandbookTypeFieldNumber;
const int E_EncyclopediaHandbook::kMHandbookTypeNameFieldNumber;
const int E_EncyclopediaHandbook::kMHandZFieldNumber;
const int E_EncyclopediaHandbook::kMHandZNameFieldNumber;
const int E_EncyclopediaHandbook::kMHandbookLvFieldNumber;
const int E_EncyclopediaHandbook::kMLvIdFieldNumber;
const int E_EncyclopediaHandbook::kMLvNumFieldNumber;
const int E_EncyclopediaHandbook::kMStarIdFieldNumber;
const int E_EncyclopediaHandbook::kMStarNumFieldNumber;
const int E_EncyclopediaHandbook::kMLvIattributeFieldNumber;
const int E_EncyclopediaHandbook::kMAwakeSkillFieldNumber;
const int E_EncyclopediaHandbook::kMStarIattributeFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaHandbook::E_EncyclopediaHandbook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaHandbook::InitAsDefaultInstance() {
}

E_EncyclopediaHandbook::E_EncyclopediaHandbook(const E_EncyclopediaHandbook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaHandbook::SharedCtor() {
  _cached_size_ = 0;
  m_handbookid_ = GOOGLE_LONGLONG(0);
  m_itemid_ = GOOGLE_LONGLONG(0);
  m_handbookname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_handbookquality_ = 0;
  m_handbooktype_ = 0;
  m_handbooktype_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_handz_ = 0;
  m_handzname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_handbooklv_ = 0;
  m_lvid_ = GOOGLE_LONGLONG(0);
  m_lvnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starid_ = GOOGLE_LONGLONG(0);
  m_starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaHandbook::~E_EncyclopediaHandbook() {
  SharedDtor();
}

void E_EncyclopediaHandbook::SharedDtor() {
  if (m_handbookname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_handbookname_;
  }
  if (m_handbooktype_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_handbooktype_name_;
  }
  if (m_handzname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_handzname_;
  }
  if (m_lvnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_lvnum_;
  }
  if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starnum_;
  }
  if (this != default_instance_) {
  }
}

void E_EncyclopediaHandbook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaHandbook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaHandbook_descriptor_;
}

const E_EncyclopediaHandbook& E_EncyclopediaHandbook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaHandbook* E_EncyclopediaHandbook::default_instance_ = NULL;

E_EncyclopediaHandbook* E_EncyclopediaHandbook::New() const {
  return new E_EncyclopediaHandbook;
}

void E_EncyclopediaHandbook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_handbookid_ = GOOGLE_LONGLONG(0);
    m_itemid_ = GOOGLE_LONGLONG(0);
    if (has_m_handbookname()) {
      if (m_handbookname_ != &::google::protobuf::internal::kEmptyString) {
        m_handbookname_->clear();
      }
    }
    m_handbookquality_ = 0;
    m_handbooktype_ = 0;
    if (has_m_handbooktype_name()) {
      if (m_handbooktype_name_ != &::google::protobuf::internal::kEmptyString) {
        m_handbooktype_name_->clear();
      }
    }
    m_handz_ = 0;
    if (has_m_handzname()) {
      if (m_handzname_ != &::google::protobuf::internal::kEmptyString) {
        m_handzname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_handbooklv_ = 0;
    m_lvid_ = GOOGLE_LONGLONG(0);
    if (has_m_lvnum()) {
      if (m_lvnum_ != &::google::protobuf::internal::kEmptyString) {
        m_lvnum_->clear();
      }
    }
    m_starid_ = GOOGLE_LONGLONG(0);
    if (has_m_starnum()) {
      if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
        m_starnum_->clear();
      }
    }
  }
  m_lviattribute_.Clear();
  m_awakeskill_.Clear();
  m_stariattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaHandbook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_handbookID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_handbookid_)));
          set_has_m_handbookid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_itemId;
        break;
      }

      // optional int64 m_itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_handbookName;
        break;
      }

      // optional string m_handbookName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_handbookName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_handbookname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_handbookname().data(), this->m_handbookname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_handbookQuality;
        break;
      }

      // optional int32 m_handbookQuality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_handbookQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_handbookquality_)));
          set_has_m_handbookquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_handbookType;
        break;
      }

      // optional int32 m_handbookType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_handbookType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_handbooktype_)));
          set_has_m_handbooktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_handbookType_name;
        break;
      }

      // optional string m_handbookType_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_handbookType_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_handbooktype_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_handbooktype_name().data(), this->m_handbooktype_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_handZ;
        break;
      }

      // optional int32 m_handZ = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_handZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_handz_)));
          set_has_m_handz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_handZName;
        break;
      }

      // optional string m_handZName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_handZName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_handzname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_handzname().data(), this->m_handzname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_handbookLv;
        break;
      }

      // optional int32 m_handbookLv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_handbookLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_handbooklv_)));
          set_has_m_handbooklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_LvId;
        break;
      }

      // optional int64 m_LvId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_LvId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_lvid_)));
          set_has_m_lvid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_LvNum;
        break;
      }

      // optional string m_LvNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_LvNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_lvnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_lvnum().data(), this->m_lvnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_starId;
        break;
      }

      // optional int64 m_starId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_starNum;
        break;
      }

      // optional string m_starNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starnum().data(), this->m_starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_LvIattribute;
        break;
      }

      // repeated .proto_ff.E_EncyclopediaHandbookLviattributeDesc m_LvIattribute = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_LvIattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_lviattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_LvIattribute;
        if (input->ExpectTag(120)) goto parse_m_awakeSkill;
        break;
      }

      // repeated int32 m_awakeSkill = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_awakeSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_m_awakeskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_awakeskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_awakeSkill;
        if (input->ExpectTag(130)) goto parse_m_starIattribute;
        break;
      }

      // repeated .proto_ff.E_EncyclopediaHandbookStariattributeDesc m_starIattribute = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starIattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_stariattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_starIattribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaHandbook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_handbookID = 1;
  if (has_m_handbookid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_handbookid(), output);
  }

  // optional int64 m_itemId = 2;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_itemid(), output);
  }

  // optional string m_handbookName = 3;
  if (has_m_handbookname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_handbookname().data(), this->m_handbookname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_handbookname(), output);
  }

  // optional int32 m_handbookQuality = 4;
  if (has_m_handbookquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_handbookquality(), output);
  }

  // optional int32 m_handbookType = 5;
  if (has_m_handbooktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_handbooktype(), output);
  }

  // optional string m_handbookType_name = 6;
  if (has_m_handbooktype_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_handbooktype_name().data(), this->m_handbooktype_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_handbooktype_name(), output);
  }

  // optional int32 m_handZ = 7;
  if (has_m_handz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_handz(), output);
  }

  // optional string m_handZName = 8;
  if (has_m_handzname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_handzname().data(), this->m_handzname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_handzname(), output);
  }

  // optional int32 m_handbookLv = 9;
  if (has_m_handbooklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_handbooklv(), output);
  }

  // optional int64 m_LvId = 10;
  if (has_m_lvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->m_lvid(), output);
  }

  // optional string m_LvNum = 11;
  if (has_m_lvnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_lvnum().data(), this->m_lvnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->m_lvnum(), output);
  }

  // optional int64 m_starId = 12;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->m_starid(), output);
  }

  // optional string m_starNum = 13;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_starnum(), output);
  }

  // repeated .proto_ff.E_EncyclopediaHandbookLviattributeDesc m_LvIattribute = 14;
  for (int i = 0; i < this->m_lviattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->m_lviattribute(i), output);
  }

  // repeated int32 m_awakeSkill = 15;
  for (int i = 0; i < this->m_awakeskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->m_awakeskill(i), output);
  }

  // repeated .proto_ff.E_EncyclopediaHandbookStariattributeDesc m_starIattribute = 16;
  for (int i = 0; i < this->m_stariattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->m_stariattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaHandbook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_handbookID = 1;
  if (has_m_handbookid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_handbookid(), target);
  }

  // optional int64 m_itemId = 2;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_itemid(), target);
  }

  // optional string m_handbookName = 3;
  if (has_m_handbookname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_handbookname().data(), this->m_handbookname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_handbookname(), target);
  }

  // optional int32 m_handbookQuality = 4;
  if (has_m_handbookquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_handbookquality(), target);
  }

  // optional int32 m_handbookType = 5;
  if (has_m_handbooktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_handbooktype(), target);
  }

  // optional string m_handbookType_name = 6;
  if (has_m_handbooktype_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_handbooktype_name().data(), this->m_handbooktype_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_handbooktype_name(), target);
  }

  // optional int32 m_handZ = 7;
  if (has_m_handz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_handz(), target);
  }

  // optional string m_handZName = 8;
  if (has_m_handzname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_handzname().data(), this->m_handzname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_handzname(), target);
  }

  // optional int32 m_handbookLv = 9;
  if (has_m_handbooklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_handbooklv(), target);
  }

  // optional int64 m_LvId = 10;
  if (has_m_lvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->m_lvid(), target);
  }

  // optional string m_LvNum = 11;
  if (has_m_lvnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_lvnum().data(), this->m_lvnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->m_lvnum(), target);
  }

  // optional int64 m_starId = 12;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->m_starid(), target);
  }

  // optional string m_starNum = 13;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->m_starnum(), target);
  }

  // repeated .proto_ff.E_EncyclopediaHandbookLviattributeDesc m_LvIattribute = 14;
  for (int i = 0; i < this->m_lviattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->m_lviattribute(i), target);
  }

  // repeated int32 m_awakeSkill = 15;
  for (int i = 0; i < this->m_awakeskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->m_awakeskill(i), target);
  }

  // repeated .proto_ff.E_EncyclopediaHandbookStariattributeDesc m_starIattribute = 16;
  for (int i = 0; i < this->m_stariattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->m_stariattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaHandbook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_handbookID = 1;
    if (has_m_handbookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_handbookid());
    }

    // optional int64 m_itemId = 2;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_itemid());
    }

    // optional string m_handbookName = 3;
    if (has_m_handbookname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_handbookname());
    }

    // optional int32 m_handbookQuality = 4;
    if (has_m_handbookquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_handbookquality());
    }

    // optional int32 m_handbookType = 5;
    if (has_m_handbooktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_handbooktype());
    }

    // optional string m_handbookType_name = 6;
    if (has_m_handbooktype_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_handbooktype_name());
    }

    // optional int32 m_handZ = 7;
    if (has_m_handz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_handz());
    }

    // optional string m_handZName = 8;
    if (has_m_handzname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_handzname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_handbookLv = 9;
    if (has_m_handbooklv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_handbooklv());
    }

    // optional int64 m_LvId = 10;
    if (has_m_lvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_lvid());
    }

    // optional string m_LvNum = 11;
    if (has_m_lvnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_lvnum());
    }

    // optional int64 m_starId = 12;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_starid());
    }

    // optional string m_starNum = 13;
    if (has_m_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starnum());
    }

  }
  // repeated .proto_ff.E_EncyclopediaHandbookLviattributeDesc m_LvIattribute = 14;
  total_size += 1 * this->m_lviattribute_size();
  for (int i = 0; i < this->m_lviattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_lviattribute(i));
  }

  // repeated int32 m_awakeSkill = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_awakeskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_awakeskill(i));
    }
    total_size += 1 * this->m_awakeskill_size() + data_size;
  }

  // repeated .proto_ff.E_EncyclopediaHandbookStariattributeDesc m_starIattribute = 16;
  total_size += 2 * this->m_stariattribute_size();
  for (int i = 0; i < this->m_stariattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_stariattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaHandbook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaHandbook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaHandbook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaHandbook::MergeFrom(const E_EncyclopediaHandbook& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_lviattribute_.MergeFrom(from.m_lviattribute_);
  m_awakeskill_.MergeFrom(from.m_awakeskill_);
  m_stariattribute_.MergeFrom(from.m_stariattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_handbookid()) {
      set_m_handbookid(from.m_handbookid());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_handbookname()) {
      set_m_handbookname(from.m_handbookname());
    }
    if (from.has_m_handbookquality()) {
      set_m_handbookquality(from.m_handbookquality());
    }
    if (from.has_m_handbooktype()) {
      set_m_handbooktype(from.m_handbooktype());
    }
    if (from.has_m_handbooktype_name()) {
      set_m_handbooktype_name(from.m_handbooktype_name());
    }
    if (from.has_m_handz()) {
      set_m_handz(from.m_handz());
    }
    if (from.has_m_handzname()) {
      set_m_handzname(from.m_handzname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_handbooklv()) {
      set_m_handbooklv(from.m_handbooklv());
    }
    if (from.has_m_lvid()) {
      set_m_lvid(from.m_lvid());
    }
    if (from.has_m_lvnum()) {
      set_m_lvnum(from.m_lvnum());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaHandbook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaHandbook::CopyFrom(const E_EncyclopediaHandbook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaHandbook::IsInitialized() const {

  return true;
}

void E_EncyclopediaHandbook::Swap(E_EncyclopediaHandbook* other) {
  if (other != this) {
    std::swap(m_handbookid_, other->m_handbookid_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_handbookname_, other->m_handbookname_);
    std::swap(m_handbookquality_, other->m_handbookquality_);
    std::swap(m_handbooktype_, other->m_handbooktype_);
    std::swap(m_handbooktype_name_, other->m_handbooktype_name_);
    std::swap(m_handz_, other->m_handz_);
    std::swap(m_handzname_, other->m_handzname_);
    std::swap(m_handbooklv_, other->m_handbooklv_);
    std::swap(m_lvid_, other->m_lvid_);
    std::swap(m_lvnum_, other->m_lvnum_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_starnum_, other->m_starnum_);
    m_lviattribute_.Swap(&other->m_lviattribute_);
    m_awakeskill_.Swap(&other->m_awakeskill_);
    m_stariattribute_.Swap(&other->m_stariattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaHandbook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaHandbook_descriptor_;
  metadata.reflection = E_EncyclopediaHandbook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_EncyclopediaHandbook::kEEncyclopediaHandbookListFieldNumber;
#endif  // !_MSC_VER

Sheet_EncyclopediaHandbook::Sheet_EncyclopediaHandbook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_EncyclopediaHandbook::InitAsDefaultInstance() {
}

Sheet_EncyclopediaHandbook::Sheet_EncyclopediaHandbook(const Sheet_EncyclopediaHandbook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_EncyclopediaHandbook::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_EncyclopediaHandbook::~Sheet_EncyclopediaHandbook() {
  SharedDtor();
}

void Sheet_EncyclopediaHandbook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_EncyclopediaHandbook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_EncyclopediaHandbook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_EncyclopediaHandbook_descriptor_;
}

const Sheet_EncyclopediaHandbook& Sheet_EncyclopediaHandbook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

Sheet_EncyclopediaHandbook* Sheet_EncyclopediaHandbook::default_instance_ = NULL;

Sheet_EncyclopediaHandbook* Sheet_EncyclopediaHandbook::New() const {
  return new Sheet_EncyclopediaHandbook;
}

void Sheet_EncyclopediaHandbook::Clear() {
  e_encyclopediahandbook_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_EncyclopediaHandbook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_EncyclopediaHandbook E_EncyclopediaHandbook_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_EncyclopediaHandbook_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_encyclopediahandbook_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_EncyclopediaHandbook_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_EncyclopediaHandbook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_EncyclopediaHandbook E_EncyclopediaHandbook_List = 1;
  for (int i = 0; i < this->e_encyclopediahandbook_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_encyclopediahandbook_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_EncyclopediaHandbook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_EncyclopediaHandbook E_EncyclopediaHandbook_List = 1;
  for (int i = 0; i < this->e_encyclopediahandbook_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_encyclopediahandbook_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_EncyclopediaHandbook::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_EncyclopediaHandbook E_EncyclopediaHandbook_List = 1;
  total_size += 1 * this->e_encyclopediahandbook_list_size();
  for (int i = 0; i < this->e_encyclopediahandbook_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_encyclopediahandbook_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_EncyclopediaHandbook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_EncyclopediaHandbook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_EncyclopediaHandbook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_EncyclopediaHandbook::MergeFrom(const Sheet_EncyclopediaHandbook& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_encyclopediahandbook_list_.MergeFrom(from.e_encyclopediahandbook_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_EncyclopediaHandbook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_EncyclopediaHandbook::CopyFrom(const Sheet_EncyclopediaHandbook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_EncyclopediaHandbook::IsInitialized() const {

  return true;
}

void Sheet_EncyclopediaHandbook::Swap(Sheet_EncyclopediaHandbook* other) {
  if (other != this) {
    e_encyclopediahandbook_list_.Swap(&other->e_encyclopediahandbook_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_EncyclopediaHandbook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_EncyclopediaHandbook_descriptor_;
  metadata.reflection = Sheet_EncyclopediaHandbook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaHandbookfateAttributeDesc::kMValueFieldNumber;
const int E_EncyclopediaHandbookfateAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaHandbookfateAttributeDesc::E_EncyclopediaHandbookfateAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaHandbookfateAttributeDesc::InitAsDefaultInstance() {
}

E_EncyclopediaHandbookfateAttributeDesc::E_EncyclopediaHandbookfateAttributeDesc(const E_EncyclopediaHandbookfateAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaHandbookfateAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaHandbookfateAttributeDesc::~E_EncyclopediaHandbookfateAttributeDesc() {
  SharedDtor();
}

void E_EncyclopediaHandbookfateAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaHandbookfateAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaHandbookfateAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaHandbookfateAttributeDesc_descriptor_;
}

const E_EncyclopediaHandbookfateAttributeDesc& E_EncyclopediaHandbookfateAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaHandbookfateAttributeDesc* E_EncyclopediaHandbookfateAttributeDesc::default_instance_ = NULL;

E_EncyclopediaHandbookfateAttributeDesc* E_EncyclopediaHandbookfateAttributeDesc::New() const {
  return new E_EncyclopediaHandbookfateAttributeDesc;
}

void E_EncyclopediaHandbookfateAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaHandbookfateAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaHandbookfateAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaHandbookfateAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaHandbookfateAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaHandbookfateAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaHandbookfateAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaHandbookfateAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaHandbookfateAttributeDesc::MergeFrom(const E_EncyclopediaHandbookfateAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaHandbookfateAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaHandbookfateAttributeDesc::CopyFrom(const E_EncyclopediaHandbookfateAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaHandbookfateAttributeDesc::IsInitialized() const {

  return true;
}

void E_EncyclopediaHandbookfateAttributeDesc::Swap(E_EncyclopediaHandbookfateAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaHandbookfateAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaHandbookfateAttributeDesc_descriptor_;
  metadata.reflection = E_EncyclopediaHandbookfateAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaHandbookfate::kMFateIDFieldNumber;
const int E_EncyclopediaHandbookfate::kMFateNameFieldNumber;
const int E_EncyclopediaHandbookfate::kMFateQualityFieldNumber;
const int E_EncyclopediaHandbookfate::kMFateHandFieldNumber;
const int E_EncyclopediaHandbookfate::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaHandbookfate::E_EncyclopediaHandbookfate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaHandbookfate::InitAsDefaultInstance() {
}

E_EncyclopediaHandbookfate::E_EncyclopediaHandbookfate(const E_EncyclopediaHandbookfate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaHandbookfate::SharedCtor() {
  _cached_size_ = 0;
  m_fateid_ = GOOGLE_LONGLONG(0);
  m_fatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_fatequality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaHandbookfate::~E_EncyclopediaHandbookfate() {
  SharedDtor();
}

void E_EncyclopediaHandbookfate::SharedDtor() {
  if (m_fatename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_fatename_;
  }
  if (this != default_instance_) {
  }
}

void E_EncyclopediaHandbookfate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaHandbookfate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaHandbookfate_descriptor_;
}

const E_EncyclopediaHandbookfate& E_EncyclopediaHandbookfate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaHandbookfate* E_EncyclopediaHandbookfate::default_instance_ = NULL;

E_EncyclopediaHandbookfate* E_EncyclopediaHandbookfate::New() const {
  return new E_EncyclopediaHandbookfate;
}

void E_EncyclopediaHandbookfate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fateid_ = GOOGLE_LONGLONG(0);
    if (has_m_fatename()) {
      if (m_fatename_ != &::google::protobuf::internal::kEmptyString) {
        m_fatename_->clear();
      }
    }
    m_fatequality_ = 0;
  }
  m_fatehand_.Clear();
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaHandbookfate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_fateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_fateid_)));
          set_has_m_fateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_fateName;
        break;
      }

      // optional string m_fateName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_fateName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_fatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_fatename().data(), this->m_fatename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_fateQuality;
        break;
      }

      // optional int32 m_fateQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fateQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fatequality_)));
          set_has_m_fatequality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_fateHand;
        break;
      }

      // repeated int64 m_fateHand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fateHand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_m_fatehand())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_fatehand())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_fateHand;
        if (input->ExpectTag(42)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_EncyclopediaHandbookfateAttributeDesc m_attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaHandbookfate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_fateID = 1;
  if (has_m_fateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_fateid(), output);
  }

  // optional string m_fateName = 2;
  if (has_m_fatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fatename().data(), this->m_fatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_fatename(), output);
  }

  // optional int32 m_fateQuality = 3;
  if (has_m_fatequality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fatequality(), output);
  }

  // repeated int64 m_fateHand = 4;
  for (int i = 0; i < this->m_fatehand_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->m_fatehand(i), output);
  }

  // repeated .proto_ff.E_EncyclopediaHandbookfateAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaHandbookfate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_fateID = 1;
  if (has_m_fateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_fateid(), target);
  }

  // optional string m_fateName = 2;
  if (has_m_fatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fatename().data(), this->m_fatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_fatename(), target);
  }

  // optional int32 m_fateQuality = 3;
  if (has_m_fatequality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fatequality(), target);
  }

  // repeated int64 m_fateHand = 4;
  for (int i = 0; i < this->m_fatehand_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->m_fatehand(i), target);
  }

  // repeated .proto_ff.E_EncyclopediaHandbookfateAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaHandbookfate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_fateID = 1;
    if (has_m_fateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_fateid());
    }

    // optional string m_fateName = 2;
    if (has_m_fatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_fatename());
    }

    // optional int32 m_fateQuality = 3;
    if (has_m_fatequality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fatequality());
    }

  }
  // repeated int64 m_fateHand = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_fatehand_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_fatehand(i));
    }
    total_size += 1 * this->m_fatehand_size() + data_size;
  }

  // repeated .proto_ff.E_EncyclopediaHandbookfateAttributeDesc m_attribute = 5;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaHandbookfate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaHandbookfate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaHandbookfate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaHandbookfate::MergeFrom(const E_EncyclopediaHandbookfate& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_fatehand_.MergeFrom(from.m_fatehand_);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fateid()) {
      set_m_fateid(from.m_fateid());
    }
    if (from.has_m_fatename()) {
      set_m_fatename(from.m_fatename());
    }
    if (from.has_m_fatequality()) {
      set_m_fatequality(from.m_fatequality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaHandbookfate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaHandbookfate::CopyFrom(const E_EncyclopediaHandbookfate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaHandbookfate::IsInitialized() const {

  return true;
}

void E_EncyclopediaHandbookfate::Swap(E_EncyclopediaHandbookfate* other) {
  if (other != this) {
    std::swap(m_fateid_, other->m_fateid_);
    std::swap(m_fatename_, other->m_fatename_);
    std::swap(m_fatequality_, other->m_fatequality_);
    m_fatehand_.Swap(&other->m_fatehand_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaHandbookfate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaHandbookfate_descriptor_;
  metadata.reflection = E_EncyclopediaHandbookfate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_EncyclopediaHandbookfate::kEEncyclopediaHandbookfateListFieldNumber;
#endif  // !_MSC_VER

Sheet_EncyclopediaHandbookfate::Sheet_EncyclopediaHandbookfate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_EncyclopediaHandbookfate::InitAsDefaultInstance() {
}

Sheet_EncyclopediaHandbookfate::Sheet_EncyclopediaHandbookfate(const Sheet_EncyclopediaHandbookfate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_EncyclopediaHandbookfate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_EncyclopediaHandbookfate::~Sheet_EncyclopediaHandbookfate() {
  SharedDtor();
}

void Sheet_EncyclopediaHandbookfate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_EncyclopediaHandbookfate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_EncyclopediaHandbookfate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_EncyclopediaHandbookfate_descriptor_;
}

const Sheet_EncyclopediaHandbookfate& Sheet_EncyclopediaHandbookfate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

Sheet_EncyclopediaHandbookfate* Sheet_EncyclopediaHandbookfate::default_instance_ = NULL;

Sheet_EncyclopediaHandbookfate* Sheet_EncyclopediaHandbookfate::New() const {
  return new Sheet_EncyclopediaHandbookfate;
}

void Sheet_EncyclopediaHandbookfate::Clear() {
  e_encyclopediahandbookfate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_EncyclopediaHandbookfate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_EncyclopediaHandbookfate E_EncyclopediaHandbookfate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_EncyclopediaHandbookfate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_encyclopediahandbookfate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_EncyclopediaHandbookfate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_EncyclopediaHandbookfate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_EncyclopediaHandbookfate E_EncyclopediaHandbookfate_List = 1;
  for (int i = 0; i < this->e_encyclopediahandbookfate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_encyclopediahandbookfate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_EncyclopediaHandbookfate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_EncyclopediaHandbookfate E_EncyclopediaHandbookfate_List = 1;
  for (int i = 0; i < this->e_encyclopediahandbookfate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_encyclopediahandbookfate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_EncyclopediaHandbookfate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_EncyclopediaHandbookfate E_EncyclopediaHandbookfate_List = 1;
  total_size += 1 * this->e_encyclopediahandbookfate_list_size();
  for (int i = 0; i < this->e_encyclopediahandbookfate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_encyclopediahandbookfate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_EncyclopediaHandbookfate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_EncyclopediaHandbookfate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_EncyclopediaHandbookfate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_EncyclopediaHandbookfate::MergeFrom(const Sheet_EncyclopediaHandbookfate& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_encyclopediahandbookfate_list_.MergeFrom(from.e_encyclopediahandbookfate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_EncyclopediaHandbookfate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_EncyclopediaHandbookfate::CopyFrom(const Sheet_EncyclopediaHandbookfate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_EncyclopediaHandbookfate::IsInitialized() const {

  return true;
}

void Sheet_EncyclopediaHandbookfate::Swap(Sheet_EncyclopediaHandbookfate* other) {
  if (other != this) {
    e_encyclopediahandbookfate_list_.Swap(&other->e_encyclopediahandbookfate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_EncyclopediaHandbookfate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_EncyclopediaHandbookfate_descriptor_;
  metadata.reflection = Sheet_EncyclopediaHandbookfate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaHandbookresolve::kMHandbookQualityFieldNumber;
const int E_EncyclopediaHandbookresolve::kMResolveItemFieldNumber;
const int E_EncyclopediaHandbookresolve::kMResolveNumFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaHandbookresolve::E_EncyclopediaHandbookresolve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaHandbookresolve::InitAsDefaultInstance() {
}

E_EncyclopediaHandbookresolve::E_EncyclopediaHandbookresolve(const E_EncyclopediaHandbookresolve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaHandbookresolve::SharedCtor() {
  _cached_size_ = 0;
  m_handbookquality_ = 0;
  m_resolveitem_ = 0;
  m_resolvenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaHandbookresolve::~E_EncyclopediaHandbookresolve() {
  SharedDtor();
}

void E_EncyclopediaHandbookresolve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaHandbookresolve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaHandbookresolve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaHandbookresolve_descriptor_;
}

const E_EncyclopediaHandbookresolve& E_EncyclopediaHandbookresolve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaHandbookresolve* E_EncyclopediaHandbookresolve::default_instance_ = NULL;

E_EncyclopediaHandbookresolve* E_EncyclopediaHandbookresolve::New() const {
  return new E_EncyclopediaHandbookresolve;
}

void E_EncyclopediaHandbookresolve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_handbookquality_ = 0;
    m_resolveitem_ = 0;
    m_resolvenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaHandbookresolve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_handbookQuality = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_handbookquality_)));
          set_has_m_handbookquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_resolveItem;
        break;
      }

      // optional int32 m_resolveItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_resolveItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_resolveitem_)));
          set_has_m_resolveitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_resolveNum;
        break;
      }

      // optional int32 m_resolveNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_resolveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_resolvenum_)));
          set_has_m_resolvenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaHandbookresolve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_handbookQuality = 1;
  if (has_m_handbookquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_handbookquality(), output);
  }

  // optional int32 m_resolveItem = 2;
  if (has_m_resolveitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_resolveitem(), output);
  }

  // optional int32 m_resolveNum = 3;
  if (has_m_resolvenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_resolvenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaHandbookresolve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_handbookQuality = 1;
  if (has_m_handbookquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_handbookquality(), target);
  }

  // optional int32 m_resolveItem = 2;
  if (has_m_resolveitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_resolveitem(), target);
  }

  // optional int32 m_resolveNum = 3;
  if (has_m_resolvenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_resolvenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaHandbookresolve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_handbookQuality = 1;
    if (has_m_handbookquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_handbookquality());
    }

    // optional int32 m_resolveItem = 2;
    if (has_m_resolveitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_resolveitem());
    }

    // optional int32 m_resolveNum = 3;
    if (has_m_resolvenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_resolvenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaHandbookresolve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaHandbookresolve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaHandbookresolve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaHandbookresolve::MergeFrom(const E_EncyclopediaHandbookresolve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_handbookquality()) {
      set_m_handbookquality(from.m_handbookquality());
    }
    if (from.has_m_resolveitem()) {
      set_m_resolveitem(from.m_resolveitem());
    }
    if (from.has_m_resolvenum()) {
      set_m_resolvenum(from.m_resolvenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaHandbookresolve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaHandbookresolve::CopyFrom(const E_EncyclopediaHandbookresolve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaHandbookresolve::IsInitialized() const {

  return true;
}

void E_EncyclopediaHandbookresolve::Swap(E_EncyclopediaHandbookresolve* other) {
  if (other != this) {
    std::swap(m_handbookquality_, other->m_handbookquality_);
    std::swap(m_resolveitem_, other->m_resolveitem_);
    std::swap(m_resolvenum_, other->m_resolvenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaHandbookresolve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaHandbookresolve_descriptor_;
  metadata.reflection = E_EncyclopediaHandbookresolve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_EncyclopediaHandbookresolve::kEEncyclopediaHandbookresolveListFieldNumber;
#endif  // !_MSC_VER

Sheet_EncyclopediaHandbookresolve::Sheet_EncyclopediaHandbookresolve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_EncyclopediaHandbookresolve::InitAsDefaultInstance() {
}

Sheet_EncyclopediaHandbookresolve::Sheet_EncyclopediaHandbookresolve(const Sheet_EncyclopediaHandbookresolve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_EncyclopediaHandbookresolve::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_EncyclopediaHandbookresolve::~Sheet_EncyclopediaHandbookresolve() {
  SharedDtor();
}

void Sheet_EncyclopediaHandbookresolve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_EncyclopediaHandbookresolve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_EncyclopediaHandbookresolve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_EncyclopediaHandbookresolve_descriptor_;
}

const Sheet_EncyclopediaHandbookresolve& Sheet_EncyclopediaHandbookresolve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

Sheet_EncyclopediaHandbookresolve* Sheet_EncyclopediaHandbookresolve::default_instance_ = NULL;

Sheet_EncyclopediaHandbookresolve* Sheet_EncyclopediaHandbookresolve::New() const {
  return new Sheet_EncyclopediaHandbookresolve;
}

void Sheet_EncyclopediaHandbookresolve::Clear() {
  e_encyclopediahandbookresolve_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_EncyclopediaHandbookresolve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_EncyclopediaHandbookresolve E_EncyclopediaHandbookresolve_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_EncyclopediaHandbookresolve_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_encyclopediahandbookresolve_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_EncyclopediaHandbookresolve_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_EncyclopediaHandbookresolve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_EncyclopediaHandbookresolve E_EncyclopediaHandbookresolve_List = 1;
  for (int i = 0; i < this->e_encyclopediahandbookresolve_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_encyclopediahandbookresolve_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_EncyclopediaHandbookresolve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_EncyclopediaHandbookresolve E_EncyclopediaHandbookresolve_List = 1;
  for (int i = 0; i < this->e_encyclopediahandbookresolve_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_encyclopediahandbookresolve_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_EncyclopediaHandbookresolve::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_EncyclopediaHandbookresolve E_EncyclopediaHandbookresolve_List = 1;
  total_size += 1 * this->e_encyclopediahandbookresolve_list_size();
  for (int i = 0; i < this->e_encyclopediahandbookresolve_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_encyclopediahandbookresolve_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_EncyclopediaHandbookresolve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_EncyclopediaHandbookresolve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_EncyclopediaHandbookresolve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_EncyclopediaHandbookresolve::MergeFrom(const Sheet_EncyclopediaHandbookresolve& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_encyclopediahandbookresolve_list_.MergeFrom(from.e_encyclopediahandbookresolve_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_EncyclopediaHandbookresolve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_EncyclopediaHandbookresolve::CopyFrom(const Sheet_EncyclopediaHandbookresolve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_EncyclopediaHandbookresolve::IsInitialized() const {

  return true;
}

void Sheet_EncyclopediaHandbookresolve::Swap(Sheet_EncyclopediaHandbookresolve* other) {
  if (other != this) {
    e_encyclopediahandbookresolve_list_.Swap(&other->e_encyclopediahandbookresolve_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_EncyclopediaHandbookresolve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_EncyclopediaHandbookresolve_descriptor_;
  metadata.reflection = Sheet_EncyclopediaHandbookresolve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaHandbooklv_attr::kMAttIDFieldNumber;
const int E_EncyclopediaHandbooklv_attr::kMAttFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaHandbooklv_attr::E_EncyclopediaHandbooklv_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaHandbooklv_attr::InitAsDefaultInstance() {
}

E_EncyclopediaHandbooklv_attr::E_EncyclopediaHandbooklv_attr(const E_EncyclopediaHandbooklv_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaHandbooklv_attr::SharedCtor() {
  _cached_size_ = 0;
  m_attid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaHandbooklv_attr::~E_EncyclopediaHandbooklv_attr() {
  SharedDtor();
}

void E_EncyclopediaHandbooklv_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaHandbooklv_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaHandbooklv_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaHandbooklv_attr_descriptor_;
}

const E_EncyclopediaHandbooklv_attr& E_EncyclopediaHandbooklv_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaHandbooklv_attr* E_EncyclopediaHandbooklv_attr::default_instance_ = NULL;

E_EncyclopediaHandbooklv_attr* E_EncyclopediaHandbooklv_attr::New() const {
  return new E_EncyclopediaHandbooklv_attr;
}

void E_EncyclopediaHandbooklv_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_attid_ = GOOGLE_LONGLONG(0);
  }
  m_att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaHandbooklv_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_attID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_attid_)));
          set_has_m_attid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        break;
      }

      // repeated int32 m_att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_att())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_att())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaHandbooklv_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_attID = 1;
  if (has_m_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_attid(), output);
  }

  // repeated int32 m_att = 2;
  for (int i = 0; i < this->m_att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_att(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaHandbooklv_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_attID = 1;
  if (has_m_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_attid(), target);
  }

  // repeated int32 m_att = 2;
  for (int i = 0; i < this->m_att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_att(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaHandbooklv_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_attID = 1;
    if (has_m_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_attid());
    }

  }
  // repeated int32 m_att = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_att_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_att(i));
    }
    total_size += 1 * this->m_att_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaHandbooklv_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaHandbooklv_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaHandbooklv_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaHandbooklv_attr::MergeFrom(const E_EncyclopediaHandbooklv_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_att_.MergeFrom(from.m_att_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_attid()) {
      set_m_attid(from.m_attid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaHandbooklv_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaHandbooklv_attr::CopyFrom(const E_EncyclopediaHandbooklv_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaHandbooklv_attr::IsInitialized() const {

  return true;
}

void E_EncyclopediaHandbooklv_attr::Swap(E_EncyclopediaHandbooklv_attr* other) {
  if (other != this) {
    std::swap(m_attid_, other->m_attid_);
    m_att_.Swap(&other->m_att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaHandbooklv_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaHandbooklv_attr_descriptor_;
  metadata.reflection = E_EncyclopediaHandbooklv_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_EncyclopediaHandbooklv_attr::kEEncyclopediaHandbooklvAttrListFieldNumber;
#endif  // !_MSC_VER

Sheet_EncyclopediaHandbooklv_attr::Sheet_EncyclopediaHandbooklv_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_EncyclopediaHandbooklv_attr::InitAsDefaultInstance() {
}

Sheet_EncyclopediaHandbooklv_attr::Sheet_EncyclopediaHandbooklv_attr(const Sheet_EncyclopediaHandbooklv_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_EncyclopediaHandbooklv_attr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_EncyclopediaHandbooklv_attr::~Sheet_EncyclopediaHandbooklv_attr() {
  SharedDtor();
}

void Sheet_EncyclopediaHandbooklv_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_EncyclopediaHandbooklv_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_EncyclopediaHandbooklv_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_EncyclopediaHandbooklv_attr_descriptor_;
}

const Sheet_EncyclopediaHandbooklv_attr& Sheet_EncyclopediaHandbooklv_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

Sheet_EncyclopediaHandbooklv_attr* Sheet_EncyclopediaHandbooklv_attr::default_instance_ = NULL;

Sheet_EncyclopediaHandbooklv_attr* Sheet_EncyclopediaHandbooklv_attr::New() const {
  return new Sheet_EncyclopediaHandbooklv_attr;
}

void Sheet_EncyclopediaHandbooklv_attr::Clear() {
  e_encyclopediahandbooklv_attr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_EncyclopediaHandbooklv_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_EncyclopediaHandbooklv_attr E_EncyclopediaHandbooklv_attr_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_EncyclopediaHandbooklv_attr_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_encyclopediahandbooklv_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_EncyclopediaHandbooklv_attr_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_EncyclopediaHandbooklv_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_EncyclopediaHandbooklv_attr E_EncyclopediaHandbooklv_attr_List = 1;
  for (int i = 0; i < this->e_encyclopediahandbooklv_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_encyclopediahandbooklv_attr_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_EncyclopediaHandbooklv_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_EncyclopediaHandbooklv_attr E_EncyclopediaHandbooklv_attr_List = 1;
  for (int i = 0; i < this->e_encyclopediahandbooklv_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_encyclopediahandbooklv_attr_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_EncyclopediaHandbooklv_attr::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_EncyclopediaHandbooklv_attr E_EncyclopediaHandbooklv_attr_List = 1;
  total_size += 1 * this->e_encyclopediahandbooklv_attr_list_size();
  for (int i = 0; i < this->e_encyclopediahandbooklv_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_encyclopediahandbooklv_attr_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_EncyclopediaHandbooklv_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_EncyclopediaHandbooklv_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_EncyclopediaHandbooklv_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_EncyclopediaHandbooklv_attr::MergeFrom(const Sheet_EncyclopediaHandbooklv_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_encyclopediahandbooklv_attr_list_.MergeFrom(from.e_encyclopediahandbooklv_attr_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_EncyclopediaHandbooklv_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_EncyclopediaHandbooklv_attr::CopyFrom(const Sheet_EncyclopediaHandbooklv_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_EncyclopediaHandbooklv_attr::IsInitialized() const {

  return true;
}

void Sheet_EncyclopediaHandbooklv_attr::Swap(Sheet_EncyclopediaHandbooklv_attr* other) {
  if (other != this) {
    e_encyclopediahandbooklv_attr_list_.Swap(&other->e_encyclopediahandbooklv_attr_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_EncyclopediaHandbooklv_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_EncyclopediaHandbooklv_attr_descriptor_;
  metadata.reflection = Sheet_EncyclopediaHandbooklv_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaHandbookstar_attr::kMAttIDFieldNumber;
const int E_EncyclopediaHandbookstar_attr::kMAttFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaHandbookstar_attr::E_EncyclopediaHandbookstar_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaHandbookstar_attr::InitAsDefaultInstance() {
}

E_EncyclopediaHandbookstar_attr::E_EncyclopediaHandbookstar_attr(const E_EncyclopediaHandbookstar_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaHandbookstar_attr::SharedCtor() {
  _cached_size_ = 0;
  m_attid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaHandbookstar_attr::~E_EncyclopediaHandbookstar_attr() {
  SharedDtor();
}

void E_EncyclopediaHandbookstar_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaHandbookstar_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaHandbookstar_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaHandbookstar_attr_descriptor_;
}

const E_EncyclopediaHandbookstar_attr& E_EncyclopediaHandbookstar_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaHandbookstar_attr* E_EncyclopediaHandbookstar_attr::default_instance_ = NULL;

E_EncyclopediaHandbookstar_attr* E_EncyclopediaHandbookstar_attr::New() const {
  return new E_EncyclopediaHandbookstar_attr;
}

void E_EncyclopediaHandbookstar_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_attid_ = GOOGLE_LONGLONG(0);
  }
  m_att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaHandbookstar_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_attID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_attid_)));
          set_has_m_attid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        break;
      }

      // repeated int32 m_att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_att())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_att())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaHandbookstar_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_attID = 1;
  if (has_m_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_attid(), output);
  }

  // repeated int32 m_att = 2;
  for (int i = 0; i < this->m_att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_att(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaHandbookstar_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_attID = 1;
  if (has_m_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_attid(), target);
  }

  // repeated int32 m_att = 2;
  for (int i = 0; i < this->m_att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_att(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaHandbookstar_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_attID = 1;
    if (has_m_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_attid());
    }

  }
  // repeated int32 m_att = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_att_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_att(i));
    }
    total_size += 1 * this->m_att_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaHandbookstar_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaHandbookstar_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaHandbookstar_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaHandbookstar_attr::MergeFrom(const E_EncyclopediaHandbookstar_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_att_.MergeFrom(from.m_att_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_attid()) {
      set_m_attid(from.m_attid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaHandbookstar_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaHandbookstar_attr::CopyFrom(const E_EncyclopediaHandbookstar_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaHandbookstar_attr::IsInitialized() const {

  return true;
}

void E_EncyclopediaHandbookstar_attr::Swap(E_EncyclopediaHandbookstar_attr* other) {
  if (other != this) {
    std::swap(m_attid_, other->m_attid_);
    m_att_.Swap(&other->m_att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaHandbookstar_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaHandbookstar_attr_descriptor_;
  metadata.reflection = E_EncyclopediaHandbookstar_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_EncyclopediaHandbookstar_attr::kEEncyclopediaHandbookstarAttrListFieldNumber;
#endif  // !_MSC_VER

Sheet_EncyclopediaHandbookstar_attr::Sheet_EncyclopediaHandbookstar_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_EncyclopediaHandbookstar_attr::InitAsDefaultInstance() {
}

Sheet_EncyclopediaHandbookstar_attr::Sheet_EncyclopediaHandbookstar_attr(const Sheet_EncyclopediaHandbookstar_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_EncyclopediaHandbookstar_attr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_EncyclopediaHandbookstar_attr::~Sheet_EncyclopediaHandbookstar_attr() {
  SharedDtor();
}

void Sheet_EncyclopediaHandbookstar_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_EncyclopediaHandbookstar_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_EncyclopediaHandbookstar_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_EncyclopediaHandbookstar_attr_descriptor_;
}

const Sheet_EncyclopediaHandbookstar_attr& Sheet_EncyclopediaHandbookstar_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

Sheet_EncyclopediaHandbookstar_attr* Sheet_EncyclopediaHandbookstar_attr::default_instance_ = NULL;

Sheet_EncyclopediaHandbookstar_attr* Sheet_EncyclopediaHandbookstar_attr::New() const {
  return new Sheet_EncyclopediaHandbookstar_attr;
}

void Sheet_EncyclopediaHandbookstar_attr::Clear() {
  e_encyclopediahandbookstar_attr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_EncyclopediaHandbookstar_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_EncyclopediaHandbookstar_attr E_EncyclopediaHandbookstar_attr_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_EncyclopediaHandbookstar_attr_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_encyclopediahandbookstar_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_EncyclopediaHandbookstar_attr_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_EncyclopediaHandbookstar_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_EncyclopediaHandbookstar_attr E_EncyclopediaHandbookstar_attr_List = 1;
  for (int i = 0; i < this->e_encyclopediahandbookstar_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_encyclopediahandbookstar_attr_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_EncyclopediaHandbookstar_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_EncyclopediaHandbookstar_attr E_EncyclopediaHandbookstar_attr_List = 1;
  for (int i = 0; i < this->e_encyclopediahandbookstar_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_encyclopediahandbookstar_attr_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_EncyclopediaHandbookstar_attr::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_EncyclopediaHandbookstar_attr E_EncyclopediaHandbookstar_attr_List = 1;
  total_size += 1 * this->e_encyclopediahandbookstar_attr_list_size();
  for (int i = 0; i < this->e_encyclopediahandbookstar_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_encyclopediahandbookstar_attr_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_EncyclopediaHandbookstar_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_EncyclopediaHandbookstar_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_EncyclopediaHandbookstar_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_EncyclopediaHandbookstar_attr::MergeFrom(const Sheet_EncyclopediaHandbookstar_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_encyclopediahandbookstar_attr_list_.MergeFrom(from.e_encyclopediahandbookstar_attr_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_EncyclopediaHandbookstar_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_EncyclopediaHandbookstar_attr::CopyFrom(const Sheet_EncyclopediaHandbookstar_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_EncyclopediaHandbookstar_attr::IsInitialized() const {

  return true;
}

void Sheet_EncyclopediaHandbookstar_attr::Swap(Sheet_EncyclopediaHandbookstar_attr* other) {
  if (other != this) {
    e_encyclopediahandbookstar_attr_list_.Swap(&other->e_encyclopediahandbookstar_attr_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_EncyclopediaHandbookstar_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_EncyclopediaHandbookstar_attr_descriptor_;
  metadata.reflection = Sheet_EncyclopediaHandbookstar_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaBeastBeastDesc::kMNumFieldNumber;
const int E_EncyclopediaBeastBeastDesc::kMAttFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaBeastBeastDesc::E_EncyclopediaBeastBeastDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaBeastBeastDesc::InitAsDefaultInstance() {
}

E_EncyclopediaBeastBeastDesc::E_EncyclopediaBeastBeastDesc(const E_EncyclopediaBeastBeastDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaBeastBeastDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_att_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaBeastBeastDesc::~E_EncyclopediaBeastBeastDesc() {
  SharedDtor();
}

void E_EncyclopediaBeastBeastDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaBeastBeastDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaBeastBeastDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaBeastBeastDesc_descriptor_;
}

const E_EncyclopediaBeastBeastDesc& E_EncyclopediaBeastBeastDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaBeastBeastDesc* E_EncyclopediaBeastBeastDesc::default_instance_ = NULL;

E_EncyclopediaBeastBeastDesc* E_EncyclopediaBeastBeastDesc::New() const {
  return new E_EncyclopediaBeastBeastDesc;
}

void E_EncyclopediaBeastBeastDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_att_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaBeastBeastDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        break;
      }

      // optional int32 m_att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_att_)));
          set_has_m_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaBeastBeastDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_att = 2;
  if (has_m_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_att(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaBeastBeastDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_att = 2;
  if (has_m_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_att(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaBeastBeastDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_att = 2;
    if (has_m_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_att());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaBeastBeastDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaBeastBeastDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaBeastBeastDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaBeastBeastDesc::MergeFrom(const E_EncyclopediaBeastBeastDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_att()) {
      set_m_att(from.m_att());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaBeastBeastDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaBeastBeastDesc::CopyFrom(const E_EncyclopediaBeastBeastDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaBeastBeastDesc::IsInitialized() const {

  return true;
}

void E_EncyclopediaBeastBeastDesc::Swap(E_EncyclopediaBeastBeastDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_att_, other->m_att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaBeastBeastDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaBeastBeastDesc_descriptor_;
  metadata.reflection = E_EncyclopediaBeastBeastDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaBeast::kMIdFieldNumber;
const int E_EncyclopediaBeast::kMNameFieldNumber;
const int E_EncyclopediaBeast::kMPosFieldNumber;
const int E_EncyclopediaBeast::kMBeastFieldNumber;
const int E_EncyclopediaBeast::kMSkillFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaBeast::E_EncyclopediaBeast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaBeast::InitAsDefaultInstance() {
}

E_EncyclopediaBeast::E_EncyclopediaBeast(const E_EncyclopediaBeast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaBeast::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaBeast::~E_EncyclopediaBeast() {
  SharedDtor();
}

void E_EncyclopediaBeast::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_EncyclopediaBeast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaBeast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaBeast_descriptor_;
}

const E_EncyclopediaBeast& E_EncyclopediaBeast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaBeast* E_EncyclopediaBeast::default_instance_ = NULL;

E_EncyclopediaBeast* E_EncyclopediaBeast::New() const {
  return new E_EncyclopediaBeast;
}

void E_EncyclopediaBeast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
  }
  m_pos_.Clear();
  m_beast_.Clear();
  m_skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaBeast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_pos;
        break;
      }

      // repeated int32 m_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_m_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_pos;
        if (input->ExpectTag(34)) goto parse_m_beast;
        break;
      }

      // repeated .proto_ff.E_EncyclopediaBeastBeastDesc m_beast = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_beast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_beast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_beast;
        if (input->ExpectTag(40)) goto parse_m_skill;
        break;
      }

      // repeated int64 m_skill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_m_skill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_skill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaBeast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // repeated int32 m_pos = 3;
  for (int i = 0; i < this->m_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->m_pos(i), output);
  }

  // repeated .proto_ff.E_EncyclopediaBeastBeastDesc m_beast = 4;
  for (int i = 0; i < this->m_beast_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_beast(i), output);
  }

  // repeated int64 m_skill = 5;
  for (int i = 0; i < this->m_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->m_skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaBeast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // repeated int32 m_pos = 3;
  for (int i = 0; i < this->m_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->m_pos(i), target);
  }

  // repeated .proto_ff.E_EncyclopediaBeastBeastDesc m_beast = 4;
  for (int i = 0; i < this->m_beast_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_beast(i), target);
  }

  // repeated int64 m_skill = 5;
  for (int i = 0; i < this->m_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->m_skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaBeast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

  }
  // repeated int32 m_pos = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_pos(i));
    }
    total_size += 1 * this->m_pos_size() + data_size;
  }

  // repeated .proto_ff.E_EncyclopediaBeastBeastDesc m_beast = 4;
  total_size += 1 * this->m_beast_size();
  for (int i = 0; i < this->m_beast_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_beast(i));
  }

  // repeated int64 m_skill = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_skill(i));
    }
    total_size += 1 * this->m_skill_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaBeast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaBeast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaBeast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaBeast::MergeFrom(const E_EncyclopediaBeast& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_pos_.MergeFrom(from.m_pos_);
  m_beast_.MergeFrom(from.m_beast_);
  m_skill_.MergeFrom(from.m_skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaBeast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaBeast::CopyFrom(const E_EncyclopediaBeast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaBeast::IsInitialized() const {

  return true;
}

void E_EncyclopediaBeast::Swap(E_EncyclopediaBeast* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    m_pos_.Swap(&other->m_pos_);
    m_beast_.Swap(&other->m_beast_);
    m_skill_.Swap(&other->m_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaBeast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaBeast_descriptor_;
  metadata.reflection = E_EncyclopediaBeast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_EncyclopediaBeast::kEEncyclopediaBeastListFieldNumber;
#endif  // !_MSC_VER

Sheet_EncyclopediaBeast::Sheet_EncyclopediaBeast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_EncyclopediaBeast::InitAsDefaultInstance() {
}

Sheet_EncyclopediaBeast::Sheet_EncyclopediaBeast(const Sheet_EncyclopediaBeast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_EncyclopediaBeast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_EncyclopediaBeast::~Sheet_EncyclopediaBeast() {
  SharedDtor();
}

void Sheet_EncyclopediaBeast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_EncyclopediaBeast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_EncyclopediaBeast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_EncyclopediaBeast_descriptor_;
}

const Sheet_EncyclopediaBeast& Sheet_EncyclopediaBeast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

Sheet_EncyclopediaBeast* Sheet_EncyclopediaBeast::default_instance_ = NULL;

Sheet_EncyclopediaBeast* Sheet_EncyclopediaBeast::New() const {
  return new Sheet_EncyclopediaBeast;
}

void Sheet_EncyclopediaBeast::Clear() {
  e_encyclopediabeast_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_EncyclopediaBeast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_EncyclopediaBeast E_EncyclopediaBeast_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_EncyclopediaBeast_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_encyclopediabeast_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_EncyclopediaBeast_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_EncyclopediaBeast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_EncyclopediaBeast E_EncyclopediaBeast_List = 1;
  for (int i = 0; i < this->e_encyclopediabeast_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_encyclopediabeast_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_EncyclopediaBeast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_EncyclopediaBeast E_EncyclopediaBeast_List = 1;
  for (int i = 0; i < this->e_encyclopediabeast_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_encyclopediabeast_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_EncyclopediaBeast::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_EncyclopediaBeast E_EncyclopediaBeast_List = 1;
  total_size += 1 * this->e_encyclopediabeast_list_size();
  for (int i = 0; i < this->e_encyclopediabeast_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_encyclopediabeast_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_EncyclopediaBeast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_EncyclopediaBeast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_EncyclopediaBeast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_EncyclopediaBeast::MergeFrom(const Sheet_EncyclopediaBeast& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_encyclopediabeast_list_.MergeFrom(from.e_encyclopediabeast_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_EncyclopediaBeast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_EncyclopediaBeast::CopyFrom(const Sheet_EncyclopediaBeast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_EncyclopediaBeast::IsInitialized() const {

  return true;
}

void Sheet_EncyclopediaBeast::Swap(Sheet_EncyclopediaBeast* other) {
  if (other != this) {
    e_encyclopediabeast_list_.Swap(&other->e_encyclopediabeast_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_EncyclopediaBeast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_EncyclopediaBeast_descriptor_;
  metadata.reflection = Sheet_EncyclopediaBeast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaEquipexpvalueBeaststarDesc::kMNumFieldNumber;
const int E_EncyclopediaEquipexpvalueBeaststarDesc::kMAttFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaEquipexpvalueBeaststarDesc::E_EncyclopediaEquipexpvalueBeaststarDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaEquipexpvalueBeaststarDesc::InitAsDefaultInstance() {
}

E_EncyclopediaEquipexpvalueBeaststarDesc::E_EncyclopediaEquipexpvalueBeaststarDesc(const E_EncyclopediaEquipexpvalueBeaststarDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaEquipexpvalueBeaststarDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_att_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaEquipexpvalueBeaststarDesc::~E_EncyclopediaEquipexpvalueBeaststarDesc() {
  SharedDtor();
}

void E_EncyclopediaEquipexpvalueBeaststarDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaEquipexpvalueBeaststarDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaEquipexpvalueBeaststarDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaEquipexpvalueBeaststarDesc_descriptor_;
}

const E_EncyclopediaEquipexpvalueBeaststarDesc& E_EncyclopediaEquipexpvalueBeaststarDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaEquipexpvalueBeaststarDesc* E_EncyclopediaEquipexpvalueBeaststarDesc::default_instance_ = NULL;

E_EncyclopediaEquipexpvalueBeaststarDesc* E_EncyclopediaEquipexpvalueBeaststarDesc::New() const {
  return new E_EncyclopediaEquipexpvalueBeaststarDesc;
}

void E_EncyclopediaEquipexpvalueBeaststarDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_att_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaEquipexpvalueBeaststarDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        break;
      }

      // optional int32 m_att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_att_)));
          set_has_m_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaEquipexpvalueBeaststarDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_att = 2;
  if (has_m_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_att(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaEquipexpvalueBeaststarDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_att = 2;
  if (has_m_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_att(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaEquipexpvalueBeaststarDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_att = 2;
    if (has_m_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_att());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaEquipexpvalueBeaststarDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaEquipexpvalueBeaststarDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaEquipexpvalueBeaststarDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaEquipexpvalueBeaststarDesc::MergeFrom(const E_EncyclopediaEquipexpvalueBeaststarDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_att()) {
      set_m_att(from.m_att());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaEquipexpvalueBeaststarDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaEquipexpvalueBeaststarDesc::CopyFrom(const E_EncyclopediaEquipexpvalueBeaststarDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaEquipexpvalueBeaststarDesc::IsInitialized() const {

  return true;
}

void E_EncyclopediaEquipexpvalueBeaststarDesc::Swap(E_EncyclopediaEquipexpvalueBeaststarDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_att_, other->m_att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaEquipexpvalueBeaststarDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaEquipexpvalueBeaststarDesc_descriptor_;
  metadata.reflection = E_EncyclopediaEquipexpvalueBeaststarDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaEquipexpvalueGoldstarDesc::kMNumFieldNumber;
const int E_EncyclopediaEquipexpvalueGoldstarDesc::kMAttFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaEquipexpvalueGoldstarDesc::E_EncyclopediaEquipexpvalueGoldstarDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaEquipexpvalueGoldstarDesc::InitAsDefaultInstance() {
}

E_EncyclopediaEquipexpvalueGoldstarDesc::E_EncyclopediaEquipexpvalueGoldstarDesc(const E_EncyclopediaEquipexpvalueGoldstarDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaEquipexpvalueGoldstarDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_att_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaEquipexpvalueGoldstarDesc::~E_EncyclopediaEquipexpvalueGoldstarDesc() {
  SharedDtor();
}

void E_EncyclopediaEquipexpvalueGoldstarDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaEquipexpvalueGoldstarDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaEquipexpvalueGoldstarDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaEquipexpvalueGoldstarDesc_descriptor_;
}

const E_EncyclopediaEquipexpvalueGoldstarDesc& E_EncyclopediaEquipexpvalueGoldstarDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaEquipexpvalueGoldstarDesc* E_EncyclopediaEquipexpvalueGoldstarDesc::default_instance_ = NULL;

E_EncyclopediaEquipexpvalueGoldstarDesc* E_EncyclopediaEquipexpvalueGoldstarDesc::New() const {
  return new E_EncyclopediaEquipexpvalueGoldstarDesc;
}

void E_EncyclopediaEquipexpvalueGoldstarDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_att_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaEquipexpvalueGoldstarDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        break;
      }

      // optional int32 m_att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_att_)));
          set_has_m_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaEquipexpvalueGoldstarDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_att = 2;
  if (has_m_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_att(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaEquipexpvalueGoldstarDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_att = 2;
  if (has_m_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_att(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaEquipexpvalueGoldstarDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_att = 2;
    if (has_m_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_att());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaEquipexpvalueGoldstarDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaEquipexpvalueGoldstarDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaEquipexpvalueGoldstarDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaEquipexpvalueGoldstarDesc::MergeFrom(const E_EncyclopediaEquipexpvalueGoldstarDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_att()) {
      set_m_att(from.m_att());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaEquipexpvalueGoldstarDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaEquipexpvalueGoldstarDesc::CopyFrom(const E_EncyclopediaEquipexpvalueGoldstarDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaEquipexpvalueGoldstarDesc::IsInitialized() const {

  return true;
}

void E_EncyclopediaEquipexpvalueGoldstarDesc::Swap(E_EncyclopediaEquipexpvalueGoldstarDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_att_, other->m_att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaEquipexpvalueGoldstarDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaEquipexpvalueGoldstarDesc_descriptor_;
  metadata.reflection = E_EncyclopediaEquipexpvalueGoldstarDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaEquipexpvalue::kMIdFieldNumber;
const int E_EncyclopediaEquipexpvalue::kMTypeFieldNumber;
const int E_EncyclopediaEquipexpvalue::kMNameFieldNumber;
const int E_EncyclopediaEquipexpvalue::kMExpFieldNumber;
const int E_EncyclopediaEquipexpvalue::kMLinkFieldNumber;
const int E_EncyclopediaEquipexpvalue::kMGoldAttAllFieldNumber;
const int E_EncyclopediaEquipexpvalue::kMGoldAttFieldNumber;
const int E_EncyclopediaEquipexpvalue::kMBeastStarFieldNumber;
const int E_EncyclopediaEquipexpvalue::kMGoldStarFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaEquipexpvalue::E_EncyclopediaEquipexpvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaEquipexpvalue::InitAsDefaultInstance() {
}

E_EncyclopediaEquipexpvalue::E_EncyclopediaEquipexpvalue(const E_EncyclopediaEquipexpvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaEquipexpvalue::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_type_ = GOOGLE_LONGLONG(0);
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_exp_ = 0;
  m_link_ = GOOGLE_LONGLONG(0);
  m_goldattall_ = 0;
  m_goldatt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaEquipexpvalue::~E_EncyclopediaEquipexpvalue() {
  SharedDtor();
}

void E_EncyclopediaEquipexpvalue::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_EncyclopediaEquipexpvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaEquipexpvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaEquipexpvalue_descriptor_;
}

const E_EncyclopediaEquipexpvalue& E_EncyclopediaEquipexpvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaEquipexpvalue* E_EncyclopediaEquipexpvalue::default_instance_ = NULL;

E_EncyclopediaEquipexpvalue* E_EncyclopediaEquipexpvalue::New() const {
  return new E_EncyclopediaEquipexpvalue;
}

void E_EncyclopediaEquipexpvalue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_type_ = GOOGLE_LONGLONG(0);
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_exp_ = 0;
    m_link_ = GOOGLE_LONGLONG(0);
    m_goldattall_ = 0;
    m_goldatt_ = 0;
  }
  m_beaststar_.Clear();
  m_goldstar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaEquipexpvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int64 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_name;
        break;
      }

      // optional string m_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_link;
        break;
      }

      // optional int64 m_link = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_link_)));
          set_has_m_link();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_goldAttAll;
        break;
      }

      // optional int32 m_goldAttAll = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_goldAttAll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_goldattall_)));
          set_has_m_goldattall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_goldAtt;
        break;
      }

      // optional int32 m_goldAtt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_goldAtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_goldatt_)));
          set_has_m_goldatt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_beastStar;
        break;
      }

      // repeated .proto_ff.E_EncyclopediaEquipexpvalueBeaststarDesc m_beastStar = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_beastStar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_beaststar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_beastStar;
        if (input->ExpectTag(74)) goto parse_m_goldStar;
        break;
      }

      // repeated .proto_ff.E_EncyclopediaEquipexpvalueGoldstarDesc m_goldStar = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_goldStar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_goldstar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_goldStar;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaEquipexpvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int64 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_type(), output);
  }

  // optional string m_name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_name(), output);
  }

  // optional int32 m_exp = 4;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_exp(), output);
  }

  // optional int64 m_link = 5;
  if (has_m_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_link(), output);
  }

  // optional int32 m_goldAttAll = 6;
  if (has_m_goldattall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_goldattall(), output);
  }

  // optional int32 m_goldAtt = 7;
  if (has_m_goldatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_goldatt(), output);
  }

  // repeated .proto_ff.E_EncyclopediaEquipexpvalueBeaststarDesc m_beastStar = 8;
  for (int i = 0; i < this->m_beaststar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_beaststar(i), output);
  }

  // repeated .proto_ff.E_EncyclopediaEquipexpvalueGoldstarDesc m_goldStar = 9;
  for (int i = 0; i < this->m_goldstar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_goldstar(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaEquipexpvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int64 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_type(), target);
  }

  // optional string m_name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_name(), target);
  }

  // optional int32 m_exp = 4;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_exp(), target);
  }

  // optional int64 m_link = 5;
  if (has_m_link()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->m_link(), target);
  }

  // optional int32 m_goldAttAll = 6;
  if (has_m_goldattall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_goldattall(), target);
  }

  // optional int32 m_goldAtt = 7;
  if (has_m_goldatt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_goldatt(), target);
  }

  // repeated .proto_ff.E_EncyclopediaEquipexpvalueBeaststarDesc m_beastStar = 8;
  for (int i = 0; i < this->m_beaststar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_beaststar(i), target);
  }

  // repeated .proto_ff.E_EncyclopediaEquipexpvalueGoldstarDesc m_goldStar = 9;
  for (int i = 0; i < this->m_goldstar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_goldstar(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaEquipexpvalue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int64 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_type());
    }

    // optional string m_name = 3;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_exp = 4;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int64 m_link = 5;
    if (has_m_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_link());
    }

    // optional int32 m_goldAttAll = 6;
    if (has_m_goldattall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_goldattall());
    }

    // optional int32 m_goldAtt = 7;
    if (has_m_goldatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_goldatt());
    }

  }
  // repeated .proto_ff.E_EncyclopediaEquipexpvalueBeaststarDesc m_beastStar = 8;
  total_size += 1 * this->m_beaststar_size();
  for (int i = 0; i < this->m_beaststar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_beaststar(i));
  }

  // repeated .proto_ff.E_EncyclopediaEquipexpvalueGoldstarDesc m_goldStar = 9;
  total_size += 1 * this->m_goldstar_size();
  for (int i = 0; i < this->m_goldstar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_goldstar(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaEquipexpvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaEquipexpvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaEquipexpvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaEquipexpvalue::MergeFrom(const E_EncyclopediaEquipexpvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_beaststar_.MergeFrom(from.m_beaststar_);
  m_goldstar_.MergeFrom(from.m_goldstar_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_link()) {
      set_m_link(from.m_link());
    }
    if (from.has_m_goldattall()) {
      set_m_goldattall(from.m_goldattall());
    }
    if (from.has_m_goldatt()) {
      set_m_goldatt(from.m_goldatt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaEquipexpvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaEquipexpvalue::CopyFrom(const E_EncyclopediaEquipexpvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaEquipexpvalue::IsInitialized() const {

  return true;
}

void E_EncyclopediaEquipexpvalue::Swap(E_EncyclopediaEquipexpvalue* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_link_, other->m_link_);
    std::swap(m_goldattall_, other->m_goldattall_);
    std::swap(m_goldatt_, other->m_goldatt_);
    m_beaststar_.Swap(&other->m_beaststar_);
    m_goldstar_.Swap(&other->m_goldstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaEquipexpvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaEquipexpvalue_descriptor_;
  metadata.reflection = E_EncyclopediaEquipexpvalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_EncyclopediaEquipexpvalue::kEEncyclopediaEquipexpvalueListFieldNumber;
#endif  // !_MSC_VER

Sheet_EncyclopediaEquipexpvalue::Sheet_EncyclopediaEquipexpvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_EncyclopediaEquipexpvalue::InitAsDefaultInstance() {
}

Sheet_EncyclopediaEquipexpvalue::Sheet_EncyclopediaEquipexpvalue(const Sheet_EncyclopediaEquipexpvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_EncyclopediaEquipexpvalue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_EncyclopediaEquipexpvalue::~Sheet_EncyclopediaEquipexpvalue() {
  SharedDtor();
}

void Sheet_EncyclopediaEquipexpvalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_EncyclopediaEquipexpvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_EncyclopediaEquipexpvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_EncyclopediaEquipexpvalue_descriptor_;
}

const Sheet_EncyclopediaEquipexpvalue& Sheet_EncyclopediaEquipexpvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

Sheet_EncyclopediaEquipexpvalue* Sheet_EncyclopediaEquipexpvalue::default_instance_ = NULL;

Sheet_EncyclopediaEquipexpvalue* Sheet_EncyclopediaEquipexpvalue::New() const {
  return new Sheet_EncyclopediaEquipexpvalue;
}

void Sheet_EncyclopediaEquipexpvalue::Clear() {
  e_encyclopediaequipexpvalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_EncyclopediaEquipexpvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_EncyclopediaEquipexpvalue E_EncyclopediaEquipexpvalue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_EncyclopediaEquipexpvalue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_encyclopediaequipexpvalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_EncyclopediaEquipexpvalue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_EncyclopediaEquipexpvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_EncyclopediaEquipexpvalue E_EncyclopediaEquipexpvalue_List = 1;
  for (int i = 0; i < this->e_encyclopediaequipexpvalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_encyclopediaequipexpvalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_EncyclopediaEquipexpvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_EncyclopediaEquipexpvalue E_EncyclopediaEquipexpvalue_List = 1;
  for (int i = 0; i < this->e_encyclopediaequipexpvalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_encyclopediaequipexpvalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_EncyclopediaEquipexpvalue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_EncyclopediaEquipexpvalue E_EncyclopediaEquipexpvalue_List = 1;
  total_size += 1 * this->e_encyclopediaequipexpvalue_list_size();
  for (int i = 0; i < this->e_encyclopediaequipexpvalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_encyclopediaequipexpvalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_EncyclopediaEquipexpvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_EncyclopediaEquipexpvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_EncyclopediaEquipexpvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_EncyclopediaEquipexpvalue::MergeFrom(const Sheet_EncyclopediaEquipexpvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_encyclopediaequipexpvalue_list_.MergeFrom(from.e_encyclopediaequipexpvalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_EncyclopediaEquipexpvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_EncyclopediaEquipexpvalue::CopyFrom(const Sheet_EncyclopediaEquipexpvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_EncyclopediaEquipexpvalue::IsInitialized() const {

  return true;
}

void Sheet_EncyclopediaEquipexpvalue::Swap(Sheet_EncyclopediaEquipexpvalue* other) {
  if (other != this) {
    e_encyclopediaequipexpvalue_list_.Swap(&other->e_encyclopediaequipexpvalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_EncyclopediaEquipexpvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_EncyclopediaEquipexpvalue_descriptor_;
  metadata.reflection = Sheet_EncyclopediaEquipexpvalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaBeastexpand::kMNumberFieldNumber;
const int E_EncyclopediaBeastexpand::kMLvFieldNumber;
const int E_EncyclopediaBeastexpand::kMIdFieldNumber;
const int E_EncyclopediaBeastexpand::kMNumFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaBeastexpand::E_EncyclopediaBeastexpand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaBeastexpand::InitAsDefaultInstance() {
}

E_EncyclopediaBeastexpand::E_EncyclopediaBeastexpand(const E_EncyclopediaBeastexpand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaBeastexpand::SharedCtor() {
  _cached_size_ = 0;
  m_number_ = 0;
  m_lv_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaBeastexpand::~E_EncyclopediaBeastexpand() {
  SharedDtor();
}

void E_EncyclopediaBeastexpand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaBeastexpand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaBeastexpand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaBeastexpand_descriptor_;
}

const E_EncyclopediaBeastexpand& E_EncyclopediaBeastexpand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaBeastexpand* E_EncyclopediaBeastexpand::default_instance_ = NULL;

E_EncyclopediaBeastexpand* E_EncyclopediaBeastexpand::New() const {
  return new E_EncyclopediaBeastexpand;
}

void E_EncyclopediaBeastexpand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_number_ = 0;
    m_lv_ = 0;
    m_id_ = GOOGLE_LONGLONG(0);
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaBeastexpand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_number_)));
          set_has_m_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_id;
        break;
      }

      // optional int64 m_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaBeastexpand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_number = 1;
  if (has_m_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_number(), output);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lv(), output);
  }

  // optional int64 m_id = 3;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_id(), output);
  }

  // optional int32 m_num = 4;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaBeastexpand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_number = 1;
  if (has_m_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_number(), target);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lv(), target);
  }

  // optional int64 m_id = 3;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_id(), target);
  }

  // optional int32 m_num = 4;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaBeastexpand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_number = 1;
    if (has_m_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_number());
    }

    // optional int32 m_lv = 2;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int64 m_id = 3;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_num = 4;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaBeastexpand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaBeastexpand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaBeastexpand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaBeastexpand::MergeFrom(const E_EncyclopediaBeastexpand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_number()) {
      set_m_number(from.m_number());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaBeastexpand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaBeastexpand::CopyFrom(const E_EncyclopediaBeastexpand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaBeastexpand::IsInitialized() const {

  return true;
}

void E_EncyclopediaBeastexpand::Swap(E_EncyclopediaBeastexpand* other) {
  if (other != this) {
    std::swap(m_number_, other->m_number_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_id_, other->m_id_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaBeastexpand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaBeastexpand_descriptor_;
  metadata.reflection = E_EncyclopediaBeastexpand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_EncyclopediaBeastexpand::kEEncyclopediaBeastexpandListFieldNumber;
#endif  // !_MSC_VER

Sheet_EncyclopediaBeastexpand::Sheet_EncyclopediaBeastexpand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_EncyclopediaBeastexpand::InitAsDefaultInstance() {
}

Sheet_EncyclopediaBeastexpand::Sheet_EncyclopediaBeastexpand(const Sheet_EncyclopediaBeastexpand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_EncyclopediaBeastexpand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_EncyclopediaBeastexpand::~Sheet_EncyclopediaBeastexpand() {
  SharedDtor();
}

void Sheet_EncyclopediaBeastexpand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_EncyclopediaBeastexpand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_EncyclopediaBeastexpand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_EncyclopediaBeastexpand_descriptor_;
}

const Sheet_EncyclopediaBeastexpand& Sheet_EncyclopediaBeastexpand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

Sheet_EncyclopediaBeastexpand* Sheet_EncyclopediaBeastexpand::default_instance_ = NULL;

Sheet_EncyclopediaBeastexpand* Sheet_EncyclopediaBeastexpand::New() const {
  return new Sheet_EncyclopediaBeastexpand;
}

void Sheet_EncyclopediaBeastexpand::Clear() {
  e_encyclopediabeastexpand_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_EncyclopediaBeastexpand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_EncyclopediaBeastexpand E_EncyclopediaBeastexpand_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_EncyclopediaBeastexpand_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_encyclopediabeastexpand_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_EncyclopediaBeastexpand_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_EncyclopediaBeastexpand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_EncyclopediaBeastexpand E_EncyclopediaBeastexpand_List = 1;
  for (int i = 0; i < this->e_encyclopediabeastexpand_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_encyclopediabeastexpand_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_EncyclopediaBeastexpand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_EncyclopediaBeastexpand E_EncyclopediaBeastexpand_List = 1;
  for (int i = 0; i < this->e_encyclopediabeastexpand_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_encyclopediabeastexpand_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_EncyclopediaBeastexpand::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_EncyclopediaBeastexpand E_EncyclopediaBeastexpand_List = 1;
  total_size += 1 * this->e_encyclopediabeastexpand_list_size();
  for (int i = 0; i < this->e_encyclopediabeastexpand_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_encyclopediabeastexpand_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_EncyclopediaBeastexpand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_EncyclopediaBeastexpand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_EncyclopediaBeastexpand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_EncyclopediaBeastexpand::MergeFrom(const Sheet_EncyclopediaBeastexpand& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_encyclopediabeastexpand_list_.MergeFrom(from.e_encyclopediabeastexpand_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_EncyclopediaBeastexpand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_EncyclopediaBeastexpand::CopyFrom(const Sheet_EncyclopediaBeastexpand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_EncyclopediaBeastexpand::IsInitialized() const {

  return true;
}

void Sheet_EncyclopediaBeastexpand::Swap(Sheet_EncyclopediaBeastexpand* other) {
  if (other != this) {
    e_encyclopediabeastexpand_list_.Swap(&other->e_encyclopediabeastexpand_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_EncyclopediaBeastexpand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_EncyclopediaBeastexpand_descriptor_;
  metadata.reflection = Sheet_EncyclopediaBeastexpand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaBeastprivilegeAttributeDesc::kMValueFieldNumber;
const int E_EncyclopediaBeastprivilegeAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaBeastprivilegeAttributeDesc::E_EncyclopediaBeastprivilegeAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaBeastprivilegeAttributeDesc::InitAsDefaultInstance() {
}

E_EncyclopediaBeastprivilegeAttributeDesc::E_EncyclopediaBeastprivilegeAttributeDesc(const E_EncyclopediaBeastprivilegeAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaBeastprivilegeAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaBeastprivilegeAttributeDesc::~E_EncyclopediaBeastprivilegeAttributeDesc() {
  SharedDtor();
}

void E_EncyclopediaBeastprivilegeAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaBeastprivilegeAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaBeastprivilegeAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaBeastprivilegeAttributeDesc_descriptor_;
}

const E_EncyclopediaBeastprivilegeAttributeDesc& E_EncyclopediaBeastprivilegeAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaBeastprivilegeAttributeDesc* E_EncyclopediaBeastprivilegeAttributeDesc::default_instance_ = NULL;

E_EncyclopediaBeastprivilegeAttributeDesc* E_EncyclopediaBeastprivilegeAttributeDesc::New() const {
  return new E_EncyclopediaBeastprivilegeAttributeDesc;
}

void E_EncyclopediaBeastprivilegeAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaBeastprivilegeAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaBeastprivilegeAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaBeastprivilegeAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaBeastprivilegeAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaBeastprivilegeAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaBeastprivilegeAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaBeastprivilegeAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaBeastprivilegeAttributeDesc::MergeFrom(const E_EncyclopediaBeastprivilegeAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaBeastprivilegeAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaBeastprivilegeAttributeDesc::CopyFrom(const E_EncyclopediaBeastprivilegeAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaBeastprivilegeAttributeDesc::IsInitialized() const {

  return true;
}

void E_EncyclopediaBeastprivilegeAttributeDesc::Swap(E_EncyclopediaBeastprivilegeAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaBeastprivilegeAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaBeastprivilegeAttributeDesc_descriptor_;
  metadata.reflection = E_EncyclopediaBeastprivilegeAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaBeastprivilege::kMPrivilegeTypeFieldNumber;
const int E_EncyclopediaBeastprivilege::kMNameFieldNumber;
const int E_EncyclopediaBeastprivilege::kMPriceFieldNumber;
const int E_EncyclopediaBeastprivilege::kMExpAdditionFieldNumber;
const int E_EncyclopediaBeastprivilege::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaBeastprivilege::E_EncyclopediaBeastprivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaBeastprivilege::InitAsDefaultInstance() {
}

E_EncyclopediaBeastprivilege::E_EncyclopediaBeastprivilege(const E_EncyclopediaBeastprivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaBeastprivilege::SharedCtor() {
  _cached_size_ = 0;
  m_privilegetype_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_price_ = 0;
  m_expaddition_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaBeastprivilege::~E_EncyclopediaBeastprivilege() {
  SharedDtor();
}

void E_EncyclopediaBeastprivilege::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_EncyclopediaBeastprivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaBeastprivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaBeastprivilege_descriptor_;
}

const E_EncyclopediaBeastprivilege& E_EncyclopediaBeastprivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaBeastprivilege* E_EncyclopediaBeastprivilege::default_instance_ = NULL;

E_EncyclopediaBeastprivilege* E_EncyclopediaBeastprivilege::New() const {
  return new E_EncyclopediaBeastprivilege;
}

void E_EncyclopediaBeastprivilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_privilegetype_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_price_ = 0;
    m_expaddition_ = GOOGLE_LONGLONG(0);
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaBeastprivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_privilegeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_privilegetype_)));
          set_has_m_privilegetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_expAddition;
        break;
      }

      // optional int64 m_expAddition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expAddition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_expaddition_)));
          set_has_m_expaddition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_EncyclopediaBeastprivilegeAttributeDesc m_attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaBeastprivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_privilegeType = 1;
  if (has_m_privilegetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_privilegetype(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_price = 3;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_price(), output);
  }

  // optional int64 m_expAddition = 4;
  if (has_m_expaddition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_expaddition(), output);
  }

  // repeated .proto_ff.E_EncyclopediaBeastprivilegeAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaBeastprivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_privilegeType = 1;
  if (has_m_privilegetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_privilegetype(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_price = 3;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_price(), target);
  }

  // optional int64 m_expAddition = 4;
  if (has_m_expaddition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_expaddition(), target);
  }

  // repeated .proto_ff.E_EncyclopediaBeastprivilegeAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaBeastprivilege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_privilegeType = 1;
    if (has_m_privilegetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_privilegetype());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_price = 3;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int64 m_expAddition = 4;
    if (has_m_expaddition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_expaddition());
    }

  }
  // repeated .proto_ff.E_EncyclopediaBeastprivilegeAttributeDesc m_attribute = 5;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaBeastprivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaBeastprivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaBeastprivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaBeastprivilege::MergeFrom(const E_EncyclopediaBeastprivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_privilegetype()) {
      set_m_privilegetype(from.m_privilegetype());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_expaddition()) {
      set_m_expaddition(from.m_expaddition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaBeastprivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaBeastprivilege::CopyFrom(const E_EncyclopediaBeastprivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaBeastprivilege::IsInitialized() const {

  return true;
}

void E_EncyclopediaBeastprivilege::Swap(E_EncyclopediaBeastprivilege* other) {
  if (other != this) {
    std::swap(m_privilegetype_, other->m_privilegetype_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_expaddition_, other->m_expaddition_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaBeastprivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaBeastprivilege_descriptor_;
  metadata.reflection = E_EncyclopediaBeastprivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_EncyclopediaBeastprivilege::kEEncyclopediaBeastprivilegeListFieldNumber;
#endif  // !_MSC_VER

Sheet_EncyclopediaBeastprivilege::Sheet_EncyclopediaBeastprivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_EncyclopediaBeastprivilege::InitAsDefaultInstance() {
}

Sheet_EncyclopediaBeastprivilege::Sheet_EncyclopediaBeastprivilege(const Sheet_EncyclopediaBeastprivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_EncyclopediaBeastprivilege::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_EncyclopediaBeastprivilege::~Sheet_EncyclopediaBeastprivilege() {
  SharedDtor();
}

void Sheet_EncyclopediaBeastprivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_EncyclopediaBeastprivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_EncyclopediaBeastprivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_EncyclopediaBeastprivilege_descriptor_;
}

const Sheet_EncyclopediaBeastprivilege& Sheet_EncyclopediaBeastprivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

Sheet_EncyclopediaBeastprivilege* Sheet_EncyclopediaBeastprivilege::default_instance_ = NULL;

Sheet_EncyclopediaBeastprivilege* Sheet_EncyclopediaBeastprivilege::New() const {
  return new Sheet_EncyclopediaBeastprivilege;
}

void Sheet_EncyclopediaBeastprivilege::Clear() {
  e_encyclopediabeastprivilege_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_EncyclopediaBeastprivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_EncyclopediaBeastprivilege E_EncyclopediaBeastprivilege_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_EncyclopediaBeastprivilege_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_encyclopediabeastprivilege_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_EncyclopediaBeastprivilege_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_EncyclopediaBeastprivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_EncyclopediaBeastprivilege E_EncyclopediaBeastprivilege_List = 1;
  for (int i = 0; i < this->e_encyclopediabeastprivilege_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_encyclopediabeastprivilege_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_EncyclopediaBeastprivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_EncyclopediaBeastprivilege E_EncyclopediaBeastprivilege_List = 1;
  for (int i = 0; i < this->e_encyclopediabeastprivilege_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_encyclopediabeastprivilege_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_EncyclopediaBeastprivilege::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_EncyclopediaBeastprivilege E_EncyclopediaBeastprivilege_List = 1;
  total_size += 1 * this->e_encyclopediabeastprivilege_list_size();
  for (int i = 0; i < this->e_encyclopediabeastprivilege_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_encyclopediabeastprivilege_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_EncyclopediaBeastprivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_EncyclopediaBeastprivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_EncyclopediaBeastprivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_EncyclopediaBeastprivilege::MergeFrom(const Sheet_EncyclopediaBeastprivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_encyclopediabeastprivilege_list_.MergeFrom(from.e_encyclopediabeastprivilege_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_EncyclopediaBeastprivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_EncyclopediaBeastprivilege::CopyFrom(const Sheet_EncyclopediaBeastprivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_EncyclopediaBeastprivilege::IsInitialized() const {

  return true;
}

void Sheet_EncyclopediaBeastprivilege::Swap(Sheet_EncyclopediaBeastprivilege* other) {
  if (other != this) {
    e_encyclopediabeastprivilege_list_.Swap(&other->e_encyclopediabeastprivilege_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_EncyclopediaBeastprivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_EncyclopediaBeastprivilege_descriptor_;
  metadata.reflection = Sheet_EncyclopediaBeastprivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaBeastexp::kMLvFieldNumber;
const int E_EncyclopediaBeastexp::kMExpFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaBeastexp::E_EncyclopediaBeastexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaBeastexp::InitAsDefaultInstance() {
}

E_EncyclopediaBeastexp::E_EncyclopediaBeastexp(const E_EncyclopediaBeastexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaBeastexp::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaBeastexp::~E_EncyclopediaBeastexp() {
  SharedDtor();
}

void E_EncyclopediaBeastexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaBeastexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaBeastexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaBeastexp_descriptor_;
}

const E_EncyclopediaBeastexp& E_EncyclopediaBeastexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaBeastexp* E_EncyclopediaBeastexp::default_instance_ = NULL;

E_EncyclopediaBeastexp* E_EncyclopediaBeastexp::New() const {
  return new E_EncyclopediaBeastexp;
}

void E_EncyclopediaBeastexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaBeastexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaBeastexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaBeastexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaBeastexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaBeastexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaBeastexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaBeastexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaBeastexp::MergeFrom(const E_EncyclopediaBeastexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaBeastexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaBeastexp::CopyFrom(const E_EncyclopediaBeastexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaBeastexp::IsInitialized() const {

  return true;
}

void E_EncyclopediaBeastexp::Swap(E_EncyclopediaBeastexp* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaBeastexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaBeastexp_descriptor_;
  metadata.reflection = E_EncyclopediaBeastexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_EncyclopediaBeastexp::kEEncyclopediaBeastexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_EncyclopediaBeastexp::Sheet_EncyclopediaBeastexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_EncyclopediaBeastexp::InitAsDefaultInstance() {
}

Sheet_EncyclopediaBeastexp::Sheet_EncyclopediaBeastexp(const Sheet_EncyclopediaBeastexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_EncyclopediaBeastexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_EncyclopediaBeastexp::~Sheet_EncyclopediaBeastexp() {
  SharedDtor();
}

void Sheet_EncyclopediaBeastexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_EncyclopediaBeastexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_EncyclopediaBeastexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_EncyclopediaBeastexp_descriptor_;
}

const Sheet_EncyclopediaBeastexp& Sheet_EncyclopediaBeastexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

Sheet_EncyclopediaBeastexp* Sheet_EncyclopediaBeastexp::default_instance_ = NULL;

Sheet_EncyclopediaBeastexp* Sheet_EncyclopediaBeastexp::New() const {
  return new Sheet_EncyclopediaBeastexp;
}

void Sheet_EncyclopediaBeastexp::Clear() {
  e_encyclopediabeastexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_EncyclopediaBeastexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_EncyclopediaBeastexp E_EncyclopediaBeastexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_EncyclopediaBeastexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_encyclopediabeastexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_EncyclopediaBeastexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_EncyclopediaBeastexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_EncyclopediaBeastexp E_EncyclopediaBeastexp_List = 1;
  for (int i = 0; i < this->e_encyclopediabeastexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_encyclopediabeastexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_EncyclopediaBeastexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_EncyclopediaBeastexp E_EncyclopediaBeastexp_List = 1;
  for (int i = 0; i < this->e_encyclopediabeastexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_encyclopediabeastexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_EncyclopediaBeastexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_EncyclopediaBeastexp E_EncyclopediaBeastexp_List = 1;
  total_size += 1 * this->e_encyclopediabeastexp_list_size();
  for (int i = 0; i < this->e_encyclopediabeastexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_encyclopediabeastexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_EncyclopediaBeastexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_EncyclopediaBeastexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_EncyclopediaBeastexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_EncyclopediaBeastexp::MergeFrom(const Sheet_EncyclopediaBeastexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_encyclopediabeastexp_list_.MergeFrom(from.e_encyclopediabeastexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_EncyclopediaBeastexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_EncyclopediaBeastexp::CopyFrom(const Sheet_EncyclopediaBeastexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_EncyclopediaBeastexp::IsInitialized() const {

  return true;
}

void Sheet_EncyclopediaBeastexp::Swap(Sheet_EncyclopediaBeastexp* other) {
  if (other != this) {
    e_encyclopediabeastexp_list_.Swap(&other->e_encyclopediabeastexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_EncyclopediaBeastexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_EncyclopediaBeastexp_descriptor_;
  metadata.reflection = Sheet_EncyclopediaBeastexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaEmployLviattributeDesc::kMValueFieldNumber;
const int E_EncyclopediaEmployLviattributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaEmployLviattributeDesc::E_EncyclopediaEmployLviattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaEmployLviattributeDesc::InitAsDefaultInstance() {
}

E_EncyclopediaEmployLviattributeDesc::E_EncyclopediaEmployLviattributeDesc(const E_EncyclopediaEmployLviattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaEmployLviattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaEmployLviattributeDesc::~E_EncyclopediaEmployLviattributeDesc() {
  SharedDtor();
}

void E_EncyclopediaEmployLviattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaEmployLviattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaEmployLviattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaEmployLviattributeDesc_descriptor_;
}

const E_EncyclopediaEmployLviattributeDesc& E_EncyclopediaEmployLviattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaEmployLviattributeDesc* E_EncyclopediaEmployLviattributeDesc::default_instance_ = NULL;

E_EncyclopediaEmployLviattributeDesc* E_EncyclopediaEmployLviattributeDesc::New() const {
  return new E_EncyclopediaEmployLviattributeDesc;
}

void E_EncyclopediaEmployLviattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaEmployLviattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaEmployLviattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaEmployLviattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaEmployLviattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaEmployLviattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaEmployLviattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaEmployLviattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaEmployLviattributeDesc::MergeFrom(const E_EncyclopediaEmployLviattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaEmployLviattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaEmployLviattributeDesc::CopyFrom(const E_EncyclopediaEmployLviattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaEmployLviattributeDesc::IsInitialized() const {

  return true;
}

void E_EncyclopediaEmployLviattributeDesc::Swap(E_EncyclopediaEmployLviattributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaEmployLviattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaEmployLviattributeDesc_descriptor_;
  metadata.reflection = E_EncyclopediaEmployLviattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaEmploy::kMEmployIDFieldNumber;
const int E_EncyclopediaEmploy::kMTypeFieldNumber;
const int E_EncyclopediaEmploy::kMItemIdFieldNumber;
const int E_EncyclopediaEmploy::kMEmployNameFieldNumber;
const int E_EncyclopediaEmploy::kMEmployQualityFieldNumber;
const int E_EncyclopediaEmploy::kMEmployTypeFieldNumber;
const int E_EncyclopediaEmploy::kMEmployTypeNameFieldNumber;
const int E_EncyclopediaEmploy::kMEmployZFieldNumber;
const int E_EncyclopediaEmploy::kMEmployZNameFieldNumber;
const int E_EncyclopediaEmploy::kMLvIattributeFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaEmploy::E_EncyclopediaEmploy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaEmploy::InitAsDefaultInstance() {
}

E_EncyclopediaEmploy::E_EncyclopediaEmploy(const E_EncyclopediaEmploy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaEmploy::SharedCtor() {
  _cached_size_ = 0;
  m_employid_ = GOOGLE_LONGLONG(0);
  m_type_ = GOOGLE_LONGLONG(0);
  m_itemid_ = GOOGLE_LONGLONG(0);
  m_employname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_employquality_ = 0;
  m_employtype_ = 0;
  m_employtype_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_employz_ = 0;
  m_employzname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaEmploy::~E_EncyclopediaEmploy() {
  SharedDtor();
}

void E_EncyclopediaEmploy::SharedDtor() {
  if (m_employname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_employname_;
  }
  if (m_employtype_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_employtype_name_;
  }
  if (m_employzname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_employzname_;
  }
  if (this != default_instance_) {
  }
}

void E_EncyclopediaEmploy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaEmploy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaEmploy_descriptor_;
}

const E_EncyclopediaEmploy& E_EncyclopediaEmploy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaEmploy* E_EncyclopediaEmploy::default_instance_ = NULL;

E_EncyclopediaEmploy* E_EncyclopediaEmploy::New() const {
  return new E_EncyclopediaEmploy;
}

void E_EncyclopediaEmploy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_employid_ = GOOGLE_LONGLONG(0);
    m_type_ = GOOGLE_LONGLONG(0);
    m_itemid_ = GOOGLE_LONGLONG(0);
    if (has_m_employname()) {
      if (m_employname_ != &::google::protobuf::internal::kEmptyString) {
        m_employname_->clear();
      }
    }
    m_employquality_ = 0;
    m_employtype_ = 0;
    if (has_m_employtype_name()) {
      if (m_employtype_name_ != &::google::protobuf::internal::kEmptyString) {
        m_employtype_name_->clear();
      }
    }
    m_employz_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_employzname()) {
      if (m_employzname_ != &::google::protobuf::internal::kEmptyString) {
        m_employzname_->clear();
      }
    }
  }
  m_lviattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaEmploy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_employID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_employid_)));
          set_has_m_employid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int64 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_itemId;
        break;
      }

      // optional int64 m_itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_employName;
        break;
      }

      // optional string m_employName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_employName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_employname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_employname().data(), this->m_employname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_employQuality;
        break;
      }

      // optional int32 m_employQuality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_employQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_employquality_)));
          set_has_m_employquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_employType;
        break;
      }

      // optional int32 m_employType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_employType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_employtype_)));
          set_has_m_employtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_employType_name;
        break;
      }

      // optional string m_employType_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_employType_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_employtype_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_employtype_name().data(), this->m_employtype_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_employZ;
        break;
      }

      // optional int32 m_employZ = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_employZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_employz_)));
          set_has_m_employz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_employZName;
        break;
      }

      // optional string m_employZName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_employZName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_employzname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_employzname().data(), this->m_employzname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_LvIattribute;
        break;
      }

      // repeated .proto_ff.E_EncyclopediaEmployLviattributeDesc m_LvIattribute = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_LvIattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_lviattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_LvIattribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaEmploy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_employID = 1;
  if (has_m_employid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_employid(), output);
  }

  // optional int64 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_type(), output);
  }

  // optional int64 m_itemId = 3;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_itemid(), output);
  }

  // optional string m_employName = 4;
  if (has_m_employname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_employname().data(), this->m_employname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_employname(), output);
  }

  // optional int32 m_employQuality = 5;
  if (has_m_employquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_employquality(), output);
  }

  // optional int32 m_employType = 6;
  if (has_m_employtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_employtype(), output);
  }

  // optional string m_employType_name = 7;
  if (has_m_employtype_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_employtype_name().data(), this->m_employtype_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_employtype_name(), output);
  }

  // optional int32 m_employZ = 8;
  if (has_m_employz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_employz(), output);
  }

  // optional string m_employZName = 9;
  if (has_m_employzname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_employzname().data(), this->m_employzname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_employzname(), output);
  }

  // repeated .proto_ff.E_EncyclopediaEmployLviattributeDesc m_LvIattribute = 10;
  for (int i = 0; i < this->m_lviattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_lviattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaEmploy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_employID = 1;
  if (has_m_employid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_employid(), target);
  }

  // optional int64 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_type(), target);
  }

  // optional int64 m_itemId = 3;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_itemid(), target);
  }

  // optional string m_employName = 4;
  if (has_m_employname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_employname().data(), this->m_employname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_employname(), target);
  }

  // optional int32 m_employQuality = 5;
  if (has_m_employquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_employquality(), target);
  }

  // optional int32 m_employType = 6;
  if (has_m_employtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_employtype(), target);
  }

  // optional string m_employType_name = 7;
  if (has_m_employtype_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_employtype_name().data(), this->m_employtype_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_employtype_name(), target);
  }

  // optional int32 m_employZ = 8;
  if (has_m_employz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_employz(), target);
  }

  // optional string m_employZName = 9;
  if (has_m_employzname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_employzname().data(), this->m_employzname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_employzname(), target);
  }

  // repeated .proto_ff.E_EncyclopediaEmployLviattributeDesc m_LvIattribute = 10;
  for (int i = 0; i < this->m_lviattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_lviattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaEmploy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_employID = 1;
    if (has_m_employid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_employid());
    }

    // optional int64 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_type());
    }

    // optional int64 m_itemId = 3;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_itemid());
    }

    // optional string m_employName = 4;
    if (has_m_employname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_employname());
    }

    // optional int32 m_employQuality = 5;
    if (has_m_employquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_employquality());
    }

    // optional int32 m_employType = 6;
    if (has_m_employtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_employtype());
    }

    // optional string m_employType_name = 7;
    if (has_m_employtype_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_employtype_name());
    }

    // optional int32 m_employZ = 8;
    if (has_m_employz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_employz());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_employZName = 9;
    if (has_m_employzname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_employzname());
    }

  }
  // repeated .proto_ff.E_EncyclopediaEmployLviattributeDesc m_LvIattribute = 10;
  total_size += 1 * this->m_lviattribute_size();
  for (int i = 0; i < this->m_lviattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_lviattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaEmploy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaEmploy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaEmploy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaEmploy::MergeFrom(const E_EncyclopediaEmploy& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_lviattribute_.MergeFrom(from.m_lviattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_employid()) {
      set_m_employid(from.m_employid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_employname()) {
      set_m_employname(from.m_employname());
    }
    if (from.has_m_employquality()) {
      set_m_employquality(from.m_employquality());
    }
    if (from.has_m_employtype()) {
      set_m_employtype(from.m_employtype());
    }
    if (from.has_m_employtype_name()) {
      set_m_employtype_name(from.m_employtype_name());
    }
    if (from.has_m_employz()) {
      set_m_employz(from.m_employz());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_employzname()) {
      set_m_employzname(from.m_employzname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaEmploy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaEmploy::CopyFrom(const E_EncyclopediaEmploy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaEmploy::IsInitialized() const {

  return true;
}

void E_EncyclopediaEmploy::Swap(E_EncyclopediaEmploy* other) {
  if (other != this) {
    std::swap(m_employid_, other->m_employid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_employname_, other->m_employname_);
    std::swap(m_employquality_, other->m_employquality_);
    std::swap(m_employtype_, other->m_employtype_);
    std::swap(m_employtype_name_, other->m_employtype_name_);
    std::swap(m_employz_, other->m_employz_);
    std::swap(m_employzname_, other->m_employzname_);
    m_lviattribute_.Swap(&other->m_lviattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaEmploy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaEmploy_descriptor_;
  metadata.reflection = E_EncyclopediaEmploy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_EncyclopediaEmploy::kEEncyclopediaEmployListFieldNumber;
#endif  // !_MSC_VER

Sheet_EncyclopediaEmploy::Sheet_EncyclopediaEmploy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_EncyclopediaEmploy::InitAsDefaultInstance() {
}

Sheet_EncyclopediaEmploy::Sheet_EncyclopediaEmploy(const Sheet_EncyclopediaEmploy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_EncyclopediaEmploy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_EncyclopediaEmploy::~Sheet_EncyclopediaEmploy() {
  SharedDtor();
}

void Sheet_EncyclopediaEmploy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_EncyclopediaEmploy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_EncyclopediaEmploy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_EncyclopediaEmploy_descriptor_;
}

const Sheet_EncyclopediaEmploy& Sheet_EncyclopediaEmploy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

Sheet_EncyclopediaEmploy* Sheet_EncyclopediaEmploy::default_instance_ = NULL;

Sheet_EncyclopediaEmploy* Sheet_EncyclopediaEmploy::New() const {
  return new Sheet_EncyclopediaEmploy;
}

void Sheet_EncyclopediaEmploy::Clear() {
  e_encyclopediaemploy_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_EncyclopediaEmploy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_EncyclopediaEmploy E_EncyclopediaEmploy_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_EncyclopediaEmploy_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_encyclopediaemploy_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_EncyclopediaEmploy_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_EncyclopediaEmploy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_EncyclopediaEmploy E_EncyclopediaEmploy_List = 1;
  for (int i = 0; i < this->e_encyclopediaemploy_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_encyclopediaemploy_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_EncyclopediaEmploy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_EncyclopediaEmploy E_EncyclopediaEmploy_List = 1;
  for (int i = 0; i < this->e_encyclopediaemploy_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_encyclopediaemploy_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_EncyclopediaEmploy::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_EncyclopediaEmploy E_EncyclopediaEmploy_List = 1;
  total_size += 1 * this->e_encyclopediaemploy_list_size();
  for (int i = 0; i < this->e_encyclopediaemploy_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_encyclopediaemploy_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_EncyclopediaEmploy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_EncyclopediaEmploy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_EncyclopediaEmploy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_EncyclopediaEmploy::MergeFrom(const Sheet_EncyclopediaEmploy& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_encyclopediaemploy_list_.MergeFrom(from.e_encyclopediaemploy_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_EncyclopediaEmploy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_EncyclopediaEmploy::CopyFrom(const Sheet_EncyclopediaEmploy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_EncyclopediaEmploy::IsInitialized() const {

  return true;
}

void Sheet_EncyclopediaEmploy::Swap(Sheet_EncyclopediaEmploy* other) {
  if (other != this) {
    e_encyclopediaemploy_list_.Swap(&other->e_encyclopediaemploy_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_EncyclopediaEmploy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_EncyclopediaEmploy_descriptor_;
  metadata.reflection = Sheet_EncyclopediaEmploy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaTableLviattributeDesc::kMValueFieldNumber;
const int E_EncyclopediaTableLviattributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaTableLviattributeDesc::E_EncyclopediaTableLviattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaTableLviattributeDesc::InitAsDefaultInstance() {
}

E_EncyclopediaTableLviattributeDesc::E_EncyclopediaTableLviattributeDesc(const E_EncyclopediaTableLviattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaTableLviattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaTableLviattributeDesc::~E_EncyclopediaTableLviattributeDesc() {
  SharedDtor();
}

void E_EncyclopediaTableLviattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_EncyclopediaTableLviattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaTableLviattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaTableLviattributeDesc_descriptor_;
}

const E_EncyclopediaTableLviattributeDesc& E_EncyclopediaTableLviattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaTableLviattributeDesc* E_EncyclopediaTableLviattributeDesc::default_instance_ = NULL;

E_EncyclopediaTableLviattributeDesc* E_EncyclopediaTableLviattributeDesc::New() const {
  return new E_EncyclopediaTableLviattributeDesc;
}

void E_EncyclopediaTableLviattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaTableLviattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaTableLviattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaTableLviattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaTableLviattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaTableLviattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaTableLviattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaTableLviattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaTableLviattributeDesc::MergeFrom(const E_EncyclopediaTableLviattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaTableLviattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaTableLviattributeDesc::CopyFrom(const E_EncyclopediaTableLviattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaTableLviattributeDesc::IsInitialized() const {

  return true;
}

void E_EncyclopediaTableLviattributeDesc::Swap(E_EncyclopediaTableLviattributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaTableLviattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaTableLviattributeDesc_descriptor_;
  metadata.reflection = E_EncyclopediaTableLviattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_EncyclopediaTable::kMIDFieldNumber;
const int E_EncyclopediaTable::kMTableidFieldNumber;
const int E_EncyclopediaTable::kMTableNameFieldNumber;
const int E_EncyclopediaTable::kMLvIattributeFieldNumber;
#endif  // !_MSC_VER

E_EncyclopediaTable::E_EncyclopediaTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_EncyclopediaTable::InitAsDefaultInstance() {
}

E_EncyclopediaTable::E_EncyclopediaTable(const E_EncyclopediaTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_EncyclopediaTable::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_tableid_ = GOOGLE_LONGLONG(0);
  m_tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_EncyclopediaTable::~E_EncyclopediaTable() {
  SharedDtor();
}

void E_EncyclopediaTable::SharedDtor() {
  if (m_tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_tablename_;
  }
  if (this != default_instance_) {
  }
}

void E_EncyclopediaTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_EncyclopediaTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_EncyclopediaTable_descriptor_;
}

const E_EncyclopediaTable& E_EncyclopediaTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

E_EncyclopediaTable* E_EncyclopediaTable::default_instance_ = NULL;

E_EncyclopediaTable* E_EncyclopediaTable::New() const {
  return new E_EncyclopediaTable;
}

void E_EncyclopediaTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_tableid_ = GOOGLE_LONGLONG(0);
    if (has_m_tablename()) {
      if (m_tablename_ != &::google::protobuf::internal::kEmptyString) {
        m_tablename_->clear();
      }
    }
  }
  m_lviattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_EncyclopediaTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_tableid;
        break;
      }

      // optional int64 m_tableid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_tableid_)));
          set_has_m_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_tableName;
        break;
      }

      // optional string m_tableName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_tablename().data(), this->m_tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_LvIattribute;
        break;
      }

      // repeated .proto_ff.E_EncyclopediaTableLviattributeDesc m_LvIattribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_LvIattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_lviattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_LvIattribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_EncyclopediaTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int64 m_tableid = 2;
  if (has_m_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_tableid(), output);
  }

  // optional string m_tableName = 3;
  if (has_m_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_tablename().data(), this->m_tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_tablename(), output);
  }

  // repeated .proto_ff.E_EncyclopediaTableLviattributeDesc m_LvIattribute = 4;
  for (int i = 0; i < this->m_lviattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_lviattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_EncyclopediaTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int64 m_tableid = 2;
  if (has_m_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_tableid(), target);
  }

  // optional string m_tableName = 3;
  if (has_m_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_tablename().data(), this->m_tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_tablename(), target);
  }

  // repeated .proto_ff.E_EncyclopediaTableLviattributeDesc m_LvIattribute = 4;
  for (int i = 0; i < this->m_lviattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_lviattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_EncyclopediaTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int64 m_tableid = 2;
    if (has_m_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_tableid());
    }

    // optional string m_tableName = 3;
    if (has_m_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_tablename());
    }

  }
  // repeated .proto_ff.E_EncyclopediaTableLviattributeDesc m_LvIattribute = 4;
  total_size += 1 * this->m_lviattribute_size();
  for (int i = 0; i < this->m_lviattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_lviattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_EncyclopediaTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_EncyclopediaTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_EncyclopediaTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_EncyclopediaTable::MergeFrom(const E_EncyclopediaTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_lviattribute_.MergeFrom(from.m_lviattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_tableid()) {
      set_m_tableid(from.m_tableid());
    }
    if (from.has_m_tablename()) {
      set_m_tablename(from.m_tablename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_EncyclopediaTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_EncyclopediaTable::CopyFrom(const E_EncyclopediaTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_EncyclopediaTable::IsInitialized() const {

  return true;
}

void E_EncyclopediaTable::Swap(E_EncyclopediaTable* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_tableid_, other->m_tableid_);
    std::swap(m_tablename_, other->m_tablename_);
    m_lviattribute_.Swap(&other->m_lviattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_EncyclopediaTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_EncyclopediaTable_descriptor_;
  metadata.reflection = E_EncyclopediaTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_EncyclopediaTable::kEEncyclopediaTableListFieldNumber;
#endif  // !_MSC_VER

Sheet_EncyclopediaTable::Sheet_EncyclopediaTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_EncyclopediaTable::InitAsDefaultInstance() {
}

Sheet_EncyclopediaTable::Sheet_EncyclopediaTable(const Sheet_EncyclopediaTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_EncyclopediaTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_EncyclopediaTable::~Sheet_EncyclopediaTable() {
  SharedDtor();
}

void Sheet_EncyclopediaTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_EncyclopediaTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_EncyclopediaTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_EncyclopediaTable_descriptor_;
}

const Sheet_EncyclopediaTable& Sheet_EncyclopediaTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fEncyclopedia_2eproto();
  return *default_instance_;
}

Sheet_EncyclopediaTable* Sheet_EncyclopediaTable::default_instance_ = NULL;

Sheet_EncyclopediaTable* Sheet_EncyclopediaTable::New() const {
  return new Sheet_EncyclopediaTable;
}

void Sheet_EncyclopediaTable::Clear() {
  e_encyclopediatable_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_EncyclopediaTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_EncyclopediaTable E_EncyclopediaTable_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_EncyclopediaTable_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_encyclopediatable_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_EncyclopediaTable_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_EncyclopediaTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_EncyclopediaTable E_EncyclopediaTable_List = 1;
  for (int i = 0; i < this->e_encyclopediatable_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_encyclopediatable_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_EncyclopediaTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_EncyclopediaTable E_EncyclopediaTable_List = 1;
  for (int i = 0; i < this->e_encyclopediatable_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_encyclopediatable_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_EncyclopediaTable::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_EncyclopediaTable E_EncyclopediaTable_List = 1;
  total_size += 1 * this->e_encyclopediatable_list_size();
  for (int i = 0; i < this->e_encyclopediatable_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_encyclopediatable_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_EncyclopediaTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_EncyclopediaTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_EncyclopediaTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_EncyclopediaTable::MergeFrom(const Sheet_EncyclopediaTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_encyclopediatable_list_.MergeFrom(from.e_encyclopediatable_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_EncyclopediaTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_EncyclopediaTable::CopyFrom(const Sheet_EncyclopediaTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_EncyclopediaTable::IsInitialized() const {

  return true;
}

void Sheet_EncyclopediaTable::Swap(Sheet_EncyclopediaTable* other) {
  if (other != this) {
    e_encyclopediatable_list_.Swap(&other->e_encyclopediatable_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_EncyclopediaTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_EncyclopediaTable_descriptor_;
  metadata.reflection = Sheet_EncyclopediaTable_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
