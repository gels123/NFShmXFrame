// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dup.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_DupBplevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupBplevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupBplevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupBplevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupDup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupDup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupDup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupDup_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupTowerreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupTowerreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupTowerreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupTowerreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupGroup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dup_2eproto() {
  protobuf_AddDesc_dup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dup.proto");
  GOOGLE_CHECK(file != NULL);
  E_DupBplevel_descriptor_ = file->message_type(0);
  static const int E_DupBplevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupBplevel, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupBplevel, m_bgdup_),
  };
  E_DupBplevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupBplevel_descriptor_,
      E_DupBplevel::default_instance_,
      E_DupBplevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupBplevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupBplevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupBplevel));
  Sheet_DupBplevel_descriptor_ = file->message_type(1);
  static const int Sheet_DupBplevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupBplevel, e_dupbplevel_list_),
  };
  Sheet_DupBplevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupBplevel_descriptor_,
      Sheet_DupBplevel::default_instance_,
      Sheet_DupBplevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupBplevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupBplevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupBplevel));
  E_DupDup_descriptor_ = file->message_type(2);
  static const int E_DupDup_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_scripid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_scriptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_duplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_duplicatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_pre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_isautofight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_revivemaxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_teamobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_gradecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_sweeprewardboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_sweeprewardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_trackpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_pathofmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_ispatrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_sweeptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_box_),
  };
  E_DupDup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupDup_descriptor_,
      E_DupDup::default_instance_,
      E_DupDup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupDup));
  Sheet_DupDup_descriptor_ = file->message_type(3);
  static const int Sheet_DupDup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupDup, e_dupdup_list_),
  };
  Sheet_DupDup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupDup_descriptor_,
      Sheet_DupDup::default_instance_,
      Sheet_DupDup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupDup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupDup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupDup));
  E_DupTowerreward_descriptor_ = file->message_type(4);
  static const int E_DupTowerreward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTowerreward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTowerreward, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTowerreward, m_cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTowerreward, m_boxid_),
  };
  E_DupTowerreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupTowerreward_descriptor_,
      E_DupTowerreward::default_instance_,
      E_DupTowerreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTowerreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTowerreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupTowerreward));
  Sheet_DupTowerreward_descriptor_ = file->message_type(5);
  static const int Sheet_DupTowerreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupTowerreward, e_duptowerreward_list_),
  };
  Sheet_DupTowerreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupTowerreward_descriptor_,
      Sheet_DupTowerreward::default_instance_,
      Sheet_DupTowerreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupTowerreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupTowerreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupTowerreward));
  E_DupGroup_descriptor_ = file->message_type(6);
  static const int E_DupGroup_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_privilegetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_dynamiclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_grouptimestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_grouptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_enteritemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_sweepcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_mergecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_additemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_buytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_buyitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_buycost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_enddown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_accountdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_funcionid_),
  };
  E_DupGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupGroup_descriptor_,
      E_DupGroup::default_instance_,
      E_DupGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupGroup));
  Sheet_DupGroup_descriptor_ = file->message_type(7);
  static const int Sheet_DupGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupGroup, e_dupgroup_list_),
  };
  Sheet_DupGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupGroup_descriptor_,
      Sheet_DupGroup::default_instance_,
      Sheet_DupGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupGroup));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupBplevel_descriptor_, &E_DupBplevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupBplevel_descriptor_, &Sheet_DupBplevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupDup_descriptor_, &E_DupDup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupDup_descriptor_, &Sheet_DupDup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupTowerreward_descriptor_, &E_DupTowerreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupTowerreward_descriptor_, &Sheet_DupTowerreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupGroup_descriptor_, &E_DupGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupGroup_descriptor_, &Sheet_DupGroup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dup_2eproto() {
  delete E_DupBplevel::default_instance_;
  delete E_DupBplevel_reflection_;
  delete Sheet_DupBplevel::default_instance_;
  delete Sheet_DupBplevel_reflection_;
  delete E_DupDup::default_instance_;
  delete E_DupDup_reflection_;
  delete Sheet_DupDup::default_instance_;
  delete Sheet_DupDup_reflection_;
  delete E_DupTowerreward::default_instance_;
  delete E_DupTowerreward_reflection_;
  delete Sheet_DupTowerreward::default_instance_;
  delete Sheet_DupTowerreward_reflection_;
  delete E_DupGroup::default_instance_;
  delete E_DupGroup_reflection_;
  delete Sheet_DupGroup::default_instance_;
  delete Sheet_DupGroup_reflection_;
}

void protobuf_AddDesc_dup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tdup.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\"L\n\014E_DupBplevel\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006"
    "\347\255\211\347\272\247\022\"\n\007m_bgdup\030\002 \003(\003B\021\302\377\024\t\345\205\253\345\215\246\346\234\254\210\301"
    "\024\005\"L\n\020Sheet_DupBplevel\0228\n\021E_DupBplevel_L"
    "ist\030\001 \003(\0132\026.proto_ff.E_DupBplevelB\005\210\301\024\314\010"
    "\"\324\007\n\010E_DupDup\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\345\211\257\346\234\254I"
    "D\022%\n\tm_scripid\030\002 \001(\005B\022\302\377\024\016\345\210\267\346\200\252\350\204\232\346\234\254ID"
    "\022+\n\013m_scriptype\030\003 \001(\005B\026\302\377\024\022\345\210\267\346\200\252\350\204\232\346\234\254\347"
    "\261\273\345\236\213\022$\n\nm_duplevel\030\004 \001(\005B\020\302\377\024\014\345\211\257\346\234\254\347\255\211"
    "\347\272\247\022(\n\tm_groupid\030\005 \001(\005B\025\302\377\024\021\346\211\200\345\261\236\345\211\257\346\234\254"
    "\347\273\204ID\022\033\n\007m_layer\030\006 \001(\005B\n\302\377\024\006\345\261\202\347\272\247\022/\n\017m_"
    "duplicatetype\030\007 \001(\005B\026\302\377\024\022\345\211\257\346\234\254\345\206\205\345\256\271\347\261\273"
    "\345\236\213\022\035\n\007m_mapid\030\010 \001(\003B\014\302\377\024\010\345\234\272\346\231\257ID\022,\n\014m_"
    "levellimit\030\t \001(\005B\026\302\377\024\022\347\255\211\347\272\247\350\246\201\346\261\202\344\270\213\351\231\220"
    "\022%\n\005m_pre\030\n \001(\005B\026\302\377\024\022\345\211\215\347\275\256\345\211\257\346\234\254\350\246\201\346\261\202\022"
    "3\n\rm_isautofight\030\013 \001(\005B\034\302\377\024\030\346\230\257\345\220\246\345\205\201\350\256\270"
    "\350\207\252\345\212\250\346\210\230\346\226\227\0225\n\013m_condition\030\014 \001(\tB \302\377\024\030\345"
    "\211\257\346\234\254\350\203\234\345\210\251\346\235\241\344\273\266\347\261\273\345\236\213\220\301\024<\0220\n\020m_revivem"
    "axtimes\030\r \001(\005B\026\302\377\024\022\345\244\215\346\264\273\346\254\241\346\225\260\344\270\212\351\231\220\022*\n"
    "\016m_teamobjectid\030\016 \001(\005B\022\302\377\024\016\347\273\204\351\230\237\347\233\256\346\240\207I"
    "D\022.\n\020m_gradecondition\030\017 \001(\tB\024\302\377\024\014\346\230\237\347\272\247\346"
    "\227\266\351\227\264\220\301\024<\0221\n\022m_sweeprewardboxid\030\020 \001(\003B\025\302"
    "\377\024\021\346\211\253\350\215\241\345\245\226\345\212\261BOXID\0220\n\020m_sweeprewardexp"
    "\030\021 \001(\005B\026\302\377\024\022\346\211\253\350\215\241\347\273\217\351\252\214\345\245\226\345\212\261\022-\n\014m_trac"
    "kpoint\030\022 \001(\tB\027\302\377\024\017\345\211\257\346\234\254\345\257\273\350\267\257\347\202\271\220\301\024<\022<\n"
    "\017m_pathofmonster\030\023 \001(\tB#\302\377\024\033\345\211\257\346\234\254\345\257\273\350\267\257"
    "\347\202\271\345\257\271\345\272\224\346\200\252\347\211\251\220\301\024<\022-\n\nm_ispatrol\030\024 \001(\005B"
    "\031\302\377\024\025\345\257\273\350\267\257\345\211\215\346\230\257\345\220\246\345\267\241\346\225\214\022%\n\013m_sweeptyp"
    "e\030\025 \001(\005B\020\302\377\024\014\346\211\253\350\215\241\347\261\273\345\236\213\022$\n\005m_box\030\026 \003(\005"
    "B\025\302\377\024\r\345\245\226\345\212\2619999\347\273\204\210\301\024\003\"\?\n\014Sheet_DupDup\022"
    "/\n\rE_DupDup_List\030\001 \003(\0132\022.proto_ff.E_DupD"
    "upB\004\210\301\024P\"\200\001\n\020E_DupTowerreward\022\024\n\004m_id\030\001 "
    "\001(\005B\006\302\377\024\002id\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022"
    " \n\006m_cond\030\003 \001(\005B\020\302\377\024\014\351\242\206\345\217\226\346\235\241\344\273\266\022\030\n\007m_b"
    "oxid\030\004 \001(\005B\007\302\377\024\003box\"W\n\024Sheet_DupTowerrew"
    "ard\022\?\n\025E_DupTowerreward_List\030\001 \003(\0132\032.pro"
    "to_ff.E_DupTowerrewardB\004\210\301\024\024\"\366\005\n\nE_DupGr"
    "oup\022\035\n\004m_id\030\001 \001(\005B\017\302\377\024\013\345\211\257\346\234\254\347\273\204ID\022$\n\006m_"
    "name\030\002 \001(\tB\024\302\377\024\014\345\211\257\346\234\254\347\273\204\345\220\215\220\301\024<\022)\n\017m_pr"
    "ivilegetype\030\003 \001(\005B\020\302\377\024\014\347\211\271\346\235\203\347\261\273\345\236\213\022.\n\016m"
    "_dynamiclevel\030\004 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\345\212\250\346\200\201\347\255\211"
    "\347\272\247\022-\n\020m_grouptimestype\030\005 \001(\005B\023\302\377\024\017\347\273\204\346\254"
    "\241\346\225\260\347\261\273\345\236\213\022)\n\014m_grouptimes\030\006 \001(\005B\023\302\377\024\017\346\254"
    "\241\346\225\260\344\270\212\351\231\220\345\200\274\022-\n\rm_enteritemid\030\007 \001(\005B\026\302\377"
    "\024\022\345\211\257\346\234\254\350\277\233\345\205\245\351\201\223\345\205\267\022*\n\020m_sweepcondition"
    "\030\010 \001(\005B\020\302\377\024\014\346\211\253\350\215\241\346\235\241\344\273\266\022*\n\020m_mergecondi"
    "tion\030\t \001(\005B\020\302\377\024\014\345\220\210\345\271\266\346\235\241\344\273\266\022-\n\013m_addite"
    "mid\030\n \001(\005B\030\302\377\024\024\345\242\236\345\212\240\346\254\241\346\225\260\347\211\251\345\223\201ID\022/\n\tm"
    "_buytype\030\013 \001(\005B\034\302\377\024\030\350\264\255\344\271\260\346\254\241\346\225\260\346\266\210\350\200\227\350\264"
    "\247\345\270\201\0221\n\013m_buyitemid\030\014 \001(\005B\034\302\377\024\030\350\264\255\344\271\260\346\254\241"
    "\346\225\260\346\266\210\350\200\227\347\211\251\345\223\201\0223\n\tm_buycost\030\r \001(\tB \302\377\024\030"
    "\350\264\255\344\271\260\350\277\233\345\205\245\346\254\241\346\225\260\346\266\210\350\200\227\220\301\024<\022(\n\013m_countd"
    "own\030\016 \001(\005B\023\302\377\024\017\345\200\222\350\256\241\346\227\266\346\227\266\351\227\264\022&\n\tm_endd"
    "own\030\017 \001(\005B\023\302\377\024\017\347\273\223\346\235\237\345\200\222\350\256\241\346\227\266\022*\n\rm_acco"
    "untdown\030\020 \001(\005B\023\302\377\024\017\347\273\223\347\256\227\345\200\222\350\256\241\346\227\266\022!\n\013m_"
    "funcionid\030\021 \001(\005B\014\302\377\024\010\345\212\237\350\203\275ID\"E\n\016Sheet_D"
    "upGroup\0223\n\017E_DupGroup_List\030\001 \003(\0132\024.proto"
    "_ff.E_DupGroupB\004\210\301\024\024", 2300);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dup.proto", &protobuf_RegisterTypes);
  E_DupBplevel::default_instance_ = new E_DupBplevel();
  Sheet_DupBplevel::default_instance_ = new Sheet_DupBplevel();
  E_DupDup::default_instance_ = new E_DupDup();
  Sheet_DupDup::default_instance_ = new Sheet_DupDup();
  E_DupTowerreward::default_instance_ = new E_DupTowerreward();
  Sheet_DupTowerreward::default_instance_ = new Sheet_DupTowerreward();
  E_DupGroup::default_instance_ = new E_DupGroup();
  Sheet_DupGroup::default_instance_ = new Sheet_DupGroup();
  E_DupBplevel::default_instance_->InitAsDefaultInstance();
  Sheet_DupBplevel::default_instance_->InitAsDefaultInstance();
  E_DupDup::default_instance_->InitAsDefaultInstance();
  Sheet_DupDup::default_instance_->InitAsDefaultInstance();
  E_DupTowerreward::default_instance_->InitAsDefaultInstance();
  Sheet_DupTowerreward::default_instance_->InitAsDefaultInstance();
  E_DupGroup::default_instance_->InitAsDefaultInstance();
  Sheet_DupGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dup_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dup_2eproto {
  StaticDescriptorInitializer_dup_2eproto() {
    protobuf_AddDesc_dup_2eproto();
  }
} static_descriptor_initializer_dup_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_DupBplevel::kMLvFieldNumber;
const int E_DupBplevel::kMBgdupFieldNumber;
#endif  // !_MSC_VER

E_DupBplevel::E_DupBplevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupBplevel::InitAsDefaultInstance() {
}

E_DupBplevel::E_DupBplevel(const E_DupBplevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupBplevel::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupBplevel::~E_DupBplevel() {
  SharedDtor();
}

void E_DupBplevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_DupBplevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupBplevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupBplevel_descriptor_;
}

const E_DupBplevel& E_DupBplevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

E_DupBplevel* E_DupBplevel::default_instance_ = NULL;

E_DupBplevel* E_DupBplevel::New() const {
  return new E_DupBplevel;
}

void E_DupBplevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
  }
  m_bgdup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupBplevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bgdup;
        break;
      }

      // repeated int64 m_bgdup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bgdup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_m_bgdup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_bgdup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bgdup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupBplevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // repeated int64 m_bgdup = 2;
  for (int i = 0; i < this->m_bgdup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->m_bgdup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupBplevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // repeated int64 m_bgdup = 2;
  for (int i = 0; i < this->m_bgdup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->m_bgdup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupBplevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

  }
  // repeated int64 m_bgdup = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_bgdup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_bgdup(i));
    }
    total_size += 1 * this->m_bgdup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupBplevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupBplevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupBplevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupBplevel::MergeFrom(const E_DupBplevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_bgdup_.MergeFrom(from.m_bgdup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupBplevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupBplevel::CopyFrom(const E_DupBplevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupBplevel::IsInitialized() const {

  return true;
}

void E_DupBplevel::Swap(E_DupBplevel* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    m_bgdup_.Swap(&other->m_bgdup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupBplevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupBplevel_descriptor_;
  metadata.reflection = E_DupBplevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupBplevel::kEDupBplevelListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupBplevel::Sheet_DupBplevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupBplevel::InitAsDefaultInstance() {
}

Sheet_DupBplevel::Sheet_DupBplevel(const Sheet_DupBplevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupBplevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupBplevel::~Sheet_DupBplevel() {
  SharedDtor();
}

void Sheet_DupBplevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupBplevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupBplevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupBplevel_descriptor_;
}

const Sheet_DupBplevel& Sheet_DupBplevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

Sheet_DupBplevel* Sheet_DupBplevel::default_instance_ = NULL;

Sheet_DupBplevel* Sheet_DupBplevel::New() const {
  return new Sheet_DupBplevel;
}

void Sheet_DupBplevel::Clear() {
  e_dupbplevel_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupBplevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupBplevel E_DupBplevel_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupBplevel_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dupbplevel_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupBplevel_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupBplevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupBplevel E_DupBplevel_List = 1;
  for (int i = 0; i < this->e_dupbplevel_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dupbplevel_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupBplevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupBplevel E_DupBplevel_List = 1;
  for (int i = 0; i < this->e_dupbplevel_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dupbplevel_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupBplevel::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupBplevel E_DupBplevel_List = 1;
  total_size += 1 * this->e_dupbplevel_list_size();
  for (int i = 0; i < this->e_dupbplevel_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dupbplevel_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupBplevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupBplevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupBplevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupBplevel::MergeFrom(const Sheet_DupBplevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dupbplevel_list_.MergeFrom(from.e_dupbplevel_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupBplevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupBplevel::CopyFrom(const Sheet_DupBplevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupBplevel::IsInitialized() const {

  return true;
}

void Sheet_DupBplevel::Swap(Sheet_DupBplevel* other) {
  if (other != this) {
    e_dupbplevel_list_.Swap(&other->e_dupbplevel_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupBplevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupBplevel_descriptor_;
  metadata.reflection = Sheet_DupBplevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupDup::kMIdFieldNumber;
const int E_DupDup::kMScripidFieldNumber;
const int E_DupDup::kMScriptypeFieldNumber;
const int E_DupDup::kMDuplevelFieldNumber;
const int E_DupDup::kMGroupidFieldNumber;
const int E_DupDup::kMLayerFieldNumber;
const int E_DupDup::kMDuplicatetypeFieldNumber;
const int E_DupDup::kMMapidFieldNumber;
const int E_DupDup::kMLevellimitFieldNumber;
const int E_DupDup::kMPreFieldNumber;
const int E_DupDup::kMIsautofightFieldNumber;
const int E_DupDup::kMConditionFieldNumber;
const int E_DupDup::kMRevivemaxtimesFieldNumber;
const int E_DupDup::kMTeamobjectidFieldNumber;
const int E_DupDup::kMGradeconditionFieldNumber;
const int E_DupDup::kMSweeprewardboxidFieldNumber;
const int E_DupDup::kMSweeprewardexpFieldNumber;
const int E_DupDup::kMTrackpointFieldNumber;
const int E_DupDup::kMPathofmonsterFieldNumber;
const int E_DupDup::kMIspatrolFieldNumber;
const int E_DupDup::kMSweeptypeFieldNumber;
const int E_DupDup::kMBoxFieldNumber;
#endif  // !_MSC_VER

E_DupDup::E_DupDup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupDup::InitAsDefaultInstance() {
}

E_DupDup::E_DupDup(const E_DupDup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupDup::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_scripid_ = 0;
  m_scriptype_ = 0;
  m_duplevel_ = 0;
  m_groupid_ = 0;
  m_layer_ = 0;
  m_duplicatetype_ = 0;
  m_mapid_ = GOOGLE_LONGLONG(0);
  m_levellimit_ = 0;
  m_pre_ = 0;
  m_isautofight_ = 0;
  m_condition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_revivemaxtimes_ = 0;
  m_teamobjectid_ = 0;
  m_gradecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sweeprewardboxid_ = GOOGLE_LONGLONG(0);
  m_sweeprewardexp_ = 0;
  m_trackpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_pathofmonster_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_ispatrol_ = 0;
  m_sweeptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupDup::~E_DupDup() {
  SharedDtor();
}

void E_DupDup::SharedDtor() {
  if (m_condition_ != &::google::protobuf::internal::kEmptyString) {
    delete m_condition_;
  }
  if (m_gradecondition_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gradecondition_;
  }
  if (m_trackpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete m_trackpoint_;
  }
  if (m_pathofmonster_ != &::google::protobuf::internal::kEmptyString) {
    delete m_pathofmonster_;
  }
  if (this != default_instance_) {
  }
}

void E_DupDup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupDup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupDup_descriptor_;
}

const E_DupDup& E_DupDup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

E_DupDup* E_DupDup::default_instance_ = NULL;

E_DupDup* E_DupDup::New() const {
  return new E_DupDup;
}

void E_DupDup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_scripid_ = 0;
    m_scriptype_ = 0;
    m_duplevel_ = 0;
    m_groupid_ = 0;
    m_layer_ = 0;
    m_duplicatetype_ = 0;
    m_mapid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_levellimit_ = 0;
    m_pre_ = 0;
    m_isautofight_ = 0;
    if (has_m_condition()) {
      if (m_condition_ != &::google::protobuf::internal::kEmptyString) {
        m_condition_->clear();
      }
    }
    m_revivemaxtimes_ = 0;
    m_teamobjectid_ = 0;
    if (has_m_gradecondition()) {
      if (m_gradecondition_ != &::google::protobuf::internal::kEmptyString) {
        m_gradecondition_->clear();
      }
    }
    m_sweeprewardboxid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_sweeprewardexp_ = 0;
    if (has_m_trackpoint()) {
      if (m_trackpoint_ != &::google::protobuf::internal::kEmptyString) {
        m_trackpoint_->clear();
      }
    }
    if (has_m_pathofmonster()) {
      if (m_pathofmonster_ != &::google::protobuf::internal::kEmptyString) {
        m_pathofmonster_->clear();
      }
    }
    m_ispatrol_ = 0;
    m_sweeptype_ = 0;
  }
  m_box_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupDup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_scripid;
        break;
      }

      // optional int32 m_scripid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scripid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scripid_)));
          set_has_m_scripid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_scriptype;
        break;
      }

      // optional int32 m_scriptype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scriptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scriptype_)));
          set_has_m_scriptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_duplevel;
        break;
      }

      // optional int32 m_duplevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_duplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_duplevel_)));
          set_has_m_duplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_layer;
        break;
      }

      // optional int32 m_layer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_layer_)));
          set_has_m_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_duplicatetype;
        break;
      }

      // optional int32 m_duplicatetype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_duplicatetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_duplicatetype_)));
          set_has_m_duplicatetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_mapid;
        break;
      }

      // optional int64 m_mapid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_mapid_)));
          set_has_m_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_levellimit;
        break;
      }

      // optional int32 m_levellimit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_levellimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_levellimit_)));
          set_has_m_levellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_pre;
        break;
      }

      // optional int32 m_pre = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pre_)));
          set_has_m_pre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_isautofight;
        break;
      }

      // optional int32 m_isautofight = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isautofight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isautofight_)));
          set_has_m_isautofight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_condition;
        break;
      }

      // optional string m_condition = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_condition().data(), this->m_condition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_revivemaxtimes;
        break;
      }

      // optional int32 m_revivemaxtimes = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_revivemaxtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_revivemaxtimes_)));
          set_has_m_revivemaxtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_teamobjectid;
        break;
      }

      // optional int32 m_teamobjectid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_teamobjectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_teamobjectid_)));
          set_has_m_teamobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_gradecondition;
        break;
      }

      // optional string m_gradecondition = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_gradecondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gradecondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gradecondition().data(), this->m_gradecondition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_sweeprewardboxid;
        break;
      }

      // optional int64 m_sweeprewardboxid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sweeprewardboxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_sweeprewardboxid_)));
          set_has_m_sweeprewardboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_sweeprewardexp;
        break;
      }

      // optional int32 m_sweeprewardexp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sweeprewardexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sweeprewardexp_)));
          set_has_m_sweeprewardexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_m_trackpoint;
        break;
      }

      // optional string m_trackpoint = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_trackpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_trackpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_trackpoint().data(), this->m_trackpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_m_pathofmonster;
        break;
      }

      // optional string m_pathofmonster = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_pathofmonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_pathofmonster()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_pathofmonster().data(), this->m_pathofmonster().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_ispatrol;
        break;
      }

      // optional int32 m_ispatrol = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ispatrol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ispatrol_)));
          set_has_m_ispatrol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_sweeptype;
        break;
      }

      // optional int32 m_sweeptype = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sweeptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sweeptype_)));
          set_has_m_sweeptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_box;
        break;
      }

      // repeated int32 m_box = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_m_box())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_box())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_box;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupDup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_scripid = 2;
  if (has_m_scripid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_scripid(), output);
  }

  // optional int32 m_scriptype = 3;
  if (has_m_scriptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_scriptype(), output);
  }

  // optional int32 m_duplevel = 4;
  if (has_m_duplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_duplevel(), output);
  }

  // optional int32 m_groupid = 5;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_groupid(), output);
  }

  // optional int32 m_layer = 6;
  if (has_m_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_layer(), output);
  }

  // optional int32 m_duplicatetype = 7;
  if (has_m_duplicatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_duplicatetype(), output);
  }

  // optional int64 m_mapid = 8;
  if (has_m_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->m_mapid(), output);
  }

  // optional int32 m_levellimit = 9;
  if (has_m_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_levellimit(), output);
  }

  // optional int32 m_pre = 10;
  if (has_m_pre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_pre(), output);
  }

  // optional int32 m_isautofight = 11;
  if (has_m_isautofight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_isautofight(), output);
  }

  // optional string m_condition = 12;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_condition().data(), this->m_condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->m_condition(), output);
  }

  // optional int32 m_revivemaxtimes = 13;
  if (has_m_revivemaxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_revivemaxtimes(), output);
  }

  // optional int32 m_teamobjectid = 14;
  if (has_m_teamobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_teamobjectid(), output);
  }

  // optional string m_gradecondition = 15;
  if (has_m_gradecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gradecondition().data(), this->m_gradecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->m_gradecondition(), output);
  }

  // optional int64 m_sweeprewardboxid = 16;
  if (has_m_sweeprewardboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->m_sweeprewardboxid(), output);
  }

  // optional int32 m_sweeprewardexp = 17;
  if (has_m_sweeprewardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_sweeprewardexp(), output);
  }

  // optional string m_trackpoint = 18;
  if (has_m_trackpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_trackpoint().data(), this->m_trackpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->m_trackpoint(), output);
  }

  // optional string m_pathofmonster = 19;
  if (has_m_pathofmonster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pathofmonster().data(), this->m_pathofmonster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->m_pathofmonster(), output);
  }

  // optional int32 m_ispatrol = 20;
  if (has_m_ispatrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_ispatrol(), output);
  }

  // optional int32 m_sweeptype = 21;
  if (has_m_sweeptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->m_sweeptype(), output);
  }

  // repeated int32 m_box = 22;
  for (int i = 0; i < this->m_box_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->m_box(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupDup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_scripid = 2;
  if (has_m_scripid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_scripid(), target);
  }

  // optional int32 m_scriptype = 3;
  if (has_m_scriptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_scriptype(), target);
  }

  // optional int32 m_duplevel = 4;
  if (has_m_duplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_duplevel(), target);
  }

  // optional int32 m_groupid = 5;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_groupid(), target);
  }

  // optional int32 m_layer = 6;
  if (has_m_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_layer(), target);
  }

  // optional int32 m_duplicatetype = 7;
  if (has_m_duplicatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_duplicatetype(), target);
  }

  // optional int64 m_mapid = 8;
  if (has_m_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->m_mapid(), target);
  }

  // optional int32 m_levellimit = 9;
  if (has_m_levellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_levellimit(), target);
  }

  // optional int32 m_pre = 10;
  if (has_m_pre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_pre(), target);
  }

  // optional int32 m_isautofight = 11;
  if (has_m_isautofight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_isautofight(), target);
  }

  // optional string m_condition = 12;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_condition().data(), this->m_condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->m_condition(), target);
  }

  // optional int32 m_revivemaxtimes = 13;
  if (has_m_revivemaxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_revivemaxtimes(), target);
  }

  // optional int32 m_teamobjectid = 14;
  if (has_m_teamobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_teamobjectid(), target);
  }

  // optional string m_gradecondition = 15;
  if (has_m_gradecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gradecondition().data(), this->m_gradecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->m_gradecondition(), target);
  }

  // optional int64 m_sweeprewardboxid = 16;
  if (has_m_sweeprewardboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->m_sweeprewardboxid(), target);
  }

  // optional int32 m_sweeprewardexp = 17;
  if (has_m_sweeprewardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_sweeprewardexp(), target);
  }

  // optional string m_trackpoint = 18;
  if (has_m_trackpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_trackpoint().data(), this->m_trackpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->m_trackpoint(), target);
  }

  // optional string m_pathofmonster = 19;
  if (has_m_pathofmonster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pathofmonster().data(), this->m_pathofmonster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->m_pathofmonster(), target);
  }

  // optional int32 m_ispatrol = 20;
  if (has_m_ispatrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_ispatrol(), target);
  }

  // optional int32 m_sweeptype = 21;
  if (has_m_sweeptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->m_sweeptype(), target);
  }

  // repeated int32 m_box = 22;
  for (int i = 0; i < this->m_box_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->m_box(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupDup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_scripid = 2;
    if (has_m_scripid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scripid());
    }

    // optional int32 m_scriptype = 3;
    if (has_m_scriptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scriptype());
    }

    // optional int32 m_duplevel = 4;
    if (has_m_duplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_duplevel());
    }

    // optional int32 m_groupid = 5;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_layer = 6;
    if (has_m_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_layer());
    }

    // optional int32 m_duplicatetype = 7;
    if (has_m_duplicatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_duplicatetype());
    }

    // optional int64 m_mapid = 8;
    if (has_m_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_mapid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_levellimit = 9;
    if (has_m_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_levellimit());
    }

    // optional int32 m_pre = 10;
    if (has_m_pre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pre());
    }

    // optional int32 m_isautofight = 11;
    if (has_m_isautofight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isautofight());
    }

    // optional string m_condition = 12;
    if (has_m_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_condition());
    }

    // optional int32 m_revivemaxtimes = 13;
    if (has_m_revivemaxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_revivemaxtimes());
    }

    // optional int32 m_teamobjectid = 14;
    if (has_m_teamobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_teamobjectid());
    }

    // optional string m_gradecondition = 15;
    if (has_m_gradecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gradecondition());
    }

    // optional int64 m_sweeprewardboxid = 16;
    if (has_m_sweeprewardboxid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_sweeprewardboxid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_sweeprewardexp = 17;
    if (has_m_sweeprewardexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sweeprewardexp());
    }

    // optional string m_trackpoint = 18;
    if (has_m_trackpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_trackpoint());
    }

    // optional string m_pathofmonster = 19;
    if (has_m_pathofmonster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_pathofmonster());
    }

    // optional int32 m_ispatrol = 20;
    if (has_m_ispatrol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ispatrol());
    }

    // optional int32 m_sweeptype = 21;
    if (has_m_sweeptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sweeptype());
    }

  }
  // repeated int32 m_box = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_box_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_box(i));
    }
    total_size += 2 * this->m_box_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupDup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupDup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupDup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupDup::MergeFrom(const E_DupDup& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_box_.MergeFrom(from.m_box_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_scripid()) {
      set_m_scripid(from.m_scripid());
    }
    if (from.has_m_scriptype()) {
      set_m_scriptype(from.m_scriptype());
    }
    if (from.has_m_duplevel()) {
      set_m_duplevel(from.m_duplevel());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_layer()) {
      set_m_layer(from.m_layer());
    }
    if (from.has_m_duplicatetype()) {
      set_m_duplicatetype(from.m_duplicatetype());
    }
    if (from.has_m_mapid()) {
      set_m_mapid(from.m_mapid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_levellimit()) {
      set_m_levellimit(from.m_levellimit());
    }
    if (from.has_m_pre()) {
      set_m_pre(from.m_pre());
    }
    if (from.has_m_isautofight()) {
      set_m_isautofight(from.m_isautofight());
    }
    if (from.has_m_condition()) {
      set_m_condition(from.m_condition());
    }
    if (from.has_m_revivemaxtimes()) {
      set_m_revivemaxtimes(from.m_revivemaxtimes());
    }
    if (from.has_m_teamobjectid()) {
      set_m_teamobjectid(from.m_teamobjectid());
    }
    if (from.has_m_gradecondition()) {
      set_m_gradecondition(from.m_gradecondition());
    }
    if (from.has_m_sweeprewardboxid()) {
      set_m_sweeprewardboxid(from.m_sweeprewardboxid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_sweeprewardexp()) {
      set_m_sweeprewardexp(from.m_sweeprewardexp());
    }
    if (from.has_m_trackpoint()) {
      set_m_trackpoint(from.m_trackpoint());
    }
    if (from.has_m_pathofmonster()) {
      set_m_pathofmonster(from.m_pathofmonster());
    }
    if (from.has_m_ispatrol()) {
      set_m_ispatrol(from.m_ispatrol());
    }
    if (from.has_m_sweeptype()) {
      set_m_sweeptype(from.m_sweeptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupDup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupDup::CopyFrom(const E_DupDup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupDup::IsInitialized() const {

  return true;
}

void E_DupDup::Swap(E_DupDup* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_scripid_, other->m_scripid_);
    std::swap(m_scriptype_, other->m_scriptype_);
    std::swap(m_duplevel_, other->m_duplevel_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_layer_, other->m_layer_);
    std::swap(m_duplicatetype_, other->m_duplicatetype_);
    std::swap(m_mapid_, other->m_mapid_);
    std::swap(m_levellimit_, other->m_levellimit_);
    std::swap(m_pre_, other->m_pre_);
    std::swap(m_isautofight_, other->m_isautofight_);
    std::swap(m_condition_, other->m_condition_);
    std::swap(m_revivemaxtimes_, other->m_revivemaxtimes_);
    std::swap(m_teamobjectid_, other->m_teamobjectid_);
    std::swap(m_gradecondition_, other->m_gradecondition_);
    std::swap(m_sweeprewardboxid_, other->m_sweeprewardboxid_);
    std::swap(m_sweeprewardexp_, other->m_sweeprewardexp_);
    std::swap(m_trackpoint_, other->m_trackpoint_);
    std::swap(m_pathofmonster_, other->m_pathofmonster_);
    std::swap(m_ispatrol_, other->m_ispatrol_);
    std::swap(m_sweeptype_, other->m_sweeptype_);
    m_box_.Swap(&other->m_box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupDup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupDup_descriptor_;
  metadata.reflection = E_DupDup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupDup::kEDupDupListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupDup::Sheet_DupDup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupDup::InitAsDefaultInstance() {
}

Sheet_DupDup::Sheet_DupDup(const Sheet_DupDup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupDup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupDup::~Sheet_DupDup() {
  SharedDtor();
}

void Sheet_DupDup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupDup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupDup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupDup_descriptor_;
}

const Sheet_DupDup& Sheet_DupDup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

Sheet_DupDup* Sheet_DupDup::default_instance_ = NULL;

Sheet_DupDup* Sheet_DupDup::New() const {
  return new Sheet_DupDup;
}

void Sheet_DupDup::Clear() {
  e_dupdup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupDup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupDup E_DupDup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupDup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dupdup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupDup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupDup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupDup E_DupDup_List = 1;
  for (int i = 0; i < this->e_dupdup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dupdup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupDup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupDup E_DupDup_List = 1;
  for (int i = 0; i < this->e_dupdup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dupdup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupDup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupDup E_DupDup_List = 1;
  total_size += 1 * this->e_dupdup_list_size();
  for (int i = 0; i < this->e_dupdup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dupdup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupDup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupDup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupDup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupDup::MergeFrom(const Sheet_DupDup& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dupdup_list_.MergeFrom(from.e_dupdup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupDup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupDup::CopyFrom(const Sheet_DupDup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupDup::IsInitialized() const {

  return true;
}

void Sheet_DupDup::Swap(Sheet_DupDup* other) {
  if (other != this) {
    e_dupdup_list_.Swap(&other->e_dupdup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupDup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupDup_descriptor_;
  metadata.reflection = Sheet_DupDup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupTowerreward::kMIdFieldNumber;
const int E_DupTowerreward::kMTypeFieldNumber;
const int E_DupTowerreward::kMCondFieldNumber;
const int E_DupTowerreward::kMBoxidFieldNumber;
#endif  // !_MSC_VER

E_DupTowerreward::E_DupTowerreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupTowerreward::InitAsDefaultInstance() {
}

E_DupTowerreward::E_DupTowerreward(const E_DupTowerreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupTowerreward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_cond_ = 0;
  m_boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupTowerreward::~E_DupTowerreward() {
  SharedDtor();
}

void E_DupTowerreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_DupTowerreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupTowerreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupTowerreward_descriptor_;
}

const E_DupTowerreward& E_DupTowerreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

E_DupTowerreward* E_DupTowerreward::default_instance_ = NULL;

E_DupTowerreward* E_DupTowerreward::New() const {
  return new E_DupTowerreward;
}

void E_DupTowerreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_cond_ = 0;
    m_boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupTowerreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_cond;
        break;
      }

      // optional int32 m_cond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cond_)));
          set_has_m_cond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_boxid;
        break;
      }

      // optional int32 m_boxid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupTowerreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_cond = 3;
  if (has_m_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_cond(), output);
  }

  // optional int32 m_boxid = 4;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupTowerreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_cond = 3;
  if (has_m_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_cond(), target);
  }

  // optional int32 m_boxid = 4;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupTowerreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_cond = 3;
    if (has_m_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cond());
    }

    // optional int32 m_boxid = 4;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupTowerreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupTowerreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupTowerreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupTowerreward::MergeFrom(const E_DupTowerreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_cond()) {
      set_m_cond(from.m_cond());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupTowerreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupTowerreward::CopyFrom(const E_DupTowerreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupTowerreward::IsInitialized() const {

  return true;
}

void E_DupTowerreward::Swap(E_DupTowerreward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_cond_, other->m_cond_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupTowerreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupTowerreward_descriptor_;
  metadata.reflection = E_DupTowerreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupTowerreward::kEDupTowerrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupTowerreward::Sheet_DupTowerreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupTowerreward::InitAsDefaultInstance() {
}

Sheet_DupTowerreward::Sheet_DupTowerreward(const Sheet_DupTowerreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupTowerreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupTowerreward::~Sheet_DupTowerreward() {
  SharedDtor();
}

void Sheet_DupTowerreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupTowerreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupTowerreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupTowerreward_descriptor_;
}

const Sheet_DupTowerreward& Sheet_DupTowerreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

Sheet_DupTowerreward* Sheet_DupTowerreward::default_instance_ = NULL;

Sheet_DupTowerreward* Sheet_DupTowerreward::New() const {
  return new Sheet_DupTowerreward;
}

void Sheet_DupTowerreward::Clear() {
  e_duptowerreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupTowerreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupTowerreward E_DupTowerreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupTowerreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_duptowerreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupTowerreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupTowerreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupTowerreward E_DupTowerreward_List = 1;
  for (int i = 0; i < this->e_duptowerreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_duptowerreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupTowerreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupTowerreward E_DupTowerreward_List = 1;
  for (int i = 0; i < this->e_duptowerreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_duptowerreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupTowerreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupTowerreward E_DupTowerreward_List = 1;
  total_size += 1 * this->e_duptowerreward_list_size();
  for (int i = 0; i < this->e_duptowerreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_duptowerreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupTowerreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupTowerreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupTowerreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupTowerreward::MergeFrom(const Sheet_DupTowerreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_duptowerreward_list_.MergeFrom(from.e_duptowerreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupTowerreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupTowerreward::CopyFrom(const Sheet_DupTowerreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupTowerreward::IsInitialized() const {

  return true;
}

void Sheet_DupTowerreward::Swap(Sheet_DupTowerreward* other) {
  if (other != this) {
    e_duptowerreward_list_.Swap(&other->e_duptowerreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupTowerreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupTowerreward_descriptor_;
  metadata.reflection = Sheet_DupTowerreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupGroup::kMIdFieldNumber;
const int E_DupGroup::kMNameFieldNumber;
const int E_DupGroup::kMPrivilegetypeFieldNumber;
const int E_DupGroup::kMDynamiclevelFieldNumber;
const int E_DupGroup::kMGrouptimestypeFieldNumber;
const int E_DupGroup::kMGrouptimesFieldNumber;
const int E_DupGroup::kMEnteritemidFieldNumber;
const int E_DupGroup::kMSweepconditionFieldNumber;
const int E_DupGroup::kMMergeconditionFieldNumber;
const int E_DupGroup::kMAdditemidFieldNumber;
const int E_DupGroup::kMBuytypeFieldNumber;
const int E_DupGroup::kMBuyitemidFieldNumber;
const int E_DupGroup::kMBuycostFieldNumber;
const int E_DupGroup::kMCountdownFieldNumber;
const int E_DupGroup::kMEnddownFieldNumber;
const int E_DupGroup::kMAccountdownFieldNumber;
const int E_DupGroup::kMFuncionidFieldNumber;
#endif  // !_MSC_VER

E_DupGroup::E_DupGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupGroup::InitAsDefaultInstance() {
}

E_DupGroup::E_DupGroup(const E_DupGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupGroup::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_privilegetype_ = 0;
  m_dynamiclevel_ = 0;
  m_grouptimestype_ = 0;
  m_grouptimes_ = 0;
  m_enteritemid_ = 0;
  m_sweepcondition_ = 0;
  m_mergecondition_ = 0;
  m_additemid_ = 0;
  m_buytype_ = 0;
  m_buyitemid_ = 0;
  m_buycost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_countdown_ = 0;
  m_enddown_ = 0;
  m_accountdown_ = 0;
  m_funcionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupGroup::~E_DupGroup() {
  SharedDtor();
}

void E_DupGroup::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_buycost_ != &::google::protobuf::internal::kEmptyString) {
    delete m_buycost_;
  }
  if (this != default_instance_) {
  }
}

void E_DupGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupGroup_descriptor_;
}

const E_DupGroup& E_DupGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

E_DupGroup* E_DupGroup::default_instance_ = NULL;

E_DupGroup* E_DupGroup::New() const {
  return new E_DupGroup;
}

void E_DupGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_privilegetype_ = 0;
    m_dynamiclevel_ = 0;
    m_grouptimestype_ = 0;
    m_grouptimes_ = 0;
    m_enteritemid_ = 0;
    m_sweepcondition_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_mergecondition_ = 0;
    m_additemid_ = 0;
    m_buytype_ = 0;
    m_buyitemid_ = 0;
    if (has_m_buycost()) {
      if (m_buycost_ != &::google::protobuf::internal::kEmptyString) {
        m_buycost_->clear();
      }
    }
    m_countdown_ = 0;
    m_enddown_ = 0;
    m_accountdown_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_funcionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_privilegetype;
        break;
      }

      // optional int32 m_privilegetype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_privilegetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_privilegetype_)));
          set_has_m_privilegetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_dynamiclevel;
        break;
      }

      // optional int32 m_dynamiclevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dynamiclevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dynamiclevel_)));
          set_has_m_dynamiclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_grouptimestype;
        break;
      }

      // optional int32 m_grouptimestype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_grouptimestype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grouptimestype_)));
          set_has_m_grouptimestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_grouptimes;
        break;
      }

      // optional int32 m_grouptimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_grouptimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grouptimes_)));
          set_has_m_grouptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_enteritemid;
        break;
      }

      // optional int32 m_enteritemid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_enteritemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_enteritemid_)));
          set_has_m_enteritemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_sweepcondition;
        break;
      }

      // optional int32 m_sweepcondition = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sweepcondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sweepcondition_)));
          set_has_m_sweepcondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_mergecondition;
        break;
      }

      // optional int32 m_mergecondition = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mergecondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mergecondition_)));
          set_has_m_mergecondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_additemid;
        break;
      }

      // optional int32 m_additemid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_additemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_additemid_)));
          set_has_m_additemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_buytype;
        break;
      }

      // optional int32 m_buytype = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buytype_)));
          set_has_m_buytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_buyitemid;
        break;
      }

      // optional int32 m_buyitemid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buyitemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buyitemid_)));
          set_has_m_buyitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_buycost;
        break;
      }

      // optional string m_buycost = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_buycost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_buycost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_buycost().data(), this->m_buycost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_countdown;
        break;
      }

      // optional int32 m_countdown = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_countdown_)));
          set_has_m_countdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_enddown;
        break;
      }

      // optional int32 m_enddown = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_enddown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_enddown_)));
          set_has_m_enddown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_accountdown;
        break;
      }

      // optional int32 m_accountdown = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_accountdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountdown_)));
          set_has_m_accountdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_funcionid;
        break;
      }

      // optional int32 m_funcionid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_funcionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_funcionid_)));
          set_has_m_funcionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_privilegetype = 3;
  if (has_m_privilegetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_privilegetype(), output);
  }

  // optional int32 m_dynamiclevel = 4;
  if (has_m_dynamiclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_dynamiclevel(), output);
  }

  // optional int32 m_grouptimestype = 5;
  if (has_m_grouptimestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_grouptimestype(), output);
  }

  // optional int32 m_grouptimes = 6;
  if (has_m_grouptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_grouptimes(), output);
  }

  // optional int32 m_enteritemid = 7;
  if (has_m_enteritemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_enteritemid(), output);
  }

  // optional int32 m_sweepcondition = 8;
  if (has_m_sweepcondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_sweepcondition(), output);
  }

  // optional int32 m_mergecondition = 9;
  if (has_m_mergecondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_mergecondition(), output);
  }

  // optional int32 m_additemid = 10;
  if (has_m_additemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_additemid(), output);
  }

  // optional int32 m_buytype = 11;
  if (has_m_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_buytype(), output);
  }

  // optional int32 m_buyitemid = 12;
  if (has_m_buyitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_buyitemid(), output);
  }

  // optional string m_buycost = 13;
  if (has_m_buycost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_buycost().data(), this->m_buycost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_buycost(), output);
  }

  // optional int32 m_countdown = 14;
  if (has_m_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_countdown(), output);
  }

  // optional int32 m_enddown = 15;
  if (has_m_enddown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_enddown(), output);
  }

  // optional int32 m_accountdown = 16;
  if (has_m_accountdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_accountdown(), output);
  }

  // optional int32 m_funcionid = 17;
  if (has_m_funcionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_funcionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_privilegetype = 3;
  if (has_m_privilegetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_privilegetype(), target);
  }

  // optional int32 m_dynamiclevel = 4;
  if (has_m_dynamiclevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_dynamiclevel(), target);
  }

  // optional int32 m_grouptimestype = 5;
  if (has_m_grouptimestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_grouptimestype(), target);
  }

  // optional int32 m_grouptimes = 6;
  if (has_m_grouptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_grouptimes(), target);
  }

  // optional int32 m_enteritemid = 7;
  if (has_m_enteritemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_enteritemid(), target);
  }

  // optional int32 m_sweepcondition = 8;
  if (has_m_sweepcondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_sweepcondition(), target);
  }

  // optional int32 m_mergecondition = 9;
  if (has_m_mergecondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_mergecondition(), target);
  }

  // optional int32 m_additemid = 10;
  if (has_m_additemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_additemid(), target);
  }

  // optional int32 m_buytype = 11;
  if (has_m_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_buytype(), target);
  }

  // optional int32 m_buyitemid = 12;
  if (has_m_buyitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_buyitemid(), target);
  }

  // optional string m_buycost = 13;
  if (has_m_buycost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_buycost().data(), this->m_buycost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->m_buycost(), target);
  }

  // optional int32 m_countdown = 14;
  if (has_m_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_countdown(), target);
  }

  // optional int32 m_enddown = 15;
  if (has_m_enddown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_enddown(), target);
  }

  // optional int32 m_accountdown = 16;
  if (has_m_accountdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_accountdown(), target);
  }

  // optional int32 m_funcionid = 17;
  if (has_m_funcionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_funcionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_privilegetype = 3;
    if (has_m_privilegetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_privilegetype());
    }

    // optional int32 m_dynamiclevel = 4;
    if (has_m_dynamiclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dynamiclevel());
    }

    // optional int32 m_grouptimestype = 5;
    if (has_m_grouptimestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grouptimestype());
    }

    // optional int32 m_grouptimes = 6;
    if (has_m_grouptimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grouptimes());
    }

    // optional int32 m_enteritemid = 7;
    if (has_m_enteritemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_enteritemid());
    }

    // optional int32 m_sweepcondition = 8;
    if (has_m_sweepcondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sweepcondition());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_mergecondition = 9;
    if (has_m_mergecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mergecondition());
    }

    // optional int32 m_additemid = 10;
    if (has_m_additemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_additemid());
    }

    // optional int32 m_buytype = 11;
    if (has_m_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buytype());
    }

    // optional int32 m_buyitemid = 12;
    if (has_m_buyitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buyitemid());
    }

    // optional string m_buycost = 13;
    if (has_m_buycost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_buycost());
    }

    // optional int32 m_countdown = 14;
    if (has_m_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_countdown());
    }

    // optional int32 m_enddown = 15;
    if (has_m_enddown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_enddown());
    }

    // optional int32 m_accountdown = 16;
    if (has_m_accountdown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountdown());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_funcionid = 17;
    if (has_m_funcionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_funcionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupGroup::MergeFrom(const E_DupGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_privilegetype()) {
      set_m_privilegetype(from.m_privilegetype());
    }
    if (from.has_m_dynamiclevel()) {
      set_m_dynamiclevel(from.m_dynamiclevel());
    }
    if (from.has_m_grouptimestype()) {
      set_m_grouptimestype(from.m_grouptimestype());
    }
    if (from.has_m_grouptimes()) {
      set_m_grouptimes(from.m_grouptimes());
    }
    if (from.has_m_enteritemid()) {
      set_m_enteritemid(from.m_enteritemid());
    }
    if (from.has_m_sweepcondition()) {
      set_m_sweepcondition(from.m_sweepcondition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_mergecondition()) {
      set_m_mergecondition(from.m_mergecondition());
    }
    if (from.has_m_additemid()) {
      set_m_additemid(from.m_additemid());
    }
    if (from.has_m_buytype()) {
      set_m_buytype(from.m_buytype());
    }
    if (from.has_m_buyitemid()) {
      set_m_buyitemid(from.m_buyitemid());
    }
    if (from.has_m_buycost()) {
      set_m_buycost(from.m_buycost());
    }
    if (from.has_m_countdown()) {
      set_m_countdown(from.m_countdown());
    }
    if (from.has_m_enddown()) {
      set_m_enddown(from.m_enddown());
    }
    if (from.has_m_accountdown()) {
      set_m_accountdown(from.m_accountdown());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_funcionid()) {
      set_m_funcionid(from.m_funcionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupGroup::CopyFrom(const E_DupGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupGroup::IsInitialized() const {

  return true;
}

void E_DupGroup::Swap(E_DupGroup* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_privilegetype_, other->m_privilegetype_);
    std::swap(m_dynamiclevel_, other->m_dynamiclevel_);
    std::swap(m_grouptimestype_, other->m_grouptimestype_);
    std::swap(m_grouptimes_, other->m_grouptimes_);
    std::swap(m_enteritemid_, other->m_enteritemid_);
    std::swap(m_sweepcondition_, other->m_sweepcondition_);
    std::swap(m_mergecondition_, other->m_mergecondition_);
    std::swap(m_additemid_, other->m_additemid_);
    std::swap(m_buytype_, other->m_buytype_);
    std::swap(m_buyitemid_, other->m_buyitemid_);
    std::swap(m_buycost_, other->m_buycost_);
    std::swap(m_countdown_, other->m_countdown_);
    std::swap(m_enddown_, other->m_enddown_);
    std::swap(m_accountdown_, other->m_accountdown_);
    std::swap(m_funcionid_, other->m_funcionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupGroup_descriptor_;
  metadata.reflection = E_DupGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupGroup::kEDupGroupListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupGroup::Sheet_DupGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupGroup::InitAsDefaultInstance() {
}

Sheet_DupGroup::Sheet_DupGroup(const Sheet_DupGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupGroup::~Sheet_DupGroup() {
  SharedDtor();
}

void Sheet_DupGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupGroup_descriptor_;
}

const Sheet_DupGroup& Sheet_DupGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

Sheet_DupGroup* Sheet_DupGroup::default_instance_ = NULL;

Sheet_DupGroup* Sheet_DupGroup::New() const {
  return new Sheet_DupGroup;
}

void Sheet_DupGroup::Clear() {
  e_dupgroup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupGroup E_DupGroup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupGroup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dupgroup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupGroup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupGroup E_DupGroup_List = 1;
  for (int i = 0; i < this->e_dupgroup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dupgroup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupGroup E_DupGroup_List = 1;
  for (int i = 0; i < this->e_dupgroup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dupgroup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupGroup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupGroup E_DupGroup_List = 1;
  total_size += 1 * this->e_dupgroup_list_size();
  for (int i = 0; i < this->e_dupgroup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dupgroup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupGroup::MergeFrom(const Sheet_DupGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dupgroup_list_.MergeFrom(from.e_dupgroup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupGroup::CopyFrom(const Sheet_DupGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupGroup::IsInitialized() const {

  return true;
}

void Sheet_DupGroup::Swap(Sheet_DupGroup* other) {
  if (other != this) {
    e_dupgroup_list_.Swap(&other->e_dupgroup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupGroup_descriptor_;
  metadata.reflection = Sheet_DupGroup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
