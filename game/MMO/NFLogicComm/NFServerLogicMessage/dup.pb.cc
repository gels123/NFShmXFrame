// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dup.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* dupBPlevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dupBPlevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_dupBPlevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_dupBPlevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* dupdup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dupdup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_dupdup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_dupdup_reflection_ = NULL;
const ::google::protobuf::Descriptor* duptowerReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duptowerReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_duptowerReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_duptowerReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* dupgroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dupgroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_dupgroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_dupgroup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dup_2eproto() {
  protobuf_AddDesc_dup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dup.proto");
  GOOGLE_CHECK(file != NULL);
  dupBPlevel_descriptor_ = file->message_type(0);
  static const int dupBPlevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupBPlevel, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupBPlevel, bgdup_),
  };
  dupBPlevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dupBPlevel_descriptor_,
      dupBPlevel::default_instance_,
      dupBPlevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupBPlevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupBPlevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dupBPlevel));
  Sheet_dupBPlevel_descriptor_ = file->message_type(1);
  static const int Sheet_dupBPlevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dupBPlevel, dupbplevel_list_),
  };
  Sheet_dupBPlevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_dupBPlevel_descriptor_,
      Sheet_dupBPlevel::default_instance_,
      Sheet_dupBPlevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dupBPlevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dupBPlevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_dupBPlevel));
  dupdup_descriptor_ = file->message_type(2);
  static const int dupdup_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, scripid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, scriptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, duplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, duplicatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, pre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, isautofight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, revivemaxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, teamobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, gradecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, sweeprewardboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, sweeprewardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, trackpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, pathofmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, ispatrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, sweeptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, box_),
  };
  dupdup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dupdup_descriptor_,
      dupdup::default_instance_,
      dupdup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupdup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dupdup));
  Sheet_dupdup_descriptor_ = file->message_type(3);
  static const int Sheet_dupdup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dupdup, dupdup_list_),
  };
  Sheet_dupdup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_dupdup_descriptor_,
      Sheet_dupdup::default_instance_,
      Sheet_dupdup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dupdup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dupdup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_dupdup));
  duptowerReward_descriptor_ = file->message_type(4);
  static const int duptowerReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duptowerReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duptowerReward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duptowerReward, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duptowerReward, boxid_),
  };
  duptowerReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duptowerReward_descriptor_,
      duptowerReward::default_instance_,
      duptowerReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duptowerReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duptowerReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duptowerReward));
  Sheet_duptowerReward_descriptor_ = file->message_type(5);
  static const int Sheet_duptowerReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duptowerReward, duptowerreward_list_),
  };
  Sheet_duptowerReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_duptowerReward_descriptor_,
      Sheet_duptowerReward::default_instance_,
      Sheet_duptowerReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duptowerReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duptowerReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_duptowerReward));
  dupgroup_descriptor_ = file->message_type(6);
  static const int dupgroup_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, privilegetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, dynamiclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, grouptimestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, grouptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, enteritemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, sweepcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, mergecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, additemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, buytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, buyitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, buycost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, enddown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, accountdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, funcionid_),
  };
  dupgroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dupgroup_descriptor_,
      dupgroup::default_instance_,
      dupgroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dupgroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dupgroup));
  Sheet_dupgroup_descriptor_ = file->message_type(7);
  static const int Sheet_dupgroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dupgroup, dupgroup_list_),
  };
  Sheet_dupgroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_dupgroup_descriptor_,
      Sheet_dupgroup::default_instance_,
      Sheet_dupgroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dupgroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dupgroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_dupgroup));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dupBPlevel_descriptor_, &dupBPlevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_dupBPlevel_descriptor_, &Sheet_dupBPlevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dupdup_descriptor_, &dupdup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_dupdup_descriptor_, &Sheet_dupdup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duptowerReward_descriptor_, &duptowerReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_duptowerReward_descriptor_, &Sheet_duptowerReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dupgroup_descriptor_, &dupgroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_dupgroup_descriptor_, &Sheet_dupgroup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dup_2eproto() {
  delete dupBPlevel::default_instance_;
  delete dupBPlevel_reflection_;
  delete Sheet_dupBPlevel::default_instance_;
  delete Sheet_dupBPlevel_reflection_;
  delete dupdup::default_instance_;
  delete dupdup_reflection_;
  delete Sheet_dupdup::default_instance_;
  delete Sheet_dupdup_reflection_;
  delete duptowerReward::default_instance_;
  delete duptowerReward_reflection_;
  delete Sheet_duptowerReward::default_instance_;
  delete Sheet_duptowerReward_reflection_;
  delete dupgroup::default_instance_;
  delete dupgroup_reflection_;
  delete Sheet_dupgroup::default_instance_;
  delete Sheet_dupgroup_reflection_;
}

void protobuf_AddDesc_dup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tdup.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\"F\n\ndupBPlevel\022\026\n\002lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347"
    "\272\247\022 \n\005Bgdup\030\002 \003(\003B\021\302\377\024\t\345\205\253\345\215\246\346\234\254\210\301\024\005\"H\n\020"
    "Sheet_dupBPlevel\0224\n\017dupBPlevel_List\030\001 \003("
    "\0132\024.proto_ff.dupBPlevelB\005\210\301\024\314\010\"\246\007\n\006dupdu"
    "p\022\030\n\002ID\030\001 \001(\005B\014\302\377\024\010\345\211\257\346\234\254ID\022#\n\007scripID\030\002"
    " \001(\005B\022\302\377\024\016\345\210\267\346\200\252\350\204\232\346\234\254ID\022)\n\tscripType\030\003 "
    "\001(\005B\026\302\377\024\022\345\210\267\346\200\252\350\204\232\346\234\254\347\261\273\345\236\213\022\"\n\010dupLevel\030"
    "\004 \001(\005B\020\302\377\024\014\345\211\257\346\234\254\347\255\211\347\272\247\022&\n\007groupID\030\005 \001(\005"
    "B\025\302\377\024\021\346\211\200\345\261\236\345\211\257\346\234\254\347\273\204ID\022\031\n\005layer\030\006 \001(\005B\n"
    "\302\377\024\006\345\261\202\347\272\247\022-\n\rduplicateType\030\007 \001(\005B\026\302\377\024\022\345"
    "\211\257\346\234\254\345\206\205\345\256\271\347\261\273\345\236\213\022\033\n\005mapID\030\010 \001(\003B\014\302\377\024\010\345\234"
    "\272\346\231\257ID\022*\n\nlevelLimit\030\t \001(\005B\026\302\377\024\022\347\255\211\347\272\247\350\246"
    "\201\346\261\202\344\270\213\351\231\220\022#\n\003pre\030\n \001(\005B\026\302\377\024\022\345\211\215\347\275\256\345\211\257\346\234"
    "\254\350\246\201\346\261\202\0221\n\013isAutoFight\030\013 \001(\005B\034\302\377\024\030\346\230\257\345\220\246"
    "\345\205\201\350\256\270\350\207\252\345\212\250\346\210\230\346\226\227\0223\n\tcondition\030\014 \001(\tB \302"
    "\377\024\030\345\211\257\346\234\254\350\203\234\345\210\251\346\235\241\344\273\266\347\261\273\345\236\213\220\301\024<\022.\n\016reviv"
    "eMaxTimes\030\r \001(\005B\026\302\377\024\022\345\244\215\346\264\273\346\254\241\346\225\260\344\270\212\351\231\220\022"
    "(\n\014TeamObjectID\030\016 \001(\005B\022\302\377\024\016\347\273\204\351\230\237\347\233\256\346\240\207I"
    "D\022,\n\016gradeCondition\030\017 \001(\tB\024\302\377\024\014\346\230\237\347\272\247\346\227\266"
    "\351\227\264\220\301\024<\022/\n\020sweepRewardBoxID\030\020 \001(\003B\025\302\377\024\021\346"
    "\211\253\350\215\241\345\245\226\345\212\261BOXID\022.\n\016sweepRewardExp\030\021 \001(\005"
    "B\026\302\377\024\022\346\211\253\350\215\241\347\273\217\351\252\214\345\245\226\345\212\261\022+\n\ntrackpoint\030\022"
    " \001(\tB\027\302\377\024\017\345\211\257\346\234\254\345\257\273\350\267\257\347\202\271\220\301\024<\022:\n\rpathOfm"
    "onster\030\023 \001(\tB#\302\377\024\033\345\211\257\346\234\254\345\257\273\350\267\257\347\202\271\345\257\271\345\272\224\346"
    "\200\252\347\211\251\220\301\024<\022+\n\010isPatrol\030\024 \001(\005B\031\302\377\024\025\345\257\273\350\267\257\345"
    "\211\215\346\230\257\345\220\246\345\267\241\346\225\214\022#\n\tsweepType\030\025 \001(\005B\020\302\377\024\014\346"
    "\211\253\350\215\241\347\261\273\345\236\213\022\"\n\003box\030\026 \003(\005B\025\302\377\024\r\345\245\226\345\212\2619999"
    "\347\273\204\210\301\024\003\";\n\014Sheet_dupdup\022+\n\013dupdup_List\030\001"
    " \003(\0132\020.proto_ff.dupdupB\004\210\301\024P\"v\n\016duptower"
    "Reward\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\030\n\004type\030\002 \001(\005"
    "B\n\302\377\024\006\347\261\273\345\236\213\022\036\n\004cond\030\003 \001(\005B\020\302\377\024\014\351\242\206\345\217\226\346\235"
    "\241\344\273\266\022\026\n\005boxID\030\004 \001(\005B\007\302\377\024\003box\"S\n\024Sheet_du"
    "ptowerReward\022;\n\023duptowerReward_List\030\001 \003("
    "\0132\030.proto_ff.duptowerRewardB\004\210\301\024\024\"\322\005\n\010du"
    "pgroup\022\033\n\002id\030\001 \001(\005B\017\302\377\024\013\345\211\257\346\234\254\347\273\204ID\022\"\n\004n"
    "ame\030\002 \001(\tB\024\302\377\024\014\345\211\257\346\234\254\347\273\204\345\220\215\220\301\024<\022\'\n\rprivi"
    "legeType\030\003 \001(\005B\020\302\377\024\014\347\211\271\346\235\203\347\261\273\345\236\213\022,\n\014dyna"
    "miclevel\030\004 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\345\212\250\346\200\201\347\255\211\347\272\247\022+"
    "\n\016groupTimesType\030\005 \001(\005B\023\302\377\024\017\347\273\204\346\254\241\346\225\260\347\261\273"
    "\345\236\213\022\'\n\ngroupTimes\030\006 \001(\005B\023\302\377\024\017\346\254\241\346\225\260\344\270\212\351\231"
    "\220\345\200\274\022+\n\013enterItemID\030\007 \001(\005B\026\302\377\024\022\345\211\257\346\234\254\350\277\233"
    "\345\205\245\351\201\223\345\205\267\022(\n\016sweepCondition\030\010 \001(\005B\020\302\377\024\014\346"
    "\211\253\350\215\241\346\235\241\344\273\266\022(\n\016mergeCondition\030\t \001(\005B\020\302\377\024"
    "\014\345\220\210\345\271\266\346\235\241\344\273\266\022+\n\taddItemID\030\n \001(\005B\030\302\377\024\024\345\242"
    "\236\345\212\240\346\254\241\346\225\260\347\211\251\345\223\201ID\022-\n\007buyType\030\013 \001(\005B\034\302\377\024"
    "\030\350\264\255\344\271\260\346\254\241\346\225\260\346\266\210\350\200\227\350\264\247\345\270\201\022/\n\tbuyItemId\030\014"
    " \001(\005B\034\302\377\024\030\350\264\255\344\271\260\346\254\241\346\225\260\346\266\210\350\200\227\347\211\251\345\223\201\0221\n\007bu"
    "yCost\030\r \001(\tB \302\377\024\030\350\264\255\344\271\260\350\277\233\345\205\245\346\254\241\346\225\260\346\266\210\350\200"
    "\227\220\301\024<\022&\n\tcountDown\030\016 \001(\005B\023\302\377\024\017\345\200\222\350\256\241\346\227\266\346"
    "\227\266\351\227\264\022$\n\007endDown\030\017 \001(\005B\023\302\377\024\017\347\273\223\346\235\237\345\200\222\350\256\241"
    "\346\227\266\022(\n\013accountDown\030\020 \001(\005B\023\302\377\024\017\347\273\223\347\256\227\345\200\222\350"
    "\256\241\346\227\266\022\037\n\tfuncionID\030\021 \001(\005B\014\302\377\024\010\345\212\237\350\203\275ID\"A"
    "\n\016Sheet_dupgroup\022/\n\rdupgroup_List\030\001 \003(\0132"
    "\022.proto_ff.dupgroupB\004\210\301\024\024", 2185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dup.proto", &protobuf_RegisterTypes);
  dupBPlevel::default_instance_ = new dupBPlevel();
  Sheet_dupBPlevel::default_instance_ = new Sheet_dupBPlevel();
  dupdup::default_instance_ = new dupdup();
  Sheet_dupdup::default_instance_ = new Sheet_dupdup();
  duptowerReward::default_instance_ = new duptowerReward();
  Sheet_duptowerReward::default_instance_ = new Sheet_duptowerReward();
  dupgroup::default_instance_ = new dupgroup();
  Sheet_dupgroup::default_instance_ = new Sheet_dupgroup();
  dupBPlevel::default_instance_->InitAsDefaultInstance();
  Sheet_dupBPlevel::default_instance_->InitAsDefaultInstance();
  dupdup::default_instance_->InitAsDefaultInstance();
  Sheet_dupdup::default_instance_->InitAsDefaultInstance();
  duptowerReward::default_instance_->InitAsDefaultInstance();
  Sheet_duptowerReward::default_instance_->InitAsDefaultInstance();
  dupgroup::default_instance_->InitAsDefaultInstance();
  Sheet_dupgroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dup_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dup_2eproto {
  StaticDescriptorInitializer_dup_2eproto() {
    protobuf_AddDesc_dup_2eproto();
  }
} static_descriptor_initializer_dup_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int dupBPlevel::kLvFieldNumber;
const int dupBPlevel::kBgdupFieldNumber;
#endif  // !_MSC_VER

dupBPlevel::dupBPlevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dupBPlevel::InitAsDefaultInstance() {
}

dupBPlevel::dupBPlevel(const dupBPlevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dupBPlevel::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dupBPlevel::~dupBPlevel() {
  SharedDtor();
}

void dupBPlevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dupBPlevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dupBPlevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dupBPlevel_descriptor_;
}

const dupBPlevel& dupBPlevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

dupBPlevel* dupBPlevel::default_instance_ = NULL;

dupBPlevel* dupBPlevel::New() const {
  return new dupBPlevel;
}

void dupBPlevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
  }
  bgdup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dupBPlevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Bgdup;
        break;
      }

      // repeated int64 Bgdup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Bgdup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_bgdup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_bgdup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Bgdup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dupBPlevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // repeated int64 Bgdup = 2;
  for (int i = 0; i < this->bgdup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->bgdup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dupBPlevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // repeated int64 Bgdup = 2;
  for (int i = 0; i < this->bgdup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->bgdup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dupBPlevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  // repeated int64 Bgdup = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bgdup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->bgdup(i));
    }
    total_size += 1 * this->bgdup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dupBPlevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dupBPlevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dupBPlevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dupBPlevel::MergeFrom(const dupBPlevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  bgdup_.MergeFrom(from.bgdup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dupBPlevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dupBPlevel::CopyFrom(const dupBPlevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dupBPlevel::IsInitialized() const {

  return true;
}

void dupBPlevel::Swap(dupBPlevel* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    bgdup_.Swap(&other->bgdup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dupBPlevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dupBPlevel_descriptor_;
  metadata.reflection = dupBPlevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_dupBPlevel::kDupBPlevelListFieldNumber;
#endif  // !_MSC_VER

Sheet_dupBPlevel::Sheet_dupBPlevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_dupBPlevel::InitAsDefaultInstance() {
}

Sheet_dupBPlevel::Sheet_dupBPlevel(const Sheet_dupBPlevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_dupBPlevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_dupBPlevel::~Sheet_dupBPlevel() {
  SharedDtor();
}

void Sheet_dupBPlevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_dupBPlevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_dupBPlevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_dupBPlevel_descriptor_;
}

const Sheet_dupBPlevel& Sheet_dupBPlevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

Sheet_dupBPlevel* Sheet_dupBPlevel::default_instance_ = NULL;

Sheet_dupBPlevel* Sheet_dupBPlevel::New() const {
  return new Sheet_dupBPlevel;
}

void Sheet_dupBPlevel::Clear() {
  dupbplevel_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_dupBPlevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.dupBPlevel dupBPlevel_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dupBPlevel_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dupbplevel_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dupBPlevel_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_dupBPlevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.dupBPlevel dupBPlevel_List = 1;
  for (int i = 0; i < this->dupbplevel_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dupbplevel_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_dupBPlevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.dupBPlevel dupBPlevel_List = 1;
  for (int i = 0; i < this->dupbplevel_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dupbplevel_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_dupBPlevel::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.dupBPlevel dupBPlevel_List = 1;
  total_size += 1 * this->dupbplevel_list_size();
  for (int i = 0; i < this->dupbplevel_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dupbplevel_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_dupBPlevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_dupBPlevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_dupBPlevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_dupBPlevel::MergeFrom(const Sheet_dupBPlevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  dupbplevel_list_.MergeFrom(from.dupbplevel_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_dupBPlevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_dupBPlevel::CopyFrom(const Sheet_dupBPlevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_dupBPlevel::IsInitialized() const {

  return true;
}

void Sheet_dupBPlevel::Swap(Sheet_dupBPlevel* other) {
  if (other != this) {
    dupbplevel_list_.Swap(&other->dupbplevel_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_dupBPlevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_dupBPlevel_descriptor_;
  metadata.reflection = Sheet_dupBPlevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dupdup::kIDFieldNumber;
const int dupdup::kScripIDFieldNumber;
const int dupdup::kScripTypeFieldNumber;
const int dupdup::kDupLevelFieldNumber;
const int dupdup::kGroupIDFieldNumber;
const int dupdup::kLayerFieldNumber;
const int dupdup::kDuplicateTypeFieldNumber;
const int dupdup::kMapIDFieldNumber;
const int dupdup::kLevelLimitFieldNumber;
const int dupdup::kPreFieldNumber;
const int dupdup::kIsAutoFightFieldNumber;
const int dupdup::kConditionFieldNumber;
const int dupdup::kReviveMaxTimesFieldNumber;
const int dupdup::kTeamObjectIDFieldNumber;
const int dupdup::kGradeConditionFieldNumber;
const int dupdup::kSweepRewardBoxIDFieldNumber;
const int dupdup::kSweepRewardExpFieldNumber;
const int dupdup::kTrackpointFieldNumber;
const int dupdup::kPathOfmonsterFieldNumber;
const int dupdup::kIsPatrolFieldNumber;
const int dupdup::kSweepTypeFieldNumber;
const int dupdup::kBoxFieldNumber;
#endif  // !_MSC_VER

dupdup::dupdup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dupdup::InitAsDefaultInstance() {
}

dupdup::dupdup(const dupdup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dupdup::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  scripid_ = 0;
  scriptype_ = 0;
  duplevel_ = 0;
  groupid_ = 0;
  layer_ = 0;
  duplicatetype_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  levellimit_ = 0;
  pre_ = 0;
  isautofight_ = 0;
  condition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  revivemaxtimes_ = 0;
  teamobjectid_ = 0;
  gradecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sweeprewardboxid_ = GOOGLE_LONGLONG(0);
  sweeprewardexp_ = 0;
  trackpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pathofmonster_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ispatrol_ = 0;
  sweeptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dupdup::~dupdup() {
  SharedDtor();
}

void dupdup::SharedDtor() {
  if (condition_ != &::google::protobuf::internal::kEmptyString) {
    delete condition_;
  }
  if (gradecondition_ != &::google::protobuf::internal::kEmptyString) {
    delete gradecondition_;
  }
  if (trackpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete trackpoint_;
  }
  if (pathofmonster_ != &::google::protobuf::internal::kEmptyString) {
    delete pathofmonster_;
  }
  if (this != default_instance_) {
  }
}

void dupdup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dupdup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dupdup_descriptor_;
}

const dupdup& dupdup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

dupdup* dupdup::default_instance_ = NULL;

dupdup* dupdup::New() const {
  return new dupdup;
}

void dupdup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    scripid_ = 0;
    scriptype_ = 0;
    duplevel_ = 0;
    groupid_ = 0;
    layer_ = 0;
    duplicatetype_ = 0;
    mapid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    levellimit_ = 0;
    pre_ = 0;
    isautofight_ = 0;
    if (has_condition()) {
      if (condition_ != &::google::protobuf::internal::kEmptyString) {
        condition_->clear();
      }
    }
    revivemaxtimes_ = 0;
    teamobjectid_ = 0;
    if (has_gradecondition()) {
      if (gradecondition_ != &::google::protobuf::internal::kEmptyString) {
        gradecondition_->clear();
      }
    }
    sweeprewardboxid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sweeprewardexp_ = 0;
    if (has_trackpoint()) {
      if (trackpoint_ != &::google::protobuf::internal::kEmptyString) {
        trackpoint_->clear();
      }
    }
    if (has_pathofmonster()) {
      if (pathofmonster_ != &::google::protobuf::internal::kEmptyString) {
        pathofmonster_->clear();
      }
    }
    ispatrol_ = 0;
    sweeptype_ = 0;
  }
  box_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dupdup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scripID;
        break;
      }

      // optional int32 scripID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scripID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scripid_)));
          set_has_scripid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scripType;
        break;
      }

      // optional int32 scripType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scripType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scriptype_)));
          set_has_scriptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dupLevel;
        break;
      }

      // optional int32 dupLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplevel_)));
          set_has_duplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_groupID;
        break;
      }

      // optional int32 groupID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_layer;
        break;
      }

      // optional int32 layer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duplicateType;
        break;
      }

      // optional int32 duplicateType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplicatetype_)));
          set_has_duplicatetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mapID;
        break;
      }

      // optional int64 mapID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_levelLimit;
        break;
      }

      // optional int32 levelLimit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levellimit_)));
          set_has_levellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pre;
        break;
      }

      // optional int32 pre = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_)));
          set_has_pre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isAutoFight;
        break;
      }

      // optional int32 isAutoFight = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isautofight_)));
          set_has_isautofight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_condition;
        break;
      }

      // optional string condition = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->condition().data(), this->condition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_reviveMaxTimes;
        break;
      }

      // optional int32 reviveMaxTimes = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reviveMaxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revivemaxtimes_)));
          set_has_revivemaxtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_TeamObjectID;
        break;
      }

      // optional int32 TeamObjectID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamObjectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamobjectid_)));
          set_has_teamobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_gradeCondition;
        break;
      }

      // optional string gradeCondition = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gradeCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gradecondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gradecondition().data(), this->gradecondition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_sweepRewardBoxID;
        break;
      }

      // optional int64 sweepRewardBoxID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweepRewardBoxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sweeprewardboxid_)));
          set_has_sweeprewardboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_sweepRewardExp;
        break;
      }

      // optional int32 sweepRewardExp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweepRewardExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweeprewardexp_)));
          set_has_sweeprewardexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_trackpoint;
        break;
      }

      // optional string trackpoint = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trackpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trackpoint().data(), this->trackpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_pathOfmonster;
        break;
      }

      // optional string pathOfmonster = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pathOfmonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pathofmonster()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pathofmonster().data(), this->pathofmonster().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_isPatrol;
        break;
      }

      // optional int32 isPatrol = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPatrol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispatrol_)));
          set_has_ispatrol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_sweepType;
        break;
      }

      // optional int32 sweepType = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweepType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweeptype_)));
          set_has_sweeptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_box;
        break;
      }

      // repeated int32 box = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_box())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_box())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_box;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dupdup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 scripID = 2;
  if (has_scripid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scripid(), output);
  }

  // optional int32 scripType = 3;
  if (has_scriptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scriptype(), output);
  }

  // optional int32 dupLevel = 4;
  if (has_duplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duplevel(), output);
  }

  // optional int32 groupID = 5;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->groupid(), output);
  }

  // optional int32 layer = 6;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->layer(), output);
  }

  // optional int32 duplicateType = 7;
  if (has_duplicatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->duplicatetype(), output);
  }

  // optional int64 mapID = 8;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->mapid(), output);
  }

  // optional int32 levelLimit = 9;
  if (has_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->levellimit(), output);
  }

  // optional int32 pre = 10;
  if (has_pre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pre(), output);
  }

  // optional int32 isAutoFight = 11;
  if (has_isautofight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->isautofight(), output);
  }

  // optional string condition = 12;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->condition(), output);
  }

  // optional int32 reviveMaxTimes = 13;
  if (has_revivemaxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->revivemaxtimes(), output);
  }

  // optional int32 TeamObjectID = 14;
  if (has_teamobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->teamobjectid(), output);
  }

  // optional string gradeCondition = 15;
  if (has_gradecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gradecondition().data(), this->gradecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->gradecondition(), output);
  }

  // optional int64 sweepRewardBoxID = 16;
  if (has_sweeprewardboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->sweeprewardboxid(), output);
  }

  // optional int32 sweepRewardExp = 17;
  if (has_sweeprewardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->sweeprewardexp(), output);
  }

  // optional string trackpoint = 18;
  if (has_trackpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackpoint().data(), this->trackpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->trackpoint(), output);
  }

  // optional string pathOfmonster = 19;
  if (has_pathofmonster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pathofmonster().data(), this->pathofmonster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->pathofmonster(), output);
  }

  // optional int32 isPatrol = 20;
  if (has_ispatrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->ispatrol(), output);
  }

  // optional int32 sweepType = 21;
  if (has_sweeptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->sweeptype(), output);
  }

  // repeated int32 box = 22;
  for (int i = 0; i < this->box_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->box(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dupdup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 scripID = 2;
  if (has_scripid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scripid(), target);
  }

  // optional int32 scripType = 3;
  if (has_scriptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scriptype(), target);
  }

  // optional int32 dupLevel = 4;
  if (has_duplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duplevel(), target);
  }

  // optional int32 groupID = 5;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->groupid(), target);
  }

  // optional int32 layer = 6;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->layer(), target);
  }

  // optional int32 duplicateType = 7;
  if (has_duplicatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->duplicatetype(), target);
  }

  // optional int64 mapID = 8;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->mapid(), target);
  }

  // optional int32 levelLimit = 9;
  if (has_levellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->levellimit(), target);
  }

  // optional int32 pre = 10;
  if (has_pre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pre(), target);
  }

  // optional int32 isAutoFight = 11;
  if (has_isautofight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->isautofight(), target);
  }

  // optional string condition = 12;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->condition(), target);
  }

  // optional int32 reviveMaxTimes = 13;
  if (has_revivemaxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->revivemaxtimes(), target);
  }

  // optional int32 TeamObjectID = 14;
  if (has_teamobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->teamobjectid(), target);
  }

  // optional string gradeCondition = 15;
  if (has_gradecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gradecondition().data(), this->gradecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->gradecondition(), target);
  }

  // optional int64 sweepRewardBoxID = 16;
  if (has_sweeprewardboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->sweeprewardboxid(), target);
  }

  // optional int32 sweepRewardExp = 17;
  if (has_sweeprewardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->sweeprewardexp(), target);
  }

  // optional string trackpoint = 18;
  if (has_trackpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackpoint().data(), this->trackpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->trackpoint(), target);
  }

  // optional string pathOfmonster = 19;
  if (has_pathofmonster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pathofmonster().data(), this->pathofmonster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->pathofmonster(), target);
  }

  // optional int32 isPatrol = 20;
  if (has_ispatrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->ispatrol(), target);
  }

  // optional int32 sweepType = 21;
  if (has_sweeptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->sweeptype(), target);
  }

  // repeated int32 box = 22;
  for (int i = 0; i < this->box_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->box(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dupdup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 scripID = 2;
    if (has_scripid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scripid());
    }

    // optional int32 scripType = 3;
    if (has_scriptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scriptype());
    }

    // optional int32 dupLevel = 4;
    if (has_duplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplevel());
    }

    // optional int32 groupID = 5;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 layer = 6;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int32 duplicateType = 7;
    if (has_duplicatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplicatetype());
    }

    // optional int64 mapID = 8;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 levelLimit = 9;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levellimit());
    }

    // optional int32 pre = 10;
    if (has_pre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre());
    }

    // optional int32 isAutoFight = 11;
    if (has_isautofight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isautofight());
    }

    // optional string condition = 12;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->condition());
    }

    // optional int32 reviveMaxTimes = 13;
    if (has_revivemaxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revivemaxtimes());
    }

    // optional int32 TeamObjectID = 14;
    if (has_teamobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamobjectid());
    }

    // optional string gradeCondition = 15;
    if (has_gradecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gradecondition());
    }

    // optional int64 sweepRewardBoxID = 16;
    if (has_sweeprewardboxid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sweeprewardboxid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 sweepRewardExp = 17;
    if (has_sweeprewardexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweeprewardexp());
    }

    // optional string trackpoint = 18;
    if (has_trackpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trackpoint());
    }

    // optional string pathOfmonster = 19;
    if (has_pathofmonster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pathofmonster());
    }

    // optional int32 isPatrol = 20;
    if (has_ispatrol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispatrol());
    }

    // optional int32 sweepType = 21;
    if (has_sweeptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweeptype());
    }

  }
  // repeated int32 box = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->box_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->box(i));
    }
    total_size += 2 * this->box_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dupdup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dupdup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dupdup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dupdup::MergeFrom(const dupdup& from) {
  GOOGLE_CHECK_NE(&from, this);
  box_.MergeFrom(from.box_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_scripid()) {
      set_scripid(from.scripid());
    }
    if (from.has_scriptype()) {
      set_scriptype(from.scriptype());
    }
    if (from.has_duplevel()) {
      set_duplevel(from.duplevel());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_duplicatetype()) {
      set_duplicatetype(from.duplicatetype());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_levellimit()) {
      set_levellimit(from.levellimit());
    }
    if (from.has_pre()) {
      set_pre(from.pre());
    }
    if (from.has_isautofight()) {
      set_isautofight(from.isautofight());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_revivemaxtimes()) {
      set_revivemaxtimes(from.revivemaxtimes());
    }
    if (from.has_teamobjectid()) {
      set_teamobjectid(from.teamobjectid());
    }
    if (from.has_gradecondition()) {
      set_gradecondition(from.gradecondition());
    }
    if (from.has_sweeprewardboxid()) {
      set_sweeprewardboxid(from.sweeprewardboxid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sweeprewardexp()) {
      set_sweeprewardexp(from.sweeprewardexp());
    }
    if (from.has_trackpoint()) {
      set_trackpoint(from.trackpoint());
    }
    if (from.has_pathofmonster()) {
      set_pathofmonster(from.pathofmonster());
    }
    if (from.has_ispatrol()) {
      set_ispatrol(from.ispatrol());
    }
    if (from.has_sweeptype()) {
      set_sweeptype(from.sweeptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dupdup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dupdup::CopyFrom(const dupdup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dupdup::IsInitialized() const {

  return true;
}

void dupdup::Swap(dupdup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(scripid_, other->scripid_);
    std::swap(scriptype_, other->scriptype_);
    std::swap(duplevel_, other->duplevel_);
    std::swap(groupid_, other->groupid_);
    std::swap(layer_, other->layer_);
    std::swap(duplicatetype_, other->duplicatetype_);
    std::swap(mapid_, other->mapid_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(pre_, other->pre_);
    std::swap(isautofight_, other->isautofight_);
    std::swap(condition_, other->condition_);
    std::swap(revivemaxtimes_, other->revivemaxtimes_);
    std::swap(teamobjectid_, other->teamobjectid_);
    std::swap(gradecondition_, other->gradecondition_);
    std::swap(sweeprewardboxid_, other->sweeprewardboxid_);
    std::swap(sweeprewardexp_, other->sweeprewardexp_);
    std::swap(trackpoint_, other->trackpoint_);
    std::swap(pathofmonster_, other->pathofmonster_);
    std::swap(ispatrol_, other->ispatrol_);
    std::swap(sweeptype_, other->sweeptype_);
    box_.Swap(&other->box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dupdup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dupdup_descriptor_;
  metadata.reflection = dupdup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_dupdup::kDupdupListFieldNumber;
#endif  // !_MSC_VER

Sheet_dupdup::Sheet_dupdup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_dupdup::InitAsDefaultInstance() {
}

Sheet_dupdup::Sheet_dupdup(const Sheet_dupdup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_dupdup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_dupdup::~Sheet_dupdup() {
  SharedDtor();
}

void Sheet_dupdup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_dupdup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_dupdup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_dupdup_descriptor_;
}

const Sheet_dupdup& Sheet_dupdup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

Sheet_dupdup* Sheet_dupdup::default_instance_ = NULL;

Sheet_dupdup* Sheet_dupdup::New() const {
  return new Sheet_dupdup;
}

void Sheet_dupdup::Clear() {
  dupdup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_dupdup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.dupdup dupdup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dupdup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dupdup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dupdup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_dupdup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.dupdup dupdup_List = 1;
  for (int i = 0; i < this->dupdup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dupdup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_dupdup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.dupdup dupdup_List = 1;
  for (int i = 0; i < this->dupdup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dupdup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_dupdup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.dupdup dupdup_List = 1;
  total_size += 1 * this->dupdup_list_size();
  for (int i = 0; i < this->dupdup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dupdup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_dupdup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_dupdup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_dupdup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_dupdup::MergeFrom(const Sheet_dupdup& from) {
  GOOGLE_CHECK_NE(&from, this);
  dupdup_list_.MergeFrom(from.dupdup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_dupdup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_dupdup::CopyFrom(const Sheet_dupdup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_dupdup::IsInitialized() const {

  return true;
}

void Sheet_dupdup::Swap(Sheet_dupdup* other) {
  if (other != this) {
    dupdup_list_.Swap(&other->dupdup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_dupdup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_dupdup_descriptor_;
  metadata.reflection = Sheet_dupdup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int duptowerReward::kIdFieldNumber;
const int duptowerReward::kTypeFieldNumber;
const int duptowerReward::kCondFieldNumber;
const int duptowerReward::kBoxIDFieldNumber;
#endif  // !_MSC_VER

duptowerReward::duptowerReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duptowerReward::InitAsDefaultInstance() {
}

duptowerReward::duptowerReward(const duptowerReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duptowerReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  cond_ = 0;
  boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duptowerReward::~duptowerReward() {
  SharedDtor();
}

void duptowerReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void duptowerReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duptowerReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duptowerReward_descriptor_;
}

const duptowerReward& duptowerReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

duptowerReward* duptowerReward::default_instance_ = NULL;

duptowerReward* duptowerReward::New() const {
  return new duptowerReward;
}

void duptowerReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    cond_ = 0;
    boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duptowerReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cond;
        break;
      }

      // optional int32 cond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cond_)));
          set_has_cond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boxID;
        break;
      }

      // optional int32 boxID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duptowerReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 cond = 3;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cond(), output);
  }

  // optional int32 boxID = 4;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duptowerReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 cond = 3;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cond(), target);
  }

  // optional int32 boxID = 4;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duptowerReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 cond = 3;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cond());
    }

    // optional int32 boxID = 4;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duptowerReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duptowerReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duptowerReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duptowerReward::MergeFrom(const duptowerReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cond()) {
      set_cond(from.cond());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duptowerReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duptowerReward::CopyFrom(const duptowerReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duptowerReward::IsInitialized() const {

  return true;
}

void duptowerReward::Swap(duptowerReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(cond_, other->cond_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duptowerReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duptowerReward_descriptor_;
  metadata.reflection = duptowerReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_duptowerReward::kDuptowerRewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_duptowerReward::Sheet_duptowerReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_duptowerReward::InitAsDefaultInstance() {
}

Sheet_duptowerReward::Sheet_duptowerReward(const Sheet_duptowerReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_duptowerReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_duptowerReward::~Sheet_duptowerReward() {
  SharedDtor();
}

void Sheet_duptowerReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_duptowerReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_duptowerReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_duptowerReward_descriptor_;
}

const Sheet_duptowerReward& Sheet_duptowerReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

Sheet_duptowerReward* Sheet_duptowerReward::default_instance_ = NULL;

Sheet_duptowerReward* Sheet_duptowerReward::New() const {
  return new Sheet_duptowerReward;
}

void Sheet_duptowerReward::Clear() {
  duptowerreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_duptowerReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.duptowerReward duptowerReward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duptowerReward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duptowerreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duptowerReward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_duptowerReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.duptowerReward duptowerReward_List = 1;
  for (int i = 0; i < this->duptowerreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duptowerreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_duptowerReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.duptowerReward duptowerReward_List = 1;
  for (int i = 0; i < this->duptowerreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duptowerreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_duptowerReward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.duptowerReward duptowerReward_List = 1;
  total_size += 1 * this->duptowerreward_list_size();
  for (int i = 0; i < this->duptowerreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duptowerreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_duptowerReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_duptowerReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_duptowerReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_duptowerReward::MergeFrom(const Sheet_duptowerReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  duptowerreward_list_.MergeFrom(from.duptowerreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_duptowerReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_duptowerReward::CopyFrom(const Sheet_duptowerReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_duptowerReward::IsInitialized() const {

  return true;
}

void Sheet_duptowerReward::Swap(Sheet_duptowerReward* other) {
  if (other != this) {
    duptowerreward_list_.Swap(&other->duptowerreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_duptowerReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_duptowerReward_descriptor_;
  metadata.reflection = Sheet_duptowerReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dupgroup::kIdFieldNumber;
const int dupgroup::kNameFieldNumber;
const int dupgroup::kPrivilegeTypeFieldNumber;
const int dupgroup::kDynamiclevelFieldNumber;
const int dupgroup::kGroupTimesTypeFieldNumber;
const int dupgroup::kGroupTimesFieldNumber;
const int dupgroup::kEnterItemIDFieldNumber;
const int dupgroup::kSweepConditionFieldNumber;
const int dupgroup::kMergeConditionFieldNumber;
const int dupgroup::kAddItemIDFieldNumber;
const int dupgroup::kBuyTypeFieldNumber;
const int dupgroup::kBuyItemIdFieldNumber;
const int dupgroup::kBuyCostFieldNumber;
const int dupgroup::kCountDownFieldNumber;
const int dupgroup::kEndDownFieldNumber;
const int dupgroup::kAccountDownFieldNumber;
const int dupgroup::kFuncionIDFieldNumber;
#endif  // !_MSC_VER

dupgroup::dupgroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dupgroup::InitAsDefaultInstance() {
}

dupgroup::dupgroup(const dupgroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dupgroup::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  privilegetype_ = 0;
  dynamiclevel_ = 0;
  grouptimestype_ = 0;
  grouptimes_ = 0;
  enteritemid_ = 0;
  sweepcondition_ = 0;
  mergecondition_ = 0;
  additemid_ = 0;
  buytype_ = 0;
  buyitemid_ = 0;
  buycost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  countdown_ = 0;
  enddown_ = 0;
  accountdown_ = 0;
  funcionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dupgroup::~dupgroup() {
  SharedDtor();
}

void dupgroup::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (buycost_ != &::google::protobuf::internal::kEmptyString) {
    delete buycost_;
  }
  if (this != default_instance_) {
  }
}

void dupgroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dupgroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dupgroup_descriptor_;
}

const dupgroup& dupgroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

dupgroup* dupgroup::default_instance_ = NULL;

dupgroup* dupgroup::New() const {
  return new dupgroup;
}

void dupgroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    privilegetype_ = 0;
    dynamiclevel_ = 0;
    grouptimestype_ = 0;
    grouptimes_ = 0;
    enteritemid_ = 0;
    sweepcondition_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mergecondition_ = 0;
    additemid_ = 0;
    buytype_ = 0;
    buyitemid_ = 0;
    if (has_buycost()) {
      if (buycost_ != &::google::protobuf::internal::kEmptyString) {
        buycost_->clear();
      }
    }
    countdown_ = 0;
    enddown_ = 0;
    accountdown_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    funcionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dupgroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_privilegeType;
        break;
      }

      // optional int32 privilegeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privilegeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &privilegetype_)));
          set_has_privilegetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dynamiclevel;
        break;
      }

      // optional int32 dynamiclevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamiclevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dynamiclevel_)));
          set_has_dynamiclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_groupTimesType;
        break;
      }

      // optional int32 groupTimesType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupTimesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grouptimestype_)));
          set_has_grouptimestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_groupTimes;
        break;
      }

      // optional int32 groupTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grouptimes_)));
          set_has_grouptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_enterItemID;
        break;
      }

      // optional int32 enterItemID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enteritemid_)));
          set_has_enteritemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sweepCondition;
        break;
      }

      // optional int32 sweepCondition = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweepCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweepcondition_)));
          set_has_sweepcondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mergeCondition;
        break;
      }

      // optional int32 mergeCondition = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mergeCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mergecondition_)));
          set_has_mergecondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_addItemID;
        break;
      }

      // optional int32 addItemID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &additemid_)));
          set_has_additemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_buyType;
        break;
      }

      // optional int32 buyType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buytype_)));
          set_has_buytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_buyItemId;
        break;
      }

      // optional int32 buyItemId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyitemid_)));
          set_has_buyitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_buyCost;
        break;
      }

      // optional string buyCost = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buycost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buycost().data(), this->buycost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_countDown;
        break;
      }

      // optional int32 countDown = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_endDown;
        break;
      }

      // optional int32 endDown = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enddown_)));
          set_has_enddown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_accountDown;
        break;
      }

      // optional int32 accountDown = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountdown_)));
          set_has_accountdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_funcionID;
        break;
      }

      // optional int32 funcionID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funcionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcionid_)));
          set_has_funcionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dupgroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 privilegeType = 3;
  if (has_privilegetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->privilegetype(), output);
  }

  // optional int32 dynamiclevel = 4;
  if (has_dynamiclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dynamiclevel(), output);
  }

  // optional int32 groupTimesType = 5;
  if (has_grouptimestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->grouptimestype(), output);
  }

  // optional int32 groupTimes = 6;
  if (has_grouptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->grouptimes(), output);
  }

  // optional int32 enterItemID = 7;
  if (has_enteritemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->enteritemid(), output);
  }

  // optional int32 sweepCondition = 8;
  if (has_sweepcondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sweepcondition(), output);
  }

  // optional int32 mergeCondition = 9;
  if (has_mergecondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mergecondition(), output);
  }

  // optional int32 addItemID = 10;
  if (has_additemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->additemid(), output);
  }

  // optional int32 buyType = 11;
  if (has_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->buytype(), output);
  }

  // optional int32 buyItemId = 12;
  if (has_buyitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->buyitemid(), output);
  }

  // optional string buyCost = 13;
  if (has_buycost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buycost().data(), this->buycost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->buycost(), output);
  }

  // optional int32 countDown = 14;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->countdown(), output);
  }

  // optional int32 endDown = 15;
  if (has_enddown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->enddown(), output);
  }

  // optional int32 accountDown = 16;
  if (has_accountdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->accountdown(), output);
  }

  // optional int32 funcionID = 17;
  if (has_funcionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->funcionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dupgroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 privilegeType = 3;
  if (has_privilegetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->privilegetype(), target);
  }

  // optional int32 dynamiclevel = 4;
  if (has_dynamiclevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dynamiclevel(), target);
  }

  // optional int32 groupTimesType = 5;
  if (has_grouptimestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->grouptimestype(), target);
  }

  // optional int32 groupTimes = 6;
  if (has_grouptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->grouptimes(), target);
  }

  // optional int32 enterItemID = 7;
  if (has_enteritemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->enteritemid(), target);
  }

  // optional int32 sweepCondition = 8;
  if (has_sweepcondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sweepcondition(), target);
  }

  // optional int32 mergeCondition = 9;
  if (has_mergecondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mergecondition(), target);
  }

  // optional int32 addItemID = 10;
  if (has_additemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->additemid(), target);
  }

  // optional int32 buyType = 11;
  if (has_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->buytype(), target);
  }

  // optional int32 buyItemId = 12;
  if (has_buyitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->buyitemid(), target);
  }

  // optional string buyCost = 13;
  if (has_buycost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buycost().data(), this->buycost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->buycost(), target);
  }

  // optional int32 countDown = 14;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->countdown(), target);
  }

  // optional int32 endDown = 15;
  if (has_enddown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->enddown(), target);
  }

  // optional int32 accountDown = 16;
  if (has_accountdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->accountdown(), target);
  }

  // optional int32 funcionID = 17;
  if (has_funcionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->funcionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dupgroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 privilegeType = 3;
    if (has_privilegetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->privilegetype());
    }

    // optional int32 dynamiclevel = 4;
    if (has_dynamiclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dynamiclevel());
    }

    // optional int32 groupTimesType = 5;
    if (has_grouptimestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grouptimestype());
    }

    // optional int32 groupTimes = 6;
    if (has_grouptimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grouptimes());
    }

    // optional int32 enterItemID = 7;
    if (has_enteritemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enteritemid());
    }

    // optional int32 sweepCondition = 8;
    if (has_sweepcondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweepcondition());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 mergeCondition = 9;
    if (has_mergecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mergecondition());
    }

    // optional int32 addItemID = 10;
    if (has_additemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->additemid());
    }

    // optional int32 buyType = 11;
    if (has_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buytype());
    }

    // optional int32 buyItemId = 12;
    if (has_buyitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyitemid());
    }

    // optional string buyCost = 13;
    if (has_buycost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buycost());
    }

    // optional int32 countDown = 14;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countdown());
    }

    // optional int32 endDown = 15;
    if (has_enddown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enddown());
    }

    // optional int32 accountDown = 16;
    if (has_accountdown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountdown());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 funcionID = 17;
    if (has_funcionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dupgroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dupgroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dupgroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dupgroup::MergeFrom(const dupgroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_privilegetype()) {
      set_privilegetype(from.privilegetype());
    }
    if (from.has_dynamiclevel()) {
      set_dynamiclevel(from.dynamiclevel());
    }
    if (from.has_grouptimestype()) {
      set_grouptimestype(from.grouptimestype());
    }
    if (from.has_grouptimes()) {
      set_grouptimes(from.grouptimes());
    }
    if (from.has_enteritemid()) {
      set_enteritemid(from.enteritemid());
    }
    if (from.has_sweepcondition()) {
      set_sweepcondition(from.sweepcondition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mergecondition()) {
      set_mergecondition(from.mergecondition());
    }
    if (from.has_additemid()) {
      set_additemid(from.additemid());
    }
    if (from.has_buytype()) {
      set_buytype(from.buytype());
    }
    if (from.has_buyitemid()) {
      set_buyitemid(from.buyitemid());
    }
    if (from.has_buycost()) {
      set_buycost(from.buycost());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
    if (from.has_enddown()) {
      set_enddown(from.enddown());
    }
    if (from.has_accountdown()) {
      set_accountdown(from.accountdown());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_funcionid()) {
      set_funcionid(from.funcionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dupgroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dupgroup::CopyFrom(const dupgroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dupgroup::IsInitialized() const {

  return true;
}

void dupgroup::Swap(dupgroup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(privilegetype_, other->privilegetype_);
    std::swap(dynamiclevel_, other->dynamiclevel_);
    std::swap(grouptimestype_, other->grouptimestype_);
    std::swap(grouptimes_, other->grouptimes_);
    std::swap(enteritemid_, other->enteritemid_);
    std::swap(sweepcondition_, other->sweepcondition_);
    std::swap(mergecondition_, other->mergecondition_);
    std::swap(additemid_, other->additemid_);
    std::swap(buytype_, other->buytype_);
    std::swap(buyitemid_, other->buyitemid_);
    std::swap(buycost_, other->buycost_);
    std::swap(countdown_, other->countdown_);
    std::swap(enddown_, other->enddown_);
    std::swap(accountdown_, other->accountdown_);
    std::swap(funcionid_, other->funcionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dupgroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dupgroup_descriptor_;
  metadata.reflection = dupgroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_dupgroup::kDupgroupListFieldNumber;
#endif  // !_MSC_VER

Sheet_dupgroup::Sheet_dupgroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_dupgroup::InitAsDefaultInstance() {
}

Sheet_dupgroup::Sheet_dupgroup(const Sheet_dupgroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_dupgroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_dupgroup::~Sheet_dupgroup() {
  SharedDtor();
}

void Sheet_dupgroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_dupgroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_dupgroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_dupgroup_descriptor_;
}

const Sheet_dupgroup& Sheet_dupgroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dup_2eproto();
  return *default_instance_;
}

Sheet_dupgroup* Sheet_dupgroup::default_instance_ = NULL;

Sheet_dupgroup* Sheet_dupgroup::New() const {
  return new Sheet_dupgroup;
}

void Sheet_dupgroup::Clear() {
  dupgroup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_dupgroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.dupgroup dupgroup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dupgroup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dupgroup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dupgroup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_dupgroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.dupgroup dupgroup_List = 1;
  for (int i = 0; i < this->dupgroup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dupgroup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_dupgroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.dupgroup dupgroup_List = 1;
  for (int i = 0; i < this->dupgroup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dupgroup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_dupgroup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.dupgroup dupgroup_List = 1;
  total_size += 1 * this->dupgroup_list_size();
  for (int i = 0; i < this->dupgroup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dupgroup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_dupgroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_dupgroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_dupgroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_dupgroup::MergeFrom(const Sheet_dupgroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  dupgroup_list_.MergeFrom(from.dupgroup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_dupgroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_dupgroup::CopyFrom(const Sheet_dupgroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_dupgroup::IsInitialized() const {

  return true;
}

void Sheet_dupgroup::Swap(Sheet_dupgroup* other) {
  if (other != this) {
    dupgroup_list_.Swap(&other->dupgroup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_dupgroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_dupgroup_descriptor_;
  metadata.reflection = Sheet_dupgroup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
