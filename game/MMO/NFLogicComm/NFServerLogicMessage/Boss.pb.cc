// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Boss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Boss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* BossLastKillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossLastKillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDropInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDropInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBossSimpleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBossSimpleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySceneBossDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySceneBossDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySceneBossUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySceneBossUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBossInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBossInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterBossMapReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterBossMapReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterBossMapRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterBossMapRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttentBossReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttentBossReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttentBossRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttentBossRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDropReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDropReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDropRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDropRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBossResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBossResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossKillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossKillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossKillRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossKillRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossGlobalData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossGlobalData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CUpdateBossReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CUpdateBossReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CSynAttentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CSynAttentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CKillBossInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CKillBossInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CDropRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CDropRecordReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Boss_2eproto() {
  protobuf_AddDesc_Boss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Boss.proto");
  GOOGLE_CHECK(file != NULL);
  BossLastKillInfo_descriptor_ = file->message_type(0);
  static const int BossLastKillInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossLastKillInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossLastKillInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossLastKillInfo, id_),
  };
  BossLastKillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossLastKillInfo_descriptor_,
      BossLastKillInfo::default_instance_,
      BossLastKillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossLastKillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossLastKillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossLastKillInfo));
  BossInfo_descriptor_ = file->message_type(1);
  static const int BossInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, attention_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, boss_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, last_),
  };
  BossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossInfo_descriptor_,
      BossInfo::default_instance_,
      BossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossInfo));
  BossSimpleInfo_descriptor_ = file->message_type(2);
  static const int BossSimpleInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfo, boss_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfo, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfo, max_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfo, back_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfo, back_max_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfo, enter_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfo, enter_max_num_),
  };
  BossSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossSimpleInfo_descriptor_,
      BossSimpleInfo::default_instance_,
      BossSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossSimpleInfo));
  BossDropInfo_descriptor_ = file->message_type(3);
  static const int BossDropInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropInfo, drop_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropInfo, boss_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropInfo, iteminfo_),
  };
  BossDropInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDropInfo_descriptor_,
      BossDropInfo::default_instance_,
      BossDropInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDropInfo));
  NotifyBossSimpleRsp_descriptor_ = file->message_type(4);
  static const int NotifyBossSimpleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossSimpleRsp, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossSimpleRsp, simples_),
  };
  NotifyBossSimpleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBossSimpleRsp_descriptor_,
      NotifyBossSimpleRsp::default_instance_,
      NotifyBossSimpleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossSimpleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossSimpleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBossSimpleRsp));
  BossDataReq_descriptor_ = file->message_type(5);
  static const int BossDataReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDataReq, type_),
  };
  BossDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDataReq_descriptor_,
      BossDataReq::default_instance_,
      BossDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDataReq));
  BossDataRsp_descriptor_ = file->message_type(6);
  static const int BossDataRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDataRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDataRsp, infos_),
  };
  BossDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDataRsp_descriptor_,
      BossDataRsp::default_instance_,
      BossDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDataRsp));
  NotifySceneBossDataRsp_descriptor_ = file->message_type(7);
  static const int NotifySceneBossDataRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneBossDataRsp, infos_),
  };
  NotifySceneBossDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySceneBossDataRsp_descriptor_,
      NotifySceneBossDataRsp::default_instance_,
      NotifySceneBossDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneBossDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneBossDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySceneBossDataRsp));
  NotifySceneBossUpdateRsp_descriptor_ = file->message_type(8);
  static const int NotifySceneBossUpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneBossUpdateRsp, info_),
  };
  NotifySceneBossUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySceneBossUpdateRsp_descriptor_,
      NotifySceneBossUpdateRsp::default_instance_,
      NotifySceneBossUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneBossUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneBossUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySceneBossUpdateRsp));
  NotifyBossInfoRsp_descriptor_ = file->message_type(9);
  static const int NotifyBossInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossInfoRsp, infos_),
  };
  NotifyBossInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBossInfoRsp_descriptor_,
      NotifyBossInfoRsp::default_instance_,
      NotifyBossInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBossInfoRsp));
  EnterBossMapReq_descriptor_ = file->message_type(10);
  static const int EnterBossMapReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossMapReq, id_),
  };
  EnterBossMapReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterBossMapReq_descriptor_,
      EnterBossMapReq::default_instance_,
      EnterBossMapReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossMapReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossMapReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterBossMapReq));
  EnterBossMapRsp_descriptor_ = file->message_type(11);
  static const int EnterBossMapRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossMapRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossMapRsp, id_),
  };
  EnterBossMapRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterBossMapRsp_descriptor_,
      EnterBossMapRsp::default_instance_,
      EnterBossMapRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossMapRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossMapRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterBossMapRsp));
  AttentBossReq_descriptor_ = file->message_type(12);
  static const int AttentBossReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttentBossReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttentBossReq, opt_),
  };
  AttentBossReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttentBossReq_descriptor_,
      AttentBossReq::default_instance_,
      AttentBossReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttentBossReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttentBossReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttentBossReq));
  AttentBossRsp_descriptor_ = file->message_type(13);
  static const int AttentBossRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttentBossRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttentBossRsp, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttentBossRsp, ret_),
  };
  AttentBossRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttentBossRsp_descriptor_,
      AttentBossRsp::default_instance_,
      AttentBossRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttentBossRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttentBossRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttentBossRsp));
  BossDropReq_descriptor_ = file->message_type(14);
  static const int BossDropReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropReq, entertype_),
  };
  BossDropReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDropReq_descriptor_,
      BossDropReq::default_instance_,
      BossDropReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDropReq));
  BossDropRsp_descriptor_ = file->message_type(15);
  static const int BossDropRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropRsp, entertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropRsp, bossdrop_),
  };
  BossDropRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDropRsp_descriptor_,
      BossDropRsp::default_instance_,
      BossDropRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDropRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDropRsp));
  NotifyBossResultRsp_descriptor_ = file->message_type(16);
  static const int NotifyBossResultRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossResultRsp, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossResultRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossResultRsp, com_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossResultRsp, first_),
  };
  NotifyBossResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBossResultRsp_descriptor_,
      NotifyBossResultRsp::default_instance_,
      NotifyBossResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBossResultRsp));
  BossKillReq_descriptor_ = file->message_type(17);
  static const int BossKillReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillReq, id_),
  };
  BossKillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossKillReq_descriptor_,
      BossKillReq::default_instance_,
      BossKillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossKillReq));
  BossKillRsp_descriptor_ = file->message_type(18);
  static const int BossKillRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillRsp, ret_),
  };
  BossKillRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossKillRsp_descriptor_,
      BossKillRsp::default_instance_,
      BossKillRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossKillRsp));
  BossGlobalData_descriptor_ = file->message_type(19);
  static const int BossGlobalData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossGlobalData, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossGlobalData, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossGlobalData, log2_),
  };
  BossGlobalData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossGlobalData_descriptor_,
      BossGlobalData::default_instance_,
      BossGlobalData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossGlobalData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossGlobalData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossGlobalData));
  RunBossInfo_descriptor_ = file->message_type(20);
  static const int RunBossInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunBossInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunBossInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunBossInfo, refresh_time_),
  };
  RunBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunBossInfo_descriptor_,
      RunBossInfo::default_instance_,
      RunBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunBossInfo));
  L2CUpdateBossReq_descriptor_ = file->message_type(21);
  static const int L2CUpdateBossReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CUpdateBossReq, infos_),
  };
  L2CUpdateBossReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CUpdateBossReq_descriptor_,
      L2CUpdateBossReq::default_instance_,
      L2CUpdateBossReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CUpdateBossReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CUpdateBossReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CUpdateBossReq));
  L2CSynAttentReq_descriptor_ = file->message_type(22);
  static const int L2CSynAttentReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynAttentReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynAttentReq, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynAttentReq, opt_),
  };
  L2CSynAttentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CSynAttentReq_descriptor_,
      L2CSynAttentReq::default_instance_,
      L2CSynAttentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynAttentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynAttentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CSynAttentReq));
  L2CKillBossInfoReq_descriptor_ = file->message_type(23);
  static const int L2CKillBossInfoReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CKillBossInfoReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CKillBossInfoReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CKillBossInfoReq, id_),
  };
  L2CKillBossInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CKillBossInfoReq_descriptor_,
      L2CKillBossInfoReq::default_instance_,
      L2CKillBossInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CKillBossInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CKillBossInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CKillBossInfoReq));
  L2CDropRecordReq_descriptor_ = file->message_type(24);
  static const int L2CDropRecordReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDropRecordReq, drop_info_),
  };
  L2CDropRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CDropRecordReq_descriptor_,
      L2CDropRecordReq::default_instance_,
      L2CDropRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDropRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CDropRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CDropRecordReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Boss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossLastKillInfo_descriptor_, &BossLastKillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossInfo_descriptor_, &BossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossSimpleInfo_descriptor_, &BossSimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDropInfo_descriptor_, &BossDropInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBossSimpleRsp_descriptor_, &NotifyBossSimpleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDataReq_descriptor_, &BossDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDataRsp_descriptor_, &BossDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySceneBossDataRsp_descriptor_, &NotifySceneBossDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySceneBossUpdateRsp_descriptor_, &NotifySceneBossUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBossInfoRsp_descriptor_, &NotifyBossInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterBossMapReq_descriptor_, &EnterBossMapReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterBossMapRsp_descriptor_, &EnterBossMapRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttentBossReq_descriptor_, &AttentBossReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttentBossRsp_descriptor_, &AttentBossRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDropReq_descriptor_, &BossDropReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDropRsp_descriptor_, &BossDropRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBossResultRsp_descriptor_, &NotifyBossResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossKillReq_descriptor_, &BossKillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossKillRsp_descriptor_, &BossKillRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossGlobalData_descriptor_, &BossGlobalData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunBossInfo_descriptor_, &RunBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CUpdateBossReq_descriptor_, &L2CUpdateBossReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CSynAttentReq_descriptor_, &L2CSynAttentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CKillBossInfoReq_descriptor_, &L2CKillBossInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CDropRecordReq_descriptor_, &L2CDropRecordReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Boss_2eproto() {
  delete BossLastKillInfo::default_instance_;
  delete BossLastKillInfo_reflection_;
  delete BossInfo::default_instance_;
  delete BossInfo_reflection_;
  delete BossSimpleInfo::default_instance_;
  delete BossSimpleInfo_reflection_;
  delete BossDropInfo::default_instance_;
  delete BossDropInfo_reflection_;
  delete NotifyBossSimpleRsp::default_instance_;
  delete NotifyBossSimpleRsp_reflection_;
  delete BossDataReq::default_instance_;
  delete BossDataReq_reflection_;
  delete BossDataRsp::default_instance_;
  delete BossDataRsp_reflection_;
  delete NotifySceneBossDataRsp::default_instance_;
  delete NotifySceneBossDataRsp_reflection_;
  delete NotifySceneBossUpdateRsp::default_instance_;
  delete NotifySceneBossUpdateRsp_reflection_;
  delete NotifyBossInfoRsp::default_instance_;
  delete NotifyBossInfoRsp_reflection_;
  delete EnterBossMapReq::default_instance_;
  delete EnterBossMapReq_reflection_;
  delete EnterBossMapRsp::default_instance_;
  delete EnterBossMapRsp_reflection_;
  delete AttentBossReq::default_instance_;
  delete AttentBossReq_reflection_;
  delete AttentBossRsp::default_instance_;
  delete AttentBossRsp_reflection_;
  delete BossDropReq::default_instance_;
  delete BossDropReq_reflection_;
  delete BossDropRsp::default_instance_;
  delete BossDropRsp_reflection_;
  delete NotifyBossResultRsp::default_instance_;
  delete NotifyBossResultRsp_reflection_;
  delete BossKillReq::default_instance_;
  delete BossKillReq_reflection_;
  delete BossKillRsp::default_instance_;
  delete BossKillRsp_reflection_;
  delete BossGlobalData::default_instance_;
  delete BossGlobalData_reflection_;
  delete RunBossInfo::default_instance_;
  delete RunBossInfo_reflection_;
  delete L2CUpdateBossReq::default_instance_;
  delete L2CUpdateBossReq_reflection_;
  delete L2CSynAttentReq::default_instance_;
  delete L2CSynAttentReq_reflection_;
  delete L2CKillBossInfoReq::default_instance_;
  delete L2CKillBossInfoReq_reflection_;
  delete L2CDropRecordReq::default_instance_;
  delete L2CDropRecordReq_reflection_;
}

void protobuf_AddDesc_Boss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nBoss.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\032\022common_logic.proto\032\tCom.proto\"<\n\020"
    "BossLastKillInfo\022\016\n\006teamId\030\001 \001(\004\022\014\n\004name"
    "\030\002 \001(\t\022\n\n\002id\030\003 \001(\004\"}\n\010BossInfo\022\n\n\002id\030\001 \001"
    "(\004\022\024\n\014refresh_time\030\002 \001(\004\022\021\n\tattention\030\003 "
    "\001(\005\022\022\n\nboss_state\030\004 \001(\005\022(\n\004last\030\005 \001(\0132\032."
    "proto_ff.BossLastKillInfo\"\227\001\n\016BossSimple"
    "Info\022\021\n\tboss_type\030\001 \001(\005\022\017\n\007cur_num\030\002 \001(\005"
    "\022\017\n\007max_num\030\003 \001(\005\022\020\n\010back_num\030\004 \001(\005\022\024\n\014b"
    "ack_max_num\030\005 \001(\005\022\021\n\tenter_num\030\006 \001(\005\022\025\n\r"
    "enter_max_num\030\007 \001(\005\"w\n\014BossDropInfo\022\021\n\td"
    "rop_time\030\001 \001(\005\022\n\n\002id\030\002 \001(\004\022\014\n\004name\030\003 \001(\t"
    "\022\017\n\007boss_id\030\004 \001(\004\022)\n\010iteminfo\030\005 \001(\0132\027.pr"
    "oto_ff.ItemProtoInfo\"N\n\023NotifyBossSimple"
    "Rsp\022\014\n\004flag\030\001 \001(\005\022)\n\007simples\030\002 \003(\0132\030.pro"
    "to_ff.BossSimpleInfo\"\033\n\013BossDataReq\022\014\n\004t"
    "ype\030\001 \001(\005\">\n\013BossDataRsp\022\014\n\004type\030\001 \001(\005\022!"
    "\n\005infos\030\002 \003(\0132\022.proto_ff.BossInfo\";\n\026Not"
    "ifySceneBossDataRsp\022!\n\005infos\030\001 \003(\0132\022.pro"
    "to_ff.BossInfo\"<\n\030NotifySceneBossUpdateR"
    "sp\022 \n\004info\030\001 \001(\0132\022.proto_ff.BossInfo\"6\n\021"
    "NotifyBossInfoRsp\022!\n\005infos\030\001 \003(\0132\022.proto"
    "_ff.BossInfo\"\035\n\017EnterBossMapReq\022\n\n\002id\030\001 "
    "\001(\003\"*\n\017EnterBossMapRsp\022\013\n\003ret\030\001 \001(\005\022\n\n\002i"
    "d\030\002 \001(\003\"(\n\rAttentBossReq\022\n\n\002id\030\001 \001(\003\022\013\n\003"
    "opt\030\002 \001(\005\"5\n\rAttentBossRsp\022\n\n\002id\030\001 \001(\003\022\013"
    "\n\003opt\030\002 \001(\005\022\013\n\003ret\030\003 \001(\005\" \n\013BossDropReq\022"
    "\021\n\tenterType\030\001 \001(\005\"J\n\013BossDropRsp\022\021\n\tent"
    "erType\030\001 \001(\005\022(\n\010bossDrop\030\002 \003(\0132\026.proto_f"
    "f.BossDropInfo\"}\n\023NotifyBossResultRsp\022\014\n"
    "\004flag\030\001 \001(\005\022\n\n\002id\030\002 \001(\003\022$\n\003com\030\003 \003(\0132\027.p"
    "roto_ff.ItemProtoInfo\022&\n\005first\030\004 \003(\0132\027.p"
    "roto_ff.ItemProtoInfo\"\031\n\013BossKillReq\022\n\n\002"
    "id\030\001 \001(\004\"&\n\013BossKillRsp\022\n\n\002id\030\001 \001(\004\022\013\n\003r"
    "et\030\002 \001(\005\"\206\001\n\016BossGlobalData\022)\n\005infos\030\001 \003"
    "(\0132\032.proto_ff.BossLastKillInfo\022#\n\003log\030\002 "
    "\003(\0132\026.proto_ff.BossDropInfo\022$\n\004log2\030\003 \003("
    "\0132\026.proto_ff.BossDropInfo\">\n\013RunBossInfo"
    "\022\n\n\002id\030\001 \001(\004\022\r\n\005state\030\002 \001(\005\022\024\n\014refresh_t"
    "ime\030\003 \001(\005\"8\n\020L2CUpdateBossReq\022$\n\005infos\030\001"
    " \003(\0132\025.proto_ff.RunBossInfo\"8\n\017L2CSynAtt"
    "entReq\022\013\n\003cid\030\001 \001(\003\022\013\n\003ids\030\002 \003(\003\022\013\n\003opt\030"
    "\003 \001(\005\">\n\022L2CKillBossInfoReq\022\016\n\006teamId\030\001 "
    "\001(\004\022\014\n\004name\030\002 \001(\t\022\n\n\002id\030\003 \001(\004\"=\n\020L2CDrop"
    "RecordReq\022)\n\tdrop_info\030\001 \003(\0132\026.proto_ff."
    "BossDropInfo", 1812);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Boss.proto", &protobuf_RegisterTypes);
  BossLastKillInfo::default_instance_ = new BossLastKillInfo();
  BossInfo::default_instance_ = new BossInfo();
  BossSimpleInfo::default_instance_ = new BossSimpleInfo();
  BossDropInfo::default_instance_ = new BossDropInfo();
  NotifyBossSimpleRsp::default_instance_ = new NotifyBossSimpleRsp();
  BossDataReq::default_instance_ = new BossDataReq();
  BossDataRsp::default_instance_ = new BossDataRsp();
  NotifySceneBossDataRsp::default_instance_ = new NotifySceneBossDataRsp();
  NotifySceneBossUpdateRsp::default_instance_ = new NotifySceneBossUpdateRsp();
  NotifyBossInfoRsp::default_instance_ = new NotifyBossInfoRsp();
  EnterBossMapReq::default_instance_ = new EnterBossMapReq();
  EnterBossMapRsp::default_instance_ = new EnterBossMapRsp();
  AttentBossReq::default_instance_ = new AttentBossReq();
  AttentBossRsp::default_instance_ = new AttentBossRsp();
  BossDropReq::default_instance_ = new BossDropReq();
  BossDropRsp::default_instance_ = new BossDropRsp();
  NotifyBossResultRsp::default_instance_ = new NotifyBossResultRsp();
  BossKillReq::default_instance_ = new BossKillReq();
  BossKillRsp::default_instance_ = new BossKillRsp();
  BossGlobalData::default_instance_ = new BossGlobalData();
  RunBossInfo::default_instance_ = new RunBossInfo();
  L2CUpdateBossReq::default_instance_ = new L2CUpdateBossReq();
  L2CSynAttentReq::default_instance_ = new L2CSynAttentReq();
  L2CKillBossInfoReq::default_instance_ = new L2CKillBossInfoReq();
  L2CDropRecordReq::default_instance_ = new L2CDropRecordReq();
  BossLastKillInfo::default_instance_->InitAsDefaultInstance();
  BossInfo::default_instance_->InitAsDefaultInstance();
  BossSimpleInfo::default_instance_->InitAsDefaultInstance();
  BossDropInfo::default_instance_->InitAsDefaultInstance();
  NotifyBossSimpleRsp::default_instance_->InitAsDefaultInstance();
  BossDataReq::default_instance_->InitAsDefaultInstance();
  BossDataRsp::default_instance_->InitAsDefaultInstance();
  NotifySceneBossDataRsp::default_instance_->InitAsDefaultInstance();
  NotifySceneBossUpdateRsp::default_instance_->InitAsDefaultInstance();
  NotifyBossInfoRsp::default_instance_->InitAsDefaultInstance();
  EnterBossMapReq::default_instance_->InitAsDefaultInstance();
  EnterBossMapRsp::default_instance_->InitAsDefaultInstance();
  AttentBossReq::default_instance_->InitAsDefaultInstance();
  AttentBossRsp::default_instance_->InitAsDefaultInstance();
  BossDropReq::default_instance_->InitAsDefaultInstance();
  BossDropRsp::default_instance_->InitAsDefaultInstance();
  NotifyBossResultRsp::default_instance_->InitAsDefaultInstance();
  BossKillReq::default_instance_->InitAsDefaultInstance();
  BossKillRsp::default_instance_->InitAsDefaultInstance();
  BossGlobalData::default_instance_->InitAsDefaultInstance();
  RunBossInfo::default_instance_->InitAsDefaultInstance();
  L2CUpdateBossReq::default_instance_->InitAsDefaultInstance();
  L2CSynAttentReq::default_instance_->InitAsDefaultInstance();
  L2CKillBossInfoReq::default_instance_->InitAsDefaultInstance();
  L2CDropRecordReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Boss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Boss_2eproto {
  StaticDescriptorInitializer_Boss_2eproto() {
    protobuf_AddDesc_Boss_2eproto();
  }
} static_descriptor_initializer_Boss_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BossLastKillInfo::kTeamIdFieldNumber;
const int BossLastKillInfo::kNameFieldNumber;
const int BossLastKillInfo::kIdFieldNumber;
#endif  // !_MSC_VER

BossLastKillInfo::BossLastKillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossLastKillInfo::InitAsDefaultInstance() {
}

BossLastKillInfo::BossLastKillInfo(const BossLastKillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossLastKillInfo::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossLastKillInfo::~BossLastKillInfo() {
  SharedDtor();
}

void BossLastKillInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BossLastKillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossLastKillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossLastKillInfo_descriptor_;
}

const BossLastKillInfo& BossLastKillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

BossLastKillInfo* BossLastKillInfo::default_instance_ = NULL;

BossLastKillInfo* BossLastKillInfo::New() const {
  return new BossLastKillInfo;
}

void BossLastKillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossLastKillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 teamId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossLastKillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 teamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossLastKillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 teamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossLastKillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 teamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossLastKillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossLastKillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossLastKillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossLastKillInfo::MergeFrom(const BossLastKillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossLastKillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossLastKillInfo::CopyFrom(const BossLastKillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossLastKillInfo::IsInitialized() const {

  return true;
}

void BossLastKillInfo::Swap(BossLastKillInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossLastKillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossLastKillInfo_descriptor_;
  metadata.reflection = BossLastKillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossInfo::kIdFieldNumber;
const int BossInfo::kRefreshTimeFieldNumber;
const int BossInfo::kAttentionFieldNumber;
const int BossInfo::kBossStateFieldNumber;
const int BossInfo::kLastFieldNumber;
#endif  // !_MSC_VER

BossInfo::BossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossInfo::InitAsDefaultInstance() {
  last_ = const_cast< ::proto_ff::BossLastKillInfo*>(&::proto_ff::BossLastKillInfo::default_instance());
}

BossInfo::BossInfo(const BossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  refresh_time_ = GOOGLE_ULONGLONG(0);
  attention_ = 0;
  boss_state_ = 0;
  last_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossInfo::~BossInfo() {
  SharedDtor();
}

void BossInfo::SharedDtor() {
  if (this != default_instance_) {
    delete last_;
  }
}

void BossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossInfo_descriptor_;
}

const BossInfo& BossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

BossInfo* BossInfo::default_instance_ = NULL;

BossInfo* BossInfo::New() const {
  return new BossInfo;
}

void BossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    refresh_time_ = GOOGLE_ULONGLONG(0);
    attention_ = 0;
    boss_state_ = 0;
    if (has_last()) {
      if (last_ != NULL) last_->::proto_ff::BossLastKillInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refresh_time;
        break;
      }

      // optional uint64 refresh_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attention;
        break;
      }

      // optional int32 attention = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attention:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attention_)));
          set_has_attention();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boss_state;
        break;
      }

      // optional int32 boss_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_state_)));
          set_has_boss_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_last;
        break;
      }

      // optional .proto_ff.BossLastKillInfo last = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 refresh_time = 2;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->refresh_time(), output);
  }

  // optional int32 attention = 3;
  if (has_attention()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attention(), output);
  }

  // optional int32 boss_state = 4;
  if (has_boss_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boss_state(), output);
  }

  // optional .proto_ff.BossLastKillInfo last = 5;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->last(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 refresh_time = 2;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->refresh_time(), target);
  }

  // optional int32 attention = 3;
  if (has_attention()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attention(), target);
  }

  // optional int32 boss_state = 4;
  if (has_boss_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boss_state(), target);
  }

  // optional .proto_ff.BossLastKillInfo last = 5;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->last(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 refresh_time = 2;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refresh_time());
    }

    // optional int32 attention = 3;
    if (has_attention()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attention());
    }

    // optional int32 boss_state = 4;
    if (has_boss_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_state());
    }

    // optional .proto_ff.BossLastKillInfo last = 5;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossInfo::MergeFrom(const BossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_attention()) {
      set_attention(from.attention());
    }
    if (from.has_boss_state()) {
      set_boss_state(from.boss_state());
    }
    if (from.has_last()) {
      mutable_last()->::proto_ff::BossLastKillInfo::MergeFrom(from.last());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossInfo::CopyFrom(const BossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossInfo::IsInitialized() const {

  return true;
}

void BossInfo::Swap(BossInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(attention_, other->attention_);
    std::swap(boss_state_, other->boss_state_);
    std::swap(last_, other->last_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossInfo_descriptor_;
  metadata.reflection = BossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossSimpleInfo::kBossTypeFieldNumber;
const int BossSimpleInfo::kCurNumFieldNumber;
const int BossSimpleInfo::kMaxNumFieldNumber;
const int BossSimpleInfo::kBackNumFieldNumber;
const int BossSimpleInfo::kBackMaxNumFieldNumber;
const int BossSimpleInfo::kEnterNumFieldNumber;
const int BossSimpleInfo::kEnterMaxNumFieldNumber;
#endif  // !_MSC_VER

BossSimpleInfo::BossSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossSimpleInfo::InitAsDefaultInstance() {
}

BossSimpleInfo::BossSimpleInfo(const BossSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossSimpleInfo::SharedCtor() {
  _cached_size_ = 0;
  boss_type_ = 0;
  cur_num_ = 0;
  max_num_ = 0;
  back_num_ = 0;
  back_max_num_ = 0;
  enter_num_ = 0;
  enter_max_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossSimpleInfo::~BossSimpleInfo() {
  SharedDtor();
}

void BossSimpleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossSimpleInfo_descriptor_;
}

const BossSimpleInfo& BossSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

BossSimpleInfo* BossSimpleInfo::default_instance_ = NULL;

BossSimpleInfo* BossSimpleInfo::New() const {
  return new BossSimpleInfo;
}

void BossSimpleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boss_type_ = 0;
    cur_num_ = 0;
    max_num_ = 0;
    back_num_ = 0;
    back_max_num_ = 0;
    enter_num_ = 0;
    enter_max_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 boss_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_type_)));
          set_has_boss_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_num;
        break;
      }

      // optional int32 max_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_)));
          set_has_max_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_back_num;
        break;
      }

      // optional int32 back_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &back_num_)));
          set_has_back_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_back_max_num;
        break;
      }

      // optional int32 back_max_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_max_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &back_max_num_)));
          set_has_back_max_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_enter_num;
        break;
      }

      // optional int32 enter_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_num_)));
          set_has_enter_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_enter_max_num;
        break;
      }

      // optional int32 enter_max_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_max_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_max_num_)));
          set_has_enter_max_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 boss_type = 1;
  if (has_boss_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boss_type(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 max_num = 3;
  if (has_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_num(), output);
  }

  // optional int32 back_num = 4;
  if (has_back_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->back_num(), output);
  }

  // optional int32 back_max_num = 5;
  if (has_back_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->back_max_num(), output);
  }

  // optional int32 enter_num = 6;
  if (has_enter_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->enter_num(), output);
  }

  // optional int32 enter_max_num = 7;
  if (has_enter_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->enter_max_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 boss_type = 1;
  if (has_boss_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boss_type(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 max_num = 3;
  if (has_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_num(), target);
  }

  // optional int32 back_num = 4;
  if (has_back_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->back_num(), target);
  }

  // optional int32 back_max_num = 5;
  if (has_back_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->back_max_num(), target);
  }

  // optional int32 enter_num = 6;
  if (has_enter_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->enter_num(), target);
  }

  // optional int32 enter_max_num = 7;
  if (has_enter_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->enter_max_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 boss_type = 1;
    if (has_boss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_type());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 max_num = 3;
    if (has_max_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num());
    }

    // optional int32 back_num = 4;
    if (has_back_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->back_num());
    }

    // optional int32 back_max_num = 5;
    if (has_back_max_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->back_max_num());
    }

    // optional int32 enter_num = 6;
    if (has_enter_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_num());
    }

    // optional int32 enter_max_num = 7;
    if (has_enter_max_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_max_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossSimpleInfo::MergeFrom(const BossSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_type()) {
      set_boss_type(from.boss_type());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_max_num()) {
      set_max_num(from.max_num());
    }
    if (from.has_back_num()) {
      set_back_num(from.back_num());
    }
    if (from.has_back_max_num()) {
      set_back_max_num(from.back_max_num());
    }
    if (from.has_enter_num()) {
      set_enter_num(from.enter_num());
    }
    if (from.has_enter_max_num()) {
      set_enter_max_num(from.enter_max_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossSimpleInfo::CopyFrom(const BossSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossSimpleInfo::IsInitialized() const {

  return true;
}

void BossSimpleInfo::Swap(BossSimpleInfo* other) {
  if (other != this) {
    std::swap(boss_type_, other->boss_type_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(max_num_, other->max_num_);
    std::swap(back_num_, other->back_num_);
    std::swap(back_max_num_, other->back_max_num_);
    std::swap(enter_num_, other->enter_num_);
    std::swap(enter_max_num_, other->enter_max_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossSimpleInfo_descriptor_;
  metadata.reflection = BossSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDropInfo::kDropTimeFieldNumber;
const int BossDropInfo::kIdFieldNumber;
const int BossDropInfo::kNameFieldNumber;
const int BossDropInfo::kBossIdFieldNumber;
const int BossDropInfo::kIteminfoFieldNumber;
#endif  // !_MSC_VER

BossDropInfo::BossDropInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDropInfo::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::proto_ff::ItemProtoInfo*>(&::proto_ff::ItemProtoInfo::default_instance());
}

BossDropInfo::BossDropInfo(const BossDropInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDropInfo::SharedCtor() {
  _cached_size_ = 0;
  drop_time_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boss_id_ = GOOGLE_ULONGLONG(0);
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDropInfo::~BossDropInfo() {
  SharedDtor();
}

void BossDropInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void BossDropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDropInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDropInfo_descriptor_;
}

const BossDropInfo& BossDropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

BossDropInfo* BossDropInfo::default_instance_ = NULL;

BossDropInfo* BossDropInfo::New() const {
  return new BossDropInfo;
}

void BossDropInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    drop_time_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    boss_id_ = GOOGLE_ULONGLONG(0);
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::proto_ff::ItemProtoInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 drop_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_time_)));
          set_has_drop_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boss_id;
        break;
      }

      // optional uint64 boss_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &boss_id_)));
          set_has_boss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_iteminfo;
        break;
      }

      // optional .proto_ff.ItemProtoInfo iteminfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iteminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 drop_time = 1;
  if (has_drop_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->drop_time(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint64 boss_id = 4;
  if (has_boss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->boss_id(), output);
  }

  // optional .proto_ff.ItemProtoInfo iteminfo = 5;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDropInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 drop_time = 1;
  if (has_drop_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->drop_time(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint64 boss_id = 4;
  if (has_boss_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->boss_id(), target);
  }

  // optional .proto_ff.ItemProtoInfo iteminfo = 5;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDropInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 drop_time = 1;
    if (has_drop_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_time());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 boss_id = 4;
    if (has_boss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->boss_id());
    }

    // optional .proto_ff.ItemProtoInfo iteminfo = 5;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDropInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDropInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDropInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDropInfo::MergeFrom(const BossDropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drop_time()) {
      set_drop_time(from.drop_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_boss_id()) {
      set_boss_id(from.boss_id());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::proto_ff::ItemProtoInfo::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDropInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDropInfo::CopyFrom(const BossDropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDropInfo::IsInitialized() const {

  if (has_iteminfo()) {
    if (!this->iteminfo().IsInitialized()) return false;
  }
  return true;
}

void BossDropInfo::Swap(BossDropInfo* other) {
  if (other != this) {
    std::swap(drop_time_, other->drop_time_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(boss_id_, other->boss_id_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDropInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDropInfo_descriptor_;
  metadata.reflection = BossDropInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBossSimpleRsp::kFlagFieldNumber;
const int NotifyBossSimpleRsp::kSimplesFieldNumber;
#endif  // !_MSC_VER

NotifyBossSimpleRsp::NotifyBossSimpleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyBossSimpleRsp::InitAsDefaultInstance() {
}

NotifyBossSimpleRsp::NotifyBossSimpleRsp(const NotifyBossSimpleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyBossSimpleRsp::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBossSimpleRsp::~NotifyBossSimpleRsp() {
  SharedDtor();
}

void NotifyBossSimpleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyBossSimpleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBossSimpleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBossSimpleRsp_descriptor_;
}

const NotifyBossSimpleRsp& NotifyBossSimpleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

NotifyBossSimpleRsp* NotifyBossSimpleRsp::default_instance_ = NULL;

NotifyBossSimpleRsp* NotifyBossSimpleRsp::New() const {
  return new NotifyBossSimpleRsp;
}

void NotifyBossSimpleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
  }
  simples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBossSimpleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simples;
        break;
      }

      // repeated .proto_ff.BossSimpleInfo simples = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simples;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyBossSimpleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated .proto_ff.BossSimpleInfo simples = 2;
  for (int i = 0; i < this->simples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->simples(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyBossSimpleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated .proto_ff.BossSimpleInfo simples = 2;
  for (int i = 0; i < this->simples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simples(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyBossSimpleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated .proto_ff.BossSimpleInfo simples = 2;
  total_size += 1 * this->simples_size();
  for (int i = 0; i < this->simples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBossSimpleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBossSimpleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBossSimpleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBossSimpleRsp::MergeFrom(const NotifyBossSimpleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  simples_.MergeFrom(from.simples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBossSimpleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBossSimpleRsp::CopyFrom(const NotifyBossSimpleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBossSimpleRsp::IsInitialized() const {

  return true;
}

void NotifyBossSimpleRsp::Swap(NotifyBossSimpleRsp* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    simples_.Swap(&other->simples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBossSimpleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBossSimpleRsp_descriptor_;
  metadata.reflection = NotifyBossSimpleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDataReq::kTypeFieldNumber;
#endif  // !_MSC_VER

BossDataReq::BossDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDataReq::InitAsDefaultInstance() {
}

BossDataReq::BossDataReq(const BossDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDataReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDataReq::~BossDataReq() {
  SharedDtor();
}

void BossDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDataReq_descriptor_;
}

const BossDataReq& BossDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

BossDataReq* BossDataReq::default_instance_ = NULL;

BossDataReq* BossDataReq::New() const {
  return new BossDataReq;
}

void BossDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDataReq::MergeFrom(const BossDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDataReq::CopyFrom(const BossDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDataReq::IsInitialized() const {

  return true;
}

void BossDataReq::Swap(BossDataReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDataReq_descriptor_;
  metadata.reflection = BossDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDataRsp::kTypeFieldNumber;
const int BossDataRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

BossDataRsp::BossDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDataRsp::InitAsDefaultInstance() {
}

BossDataRsp::BossDataRsp(const BossDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDataRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDataRsp::~BossDataRsp() {
  SharedDtor();
}

void BossDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDataRsp_descriptor_;
}

const BossDataRsp& BossDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

BossDataRsp* BossDataRsp::default_instance_ = NULL;

BossDataRsp* BossDataRsp::New() const {
  return new BossDataRsp;
}

void BossDataRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.BossInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.BossInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.BossInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.BossInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDataRsp::MergeFrom(const BossDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDataRsp::CopyFrom(const BossDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDataRsp::IsInitialized() const {

  return true;
}

void BossDataRsp::Swap(BossDataRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDataRsp_descriptor_;
  metadata.reflection = BossDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySceneBossDataRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifySceneBossDataRsp::NotifySceneBossDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifySceneBossDataRsp::InitAsDefaultInstance() {
}

NotifySceneBossDataRsp::NotifySceneBossDataRsp(const NotifySceneBossDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySceneBossDataRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySceneBossDataRsp::~NotifySceneBossDataRsp() {
  SharedDtor();
}

void NotifySceneBossDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySceneBossDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySceneBossDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySceneBossDataRsp_descriptor_;
}

const NotifySceneBossDataRsp& NotifySceneBossDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

NotifySceneBossDataRsp* NotifySceneBossDataRsp::default_instance_ = NULL;

NotifySceneBossDataRsp* NotifySceneBossDataRsp::New() const {
  return new NotifySceneBossDataRsp;
}

void NotifySceneBossDataRsp::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySceneBossDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.BossInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySceneBossDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.BossInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifySceneBossDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.BossInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifySceneBossDataRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.BossInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySceneBossDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySceneBossDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySceneBossDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySceneBossDataRsp::MergeFrom(const NotifySceneBossDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySceneBossDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySceneBossDataRsp::CopyFrom(const NotifySceneBossDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySceneBossDataRsp::IsInitialized() const {

  return true;
}

void NotifySceneBossDataRsp::Swap(NotifySceneBossDataRsp* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySceneBossDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySceneBossDataRsp_descriptor_;
  metadata.reflection = NotifySceneBossDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySceneBossUpdateRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

NotifySceneBossUpdateRsp::NotifySceneBossUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifySceneBossUpdateRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::BossInfo*>(&::proto_ff::BossInfo::default_instance());
}

NotifySceneBossUpdateRsp::NotifySceneBossUpdateRsp(const NotifySceneBossUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySceneBossUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySceneBossUpdateRsp::~NotifySceneBossUpdateRsp() {
  SharedDtor();
}

void NotifySceneBossUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void NotifySceneBossUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySceneBossUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySceneBossUpdateRsp_descriptor_;
}

const NotifySceneBossUpdateRsp& NotifySceneBossUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

NotifySceneBossUpdateRsp* NotifySceneBossUpdateRsp::default_instance_ = NULL;

NotifySceneBossUpdateRsp* NotifySceneBossUpdateRsp::New() const {
  return new NotifySceneBossUpdateRsp;
}

void NotifySceneBossUpdateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::BossInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySceneBossUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.BossInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySceneBossUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.BossInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifySceneBossUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.BossInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifySceneBossUpdateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.BossInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySceneBossUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySceneBossUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySceneBossUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySceneBossUpdateRsp::MergeFrom(const NotifySceneBossUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::BossInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySceneBossUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySceneBossUpdateRsp::CopyFrom(const NotifySceneBossUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySceneBossUpdateRsp::IsInitialized() const {

  return true;
}

void NotifySceneBossUpdateRsp::Swap(NotifySceneBossUpdateRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySceneBossUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySceneBossUpdateRsp_descriptor_;
  metadata.reflection = NotifySceneBossUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBossInfoRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyBossInfoRsp::NotifyBossInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyBossInfoRsp::InitAsDefaultInstance() {
}

NotifyBossInfoRsp::NotifyBossInfoRsp(const NotifyBossInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyBossInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBossInfoRsp::~NotifyBossInfoRsp() {
  SharedDtor();
}

void NotifyBossInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyBossInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBossInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBossInfoRsp_descriptor_;
}

const NotifyBossInfoRsp& NotifyBossInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

NotifyBossInfoRsp* NotifyBossInfoRsp::default_instance_ = NULL;

NotifyBossInfoRsp* NotifyBossInfoRsp::New() const {
  return new NotifyBossInfoRsp;
}

void NotifyBossInfoRsp::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBossInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.BossInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyBossInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.BossInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyBossInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.BossInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyBossInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.BossInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBossInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBossInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBossInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBossInfoRsp::MergeFrom(const NotifyBossInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBossInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBossInfoRsp::CopyFrom(const NotifyBossInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBossInfoRsp::IsInitialized() const {

  return true;
}

void NotifyBossInfoRsp::Swap(NotifyBossInfoRsp* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBossInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBossInfoRsp_descriptor_;
  metadata.reflection = NotifyBossInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterBossMapReq::kIdFieldNumber;
#endif  // !_MSC_VER

EnterBossMapReq::EnterBossMapReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterBossMapReq::InitAsDefaultInstance() {
}

EnterBossMapReq::EnterBossMapReq(const EnterBossMapReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterBossMapReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterBossMapReq::~EnterBossMapReq() {
  SharedDtor();
}

void EnterBossMapReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterBossMapReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterBossMapReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterBossMapReq_descriptor_;
}

const EnterBossMapReq& EnterBossMapReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

EnterBossMapReq* EnterBossMapReq::default_instance_ = NULL;

EnterBossMapReq* EnterBossMapReq::New() const {
  return new EnterBossMapReq;
}

void EnterBossMapReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterBossMapReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterBossMapReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterBossMapReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterBossMapReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterBossMapReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterBossMapReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterBossMapReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterBossMapReq::MergeFrom(const EnterBossMapReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterBossMapReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterBossMapReq::CopyFrom(const EnterBossMapReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterBossMapReq::IsInitialized() const {

  return true;
}

void EnterBossMapReq::Swap(EnterBossMapReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterBossMapReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterBossMapReq_descriptor_;
  metadata.reflection = EnterBossMapReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterBossMapRsp::kRetFieldNumber;
const int EnterBossMapRsp::kIdFieldNumber;
#endif  // !_MSC_VER

EnterBossMapRsp::EnterBossMapRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterBossMapRsp::InitAsDefaultInstance() {
}

EnterBossMapRsp::EnterBossMapRsp(const EnterBossMapRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterBossMapRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterBossMapRsp::~EnterBossMapRsp() {
  SharedDtor();
}

void EnterBossMapRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterBossMapRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterBossMapRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterBossMapRsp_descriptor_;
}

const EnterBossMapRsp& EnterBossMapRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

EnterBossMapRsp* EnterBossMapRsp::default_instance_ = NULL;

EnterBossMapRsp* EnterBossMapRsp::New() const {
  return new EnterBossMapRsp;
}

void EnterBossMapRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterBossMapRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterBossMapRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterBossMapRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterBossMapRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterBossMapRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterBossMapRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterBossMapRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterBossMapRsp::MergeFrom(const EnterBossMapRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterBossMapRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterBossMapRsp::CopyFrom(const EnterBossMapRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterBossMapRsp::IsInitialized() const {

  return true;
}

void EnterBossMapRsp::Swap(EnterBossMapRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterBossMapRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterBossMapRsp_descriptor_;
  metadata.reflection = EnterBossMapRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttentBossReq::kIdFieldNumber;
const int AttentBossReq::kOptFieldNumber;
#endif  // !_MSC_VER

AttentBossReq::AttentBossReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttentBossReq::InitAsDefaultInstance() {
}

AttentBossReq::AttentBossReq(const AttentBossReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttentBossReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttentBossReq::~AttentBossReq() {
  SharedDtor();
}

void AttentBossReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttentBossReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttentBossReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttentBossReq_descriptor_;
}

const AttentBossReq& AttentBossReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

AttentBossReq* AttentBossReq::default_instance_ = NULL;

AttentBossReq* AttentBossReq::New() const {
  return new AttentBossReq;
}

void AttentBossReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttentBossReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // optional int32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttentBossReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttentBossReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttentBossReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttentBossReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttentBossReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttentBossReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttentBossReq::MergeFrom(const AttentBossReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttentBossReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttentBossReq::CopyFrom(const AttentBossReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttentBossReq::IsInitialized() const {

  return true;
}

void AttentBossReq::Swap(AttentBossReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttentBossReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttentBossReq_descriptor_;
  metadata.reflection = AttentBossReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttentBossRsp::kIdFieldNumber;
const int AttentBossRsp::kOptFieldNumber;
const int AttentBossRsp::kRetFieldNumber;
#endif  // !_MSC_VER

AttentBossRsp::AttentBossRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttentBossRsp::InitAsDefaultInstance() {
}

AttentBossRsp::AttentBossRsp(const AttentBossRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttentBossRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  opt_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttentBossRsp::~AttentBossRsp() {
  SharedDtor();
}

void AttentBossRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttentBossRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttentBossRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttentBossRsp_descriptor_;
}

const AttentBossRsp& AttentBossRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

AttentBossRsp* AttentBossRsp::default_instance_ = NULL;

AttentBossRsp* AttentBossRsp::New() const {
  return new AttentBossRsp;
}

void AttentBossRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    opt_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttentBossRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // optional int32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttentBossRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttentBossRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttentBossRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttentBossRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttentBossRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttentBossRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttentBossRsp::MergeFrom(const AttentBossRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttentBossRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttentBossRsp::CopyFrom(const AttentBossRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttentBossRsp::IsInitialized() const {

  return true;
}

void AttentBossRsp::Swap(AttentBossRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(opt_, other->opt_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttentBossRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttentBossRsp_descriptor_;
  metadata.reflection = AttentBossRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDropReq::kEnterTypeFieldNumber;
#endif  // !_MSC_VER

BossDropReq::BossDropReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDropReq::InitAsDefaultInstance() {
}

BossDropReq::BossDropReq(const BossDropReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDropReq::SharedCtor() {
  _cached_size_ = 0;
  entertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDropReq::~BossDropReq() {
  SharedDtor();
}

void BossDropReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossDropReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDropReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDropReq_descriptor_;
}

const BossDropReq& BossDropReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

BossDropReq* BossDropReq::default_instance_ = NULL;

BossDropReq* BossDropReq::New() const {
  return new BossDropReq;
}

void BossDropReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDropReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 enterType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entertype_)));
          set_has_entertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDropReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 enterType = 1;
  if (has_entertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDropReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 enterType = 1;
  if (has_entertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDropReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 enterType = 1;
    if (has_entertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDropReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDropReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDropReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDropReq::MergeFrom(const BossDropReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entertype()) {
      set_entertype(from.entertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDropReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDropReq::CopyFrom(const BossDropReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDropReq::IsInitialized() const {

  return true;
}

void BossDropReq::Swap(BossDropReq* other) {
  if (other != this) {
    std::swap(entertype_, other->entertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDropReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDropReq_descriptor_;
  metadata.reflection = BossDropReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDropRsp::kEnterTypeFieldNumber;
const int BossDropRsp::kBossDropFieldNumber;
#endif  // !_MSC_VER

BossDropRsp::BossDropRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDropRsp::InitAsDefaultInstance() {
}

BossDropRsp::BossDropRsp(const BossDropRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDropRsp::SharedCtor() {
  _cached_size_ = 0;
  entertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDropRsp::~BossDropRsp() {
  SharedDtor();
}

void BossDropRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossDropRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDropRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDropRsp_descriptor_;
}

const BossDropRsp& BossDropRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

BossDropRsp* BossDropRsp::default_instance_ = NULL;

BossDropRsp* BossDropRsp::New() const {
  return new BossDropRsp;
}

void BossDropRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entertype_ = 0;
  }
  bossdrop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDropRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 enterType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entertype_)));
          set_has_entertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bossDrop;
        break;
      }

      // repeated .proto_ff.BossDropInfo bossDrop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossDrop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossdrop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bossDrop;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDropRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 enterType = 1;
  if (has_entertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entertype(), output);
  }

  // repeated .proto_ff.BossDropInfo bossDrop = 2;
  for (int i = 0; i < this->bossdrop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bossdrop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDropRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 enterType = 1;
  if (has_entertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entertype(), target);
  }

  // repeated .proto_ff.BossDropInfo bossDrop = 2;
  for (int i = 0; i < this->bossdrop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bossdrop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDropRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 enterType = 1;
    if (has_entertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entertype());
    }

  }
  // repeated .proto_ff.BossDropInfo bossDrop = 2;
  total_size += 1 * this->bossdrop_size();
  for (int i = 0; i < this->bossdrop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossdrop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDropRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDropRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDropRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDropRsp::MergeFrom(const BossDropRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossdrop_.MergeFrom(from.bossdrop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entertype()) {
      set_entertype(from.entertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDropRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDropRsp::CopyFrom(const BossDropRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDropRsp::IsInitialized() const {

  for (int i = 0; i < bossdrop_size(); i++) {
    if (!this->bossdrop(i).IsInitialized()) return false;
  }
  return true;
}

void BossDropRsp::Swap(BossDropRsp* other) {
  if (other != this) {
    std::swap(entertype_, other->entertype_);
    bossdrop_.Swap(&other->bossdrop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDropRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDropRsp_descriptor_;
  metadata.reflection = BossDropRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBossResultRsp::kFlagFieldNumber;
const int NotifyBossResultRsp::kIdFieldNumber;
const int NotifyBossResultRsp::kComFieldNumber;
const int NotifyBossResultRsp::kFirstFieldNumber;
#endif  // !_MSC_VER

NotifyBossResultRsp::NotifyBossResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyBossResultRsp::InitAsDefaultInstance() {
}

NotifyBossResultRsp::NotifyBossResultRsp(const NotifyBossResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyBossResultRsp::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBossResultRsp::~NotifyBossResultRsp() {
  SharedDtor();
}

void NotifyBossResultRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyBossResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBossResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBossResultRsp_descriptor_;
}

const NotifyBossResultRsp& NotifyBossResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

NotifyBossResultRsp* NotifyBossResultRsp::default_instance_ = NULL;

NotifyBossResultRsp* NotifyBossResultRsp::New() const {
  return new NotifyBossResultRsp;
}

void NotifyBossResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  com_.Clear();
  first_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBossResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_com;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo com = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_com:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_com()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_com;
        if (input->ExpectTag(34)) goto parse_first;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo first = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_first()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_first;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyBossResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // repeated .proto_ff.ItemProtoInfo com = 3;
  for (int i = 0; i < this->com_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->com(i), output);
  }

  // repeated .proto_ff.ItemProtoInfo first = 4;
  for (int i = 0; i < this->first_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->first(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyBossResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // repeated .proto_ff.ItemProtoInfo com = 3;
  for (int i = 0; i < this->com_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->com(i), target);
  }

  // repeated .proto_ff.ItemProtoInfo first = 4;
  for (int i = 0; i < this->first_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->first(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyBossResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated .proto_ff.ItemProtoInfo com = 3;
  total_size += 1 * this->com_size();
  for (int i = 0; i < this->com_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->com(i));
  }

  // repeated .proto_ff.ItemProtoInfo first = 4;
  total_size += 1 * this->first_size();
  for (int i = 0; i < this->first_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->first(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBossResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBossResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBossResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBossResultRsp::MergeFrom(const NotifyBossResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  com_.MergeFrom(from.com_);
  first_.MergeFrom(from.first_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBossResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBossResultRsp::CopyFrom(const NotifyBossResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBossResultRsp::IsInitialized() const {

  for (int i = 0; i < com_size(); i++) {
    if (!this->com(i).IsInitialized()) return false;
  }
  for (int i = 0; i < first_size(); i++) {
    if (!this->first(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyBossResultRsp::Swap(NotifyBossResultRsp* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(id_, other->id_);
    com_.Swap(&other->com_);
    first_.Swap(&other->first_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBossResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBossResultRsp_descriptor_;
  metadata.reflection = NotifyBossResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossKillReq::kIdFieldNumber;
#endif  // !_MSC_VER

BossKillReq::BossKillReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossKillReq::InitAsDefaultInstance() {
}

BossKillReq::BossKillReq(const BossKillReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossKillReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossKillReq::~BossKillReq() {
  SharedDtor();
}

void BossKillReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossKillReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossKillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossKillReq_descriptor_;
}

const BossKillReq& BossKillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

BossKillReq* BossKillReq::default_instance_ = NULL;

BossKillReq* BossKillReq::New() const {
  return new BossKillReq;
}

void BossKillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossKillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossKillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossKillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossKillReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossKillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossKillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossKillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossKillReq::MergeFrom(const BossKillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossKillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossKillReq::CopyFrom(const BossKillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossKillReq::IsInitialized() const {

  return true;
}

void BossKillReq::Swap(BossKillReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossKillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossKillReq_descriptor_;
  metadata.reflection = BossKillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossKillRsp::kIdFieldNumber;
const int BossKillRsp::kRetFieldNumber;
#endif  // !_MSC_VER

BossKillRsp::BossKillRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossKillRsp::InitAsDefaultInstance() {
}

BossKillRsp::BossKillRsp(const BossKillRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossKillRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossKillRsp::~BossKillRsp() {
  SharedDtor();
}

void BossKillRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossKillRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossKillRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossKillRsp_descriptor_;
}

const BossKillRsp& BossKillRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

BossKillRsp* BossKillRsp::default_instance_ = NULL;

BossKillRsp* BossKillRsp::New() const {
  return new BossKillRsp;
}

void BossKillRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossKillRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossKillRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossKillRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossKillRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossKillRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossKillRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossKillRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossKillRsp::MergeFrom(const BossKillRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossKillRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossKillRsp::CopyFrom(const BossKillRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossKillRsp::IsInitialized() const {

  return true;
}

void BossKillRsp::Swap(BossKillRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossKillRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossKillRsp_descriptor_;
  metadata.reflection = BossKillRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossGlobalData::kInfosFieldNumber;
const int BossGlobalData::kLogFieldNumber;
const int BossGlobalData::kLog2FieldNumber;
#endif  // !_MSC_VER

BossGlobalData::BossGlobalData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossGlobalData::InitAsDefaultInstance() {
}

BossGlobalData::BossGlobalData(const BossGlobalData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossGlobalData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossGlobalData::~BossGlobalData() {
  SharedDtor();
}

void BossGlobalData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossGlobalData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossGlobalData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossGlobalData_descriptor_;
}

const BossGlobalData& BossGlobalData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

BossGlobalData* BossGlobalData::default_instance_ = NULL;

BossGlobalData* BossGlobalData::New() const {
  return new BossGlobalData;
}

void BossGlobalData::Clear() {
  infos_.Clear();
  log_.Clear();
  log2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossGlobalData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.BossLastKillInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(18)) goto parse_log;
        break;
      }

      // repeated .proto_ff.BossDropInfo log = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log;
        if (input->ExpectTag(26)) goto parse_log2;
        break;
      }

      // repeated .proto_ff.BossDropInfo log2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log2;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossGlobalData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.BossLastKillInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // repeated .proto_ff.BossDropInfo log = 2;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->log(i), output);
  }

  // repeated .proto_ff.BossDropInfo log2 = 3;
  for (int i = 0; i < this->log2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log2(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossGlobalData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.BossLastKillInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // repeated .proto_ff.BossDropInfo log = 2;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->log(i), target);
  }

  // repeated .proto_ff.BossDropInfo log2 = 3;
  for (int i = 0; i < this->log2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log2(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossGlobalData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.BossLastKillInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated .proto_ff.BossDropInfo log = 2;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  // repeated .proto_ff.BossDropInfo log2 = 3;
  total_size += 1 * this->log2_size();
  for (int i = 0; i < this->log2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log2(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossGlobalData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossGlobalData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossGlobalData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossGlobalData::MergeFrom(const BossGlobalData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  log_.MergeFrom(from.log_);
  log2_.MergeFrom(from.log2_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossGlobalData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossGlobalData::CopyFrom(const BossGlobalData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossGlobalData::IsInitialized() const {

  for (int i = 0; i < log_size(); i++) {
    if (!this->log(i).IsInitialized()) return false;
  }
  for (int i = 0; i < log2_size(); i++) {
    if (!this->log2(i).IsInitialized()) return false;
  }
  return true;
}

void BossGlobalData::Swap(BossGlobalData* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    log_.Swap(&other->log_);
    log2_.Swap(&other->log2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossGlobalData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossGlobalData_descriptor_;
  metadata.reflection = BossGlobalData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunBossInfo::kIdFieldNumber;
const int RunBossInfo::kStateFieldNumber;
const int RunBossInfo::kRefreshTimeFieldNumber;
#endif  // !_MSC_VER

RunBossInfo::RunBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunBossInfo::InitAsDefaultInstance() {
}

RunBossInfo::RunBossInfo(const RunBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunBossInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  refresh_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunBossInfo::~RunBossInfo() {
  SharedDtor();
}

void RunBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunBossInfo_descriptor_;
}

const RunBossInfo& RunBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

RunBossInfo* RunBossInfo::default_instance_ = NULL;

RunBossInfo* RunBossInfo::New() const {
  return new RunBossInfo;
}

void RunBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
    refresh_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refresh_time;
        break;
      }

      // optional int32 refresh_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 refresh_time = 3;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refresh_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 refresh_time = 3;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refresh_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 refresh_time = 3;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunBossInfo::MergeFrom(const RunBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunBossInfo::CopyFrom(const RunBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunBossInfo::IsInitialized() const {

  return true;
}

void RunBossInfo::Swap(RunBossInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunBossInfo_descriptor_;
  metadata.reflection = RunBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CUpdateBossReq::kInfosFieldNumber;
#endif  // !_MSC_VER

L2CUpdateBossReq::L2CUpdateBossReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CUpdateBossReq::InitAsDefaultInstance() {
}

L2CUpdateBossReq::L2CUpdateBossReq(const L2CUpdateBossReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CUpdateBossReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CUpdateBossReq::~L2CUpdateBossReq() {
  SharedDtor();
}

void L2CUpdateBossReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CUpdateBossReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CUpdateBossReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CUpdateBossReq_descriptor_;
}

const L2CUpdateBossReq& L2CUpdateBossReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

L2CUpdateBossReq* L2CUpdateBossReq::default_instance_ = NULL;

L2CUpdateBossReq* L2CUpdateBossReq::New() const {
  return new L2CUpdateBossReq;
}

void L2CUpdateBossReq::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CUpdateBossReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RunBossInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CUpdateBossReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RunBossInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CUpdateBossReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RunBossInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CUpdateBossReq::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RunBossInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CUpdateBossReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CUpdateBossReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CUpdateBossReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CUpdateBossReq::MergeFrom(const L2CUpdateBossReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CUpdateBossReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CUpdateBossReq::CopyFrom(const L2CUpdateBossReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CUpdateBossReq::IsInitialized() const {

  return true;
}

void L2CUpdateBossReq::Swap(L2CUpdateBossReq* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CUpdateBossReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CUpdateBossReq_descriptor_;
  metadata.reflection = L2CUpdateBossReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CSynAttentReq::kCidFieldNumber;
const int L2CSynAttentReq::kIdsFieldNumber;
const int L2CSynAttentReq::kOptFieldNumber;
#endif  // !_MSC_VER

L2CSynAttentReq::L2CSynAttentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CSynAttentReq::InitAsDefaultInstance() {
}

L2CSynAttentReq::L2CSynAttentReq(const L2CSynAttentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CSynAttentReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_LONGLONG(0);
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CSynAttentReq::~L2CSynAttentReq() {
  SharedDtor();
}

void L2CSynAttentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CSynAttentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CSynAttentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CSynAttentReq_descriptor_;
}

const L2CSynAttentReq& L2CSynAttentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

L2CSynAttentReq* L2CSynAttentReq::default_instance_ = NULL;

L2CSynAttentReq* L2CSynAttentReq::New() const {
  return new L2CSynAttentReq;
}

void L2CSynAttentReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_LONGLONG(0);
    opt_ = 0;
  }
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CSynAttentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ids;
        break;
      }

      // repeated int64 ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ids;
        if (input->ExpectTag(24)) goto parse_opt;
        break;
      }

      // optional int32 opt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CSynAttentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cid(), output);
  }

  // repeated int64 ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->ids(i), output);
  }

  // optional int32 opt = 3;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CSynAttentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cid(), target);
  }

  // repeated int64 ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->ids(i), target);
  }

  // optional int32 opt = 3;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CSynAttentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional int32 opt = 3;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  // repeated int64 ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CSynAttentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CSynAttentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CSynAttentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CSynAttentReq::MergeFrom(const L2CSynAttentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CSynAttentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CSynAttentReq::CopyFrom(const L2CSynAttentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CSynAttentReq::IsInitialized() const {

  return true;
}

void L2CSynAttentReq::Swap(L2CSynAttentReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    ids_.Swap(&other->ids_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CSynAttentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CSynAttentReq_descriptor_;
  metadata.reflection = L2CSynAttentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CKillBossInfoReq::kTeamIdFieldNumber;
const int L2CKillBossInfoReq::kNameFieldNumber;
const int L2CKillBossInfoReq::kIdFieldNumber;
#endif  // !_MSC_VER

L2CKillBossInfoReq::L2CKillBossInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CKillBossInfoReq::InitAsDefaultInstance() {
}

L2CKillBossInfoReq::L2CKillBossInfoReq(const L2CKillBossInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CKillBossInfoReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CKillBossInfoReq::~L2CKillBossInfoReq() {
  SharedDtor();
}

void L2CKillBossInfoReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void L2CKillBossInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CKillBossInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CKillBossInfoReq_descriptor_;
}

const L2CKillBossInfoReq& L2CKillBossInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

L2CKillBossInfoReq* L2CKillBossInfoReq::default_instance_ = NULL;

L2CKillBossInfoReq* L2CKillBossInfoReq::New() const {
  return new L2CKillBossInfoReq;
}

void L2CKillBossInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CKillBossInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 teamId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CKillBossInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 teamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CKillBossInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 teamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CKillBossInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 teamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CKillBossInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CKillBossInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CKillBossInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CKillBossInfoReq::MergeFrom(const L2CKillBossInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CKillBossInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CKillBossInfoReq::CopyFrom(const L2CKillBossInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CKillBossInfoReq::IsInitialized() const {

  return true;
}

void L2CKillBossInfoReq::Swap(L2CKillBossInfoReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CKillBossInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CKillBossInfoReq_descriptor_;
  metadata.reflection = L2CKillBossInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CDropRecordReq::kDropInfoFieldNumber;
#endif  // !_MSC_VER

L2CDropRecordReq::L2CDropRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CDropRecordReq::InitAsDefaultInstance() {
}

L2CDropRecordReq::L2CDropRecordReq(const L2CDropRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CDropRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CDropRecordReq::~L2CDropRecordReq() {
  SharedDtor();
}

void L2CDropRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CDropRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CDropRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CDropRecordReq_descriptor_;
}

const L2CDropRecordReq& L2CDropRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boss_2eproto();
  return *default_instance_;
}

L2CDropRecordReq* L2CDropRecordReq::default_instance_ = NULL;

L2CDropRecordReq* L2CDropRecordReq::New() const {
  return new L2CDropRecordReq;
}

void L2CDropRecordReq::Clear() {
  drop_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CDropRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.BossDropInfo drop_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drop_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_drop_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CDropRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.BossDropInfo drop_info = 1;
  for (int i = 0; i < this->drop_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drop_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CDropRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.BossDropInfo drop_info = 1;
  for (int i = 0; i < this->drop_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drop_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CDropRecordReq::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.BossDropInfo drop_info = 1;
  total_size += 1 * this->drop_info_size();
  for (int i = 0; i < this->drop_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drop_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CDropRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CDropRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CDropRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CDropRecordReq::MergeFrom(const L2CDropRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_info_.MergeFrom(from.drop_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CDropRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CDropRecordReq::CopyFrom(const L2CDropRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CDropRecordReq::IsInitialized() const {

  for (int i = 0; i < drop_info_size(); i++) {
    if (!this->drop_info(i).IsInitialized()) return false;
  }
  return true;
}

void L2CDropRecordReq::Swap(L2CDropRecordReq* other) {
  if (other != this) {
    drop_info_.Swap(&other->drop_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CDropRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CDropRecordReq_descriptor_;
  metadata.reflection = L2CDropRecordReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
