// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FindTreasure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FindTreasure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* CLFindTreausreGetRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreausreGetRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreausreGetRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreausreGetRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreausreGetServerRecrodReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreausreGetServerRecrodReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreausreGetServerRecrodRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreausreGetServerRecrodRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasurePackageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasurePackageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasurePackageRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasurePackageRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasureGetServerChouJiangNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasureGetServerChouJiangNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasureGetServerChouJiangNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasureGetServerChouJiangNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasureBigDragonInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasureBigDragonInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasureBigDragonInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasureBigDragonInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasureBigDragonChouJiangReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasureBigDragonChouJiangReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasureBigDragonChouJiangRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasureBigDragonChouJiangRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasureBigDragonGetTotalRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasureBigDragonGetTotalRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasureBigDragonGetTotalRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasureBigDragonGetTotalRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasureBaiLianInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasureBaiLianInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasureBaiLianInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasureBaiLianInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasureBaiLianChouJiangReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasureBaiLianChouJiangReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasureBaiLianChouJiangRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasureBaiLianChouJiangRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasureBaiLianExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasureBaiLianExchangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasureBaiLianExchangeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasureBaiLianExchangeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasureBaiLianBuyShopReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasureBaiLianBuyShopReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasureBaiLianBuyShopRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasureBaiLianBuyShopRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyFindTreasureBaiLianActiveChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFindTreasureBaiLianActiveChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasureSiShengInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasureSiShengInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasuareSiShengInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasuareSiShengInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasureSiShengChouJiangReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasureSiShengChouJiangReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasureSiShengChouJiangRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasureSiShengChouJiangRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasureSiShengGetTotalRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasureSiShengGetTotalRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasureSiShengGetTotalRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasureSiShengGetTotalRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFindTreasureSiShengGetServerTotalRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFindTreasureSiShengGetServerTotalRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFindTreasureSiShengGetServerTotalRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFindTreasureSiShengGetServerTotalRewardRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FindTreasure_2eproto() {
  protobuf_AddDesc_FindTreasure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FindTreasure.proto");
  GOOGLE_CHECK(file != NULL);
  CLFindTreausreGetRecordReq_descriptor_ = file->message_type(0);
  static const int CLFindTreausreGetRecordReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreausreGetRecordReq, id_),
  };
  CLFindTreausreGetRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreausreGetRecordReq_descriptor_,
      CLFindTreausreGetRecordReq::default_instance_,
      CLFindTreausreGetRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreausreGetRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreausreGetRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreausreGetRecordReq));
  LCFindTreausreGetRecordRsp_descriptor_ = file->message_type(1);
  static const int LCFindTreausreGetRecordRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreausreGetRecordRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreausreGetRecordRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreausreGetRecordRsp, record_),
  };
  LCFindTreausreGetRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreausreGetRecordRsp_descriptor_,
      LCFindTreausreGetRecordRsp::default_instance_,
      LCFindTreausreGetRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreausreGetRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreausreGetRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreausreGetRecordRsp));
  CLFindTreausreGetServerRecrodReq_descriptor_ = file->message_type(2);
  static const int CLFindTreausreGetServerRecrodReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreausreGetServerRecrodReq, id_),
  };
  CLFindTreausreGetServerRecrodReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreausreGetServerRecrodReq_descriptor_,
      CLFindTreausreGetServerRecrodReq::default_instance_,
      CLFindTreausreGetServerRecrodReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreausreGetServerRecrodReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreausreGetServerRecrodReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreausreGetServerRecrodReq));
  LCFindTreausreGetServerRecrodRsp_descriptor_ = file->message_type(3);
  static const int LCFindTreausreGetServerRecrodRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreausreGetServerRecrodRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreausreGetServerRecrodRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreausreGetServerRecrodRsp, record_),
  };
  LCFindTreausreGetServerRecrodRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreausreGetServerRecrodRsp_descriptor_,
      LCFindTreausreGetServerRecrodRsp::default_instance_,
      LCFindTreausreGetServerRecrodRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreausreGetServerRecrodRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreausreGetServerRecrodRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreausreGetServerRecrodRsp));
  CLFindTreasurePackageReq_descriptor_ = file->message_type(4);
  static const int CLFindTreasurePackageReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasurePackageReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasurePackageReq, grid_list_),
  };
  CLFindTreasurePackageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasurePackageReq_descriptor_,
      CLFindTreasurePackageReq::default_instance_,
      CLFindTreasurePackageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasurePackageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasurePackageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasurePackageReq));
  LCFindTreasurePackageRsp_descriptor_ = file->message_type(5);
  static const int LCFindTreasurePackageRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasurePackageRsp, ret_code_),
  };
  LCFindTreasurePackageRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasurePackageRsp_descriptor_,
      LCFindTreasurePackageRsp::default_instance_,
      LCFindTreasurePackageRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasurePackageRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasurePackageRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasurePackageRsp));
  CLFindTreasureGetServerChouJiangNumReq_descriptor_ = file->message_type(6);
  static const int CLFindTreasureGetServerChouJiangNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureGetServerChouJiangNumReq, id_),
  };
  CLFindTreasureGetServerChouJiangNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasureGetServerChouJiangNumReq_descriptor_,
      CLFindTreasureGetServerChouJiangNumReq::default_instance_,
      CLFindTreasureGetServerChouJiangNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureGetServerChouJiangNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureGetServerChouJiangNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasureGetServerChouJiangNumReq));
  LCFindTreasureGetServerChouJiangNumRsp_descriptor_ = file->message_type(7);
  static const int LCFindTreasureGetServerChouJiangNumRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureGetServerChouJiangNumRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureGetServerChouJiangNumRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureGetServerChouJiangNumRsp, server_all_num_),
  };
  LCFindTreasureGetServerChouJiangNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasureGetServerChouJiangNumRsp_descriptor_,
      LCFindTreasureGetServerChouJiangNumRsp::default_instance_,
      LCFindTreasureGetServerChouJiangNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureGetServerChouJiangNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureGetServerChouJiangNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasureGetServerChouJiangNumRsp));
  CLFindTreasureBigDragonInfoReq_descriptor_ = file->message_type(8);
  static const int CLFindTreasureBigDragonInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBigDragonInfoReq, id_),
  };
  CLFindTreasureBigDragonInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasureBigDragonInfoReq_descriptor_,
      CLFindTreasureBigDragonInfoReq::default_instance_,
      CLFindTreasureBigDragonInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBigDragonInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBigDragonInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasureBigDragonInfoReq));
  LCFindTreasureBigDragonInfoRsp_descriptor_ = file->message_type(9);
  static const int LCFindTreasureBigDragonInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonInfoRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonInfoRsp, data_),
  };
  LCFindTreasureBigDragonInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasureBigDragonInfoRsp_descriptor_,
      LCFindTreasureBigDragonInfoRsp::default_instance_,
      LCFindTreasureBigDragonInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasureBigDragonInfoRsp));
  CLFindTreasureBigDragonChouJiangReq_descriptor_ = file->message_type(10);
  static const int CLFindTreasureBigDragonChouJiangReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBigDragonChouJiangReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBigDragonChouJiangReq, num_type_),
  };
  CLFindTreasureBigDragonChouJiangReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasureBigDragonChouJiangReq_descriptor_,
      CLFindTreasureBigDragonChouJiangReq::default_instance_,
      CLFindTreasureBigDragonChouJiangReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBigDragonChouJiangReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBigDragonChouJiangReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasureBigDragonChouJiangReq));
  LCFindTreasureBigDragonChouJiangRsp_descriptor_ = file->message_type(11);
  static const int LCFindTreasureBigDragonChouJiangRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonChouJiangRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonChouJiangRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonChouJiangRsp, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonChouJiangRsp, all_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonChouJiangRsp, total_reward_),
  };
  LCFindTreasureBigDragonChouJiangRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasureBigDragonChouJiangRsp_descriptor_,
      LCFindTreasureBigDragonChouJiangRsp::default_instance_,
      LCFindTreasureBigDragonChouJiangRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonChouJiangRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonChouJiangRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasureBigDragonChouJiangRsp));
  CLFindTreasureBigDragonGetTotalRewardReq_descriptor_ = file->message_type(12);
  static const int CLFindTreasureBigDragonGetTotalRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBigDragonGetTotalRewardReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBigDragonGetTotalRewardReq, total_id_),
  };
  CLFindTreasureBigDragonGetTotalRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasureBigDragonGetTotalRewardReq_descriptor_,
      CLFindTreasureBigDragonGetTotalRewardReq::default_instance_,
      CLFindTreasureBigDragonGetTotalRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBigDragonGetTotalRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBigDragonGetTotalRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasureBigDragonGetTotalRewardReq));
  LCFindTreasureBigDragonGetTotalRewardRsp_descriptor_ = file->message_type(13);
  static const int LCFindTreasureBigDragonGetTotalRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonGetTotalRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonGetTotalRewardRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonGetTotalRewardRsp, reward_),
  };
  LCFindTreasureBigDragonGetTotalRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasureBigDragonGetTotalRewardRsp_descriptor_,
      LCFindTreasureBigDragonGetTotalRewardRsp::default_instance_,
      LCFindTreasureBigDragonGetTotalRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonGetTotalRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBigDragonGetTotalRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasureBigDragonGetTotalRewardRsp));
  CLFindTreasureBaiLianInfoReq_descriptor_ = file->message_type(14);
  static const int CLFindTreasureBaiLianInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianInfoReq, id_),
  };
  CLFindTreasureBaiLianInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasureBaiLianInfoReq_descriptor_,
      CLFindTreasureBaiLianInfoReq::default_instance_,
      CLFindTreasureBaiLianInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasureBaiLianInfoReq));
  LCFindTreasureBaiLianInfoRsp_descriptor_ = file->message_type(15);
  static const int LCFindTreasureBaiLianInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianInfoRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianInfoRsp, data_),
  };
  LCFindTreasureBaiLianInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasureBaiLianInfoRsp_descriptor_,
      LCFindTreasureBaiLianInfoRsp::default_instance_,
      LCFindTreasureBaiLianInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasureBaiLianInfoRsp));
  CLFindTreasureBaiLianChouJiangReq_descriptor_ = file->message_type(16);
  static const int CLFindTreasureBaiLianChouJiangReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianChouJiangReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianChouJiangReq, num_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianChouJiangReq, use_special_),
  };
  CLFindTreasureBaiLianChouJiangReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasureBaiLianChouJiangReq_descriptor_,
      CLFindTreasureBaiLianChouJiangReq::default_instance_,
      CLFindTreasureBaiLianChouJiangReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianChouJiangReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianChouJiangReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasureBaiLianChouJiangReq));
  LCFindTreasureBaiLianChouJiangRsp_descriptor_ = file->message_type(17);
  static const int LCFindTreasureBaiLianChouJiangRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianChouJiangRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianChouJiangRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianChouJiangRsp, reward_id_),
  };
  LCFindTreasureBaiLianChouJiangRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasureBaiLianChouJiangRsp_descriptor_,
      LCFindTreasureBaiLianChouJiangRsp::default_instance_,
      LCFindTreasureBaiLianChouJiangRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianChouJiangRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianChouJiangRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasureBaiLianChouJiangRsp));
  CLFindTreasureBaiLianExchangeReq_descriptor_ = file->message_type(18);
  static const int CLFindTreasureBaiLianExchangeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianExchangeReq, shop_id_),
  };
  CLFindTreasureBaiLianExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasureBaiLianExchangeReq_descriptor_,
      CLFindTreasureBaiLianExchangeReq::default_instance_,
      CLFindTreasureBaiLianExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasureBaiLianExchangeReq));
  LCFindTreasureBaiLianExchangeRsp_descriptor_ = file->message_type(19);
  static const int LCFindTreasureBaiLianExchangeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianExchangeRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianExchangeRsp, shop_id_),
  };
  LCFindTreasureBaiLianExchangeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasureBaiLianExchangeRsp_descriptor_,
      LCFindTreasureBaiLianExchangeRsp::default_instance_,
      LCFindTreasureBaiLianExchangeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianExchangeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianExchangeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasureBaiLianExchangeRsp));
  CLFindTreasureBaiLianBuyShopReq_descriptor_ = file->message_type(20);
  static const int CLFindTreasureBaiLianBuyShopReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianBuyShopReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianBuyShopReq, active_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianBuyShopReq, active_shop_id_),
  };
  CLFindTreasureBaiLianBuyShopReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasureBaiLianBuyShopReq_descriptor_,
      CLFindTreasureBaiLianBuyShopReq::default_instance_,
      CLFindTreasureBaiLianBuyShopReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianBuyShopReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureBaiLianBuyShopReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasureBaiLianBuyShopReq));
  LCFindTreasureBaiLianBuyShopRsp_descriptor_ = file->message_type(21);
  static const int LCFindTreasureBaiLianBuyShopRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianBuyShopRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianBuyShopRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianBuyShopRsp, active_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianBuyShopRsp, shop_data_),
  };
  LCFindTreasureBaiLianBuyShopRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasureBaiLianBuyShopRsp_descriptor_,
      LCFindTreasureBaiLianBuyShopRsp::default_instance_,
      LCFindTreasureBaiLianBuyShopRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianBuyShopRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureBaiLianBuyShopRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasureBaiLianBuyShopRsp));
  NotifyFindTreasureBaiLianActiveChange_descriptor_ = file->message_type(22);
  static const int NotifyFindTreasureBaiLianActiveChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFindTreasureBaiLianActiveChange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFindTreasureBaiLianActiveChange, data_),
  };
  NotifyFindTreasureBaiLianActiveChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFindTreasureBaiLianActiveChange_descriptor_,
      NotifyFindTreasureBaiLianActiveChange::default_instance_,
      NotifyFindTreasureBaiLianActiveChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFindTreasureBaiLianActiveChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFindTreasureBaiLianActiveChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFindTreasureBaiLianActiveChange));
  CLFindTreasureSiShengInfoReq_descriptor_ = file->message_type(23);
  static const int CLFindTreasureSiShengInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengInfoReq, id_),
  };
  CLFindTreasureSiShengInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasureSiShengInfoReq_descriptor_,
      CLFindTreasureSiShengInfoReq::default_instance_,
      CLFindTreasureSiShengInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasureSiShengInfoReq));
  LCFindTreasuareSiShengInfoRsp_descriptor_ = file->message_type(24);
  static const int LCFindTreasuareSiShengInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasuareSiShengInfoRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasuareSiShengInfoRsp, data_),
  };
  LCFindTreasuareSiShengInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasuareSiShengInfoRsp_descriptor_,
      LCFindTreasuareSiShengInfoRsp::default_instance_,
      LCFindTreasuareSiShengInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasuareSiShengInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasuareSiShengInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasuareSiShengInfoRsp));
  CLFindTreasureSiShengChouJiangReq_descriptor_ = file->message_type(25);
  static const int CLFindTreasureSiShengChouJiangReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengChouJiangReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengChouJiangReq, num_type_),
  };
  CLFindTreasureSiShengChouJiangReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasureSiShengChouJiangReq_descriptor_,
      CLFindTreasureSiShengChouJiangReq::default_instance_,
      CLFindTreasureSiShengChouJiangReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengChouJiangReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengChouJiangReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasureSiShengChouJiangReq));
  LCFindTreasureSiShengChouJiangRsp_descriptor_ = file->message_type(26);
  static const int LCFindTreasureSiShengChouJiangRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengChouJiangRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengChouJiangRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengChouJiangRsp, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengChouJiangRsp, all_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengChouJiangRsp, person_total_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengChouJiangRsp, server_total_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengChouJiangRsp, server_all_num_),
  };
  LCFindTreasureSiShengChouJiangRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasureSiShengChouJiangRsp_descriptor_,
      LCFindTreasureSiShengChouJiangRsp::default_instance_,
      LCFindTreasureSiShengChouJiangRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengChouJiangRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengChouJiangRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasureSiShengChouJiangRsp));
  CLFindTreasureSiShengGetTotalRewardReq_descriptor_ = file->message_type(27);
  static const int CLFindTreasureSiShengGetTotalRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengGetTotalRewardReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengGetTotalRewardReq, total_id_),
  };
  CLFindTreasureSiShengGetTotalRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasureSiShengGetTotalRewardReq_descriptor_,
      CLFindTreasureSiShengGetTotalRewardReq::default_instance_,
      CLFindTreasureSiShengGetTotalRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengGetTotalRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengGetTotalRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasureSiShengGetTotalRewardReq));
  LCFindTreasureSiShengGetTotalRewardRsp_descriptor_ = file->message_type(28);
  static const int LCFindTreasureSiShengGetTotalRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengGetTotalRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengGetTotalRewardRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengGetTotalRewardRsp, reward_),
  };
  LCFindTreasureSiShengGetTotalRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasureSiShengGetTotalRewardRsp_descriptor_,
      LCFindTreasureSiShengGetTotalRewardRsp::default_instance_,
      LCFindTreasureSiShengGetTotalRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengGetTotalRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengGetTotalRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasureSiShengGetTotalRewardRsp));
  CLFindTreasureSiShengGetServerTotalRewardReq_descriptor_ = file->message_type(29);
  static const int CLFindTreasureSiShengGetServerTotalRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengGetServerTotalRewardReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengGetServerTotalRewardReq, total_id_),
  };
  CLFindTreasureSiShengGetServerTotalRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFindTreasureSiShengGetServerTotalRewardReq_descriptor_,
      CLFindTreasureSiShengGetServerTotalRewardReq::default_instance_,
      CLFindTreasureSiShengGetServerTotalRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengGetServerTotalRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFindTreasureSiShengGetServerTotalRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFindTreasureSiShengGetServerTotalRewardReq));
  LCFindTreasureSiShengGetServerTotalRewardRsp_descriptor_ = file->message_type(30);
  static const int LCFindTreasureSiShengGetServerTotalRewardRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengGetServerTotalRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengGetServerTotalRewardRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengGetServerTotalRewardRsp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengGetServerTotalRewardRsp, all_num_),
  };
  LCFindTreasureSiShengGetServerTotalRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFindTreasureSiShengGetServerTotalRewardRsp_descriptor_,
      LCFindTreasureSiShengGetServerTotalRewardRsp::default_instance_,
      LCFindTreasureSiShengGetServerTotalRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengGetServerTotalRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFindTreasureSiShengGetServerTotalRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFindTreasureSiShengGetServerTotalRewardRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FindTreasure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreausreGetRecordReq_descriptor_, &CLFindTreausreGetRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreausreGetRecordRsp_descriptor_, &LCFindTreausreGetRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreausreGetServerRecrodReq_descriptor_, &CLFindTreausreGetServerRecrodReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreausreGetServerRecrodRsp_descriptor_, &LCFindTreausreGetServerRecrodRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasurePackageReq_descriptor_, &CLFindTreasurePackageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasurePackageRsp_descriptor_, &LCFindTreasurePackageRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasureGetServerChouJiangNumReq_descriptor_, &CLFindTreasureGetServerChouJiangNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasureGetServerChouJiangNumRsp_descriptor_, &LCFindTreasureGetServerChouJiangNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasureBigDragonInfoReq_descriptor_, &CLFindTreasureBigDragonInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasureBigDragonInfoRsp_descriptor_, &LCFindTreasureBigDragonInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasureBigDragonChouJiangReq_descriptor_, &CLFindTreasureBigDragonChouJiangReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasureBigDragonChouJiangRsp_descriptor_, &LCFindTreasureBigDragonChouJiangRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasureBigDragonGetTotalRewardReq_descriptor_, &CLFindTreasureBigDragonGetTotalRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasureBigDragonGetTotalRewardRsp_descriptor_, &LCFindTreasureBigDragonGetTotalRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasureBaiLianInfoReq_descriptor_, &CLFindTreasureBaiLianInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasureBaiLianInfoRsp_descriptor_, &LCFindTreasureBaiLianInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasureBaiLianChouJiangReq_descriptor_, &CLFindTreasureBaiLianChouJiangReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasureBaiLianChouJiangRsp_descriptor_, &LCFindTreasureBaiLianChouJiangRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasureBaiLianExchangeReq_descriptor_, &CLFindTreasureBaiLianExchangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasureBaiLianExchangeRsp_descriptor_, &LCFindTreasureBaiLianExchangeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasureBaiLianBuyShopReq_descriptor_, &CLFindTreasureBaiLianBuyShopReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasureBaiLianBuyShopRsp_descriptor_, &LCFindTreasureBaiLianBuyShopRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFindTreasureBaiLianActiveChange_descriptor_, &NotifyFindTreasureBaiLianActiveChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasureSiShengInfoReq_descriptor_, &CLFindTreasureSiShengInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasuareSiShengInfoRsp_descriptor_, &LCFindTreasuareSiShengInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasureSiShengChouJiangReq_descriptor_, &CLFindTreasureSiShengChouJiangReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasureSiShengChouJiangRsp_descriptor_, &LCFindTreasureSiShengChouJiangRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasureSiShengGetTotalRewardReq_descriptor_, &CLFindTreasureSiShengGetTotalRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasureSiShengGetTotalRewardRsp_descriptor_, &LCFindTreasureSiShengGetTotalRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFindTreasureSiShengGetServerTotalRewardReq_descriptor_, &CLFindTreasureSiShengGetServerTotalRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFindTreasureSiShengGetServerTotalRewardRsp_descriptor_, &LCFindTreasureSiShengGetServerTotalRewardRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FindTreasure_2eproto() {
  delete CLFindTreausreGetRecordReq::default_instance_;
  delete CLFindTreausreGetRecordReq_reflection_;
  delete LCFindTreausreGetRecordRsp::default_instance_;
  delete LCFindTreausreGetRecordRsp_reflection_;
  delete CLFindTreausreGetServerRecrodReq::default_instance_;
  delete CLFindTreausreGetServerRecrodReq_reflection_;
  delete LCFindTreausreGetServerRecrodRsp::default_instance_;
  delete LCFindTreausreGetServerRecrodRsp_reflection_;
  delete CLFindTreasurePackageReq::default_instance_;
  delete CLFindTreasurePackageReq_reflection_;
  delete LCFindTreasurePackageRsp::default_instance_;
  delete LCFindTreasurePackageRsp_reflection_;
  delete CLFindTreasureGetServerChouJiangNumReq::default_instance_;
  delete CLFindTreasureGetServerChouJiangNumReq_reflection_;
  delete LCFindTreasureGetServerChouJiangNumRsp::default_instance_;
  delete LCFindTreasureGetServerChouJiangNumRsp_reflection_;
  delete CLFindTreasureBigDragonInfoReq::default_instance_;
  delete CLFindTreasureBigDragonInfoReq_reflection_;
  delete LCFindTreasureBigDragonInfoRsp::default_instance_;
  delete LCFindTreasureBigDragonInfoRsp_reflection_;
  delete CLFindTreasureBigDragonChouJiangReq::default_instance_;
  delete CLFindTreasureBigDragonChouJiangReq_reflection_;
  delete LCFindTreasureBigDragonChouJiangRsp::default_instance_;
  delete LCFindTreasureBigDragonChouJiangRsp_reflection_;
  delete CLFindTreasureBigDragonGetTotalRewardReq::default_instance_;
  delete CLFindTreasureBigDragonGetTotalRewardReq_reflection_;
  delete LCFindTreasureBigDragonGetTotalRewardRsp::default_instance_;
  delete LCFindTreasureBigDragonGetTotalRewardRsp_reflection_;
  delete CLFindTreasureBaiLianInfoReq::default_instance_;
  delete CLFindTreasureBaiLianInfoReq_reflection_;
  delete LCFindTreasureBaiLianInfoRsp::default_instance_;
  delete LCFindTreasureBaiLianInfoRsp_reflection_;
  delete CLFindTreasureBaiLianChouJiangReq::default_instance_;
  delete CLFindTreasureBaiLianChouJiangReq_reflection_;
  delete LCFindTreasureBaiLianChouJiangRsp::default_instance_;
  delete LCFindTreasureBaiLianChouJiangRsp_reflection_;
  delete CLFindTreasureBaiLianExchangeReq::default_instance_;
  delete CLFindTreasureBaiLianExchangeReq_reflection_;
  delete LCFindTreasureBaiLianExchangeRsp::default_instance_;
  delete LCFindTreasureBaiLianExchangeRsp_reflection_;
  delete CLFindTreasureBaiLianBuyShopReq::default_instance_;
  delete CLFindTreasureBaiLianBuyShopReq_reflection_;
  delete LCFindTreasureBaiLianBuyShopRsp::default_instance_;
  delete LCFindTreasureBaiLianBuyShopRsp_reflection_;
  delete NotifyFindTreasureBaiLianActiveChange::default_instance_;
  delete NotifyFindTreasureBaiLianActiveChange_reflection_;
  delete CLFindTreasureSiShengInfoReq::default_instance_;
  delete CLFindTreasureSiShengInfoReq_reflection_;
  delete LCFindTreasuareSiShengInfoRsp::default_instance_;
  delete LCFindTreasuareSiShengInfoRsp_reflection_;
  delete CLFindTreasureSiShengChouJiangReq::default_instance_;
  delete CLFindTreasureSiShengChouJiangReq_reflection_;
  delete LCFindTreasureSiShengChouJiangRsp::default_instance_;
  delete LCFindTreasureSiShengChouJiangRsp_reflection_;
  delete CLFindTreasureSiShengGetTotalRewardReq::default_instance_;
  delete CLFindTreasureSiShengGetTotalRewardReq_reflection_;
  delete LCFindTreasureSiShengGetTotalRewardRsp::default_instance_;
  delete LCFindTreasureSiShengGetTotalRewardRsp_reflection_;
  delete CLFindTreasureSiShengGetServerTotalRewardReq::default_instance_;
  delete CLFindTreasureSiShengGetServerTotalRewardReq_reflection_;
  delete LCFindTreasureSiShengGetServerTotalRewardRsp::default_instance_;
  delete LCFindTreasureSiShengGetServerTotalRewardRsp_reflection_;
}

void protobuf_AddDesc_FindTreasure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022FindTreasure.proto\022\010proto_ff\032\tCom.prot"
    "o\032\017ComDefine.proto\"(\n\032CLFindTreausreGetR"
    "ecordReq\022\n\n\002id\030\001 \001(\005\"n\n\032LCFindTreausreGe"
    "tRecordRsp\022\020\n\010ret_code\030\001 \001(\005\022\n\n\002id\030\002 \001(\005"
    "\0222\n\006record\030\003 \003(\0132\".proto_ff.FindTreasure"
    "RewardRecord\".\n CLFindTreausreGetServerR"
    "ecrodReq\022\n\n\002id\030\001 \001(\005\"t\n LCFindTreausreGe"
    "tServerRecrodRsp\022\020\n\010ret_code\030\001 \001(\005\022\n\n\002id"
    "\030\002 \001(\005\0222\n\006record\030\003 \003(\0132\".proto_ff.FindTr"
    "easureRewardRecord\";\n\030CLFindTreasurePack"
    "ageReq\022\014\n\004type\030\001 \001(\005\022\021\n\tgrid_list\030\002 \003(\005\""
    ",\n\030LCFindTreasurePackageRsp\022\020\n\010ret_code\030"
    "\002 \001(\005\"4\n&CLFindTreasureGetServerChouJian"
    "gNumReq\022\n\n\002id\030\001 \001(\005\"^\n&LCFindTreasureGet"
    "ServerChouJiangNumRsp\022\020\n\010ret_code\030\001 \001(\005\022"
    "\n\n\002id\030\002 \001(\005\022\026\n\016server_all_num\030\003 \001(\005\",\n\036C"
    "LFindTreasureBigDragonInfoReq\022\n\n\002id\030\001 \001("
    "\005\"e\n\036LCFindTreasureBigDragonInfoRsp\022\020\n\010r"
    "et_code\030\001 \001(\005\0221\n\004data\030\002 \001(\0132#.proto_ff.F"
    "indTreasureBigDragonData\"C\n#CLFindTreasu"
    "reBigDragonChouJiangReq\022\n\n\002id\030\001 \001(\005\022\020\n\010n"
    "um_type\030\002 \001(\005\"\250\001\n#LCFindTreasureBigDrago"
    "nChouJiangRsp\022\020\n\010ret_code\030\001 \001(\005\022\n\n\002id\030\002 "
    "\001(\005\022\021\n\treward_id\030\003 \003(\005\022\017\n\007all_num\030\004 \001(\005\022"
    "\?\n\014total_reward\030\005 \003(\0132).proto_ff.FindTre"
    "asureBigDragonRewardData\"H\n(CLFindTreasu"
    "reBigDragonGetTotalRewardReq\022\n\n\002id\030\001 \001(\005"
    "\022\020\n\010total_id\030\002 \001(\005\"\203\001\n(LCFindTreasureBig"
    "DragonGetTotalRewardRsp\022\020\n\010ret_code\030\001 \001("
    "\005\022\n\n\002id\030\002 \001(\005\0229\n\006reward\030\003 \003(\0132).proto_ff"
    ".FindTreasureBigDragonRewardData\"*\n\034CLFi"
    "ndTreasureBaiLianInfoReq\022\n\n\002id\030\001 \001(\005\"a\n\034"
    "LCFindTreasureBaiLianInfoRsp\022\020\n\010ret_code"
    "\030\001 \001(\005\022/\n\004data\030\002 \001(\0132!.proto_ff.FindTrea"
    "sureBaiLianData\"V\n!CLFindTreasureBaiLian"
    "ChouJiangReq\022\n\n\002id\030\001 \001(\005\022\020\n\010num_type\030\002 \001"
    "(\005\022\023\n\013use_special\030\003 \001(\005\"T\n!LCFindTreasur"
    "eBaiLianChouJiangRsp\022\020\n\010ret_code\030\001 \001(\005\022\n"
    "\n\002id\030\002 \001(\005\022\021\n\treward_id\030\003 \003(\005\"3\n CLFindT"
    "reasureBaiLianExchangeReq\022\017\n\007shop_id\030\001 \001"
    "(\005\"E\n LCFindTreasureBaiLianExchangeRsp\022\020"
    "\n\010ret_code\030\001 \001(\005\022\017\n\007shop_id\030\002 \001(\005\"X\n\037CLF"
    "indTreasureBaiLianBuyShopReq\022\n\n\002id\030\001 \001(\005"
    "\022\021\n\tactive_id\030\002 \001(\005\022\026\n\016active_shop_id\030\003 "
    "\001(\005\"\214\001\n\037LCFindTreasureBaiLianBuyShopRsp\022"
    "\020\n\010ret_code\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\021\n\tactive_"
    "id\030\003 \001(\005\0228\n\tshop_data\030\004 \001(\0132%.proto_ff.F"
    "indTreasureBaiLianShopData\"j\n%NotifyFind"
    "TreasureBaiLianActiveChange\022\n\n\002id\030\001 \001(\005\022"
    "5\n\004data\030\002 \001(\0132\'.proto_ff.FindTreasureBai"
    "LianActiveData\"*\n\034CLFindTreasureSiShengI"
    "nfoReq\022\n\n\002id\030\001 \001(\005\"b\n\035LCFindTreasuareSiS"
    "hengInfoRsp\022\020\n\010ret_code\030\001 \001(\005\022/\n\004data\030\002 "
    "\001(\0132!.proto_ff.FindTreasureSiShengData\"A"
    "\n!CLFindTreasureSiShengChouJiangReq\022\n\n\002i"
    "d\030\001 \001(\005\022\020\n\010num_type\030\002 \001(\005\"\211\002\n!LCFindTrea"
    "sureSiShengChouJiangRsp\022\020\n\010ret_code\030\001 \001("
    "\005\022\n\n\002id\030\002 \001(\005\022\021\n\treward_id\030\003 \003(\005\022\017\n\007all_"
    "num\030\004 \001(\005\022D\n\023person_total_reward\030\005 \003(\0132\'"
    ".proto_ff.FindTreasureSiShengRewardData\022"
    "D\n\023server_total_reward\030\006 \003(\0132\'.proto_ff."
    "FindTreasureSiShengRewardData\022\026\n\016server_"
    "all_num\030\007 \001(\005\"F\n&CLFindTreasureSiShengGe"
    "tTotalRewardReq\022\n\n\002id\030\001 \001(\005\022\020\n\010total_id\030"
    "\002 \001(\005\"\177\n&LCFindTreasureSiShengGetTotalRe"
    "wardRsp\022\020\n\010ret_code\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\0227\n"
    "\006reward\030\003 \003(\0132\'.proto_ff.FindTreasureSiS"
    "hengRewardData\"L\n,CLFindTreasureSiShengG"
    "etServerTotalRewardReq\022\n\n\002id\030\001 \001(\005\022\020\n\010to"
    "tal_id\030\002 \001(\005\"\226\001\n,LCFindTreasureSiShengGe"
    "tServerTotalRewardRsp\022\020\n\010ret_code\030\001 \001(\005\022"
    "\n\n\002id\030\002 \001(\005\0227\n\006reward\030\003 \003(\0132\'.proto_ff.F"
    "indTreasureSiShengRewardData\022\017\n\007all_num\030"
    "\004 \001(\005", 2925);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FindTreasure.proto", &protobuf_RegisterTypes);
  CLFindTreausreGetRecordReq::default_instance_ = new CLFindTreausreGetRecordReq();
  LCFindTreausreGetRecordRsp::default_instance_ = new LCFindTreausreGetRecordRsp();
  CLFindTreausreGetServerRecrodReq::default_instance_ = new CLFindTreausreGetServerRecrodReq();
  LCFindTreausreGetServerRecrodRsp::default_instance_ = new LCFindTreausreGetServerRecrodRsp();
  CLFindTreasurePackageReq::default_instance_ = new CLFindTreasurePackageReq();
  LCFindTreasurePackageRsp::default_instance_ = new LCFindTreasurePackageRsp();
  CLFindTreasureGetServerChouJiangNumReq::default_instance_ = new CLFindTreasureGetServerChouJiangNumReq();
  LCFindTreasureGetServerChouJiangNumRsp::default_instance_ = new LCFindTreasureGetServerChouJiangNumRsp();
  CLFindTreasureBigDragonInfoReq::default_instance_ = new CLFindTreasureBigDragonInfoReq();
  LCFindTreasureBigDragonInfoRsp::default_instance_ = new LCFindTreasureBigDragonInfoRsp();
  CLFindTreasureBigDragonChouJiangReq::default_instance_ = new CLFindTreasureBigDragonChouJiangReq();
  LCFindTreasureBigDragonChouJiangRsp::default_instance_ = new LCFindTreasureBigDragonChouJiangRsp();
  CLFindTreasureBigDragonGetTotalRewardReq::default_instance_ = new CLFindTreasureBigDragonGetTotalRewardReq();
  LCFindTreasureBigDragonGetTotalRewardRsp::default_instance_ = new LCFindTreasureBigDragonGetTotalRewardRsp();
  CLFindTreasureBaiLianInfoReq::default_instance_ = new CLFindTreasureBaiLianInfoReq();
  LCFindTreasureBaiLianInfoRsp::default_instance_ = new LCFindTreasureBaiLianInfoRsp();
  CLFindTreasureBaiLianChouJiangReq::default_instance_ = new CLFindTreasureBaiLianChouJiangReq();
  LCFindTreasureBaiLianChouJiangRsp::default_instance_ = new LCFindTreasureBaiLianChouJiangRsp();
  CLFindTreasureBaiLianExchangeReq::default_instance_ = new CLFindTreasureBaiLianExchangeReq();
  LCFindTreasureBaiLianExchangeRsp::default_instance_ = new LCFindTreasureBaiLianExchangeRsp();
  CLFindTreasureBaiLianBuyShopReq::default_instance_ = new CLFindTreasureBaiLianBuyShopReq();
  LCFindTreasureBaiLianBuyShopRsp::default_instance_ = new LCFindTreasureBaiLianBuyShopRsp();
  NotifyFindTreasureBaiLianActiveChange::default_instance_ = new NotifyFindTreasureBaiLianActiveChange();
  CLFindTreasureSiShengInfoReq::default_instance_ = new CLFindTreasureSiShengInfoReq();
  LCFindTreasuareSiShengInfoRsp::default_instance_ = new LCFindTreasuareSiShengInfoRsp();
  CLFindTreasureSiShengChouJiangReq::default_instance_ = new CLFindTreasureSiShengChouJiangReq();
  LCFindTreasureSiShengChouJiangRsp::default_instance_ = new LCFindTreasureSiShengChouJiangRsp();
  CLFindTreasureSiShengGetTotalRewardReq::default_instance_ = new CLFindTreasureSiShengGetTotalRewardReq();
  LCFindTreasureSiShengGetTotalRewardRsp::default_instance_ = new LCFindTreasureSiShengGetTotalRewardRsp();
  CLFindTreasureSiShengGetServerTotalRewardReq::default_instance_ = new CLFindTreasureSiShengGetServerTotalRewardReq();
  LCFindTreasureSiShengGetServerTotalRewardRsp::default_instance_ = new LCFindTreasureSiShengGetServerTotalRewardRsp();
  CLFindTreausreGetRecordReq::default_instance_->InitAsDefaultInstance();
  LCFindTreausreGetRecordRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreausreGetServerRecrodReq::default_instance_->InitAsDefaultInstance();
  LCFindTreausreGetServerRecrodRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreasurePackageReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasurePackageRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreasureGetServerChouJiangNumReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasureGetServerChouJiangNumRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreasureBigDragonInfoReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasureBigDragonInfoRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreasureBigDragonChouJiangReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasureBigDragonChouJiangRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreasureBigDragonGetTotalRewardReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasureBigDragonGetTotalRewardRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreasureBaiLianInfoReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasureBaiLianInfoRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreasureBaiLianChouJiangReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasureBaiLianChouJiangRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreasureBaiLianExchangeReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasureBaiLianExchangeRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreasureBaiLianBuyShopReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasureBaiLianBuyShopRsp::default_instance_->InitAsDefaultInstance();
  NotifyFindTreasureBaiLianActiveChange::default_instance_->InitAsDefaultInstance();
  CLFindTreasureSiShengInfoReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasuareSiShengInfoRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreasureSiShengChouJiangReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasureSiShengChouJiangRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreasureSiShengGetTotalRewardReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasureSiShengGetTotalRewardRsp::default_instance_->InitAsDefaultInstance();
  CLFindTreasureSiShengGetServerTotalRewardReq::default_instance_->InitAsDefaultInstance();
  LCFindTreasureSiShengGetServerTotalRewardRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FindTreasure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FindTreasure_2eproto {
  StaticDescriptorInitializer_FindTreasure_2eproto() {
    protobuf_AddDesc_FindTreasure_2eproto();
  }
} static_descriptor_initializer_FindTreasure_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CLFindTreausreGetRecordReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLFindTreausreGetRecordReq::CLFindTreausreGetRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreausreGetRecordReq::InitAsDefaultInstance() {
}

CLFindTreausreGetRecordReq::CLFindTreausreGetRecordReq(const CLFindTreausreGetRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreausreGetRecordReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreausreGetRecordReq::~CLFindTreausreGetRecordReq() {
  SharedDtor();
}

void CLFindTreausreGetRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreausreGetRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreausreGetRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreausreGetRecordReq_descriptor_;
}

const CLFindTreausreGetRecordReq& CLFindTreausreGetRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreausreGetRecordReq* CLFindTreausreGetRecordReq::default_instance_ = NULL;

CLFindTreausreGetRecordReq* CLFindTreausreGetRecordReq::New() const {
  return new CLFindTreausreGetRecordReq;
}

void CLFindTreausreGetRecordReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreausreGetRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreausreGetRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreausreGetRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreausreGetRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreausreGetRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreausreGetRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreausreGetRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreausreGetRecordReq::MergeFrom(const CLFindTreausreGetRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreausreGetRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreausreGetRecordReq::CopyFrom(const CLFindTreausreGetRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreausreGetRecordReq::IsInitialized() const {

  return true;
}

void CLFindTreausreGetRecordReq::Swap(CLFindTreausreGetRecordReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreausreGetRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreausreGetRecordReq_descriptor_;
  metadata.reflection = CLFindTreausreGetRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreausreGetRecordRsp::kRetCodeFieldNumber;
const int LCFindTreausreGetRecordRsp::kIdFieldNumber;
const int LCFindTreausreGetRecordRsp::kRecordFieldNumber;
#endif  // !_MSC_VER

LCFindTreausreGetRecordRsp::LCFindTreausreGetRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreausreGetRecordRsp::InitAsDefaultInstance() {
}

LCFindTreausreGetRecordRsp::LCFindTreausreGetRecordRsp(const LCFindTreausreGetRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreausreGetRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreausreGetRecordRsp::~LCFindTreausreGetRecordRsp() {
  SharedDtor();
}

void LCFindTreausreGetRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCFindTreausreGetRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreausreGetRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreausreGetRecordRsp_descriptor_;
}

const LCFindTreausreGetRecordRsp& LCFindTreausreGetRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreausreGetRecordRsp* LCFindTreausreGetRecordRsp::default_instance_ = NULL;

LCFindTreausreGetRecordRsp* LCFindTreausreGetRecordRsp::New() const {
  return new LCFindTreausreGetRecordRsp;
}

void LCFindTreausreGetRecordRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
  }
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreausreGetRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // repeated .proto_ff.FindTreasureRewardRecord record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreausreGetRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated .proto_ff.FindTreasureRewardRecord record = 3;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreausreGetRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated .proto_ff.FindTreasureRewardRecord record = 3;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreausreGetRecordRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .proto_ff.FindTreasureRewardRecord record = 3;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreausreGetRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreausreGetRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreausreGetRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreausreGetRecordRsp::MergeFrom(const LCFindTreausreGetRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreausreGetRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreausreGetRecordRsp::CopyFrom(const LCFindTreausreGetRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreausreGetRecordRsp::IsInitialized() const {

  return true;
}

void LCFindTreausreGetRecordRsp::Swap(LCFindTreausreGetRecordRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreausreGetRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreausreGetRecordRsp_descriptor_;
  metadata.reflection = LCFindTreausreGetRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreausreGetServerRecrodReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLFindTreausreGetServerRecrodReq::CLFindTreausreGetServerRecrodReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreausreGetServerRecrodReq::InitAsDefaultInstance() {
}

CLFindTreausreGetServerRecrodReq::CLFindTreausreGetServerRecrodReq(const CLFindTreausreGetServerRecrodReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreausreGetServerRecrodReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreausreGetServerRecrodReq::~CLFindTreausreGetServerRecrodReq() {
  SharedDtor();
}

void CLFindTreausreGetServerRecrodReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreausreGetServerRecrodReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreausreGetServerRecrodReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreausreGetServerRecrodReq_descriptor_;
}

const CLFindTreausreGetServerRecrodReq& CLFindTreausreGetServerRecrodReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreausreGetServerRecrodReq* CLFindTreausreGetServerRecrodReq::default_instance_ = NULL;

CLFindTreausreGetServerRecrodReq* CLFindTreausreGetServerRecrodReq::New() const {
  return new CLFindTreausreGetServerRecrodReq;
}

void CLFindTreausreGetServerRecrodReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreausreGetServerRecrodReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreausreGetServerRecrodReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreausreGetServerRecrodReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreausreGetServerRecrodReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreausreGetServerRecrodReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreausreGetServerRecrodReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreausreGetServerRecrodReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreausreGetServerRecrodReq::MergeFrom(const CLFindTreausreGetServerRecrodReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreausreGetServerRecrodReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreausreGetServerRecrodReq::CopyFrom(const CLFindTreausreGetServerRecrodReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreausreGetServerRecrodReq::IsInitialized() const {

  return true;
}

void CLFindTreausreGetServerRecrodReq::Swap(CLFindTreausreGetServerRecrodReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreausreGetServerRecrodReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreausreGetServerRecrodReq_descriptor_;
  metadata.reflection = CLFindTreausreGetServerRecrodReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreausreGetServerRecrodRsp::kRetCodeFieldNumber;
const int LCFindTreausreGetServerRecrodRsp::kIdFieldNumber;
const int LCFindTreausreGetServerRecrodRsp::kRecordFieldNumber;
#endif  // !_MSC_VER

LCFindTreausreGetServerRecrodRsp::LCFindTreausreGetServerRecrodRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreausreGetServerRecrodRsp::InitAsDefaultInstance() {
}

LCFindTreausreGetServerRecrodRsp::LCFindTreausreGetServerRecrodRsp(const LCFindTreausreGetServerRecrodRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreausreGetServerRecrodRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreausreGetServerRecrodRsp::~LCFindTreausreGetServerRecrodRsp() {
  SharedDtor();
}

void LCFindTreausreGetServerRecrodRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCFindTreausreGetServerRecrodRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreausreGetServerRecrodRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreausreGetServerRecrodRsp_descriptor_;
}

const LCFindTreausreGetServerRecrodRsp& LCFindTreausreGetServerRecrodRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreausreGetServerRecrodRsp* LCFindTreausreGetServerRecrodRsp::default_instance_ = NULL;

LCFindTreausreGetServerRecrodRsp* LCFindTreausreGetServerRecrodRsp::New() const {
  return new LCFindTreausreGetServerRecrodRsp;
}

void LCFindTreausreGetServerRecrodRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
  }
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreausreGetServerRecrodRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // repeated .proto_ff.FindTreasureRewardRecord record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreausreGetServerRecrodRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated .proto_ff.FindTreasureRewardRecord record = 3;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreausreGetServerRecrodRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated .proto_ff.FindTreasureRewardRecord record = 3;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreausreGetServerRecrodRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .proto_ff.FindTreasureRewardRecord record = 3;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreausreGetServerRecrodRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreausreGetServerRecrodRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreausreGetServerRecrodRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreausreGetServerRecrodRsp::MergeFrom(const LCFindTreausreGetServerRecrodRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreausreGetServerRecrodRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreausreGetServerRecrodRsp::CopyFrom(const LCFindTreausreGetServerRecrodRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreausreGetServerRecrodRsp::IsInitialized() const {

  return true;
}

void LCFindTreausreGetServerRecrodRsp::Swap(LCFindTreausreGetServerRecrodRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreausreGetServerRecrodRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreausreGetServerRecrodRsp_descriptor_;
  metadata.reflection = LCFindTreausreGetServerRecrodRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasurePackageReq::kTypeFieldNumber;
const int CLFindTreasurePackageReq::kGridListFieldNumber;
#endif  // !_MSC_VER

CLFindTreasurePackageReq::CLFindTreasurePackageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasurePackageReq::InitAsDefaultInstance() {
}

CLFindTreasurePackageReq::CLFindTreasurePackageReq(const CLFindTreasurePackageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasurePackageReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasurePackageReq::~CLFindTreasurePackageReq() {
  SharedDtor();
}

void CLFindTreasurePackageReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasurePackageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasurePackageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasurePackageReq_descriptor_;
}

const CLFindTreasurePackageReq& CLFindTreasurePackageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasurePackageReq* CLFindTreasurePackageReq::default_instance_ = NULL;

CLFindTreasurePackageReq* CLFindTreasurePackageReq::New() const {
  return new CLFindTreasurePackageReq;
}

void CLFindTreasurePackageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  grid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasurePackageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_list;
        break;
      }

      // repeated int32 grid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_grid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_grid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasurePackageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 grid_list = 2;
  for (int i = 0; i < this->grid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->grid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasurePackageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int32 grid_list = 2;
  for (int i = 0; i < this->grid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->grid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasurePackageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 grid_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->grid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->grid_list(i));
    }
    total_size += 1 * this->grid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasurePackageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasurePackageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasurePackageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasurePackageReq::MergeFrom(const CLFindTreasurePackageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  grid_list_.MergeFrom(from.grid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasurePackageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasurePackageReq::CopyFrom(const CLFindTreasurePackageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasurePackageReq::IsInitialized() const {

  return true;
}

void CLFindTreasurePackageReq::Swap(CLFindTreasurePackageReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    grid_list_.Swap(&other->grid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasurePackageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasurePackageReq_descriptor_;
  metadata.reflection = CLFindTreasurePackageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasurePackageRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

LCFindTreasurePackageRsp::LCFindTreasurePackageRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasurePackageRsp::InitAsDefaultInstance() {
}

LCFindTreasurePackageRsp::LCFindTreasurePackageRsp(const LCFindTreasurePackageRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasurePackageRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasurePackageRsp::~LCFindTreasurePackageRsp() {
  SharedDtor();
}

void LCFindTreasurePackageRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCFindTreasurePackageRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasurePackageRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasurePackageRsp_descriptor_;
}

const LCFindTreasurePackageRsp& LCFindTreasurePackageRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasurePackageRsp* LCFindTreasurePackageRsp::default_instance_ = NULL;

LCFindTreasurePackageRsp* LCFindTreasurePackageRsp::New() const {
  return new LCFindTreasurePackageRsp;
}

void LCFindTreasurePackageRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasurePackageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasurePackageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasurePackageRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 2;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasurePackageRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasurePackageRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasurePackageRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasurePackageRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasurePackageRsp::MergeFrom(const LCFindTreasurePackageRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasurePackageRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasurePackageRsp::CopyFrom(const LCFindTreasurePackageRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasurePackageRsp::IsInitialized() const {

  return true;
}

void LCFindTreasurePackageRsp::Swap(LCFindTreasurePackageRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasurePackageRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasurePackageRsp_descriptor_;
  metadata.reflection = LCFindTreasurePackageRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasureGetServerChouJiangNumReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLFindTreasureGetServerChouJiangNumReq::CLFindTreasureGetServerChouJiangNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasureGetServerChouJiangNumReq::InitAsDefaultInstance() {
}

CLFindTreasureGetServerChouJiangNumReq::CLFindTreasureGetServerChouJiangNumReq(const CLFindTreasureGetServerChouJiangNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasureGetServerChouJiangNumReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasureGetServerChouJiangNumReq::~CLFindTreasureGetServerChouJiangNumReq() {
  SharedDtor();
}

void CLFindTreasureGetServerChouJiangNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasureGetServerChouJiangNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasureGetServerChouJiangNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasureGetServerChouJiangNumReq_descriptor_;
}

const CLFindTreasureGetServerChouJiangNumReq& CLFindTreasureGetServerChouJiangNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasureGetServerChouJiangNumReq* CLFindTreasureGetServerChouJiangNumReq::default_instance_ = NULL;

CLFindTreasureGetServerChouJiangNumReq* CLFindTreasureGetServerChouJiangNumReq::New() const {
  return new CLFindTreasureGetServerChouJiangNumReq;
}

void CLFindTreasureGetServerChouJiangNumReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasureGetServerChouJiangNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasureGetServerChouJiangNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasureGetServerChouJiangNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasureGetServerChouJiangNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasureGetServerChouJiangNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasureGetServerChouJiangNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasureGetServerChouJiangNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasureGetServerChouJiangNumReq::MergeFrom(const CLFindTreasureGetServerChouJiangNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasureGetServerChouJiangNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasureGetServerChouJiangNumReq::CopyFrom(const CLFindTreasureGetServerChouJiangNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasureGetServerChouJiangNumReq::IsInitialized() const {

  return true;
}

void CLFindTreasureGetServerChouJiangNumReq::Swap(CLFindTreasureGetServerChouJiangNumReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasureGetServerChouJiangNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasureGetServerChouJiangNumReq_descriptor_;
  metadata.reflection = CLFindTreasureGetServerChouJiangNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasureGetServerChouJiangNumRsp::kRetCodeFieldNumber;
const int LCFindTreasureGetServerChouJiangNumRsp::kIdFieldNumber;
const int LCFindTreasureGetServerChouJiangNumRsp::kServerAllNumFieldNumber;
#endif  // !_MSC_VER

LCFindTreasureGetServerChouJiangNumRsp::LCFindTreasureGetServerChouJiangNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasureGetServerChouJiangNumRsp::InitAsDefaultInstance() {
}

LCFindTreasureGetServerChouJiangNumRsp::LCFindTreasureGetServerChouJiangNumRsp(const LCFindTreasureGetServerChouJiangNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasureGetServerChouJiangNumRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  server_all_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasureGetServerChouJiangNumRsp::~LCFindTreasureGetServerChouJiangNumRsp() {
  SharedDtor();
}

void LCFindTreasureGetServerChouJiangNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCFindTreasureGetServerChouJiangNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasureGetServerChouJiangNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasureGetServerChouJiangNumRsp_descriptor_;
}

const LCFindTreasureGetServerChouJiangNumRsp& LCFindTreasureGetServerChouJiangNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasureGetServerChouJiangNumRsp* LCFindTreasureGetServerChouJiangNumRsp::default_instance_ = NULL;

LCFindTreasureGetServerChouJiangNumRsp* LCFindTreasureGetServerChouJiangNumRsp::New() const {
  return new LCFindTreasureGetServerChouJiangNumRsp;
}

void LCFindTreasureGetServerChouJiangNumRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
    server_all_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasureGetServerChouJiangNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_all_num;
        break;
      }

      // optional int32 server_all_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_all_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_all_num_)));
          set_has_server_all_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasureGetServerChouJiangNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 server_all_num = 3;
  if (has_server_all_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_all_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasureGetServerChouJiangNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 server_all_num = 3;
  if (has_server_all_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_all_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasureGetServerChouJiangNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 server_all_num = 3;
    if (has_server_all_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_all_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasureGetServerChouJiangNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasureGetServerChouJiangNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasureGetServerChouJiangNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasureGetServerChouJiangNumRsp::MergeFrom(const LCFindTreasureGetServerChouJiangNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_server_all_num()) {
      set_server_all_num(from.server_all_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasureGetServerChouJiangNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasureGetServerChouJiangNumRsp::CopyFrom(const LCFindTreasureGetServerChouJiangNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasureGetServerChouJiangNumRsp::IsInitialized() const {

  return true;
}

void LCFindTreasureGetServerChouJiangNumRsp::Swap(LCFindTreasureGetServerChouJiangNumRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    std::swap(server_all_num_, other->server_all_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasureGetServerChouJiangNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasureGetServerChouJiangNumRsp_descriptor_;
  metadata.reflection = LCFindTreasureGetServerChouJiangNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasureBigDragonInfoReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLFindTreasureBigDragonInfoReq::CLFindTreasureBigDragonInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasureBigDragonInfoReq::InitAsDefaultInstance() {
}

CLFindTreasureBigDragonInfoReq::CLFindTreasureBigDragonInfoReq(const CLFindTreasureBigDragonInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasureBigDragonInfoReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasureBigDragonInfoReq::~CLFindTreasureBigDragonInfoReq() {
  SharedDtor();
}

void CLFindTreasureBigDragonInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasureBigDragonInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasureBigDragonInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasureBigDragonInfoReq_descriptor_;
}

const CLFindTreasureBigDragonInfoReq& CLFindTreasureBigDragonInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasureBigDragonInfoReq* CLFindTreasureBigDragonInfoReq::default_instance_ = NULL;

CLFindTreasureBigDragonInfoReq* CLFindTreasureBigDragonInfoReq::New() const {
  return new CLFindTreasureBigDragonInfoReq;
}

void CLFindTreasureBigDragonInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasureBigDragonInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasureBigDragonInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasureBigDragonInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasureBigDragonInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasureBigDragonInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasureBigDragonInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasureBigDragonInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasureBigDragonInfoReq::MergeFrom(const CLFindTreasureBigDragonInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasureBigDragonInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasureBigDragonInfoReq::CopyFrom(const CLFindTreasureBigDragonInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasureBigDragonInfoReq::IsInitialized() const {

  return true;
}

void CLFindTreasureBigDragonInfoReq::Swap(CLFindTreasureBigDragonInfoReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasureBigDragonInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasureBigDragonInfoReq_descriptor_;
  metadata.reflection = CLFindTreasureBigDragonInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasureBigDragonInfoRsp::kRetCodeFieldNumber;
const int LCFindTreasureBigDragonInfoRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCFindTreasureBigDragonInfoRsp::LCFindTreasureBigDragonInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasureBigDragonInfoRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FindTreasureBigDragonData*>(&::proto_ff::FindTreasureBigDragonData::default_instance());
}

LCFindTreasureBigDragonInfoRsp::LCFindTreasureBigDragonInfoRsp(const LCFindTreasureBigDragonInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasureBigDragonInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasureBigDragonInfoRsp::~LCFindTreasureBigDragonInfoRsp() {
  SharedDtor();
}

void LCFindTreasureBigDragonInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCFindTreasureBigDragonInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasureBigDragonInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasureBigDragonInfoRsp_descriptor_;
}

const LCFindTreasureBigDragonInfoRsp& LCFindTreasureBigDragonInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasureBigDragonInfoRsp* LCFindTreasureBigDragonInfoRsp::default_instance_ = NULL;

LCFindTreasureBigDragonInfoRsp* LCFindTreasureBigDragonInfoRsp::New() const {
  return new LCFindTreasureBigDragonInfoRsp;
}

void LCFindTreasureBigDragonInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FindTreasureBigDragonData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasureBigDragonInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.FindTreasureBigDragonData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasureBigDragonInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.FindTreasureBigDragonData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasureBigDragonInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.FindTreasureBigDragonData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasureBigDragonInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.FindTreasureBigDragonData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasureBigDragonInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasureBigDragonInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasureBigDragonInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasureBigDragonInfoRsp::MergeFrom(const LCFindTreasureBigDragonInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FindTreasureBigDragonData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasureBigDragonInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasureBigDragonInfoRsp::CopyFrom(const LCFindTreasureBigDragonInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasureBigDragonInfoRsp::IsInitialized() const {

  return true;
}

void LCFindTreasureBigDragonInfoRsp::Swap(LCFindTreasureBigDragonInfoRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasureBigDragonInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasureBigDragonInfoRsp_descriptor_;
  metadata.reflection = LCFindTreasureBigDragonInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasureBigDragonChouJiangReq::kIdFieldNumber;
const int CLFindTreasureBigDragonChouJiangReq::kNumTypeFieldNumber;
#endif  // !_MSC_VER

CLFindTreasureBigDragonChouJiangReq::CLFindTreasureBigDragonChouJiangReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasureBigDragonChouJiangReq::InitAsDefaultInstance() {
}

CLFindTreasureBigDragonChouJiangReq::CLFindTreasureBigDragonChouJiangReq(const CLFindTreasureBigDragonChouJiangReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasureBigDragonChouJiangReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasureBigDragonChouJiangReq::~CLFindTreasureBigDragonChouJiangReq() {
  SharedDtor();
}

void CLFindTreasureBigDragonChouJiangReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasureBigDragonChouJiangReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasureBigDragonChouJiangReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasureBigDragonChouJiangReq_descriptor_;
}

const CLFindTreasureBigDragonChouJiangReq& CLFindTreasureBigDragonChouJiangReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasureBigDragonChouJiangReq* CLFindTreasureBigDragonChouJiangReq::default_instance_ = NULL;

CLFindTreasureBigDragonChouJiangReq* CLFindTreasureBigDragonChouJiangReq::New() const {
  return new CLFindTreasureBigDragonChouJiangReq;
}

void CLFindTreasureBigDragonChouJiangReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasureBigDragonChouJiangReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_type;
        break;
      }

      // optional int32 num_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_type_)));
          set_has_num_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasureBigDragonChouJiangReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num_type = 2;
  if (has_num_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasureBigDragonChouJiangReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num_type = 2;
  if (has_num_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasureBigDragonChouJiangReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num_type = 2;
    if (has_num_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasureBigDragonChouJiangReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasureBigDragonChouJiangReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasureBigDragonChouJiangReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasureBigDragonChouJiangReq::MergeFrom(const CLFindTreasureBigDragonChouJiangReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num_type()) {
      set_num_type(from.num_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasureBigDragonChouJiangReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasureBigDragonChouJiangReq::CopyFrom(const CLFindTreasureBigDragonChouJiangReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasureBigDragonChouJiangReq::IsInitialized() const {

  return true;
}

void CLFindTreasureBigDragonChouJiangReq::Swap(CLFindTreasureBigDragonChouJiangReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_type_, other->num_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasureBigDragonChouJiangReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasureBigDragonChouJiangReq_descriptor_;
  metadata.reflection = CLFindTreasureBigDragonChouJiangReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasureBigDragonChouJiangRsp::kRetCodeFieldNumber;
const int LCFindTreasureBigDragonChouJiangRsp::kIdFieldNumber;
const int LCFindTreasureBigDragonChouJiangRsp::kRewardIdFieldNumber;
const int LCFindTreasureBigDragonChouJiangRsp::kAllNumFieldNumber;
const int LCFindTreasureBigDragonChouJiangRsp::kTotalRewardFieldNumber;
#endif  // !_MSC_VER

LCFindTreasureBigDragonChouJiangRsp::LCFindTreasureBigDragonChouJiangRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasureBigDragonChouJiangRsp::InitAsDefaultInstance() {
}

LCFindTreasureBigDragonChouJiangRsp::LCFindTreasureBigDragonChouJiangRsp(const LCFindTreasureBigDragonChouJiangRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasureBigDragonChouJiangRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  all_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasureBigDragonChouJiangRsp::~LCFindTreasureBigDragonChouJiangRsp() {
  SharedDtor();
}

void LCFindTreasureBigDragonChouJiangRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCFindTreasureBigDragonChouJiangRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasureBigDragonChouJiangRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasureBigDragonChouJiangRsp_descriptor_;
}

const LCFindTreasureBigDragonChouJiangRsp& LCFindTreasureBigDragonChouJiangRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasureBigDragonChouJiangRsp* LCFindTreasureBigDragonChouJiangRsp::default_instance_ = NULL;

LCFindTreasureBigDragonChouJiangRsp* LCFindTreasureBigDragonChouJiangRsp::New() const {
  return new LCFindTreasureBigDragonChouJiangRsp;
}

void LCFindTreasureBigDragonChouJiangRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
    all_num_ = 0;
  }
  reward_id_.Clear();
  total_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasureBigDragonChouJiangRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        break;
      }

      // repeated int32 reward_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_reward_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reward_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        if (input->ExpectTag(32)) goto parse_all_num;
        break;
      }

      // optional int32 all_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_num_)));
          set_has_all_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_total_reward;
        break;
      }

      // repeated .proto_ff.FindTreasureBigDragonRewardData total_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_total_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_total_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasureBigDragonChouJiangRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated int32 reward_id = 3;
  for (int i = 0; i < this->reward_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->reward_id(i), output);
  }

  // optional int32 all_num = 4;
  if (has_all_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->all_num(), output);
  }

  // repeated .proto_ff.FindTreasureBigDragonRewardData total_reward = 5;
  for (int i = 0; i < this->total_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->total_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasureBigDragonChouJiangRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated int32 reward_id = 3;
  for (int i = 0; i < this->reward_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->reward_id(i), target);
  }

  // optional int32 all_num = 4;
  if (has_all_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->all_num(), target);
  }

  // repeated .proto_ff.FindTreasureBigDragonRewardData total_reward = 5;
  for (int i = 0; i < this->total_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->total_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasureBigDragonChouJiangRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 all_num = 4;
    if (has_all_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_num());
    }

  }
  // repeated int32 reward_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reward_id(i));
    }
    total_size += 1 * this->reward_id_size() + data_size;
  }

  // repeated .proto_ff.FindTreasureBigDragonRewardData total_reward = 5;
  total_size += 1 * this->total_reward_size();
  for (int i = 0; i < this->total_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->total_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasureBigDragonChouJiangRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasureBigDragonChouJiangRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasureBigDragonChouJiangRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasureBigDragonChouJiangRsp::MergeFrom(const LCFindTreasureBigDragonChouJiangRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_id_.MergeFrom(from.reward_id_);
  total_reward_.MergeFrom(from.total_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_all_num()) {
      set_all_num(from.all_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasureBigDragonChouJiangRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasureBigDragonChouJiangRsp::CopyFrom(const LCFindTreasureBigDragonChouJiangRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasureBigDragonChouJiangRsp::IsInitialized() const {

  return true;
}

void LCFindTreasureBigDragonChouJiangRsp::Swap(LCFindTreasureBigDragonChouJiangRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    reward_id_.Swap(&other->reward_id_);
    std::swap(all_num_, other->all_num_);
    total_reward_.Swap(&other->total_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasureBigDragonChouJiangRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasureBigDragonChouJiangRsp_descriptor_;
  metadata.reflection = LCFindTreasureBigDragonChouJiangRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasureBigDragonGetTotalRewardReq::kIdFieldNumber;
const int CLFindTreasureBigDragonGetTotalRewardReq::kTotalIdFieldNumber;
#endif  // !_MSC_VER

CLFindTreasureBigDragonGetTotalRewardReq::CLFindTreasureBigDragonGetTotalRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasureBigDragonGetTotalRewardReq::InitAsDefaultInstance() {
}

CLFindTreasureBigDragonGetTotalRewardReq::CLFindTreasureBigDragonGetTotalRewardReq(const CLFindTreasureBigDragonGetTotalRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasureBigDragonGetTotalRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  total_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasureBigDragonGetTotalRewardReq::~CLFindTreasureBigDragonGetTotalRewardReq() {
  SharedDtor();
}

void CLFindTreasureBigDragonGetTotalRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasureBigDragonGetTotalRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasureBigDragonGetTotalRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasureBigDragonGetTotalRewardReq_descriptor_;
}

const CLFindTreasureBigDragonGetTotalRewardReq& CLFindTreasureBigDragonGetTotalRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasureBigDragonGetTotalRewardReq* CLFindTreasureBigDragonGetTotalRewardReq::default_instance_ = NULL;

CLFindTreasureBigDragonGetTotalRewardReq* CLFindTreasureBigDragonGetTotalRewardReq::New() const {
  return new CLFindTreasureBigDragonGetTotalRewardReq;
}

void CLFindTreasureBigDragonGetTotalRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    total_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasureBigDragonGetTotalRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_id;
        break;
      }

      // optional int32 total_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_id_)));
          set_has_total_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasureBigDragonGetTotalRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 total_id = 2;
  if (has_total_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasureBigDragonGetTotalRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 total_id = 2;
  if (has_total_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasureBigDragonGetTotalRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 total_id = 2;
    if (has_total_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasureBigDragonGetTotalRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasureBigDragonGetTotalRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasureBigDragonGetTotalRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasureBigDragonGetTotalRewardReq::MergeFrom(const CLFindTreasureBigDragonGetTotalRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_total_id()) {
      set_total_id(from.total_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasureBigDragonGetTotalRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasureBigDragonGetTotalRewardReq::CopyFrom(const CLFindTreasureBigDragonGetTotalRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasureBigDragonGetTotalRewardReq::IsInitialized() const {

  return true;
}

void CLFindTreasureBigDragonGetTotalRewardReq::Swap(CLFindTreasureBigDragonGetTotalRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(total_id_, other->total_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasureBigDragonGetTotalRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasureBigDragonGetTotalRewardReq_descriptor_;
  metadata.reflection = CLFindTreasureBigDragonGetTotalRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasureBigDragonGetTotalRewardRsp::kRetCodeFieldNumber;
const int LCFindTreasureBigDragonGetTotalRewardRsp::kIdFieldNumber;
const int LCFindTreasureBigDragonGetTotalRewardRsp::kRewardFieldNumber;
#endif  // !_MSC_VER

LCFindTreasureBigDragonGetTotalRewardRsp::LCFindTreasureBigDragonGetTotalRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasureBigDragonGetTotalRewardRsp::InitAsDefaultInstance() {
}

LCFindTreasureBigDragonGetTotalRewardRsp::LCFindTreasureBigDragonGetTotalRewardRsp(const LCFindTreasureBigDragonGetTotalRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasureBigDragonGetTotalRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasureBigDragonGetTotalRewardRsp::~LCFindTreasureBigDragonGetTotalRewardRsp() {
  SharedDtor();
}

void LCFindTreasureBigDragonGetTotalRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCFindTreasureBigDragonGetTotalRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasureBigDragonGetTotalRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasureBigDragonGetTotalRewardRsp_descriptor_;
}

const LCFindTreasureBigDragonGetTotalRewardRsp& LCFindTreasureBigDragonGetTotalRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasureBigDragonGetTotalRewardRsp* LCFindTreasureBigDragonGetTotalRewardRsp::default_instance_ = NULL;

LCFindTreasureBigDragonGetTotalRewardRsp* LCFindTreasureBigDragonGetTotalRewardRsp::New() const {
  return new LCFindTreasureBigDragonGetTotalRewardRsp;
}

void LCFindTreasureBigDragonGetTotalRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasureBigDragonGetTotalRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.FindTreasureBigDragonRewardData reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasureBigDragonGetTotalRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated .proto_ff.FindTreasureBigDragonRewardData reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasureBigDragonGetTotalRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated .proto_ff.FindTreasureBigDragonRewardData reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasureBigDragonGetTotalRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .proto_ff.FindTreasureBigDragonRewardData reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasureBigDragonGetTotalRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasureBigDragonGetTotalRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasureBigDragonGetTotalRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasureBigDragonGetTotalRewardRsp::MergeFrom(const LCFindTreasureBigDragonGetTotalRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasureBigDragonGetTotalRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasureBigDragonGetTotalRewardRsp::CopyFrom(const LCFindTreasureBigDragonGetTotalRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasureBigDragonGetTotalRewardRsp::IsInitialized() const {

  return true;
}

void LCFindTreasureBigDragonGetTotalRewardRsp::Swap(LCFindTreasureBigDragonGetTotalRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasureBigDragonGetTotalRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasureBigDragonGetTotalRewardRsp_descriptor_;
  metadata.reflection = LCFindTreasureBigDragonGetTotalRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasureBaiLianInfoReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLFindTreasureBaiLianInfoReq::CLFindTreasureBaiLianInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasureBaiLianInfoReq::InitAsDefaultInstance() {
}

CLFindTreasureBaiLianInfoReq::CLFindTreasureBaiLianInfoReq(const CLFindTreasureBaiLianInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasureBaiLianInfoReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasureBaiLianInfoReq::~CLFindTreasureBaiLianInfoReq() {
  SharedDtor();
}

void CLFindTreasureBaiLianInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasureBaiLianInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasureBaiLianInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasureBaiLianInfoReq_descriptor_;
}

const CLFindTreasureBaiLianInfoReq& CLFindTreasureBaiLianInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasureBaiLianInfoReq* CLFindTreasureBaiLianInfoReq::default_instance_ = NULL;

CLFindTreasureBaiLianInfoReq* CLFindTreasureBaiLianInfoReq::New() const {
  return new CLFindTreasureBaiLianInfoReq;
}

void CLFindTreasureBaiLianInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasureBaiLianInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasureBaiLianInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasureBaiLianInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasureBaiLianInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasureBaiLianInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasureBaiLianInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasureBaiLianInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasureBaiLianInfoReq::MergeFrom(const CLFindTreasureBaiLianInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasureBaiLianInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasureBaiLianInfoReq::CopyFrom(const CLFindTreasureBaiLianInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasureBaiLianInfoReq::IsInitialized() const {

  return true;
}

void CLFindTreasureBaiLianInfoReq::Swap(CLFindTreasureBaiLianInfoReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasureBaiLianInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasureBaiLianInfoReq_descriptor_;
  metadata.reflection = CLFindTreasureBaiLianInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasureBaiLianInfoRsp::kRetCodeFieldNumber;
const int LCFindTreasureBaiLianInfoRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCFindTreasureBaiLianInfoRsp::LCFindTreasureBaiLianInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasureBaiLianInfoRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FindTreasureBaiLianData*>(&::proto_ff::FindTreasureBaiLianData::default_instance());
}

LCFindTreasureBaiLianInfoRsp::LCFindTreasureBaiLianInfoRsp(const LCFindTreasureBaiLianInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasureBaiLianInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasureBaiLianInfoRsp::~LCFindTreasureBaiLianInfoRsp() {
  SharedDtor();
}

void LCFindTreasureBaiLianInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCFindTreasureBaiLianInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasureBaiLianInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasureBaiLianInfoRsp_descriptor_;
}

const LCFindTreasureBaiLianInfoRsp& LCFindTreasureBaiLianInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasureBaiLianInfoRsp* LCFindTreasureBaiLianInfoRsp::default_instance_ = NULL;

LCFindTreasureBaiLianInfoRsp* LCFindTreasureBaiLianInfoRsp::New() const {
  return new LCFindTreasureBaiLianInfoRsp;
}

void LCFindTreasureBaiLianInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FindTreasureBaiLianData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasureBaiLianInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.FindTreasureBaiLianData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasureBaiLianInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.FindTreasureBaiLianData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasureBaiLianInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.FindTreasureBaiLianData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasureBaiLianInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.FindTreasureBaiLianData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasureBaiLianInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasureBaiLianInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasureBaiLianInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasureBaiLianInfoRsp::MergeFrom(const LCFindTreasureBaiLianInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FindTreasureBaiLianData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasureBaiLianInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasureBaiLianInfoRsp::CopyFrom(const LCFindTreasureBaiLianInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasureBaiLianInfoRsp::IsInitialized() const {

  return true;
}

void LCFindTreasureBaiLianInfoRsp::Swap(LCFindTreasureBaiLianInfoRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasureBaiLianInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasureBaiLianInfoRsp_descriptor_;
  metadata.reflection = LCFindTreasureBaiLianInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasureBaiLianChouJiangReq::kIdFieldNumber;
const int CLFindTreasureBaiLianChouJiangReq::kNumTypeFieldNumber;
const int CLFindTreasureBaiLianChouJiangReq::kUseSpecialFieldNumber;
#endif  // !_MSC_VER

CLFindTreasureBaiLianChouJiangReq::CLFindTreasureBaiLianChouJiangReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasureBaiLianChouJiangReq::InitAsDefaultInstance() {
}

CLFindTreasureBaiLianChouJiangReq::CLFindTreasureBaiLianChouJiangReq(const CLFindTreasureBaiLianChouJiangReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasureBaiLianChouJiangReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_type_ = 0;
  use_special_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasureBaiLianChouJiangReq::~CLFindTreasureBaiLianChouJiangReq() {
  SharedDtor();
}

void CLFindTreasureBaiLianChouJiangReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasureBaiLianChouJiangReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasureBaiLianChouJiangReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasureBaiLianChouJiangReq_descriptor_;
}

const CLFindTreasureBaiLianChouJiangReq& CLFindTreasureBaiLianChouJiangReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasureBaiLianChouJiangReq* CLFindTreasureBaiLianChouJiangReq::default_instance_ = NULL;

CLFindTreasureBaiLianChouJiangReq* CLFindTreasureBaiLianChouJiangReq::New() const {
  return new CLFindTreasureBaiLianChouJiangReq;
}

void CLFindTreasureBaiLianChouJiangReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_type_ = 0;
    use_special_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasureBaiLianChouJiangReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_type;
        break;
      }

      // optional int32 num_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_type_)));
          set_has_num_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_special;
        break;
      }

      // optional int32 use_special = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_special:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_special_)));
          set_has_use_special();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasureBaiLianChouJiangReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num_type = 2;
  if (has_num_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_type(), output);
  }

  // optional int32 use_special = 3;
  if (has_use_special()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->use_special(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasureBaiLianChouJiangReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num_type = 2;
  if (has_num_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_type(), target);
  }

  // optional int32 use_special = 3;
  if (has_use_special()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->use_special(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasureBaiLianChouJiangReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num_type = 2;
    if (has_num_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_type());
    }

    // optional int32 use_special = 3;
    if (has_use_special()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_special());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasureBaiLianChouJiangReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasureBaiLianChouJiangReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasureBaiLianChouJiangReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasureBaiLianChouJiangReq::MergeFrom(const CLFindTreasureBaiLianChouJiangReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num_type()) {
      set_num_type(from.num_type());
    }
    if (from.has_use_special()) {
      set_use_special(from.use_special());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasureBaiLianChouJiangReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasureBaiLianChouJiangReq::CopyFrom(const CLFindTreasureBaiLianChouJiangReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasureBaiLianChouJiangReq::IsInitialized() const {

  return true;
}

void CLFindTreasureBaiLianChouJiangReq::Swap(CLFindTreasureBaiLianChouJiangReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_type_, other->num_type_);
    std::swap(use_special_, other->use_special_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasureBaiLianChouJiangReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasureBaiLianChouJiangReq_descriptor_;
  metadata.reflection = CLFindTreasureBaiLianChouJiangReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasureBaiLianChouJiangRsp::kRetCodeFieldNumber;
const int LCFindTreasureBaiLianChouJiangRsp::kIdFieldNumber;
const int LCFindTreasureBaiLianChouJiangRsp::kRewardIdFieldNumber;
#endif  // !_MSC_VER

LCFindTreasureBaiLianChouJiangRsp::LCFindTreasureBaiLianChouJiangRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasureBaiLianChouJiangRsp::InitAsDefaultInstance() {
}

LCFindTreasureBaiLianChouJiangRsp::LCFindTreasureBaiLianChouJiangRsp(const LCFindTreasureBaiLianChouJiangRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasureBaiLianChouJiangRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasureBaiLianChouJiangRsp::~LCFindTreasureBaiLianChouJiangRsp() {
  SharedDtor();
}

void LCFindTreasureBaiLianChouJiangRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCFindTreasureBaiLianChouJiangRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasureBaiLianChouJiangRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasureBaiLianChouJiangRsp_descriptor_;
}

const LCFindTreasureBaiLianChouJiangRsp& LCFindTreasureBaiLianChouJiangRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasureBaiLianChouJiangRsp* LCFindTreasureBaiLianChouJiangRsp::default_instance_ = NULL;

LCFindTreasureBaiLianChouJiangRsp* LCFindTreasureBaiLianChouJiangRsp::New() const {
  return new LCFindTreasureBaiLianChouJiangRsp;
}

void LCFindTreasureBaiLianChouJiangRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
  }
  reward_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasureBaiLianChouJiangRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        break;
      }

      // repeated int32 reward_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_reward_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reward_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasureBaiLianChouJiangRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated int32 reward_id = 3;
  for (int i = 0; i < this->reward_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->reward_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasureBaiLianChouJiangRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated int32 reward_id = 3;
  for (int i = 0; i < this->reward_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->reward_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasureBaiLianChouJiangRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated int32 reward_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reward_id(i));
    }
    total_size += 1 * this->reward_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasureBaiLianChouJiangRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasureBaiLianChouJiangRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasureBaiLianChouJiangRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasureBaiLianChouJiangRsp::MergeFrom(const LCFindTreasureBaiLianChouJiangRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_id_.MergeFrom(from.reward_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasureBaiLianChouJiangRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasureBaiLianChouJiangRsp::CopyFrom(const LCFindTreasureBaiLianChouJiangRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasureBaiLianChouJiangRsp::IsInitialized() const {

  return true;
}

void LCFindTreasureBaiLianChouJiangRsp::Swap(LCFindTreasureBaiLianChouJiangRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    reward_id_.Swap(&other->reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasureBaiLianChouJiangRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasureBaiLianChouJiangRsp_descriptor_;
  metadata.reflection = LCFindTreasureBaiLianChouJiangRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasureBaiLianExchangeReq::kShopIdFieldNumber;
#endif  // !_MSC_VER

CLFindTreasureBaiLianExchangeReq::CLFindTreasureBaiLianExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasureBaiLianExchangeReq::InitAsDefaultInstance() {
}

CLFindTreasureBaiLianExchangeReq::CLFindTreasureBaiLianExchangeReq(const CLFindTreasureBaiLianExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasureBaiLianExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  shop_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasureBaiLianExchangeReq::~CLFindTreasureBaiLianExchangeReq() {
  SharedDtor();
}

void CLFindTreasureBaiLianExchangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasureBaiLianExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasureBaiLianExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasureBaiLianExchangeReq_descriptor_;
}

const CLFindTreasureBaiLianExchangeReq& CLFindTreasureBaiLianExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasureBaiLianExchangeReq* CLFindTreasureBaiLianExchangeReq::default_instance_ = NULL;

CLFindTreasureBaiLianExchangeReq* CLFindTreasureBaiLianExchangeReq::New() const {
  return new CLFindTreasureBaiLianExchangeReq;
}

void CLFindTreasureBaiLianExchangeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasureBaiLianExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 shop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_id_)));
          set_has_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasureBaiLianExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 shop_id = 1;
  if (has_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shop_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasureBaiLianExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 shop_id = 1;
  if (has_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shop_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasureBaiLianExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 shop_id = 1;
    if (has_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasureBaiLianExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasureBaiLianExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasureBaiLianExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasureBaiLianExchangeReq::MergeFrom(const CLFindTreasureBaiLianExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_id()) {
      set_shop_id(from.shop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasureBaiLianExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasureBaiLianExchangeReq::CopyFrom(const CLFindTreasureBaiLianExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasureBaiLianExchangeReq::IsInitialized() const {

  return true;
}

void CLFindTreasureBaiLianExchangeReq::Swap(CLFindTreasureBaiLianExchangeReq* other) {
  if (other != this) {
    std::swap(shop_id_, other->shop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasureBaiLianExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasureBaiLianExchangeReq_descriptor_;
  metadata.reflection = CLFindTreasureBaiLianExchangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasureBaiLianExchangeRsp::kRetCodeFieldNumber;
const int LCFindTreasureBaiLianExchangeRsp::kShopIdFieldNumber;
#endif  // !_MSC_VER

LCFindTreasureBaiLianExchangeRsp::LCFindTreasureBaiLianExchangeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasureBaiLianExchangeRsp::InitAsDefaultInstance() {
}

LCFindTreasureBaiLianExchangeRsp::LCFindTreasureBaiLianExchangeRsp(const LCFindTreasureBaiLianExchangeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasureBaiLianExchangeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  shop_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasureBaiLianExchangeRsp::~LCFindTreasureBaiLianExchangeRsp() {
  SharedDtor();
}

void LCFindTreasureBaiLianExchangeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCFindTreasureBaiLianExchangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasureBaiLianExchangeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasureBaiLianExchangeRsp_descriptor_;
}

const LCFindTreasureBaiLianExchangeRsp& LCFindTreasureBaiLianExchangeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasureBaiLianExchangeRsp* LCFindTreasureBaiLianExchangeRsp::default_instance_ = NULL;

LCFindTreasureBaiLianExchangeRsp* LCFindTreasureBaiLianExchangeRsp::New() const {
  return new LCFindTreasureBaiLianExchangeRsp;
}

void LCFindTreasureBaiLianExchangeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    shop_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasureBaiLianExchangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_id;
        break;
      }

      // optional int32 shop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_id_)));
          set_has_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasureBaiLianExchangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 shop_id = 2;
  if (has_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shop_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasureBaiLianExchangeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 shop_id = 2;
  if (has_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shop_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasureBaiLianExchangeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 shop_id = 2;
    if (has_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasureBaiLianExchangeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasureBaiLianExchangeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasureBaiLianExchangeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasureBaiLianExchangeRsp::MergeFrom(const LCFindTreasureBaiLianExchangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_shop_id()) {
      set_shop_id(from.shop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasureBaiLianExchangeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasureBaiLianExchangeRsp::CopyFrom(const LCFindTreasureBaiLianExchangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasureBaiLianExchangeRsp::IsInitialized() const {

  return true;
}

void LCFindTreasureBaiLianExchangeRsp::Swap(LCFindTreasureBaiLianExchangeRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(shop_id_, other->shop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasureBaiLianExchangeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasureBaiLianExchangeRsp_descriptor_;
  metadata.reflection = LCFindTreasureBaiLianExchangeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasureBaiLianBuyShopReq::kIdFieldNumber;
const int CLFindTreasureBaiLianBuyShopReq::kActiveIdFieldNumber;
const int CLFindTreasureBaiLianBuyShopReq::kActiveShopIdFieldNumber;
#endif  // !_MSC_VER

CLFindTreasureBaiLianBuyShopReq::CLFindTreasureBaiLianBuyShopReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasureBaiLianBuyShopReq::InitAsDefaultInstance() {
}

CLFindTreasureBaiLianBuyShopReq::CLFindTreasureBaiLianBuyShopReq(const CLFindTreasureBaiLianBuyShopReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasureBaiLianBuyShopReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  active_id_ = 0;
  active_shop_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasureBaiLianBuyShopReq::~CLFindTreasureBaiLianBuyShopReq() {
  SharedDtor();
}

void CLFindTreasureBaiLianBuyShopReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasureBaiLianBuyShopReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasureBaiLianBuyShopReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasureBaiLianBuyShopReq_descriptor_;
}

const CLFindTreasureBaiLianBuyShopReq& CLFindTreasureBaiLianBuyShopReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasureBaiLianBuyShopReq* CLFindTreasureBaiLianBuyShopReq::default_instance_ = NULL;

CLFindTreasureBaiLianBuyShopReq* CLFindTreasureBaiLianBuyShopReq::New() const {
  return new CLFindTreasureBaiLianBuyShopReq;
}

void CLFindTreasureBaiLianBuyShopReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    active_id_ = 0;
    active_shop_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasureBaiLianBuyShopReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_id;
        break;
      }

      // optional int32 active_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_id_)));
          set_has_active_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active_shop_id;
        break;
      }

      // optional int32 active_shop_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_shop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_shop_id_)));
          set_has_active_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasureBaiLianBuyShopReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 active_id = 2;
  if (has_active_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->active_id(), output);
  }

  // optional int32 active_shop_id = 3;
  if (has_active_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->active_shop_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasureBaiLianBuyShopReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 active_id = 2;
  if (has_active_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->active_id(), target);
  }

  // optional int32 active_shop_id = 3;
  if (has_active_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->active_shop_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasureBaiLianBuyShopReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 active_id = 2;
    if (has_active_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_id());
    }

    // optional int32 active_shop_id = 3;
    if (has_active_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_shop_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasureBaiLianBuyShopReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasureBaiLianBuyShopReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasureBaiLianBuyShopReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasureBaiLianBuyShopReq::MergeFrom(const CLFindTreasureBaiLianBuyShopReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_active_id()) {
      set_active_id(from.active_id());
    }
    if (from.has_active_shop_id()) {
      set_active_shop_id(from.active_shop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasureBaiLianBuyShopReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasureBaiLianBuyShopReq::CopyFrom(const CLFindTreasureBaiLianBuyShopReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasureBaiLianBuyShopReq::IsInitialized() const {

  return true;
}

void CLFindTreasureBaiLianBuyShopReq::Swap(CLFindTreasureBaiLianBuyShopReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(active_id_, other->active_id_);
    std::swap(active_shop_id_, other->active_shop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasureBaiLianBuyShopReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasureBaiLianBuyShopReq_descriptor_;
  metadata.reflection = CLFindTreasureBaiLianBuyShopReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasureBaiLianBuyShopRsp::kRetCodeFieldNumber;
const int LCFindTreasureBaiLianBuyShopRsp::kIdFieldNumber;
const int LCFindTreasureBaiLianBuyShopRsp::kActiveIdFieldNumber;
const int LCFindTreasureBaiLianBuyShopRsp::kShopDataFieldNumber;
#endif  // !_MSC_VER

LCFindTreasureBaiLianBuyShopRsp::LCFindTreasureBaiLianBuyShopRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasureBaiLianBuyShopRsp::InitAsDefaultInstance() {
  shop_data_ = const_cast< ::proto_ff::FindTreasureBaiLianShopData*>(&::proto_ff::FindTreasureBaiLianShopData::default_instance());
}

LCFindTreasureBaiLianBuyShopRsp::LCFindTreasureBaiLianBuyShopRsp(const LCFindTreasureBaiLianBuyShopRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasureBaiLianBuyShopRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  active_id_ = 0;
  shop_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasureBaiLianBuyShopRsp::~LCFindTreasureBaiLianBuyShopRsp() {
  SharedDtor();
}

void LCFindTreasureBaiLianBuyShopRsp::SharedDtor() {
  if (this != default_instance_) {
    delete shop_data_;
  }
}

void LCFindTreasureBaiLianBuyShopRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasureBaiLianBuyShopRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasureBaiLianBuyShopRsp_descriptor_;
}

const LCFindTreasureBaiLianBuyShopRsp& LCFindTreasureBaiLianBuyShopRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasureBaiLianBuyShopRsp* LCFindTreasureBaiLianBuyShopRsp::default_instance_ = NULL;

LCFindTreasureBaiLianBuyShopRsp* LCFindTreasureBaiLianBuyShopRsp::New() const {
  return new LCFindTreasureBaiLianBuyShopRsp;
}

void LCFindTreasureBaiLianBuyShopRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
    active_id_ = 0;
    if (has_shop_data()) {
      if (shop_data_ != NULL) shop_data_->::proto_ff::FindTreasureBaiLianShopData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasureBaiLianBuyShopRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active_id;
        break;
      }

      // optional int32 active_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_id_)));
          set_has_active_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shop_data;
        break;
      }

      // optional .proto_ff.FindTreasureBaiLianShopData shop_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasureBaiLianBuyShopRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 active_id = 3;
  if (has_active_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->active_id(), output);
  }

  // optional .proto_ff.FindTreasureBaiLianShopData shop_data = 4;
  if (has_shop_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shop_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasureBaiLianBuyShopRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 active_id = 3;
  if (has_active_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->active_id(), target);
  }

  // optional .proto_ff.FindTreasureBaiLianShopData shop_data = 4;
  if (has_shop_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shop_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasureBaiLianBuyShopRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 active_id = 3;
    if (has_active_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_id());
    }

    // optional .proto_ff.FindTreasureBaiLianShopData shop_data = 4;
    if (has_shop_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasureBaiLianBuyShopRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasureBaiLianBuyShopRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasureBaiLianBuyShopRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasureBaiLianBuyShopRsp::MergeFrom(const LCFindTreasureBaiLianBuyShopRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_active_id()) {
      set_active_id(from.active_id());
    }
    if (from.has_shop_data()) {
      mutable_shop_data()->::proto_ff::FindTreasureBaiLianShopData::MergeFrom(from.shop_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasureBaiLianBuyShopRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasureBaiLianBuyShopRsp::CopyFrom(const LCFindTreasureBaiLianBuyShopRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasureBaiLianBuyShopRsp::IsInitialized() const {

  return true;
}

void LCFindTreasureBaiLianBuyShopRsp::Swap(LCFindTreasureBaiLianBuyShopRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    std::swap(active_id_, other->active_id_);
    std::swap(shop_data_, other->shop_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasureBaiLianBuyShopRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasureBaiLianBuyShopRsp_descriptor_;
  metadata.reflection = LCFindTreasureBaiLianBuyShopRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyFindTreasureBaiLianActiveChange::kIdFieldNumber;
const int NotifyFindTreasureBaiLianActiveChange::kDataFieldNumber;
#endif  // !_MSC_VER

NotifyFindTreasureBaiLianActiveChange::NotifyFindTreasureBaiLianActiveChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFindTreasureBaiLianActiveChange::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FindTreasureBaiLianActiveData*>(&::proto_ff::FindTreasureBaiLianActiveData::default_instance());
}

NotifyFindTreasureBaiLianActiveChange::NotifyFindTreasureBaiLianActiveChange(const NotifyFindTreasureBaiLianActiveChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFindTreasureBaiLianActiveChange::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFindTreasureBaiLianActiveChange::~NotifyFindTreasureBaiLianActiveChange() {
  SharedDtor();
}

void NotifyFindTreasureBaiLianActiveChange::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void NotifyFindTreasureBaiLianActiveChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFindTreasureBaiLianActiveChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFindTreasureBaiLianActiveChange_descriptor_;
}

const NotifyFindTreasureBaiLianActiveChange& NotifyFindTreasureBaiLianActiveChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

NotifyFindTreasureBaiLianActiveChange* NotifyFindTreasureBaiLianActiveChange::default_instance_ = NULL;

NotifyFindTreasureBaiLianActiveChange* NotifyFindTreasureBaiLianActiveChange::New() const {
  return new NotifyFindTreasureBaiLianActiveChange;
}

void NotifyFindTreasureBaiLianActiveChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FindTreasureBaiLianActiveData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFindTreasureBaiLianActiveChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.FindTreasureBaiLianActiveData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFindTreasureBaiLianActiveChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .proto_ff.FindTreasureBaiLianActiveData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFindTreasureBaiLianActiveChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .proto_ff.FindTreasureBaiLianActiveData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFindTreasureBaiLianActiveChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .proto_ff.FindTreasureBaiLianActiveData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFindTreasureBaiLianActiveChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFindTreasureBaiLianActiveChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFindTreasureBaiLianActiveChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFindTreasureBaiLianActiveChange::MergeFrom(const NotifyFindTreasureBaiLianActiveChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FindTreasureBaiLianActiveData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFindTreasureBaiLianActiveChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFindTreasureBaiLianActiveChange::CopyFrom(const NotifyFindTreasureBaiLianActiveChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFindTreasureBaiLianActiveChange::IsInitialized() const {

  return true;
}

void NotifyFindTreasureBaiLianActiveChange::Swap(NotifyFindTreasureBaiLianActiveChange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFindTreasureBaiLianActiveChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFindTreasureBaiLianActiveChange_descriptor_;
  metadata.reflection = NotifyFindTreasureBaiLianActiveChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasureSiShengInfoReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLFindTreasureSiShengInfoReq::CLFindTreasureSiShengInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasureSiShengInfoReq::InitAsDefaultInstance() {
}

CLFindTreasureSiShengInfoReq::CLFindTreasureSiShengInfoReq(const CLFindTreasureSiShengInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasureSiShengInfoReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasureSiShengInfoReq::~CLFindTreasureSiShengInfoReq() {
  SharedDtor();
}

void CLFindTreasureSiShengInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasureSiShengInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasureSiShengInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasureSiShengInfoReq_descriptor_;
}

const CLFindTreasureSiShengInfoReq& CLFindTreasureSiShengInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasureSiShengInfoReq* CLFindTreasureSiShengInfoReq::default_instance_ = NULL;

CLFindTreasureSiShengInfoReq* CLFindTreasureSiShengInfoReq::New() const {
  return new CLFindTreasureSiShengInfoReq;
}

void CLFindTreasureSiShengInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasureSiShengInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasureSiShengInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasureSiShengInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasureSiShengInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasureSiShengInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasureSiShengInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasureSiShengInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasureSiShengInfoReq::MergeFrom(const CLFindTreasureSiShengInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasureSiShengInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasureSiShengInfoReq::CopyFrom(const CLFindTreasureSiShengInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasureSiShengInfoReq::IsInitialized() const {

  return true;
}

void CLFindTreasureSiShengInfoReq::Swap(CLFindTreasureSiShengInfoReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasureSiShengInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasureSiShengInfoReq_descriptor_;
  metadata.reflection = CLFindTreasureSiShengInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasuareSiShengInfoRsp::kRetCodeFieldNumber;
const int LCFindTreasuareSiShengInfoRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCFindTreasuareSiShengInfoRsp::LCFindTreasuareSiShengInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasuareSiShengInfoRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FindTreasureSiShengData*>(&::proto_ff::FindTreasureSiShengData::default_instance());
}

LCFindTreasuareSiShengInfoRsp::LCFindTreasuareSiShengInfoRsp(const LCFindTreasuareSiShengInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasuareSiShengInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasuareSiShengInfoRsp::~LCFindTreasuareSiShengInfoRsp() {
  SharedDtor();
}

void LCFindTreasuareSiShengInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCFindTreasuareSiShengInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasuareSiShengInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasuareSiShengInfoRsp_descriptor_;
}

const LCFindTreasuareSiShengInfoRsp& LCFindTreasuareSiShengInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasuareSiShengInfoRsp* LCFindTreasuareSiShengInfoRsp::default_instance_ = NULL;

LCFindTreasuareSiShengInfoRsp* LCFindTreasuareSiShengInfoRsp::New() const {
  return new LCFindTreasuareSiShengInfoRsp;
}

void LCFindTreasuareSiShengInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FindTreasureSiShengData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasuareSiShengInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.FindTreasureSiShengData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasuareSiShengInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.FindTreasureSiShengData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasuareSiShengInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.FindTreasureSiShengData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasuareSiShengInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.FindTreasureSiShengData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasuareSiShengInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasuareSiShengInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasuareSiShengInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasuareSiShengInfoRsp::MergeFrom(const LCFindTreasuareSiShengInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FindTreasureSiShengData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasuareSiShengInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasuareSiShengInfoRsp::CopyFrom(const LCFindTreasuareSiShengInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasuareSiShengInfoRsp::IsInitialized() const {

  return true;
}

void LCFindTreasuareSiShengInfoRsp::Swap(LCFindTreasuareSiShengInfoRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasuareSiShengInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasuareSiShengInfoRsp_descriptor_;
  metadata.reflection = LCFindTreasuareSiShengInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasureSiShengChouJiangReq::kIdFieldNumber;
const int CLFindTreasureSiShengChouJiangReq::kNumTypeFieldNumber;
#endif  // !_MSC_VER

CLFindTreasureSiShengChouJiangReq::CLFindTreasureSiShengChouJiangReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasureSiShengChouJiangReq::InitAsDefaultInstance() {
}

CLFindTreasureSiShengChouJiangReq::CLFindTreasureSiShengChouJiangReq(const CLFindTreasureSiShengChouJiangReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasureSiShengChouJiangReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasureSiShengChouJiangReq::~CLFindTreasureSiShengChouJiangReq() {
  SharedDtor();
}

void CLFindTreasureSiShengChouJiangReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasureSiShengChouJiangReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasureSiShengChouJiangReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasureSiShengChouJiangReq_descriptor_;
}

const CLFindTreasureSiShengChouJiangReq& CLFindTreasureSiShengChouJiangReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasureSiShengChouJiangReq* CLFindTreasureSiShengChouJiangReq::default_instance_ = NULL;

CLFindTreasureSiShengChouJiangReq* CLFindTreasureSiShengChouJiangReq::New() const {
  return new CLFindTreasureSiShengChouJiangReq;
}

void CLFindTreasureSiShengChouJiangReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasureSiShengChouJiangReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_type;
        break;
      }

      // optional int32 num_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_type_)));
          set_has_num_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasureSiShengChouJiangReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num_type = 2;
  if (has_num_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasureSiShengChouJiangReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num_type = 2;
  if (has_num_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasureSiShengChouJiangReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num_type = 2;
    if (has_num_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasureSiShengChouJiangReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasureSiShengChouJiangReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasureSiShengChouJiangReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasureSiShengChouJiangReq::MergeFrom(const CLFindTreasureSiShengChouJiangReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num_type()) {
      set_num_type(from.num_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasureSiShengChouJiangReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasureSiShengChouJiangReq::CopyFrom(const CLFindTreasureSiShengChouJiangReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasureSiShengChouJiangReq::IsInitialized() const {

  return true;
}

void CLFindTreasureSiShengChouJiangReq::Swap(CLFindTreasureSiShengChouJiangReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_type_, other->num_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasureSiShengChouJiangReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasureSiShengChouJiangReq_descriptor_;
  metadata.reflection = CLFindTreasureSiShengChouJiangReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasureSiShengChouJiangRsp::kRetCodeFieldNumber;
const int LCFindTreasureSiShengChouJiangRsp::kIdFieldNumber;
const int LCFindTreasureSiShengChouJiangRsp::kRewardIdFieldNumber;
const int LCFindTreasureSiShengChouJiangRsp::kAllNumFieldNumber;
const int LCFindTreasureSiShengChouJiangRsp::kPersonTotalRewardFieldNumber;
const int LCFindTreasureSiShengChouJiangRsp::kServerTotalRewardFieldNumber;
const int LCFindTreasureSiShengChouJiangRsp::kServerAllNumFieldNumber;
#endif  // !_MSC_VER

LCFindTreasureSiShengChouJiangRsp::LCFindTreasureSiShengChouJiangRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasureSiShengChouJiangRsp::InitAsDefaultInstance() {
}

LCFindTreasureSiShengChouJiangRsp::LCFindTreasureSiShengChouJiangRsp(const LCFindTreasureSiShengChouJiangRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasureSiShengChouJiangRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  all_num_ = 0;
  server_all_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasureSiShengChouJiangRsp::~LCFindTreasureSiShengChouJiangRsp() {
  SharedDtor();
}

void LCFindTreasureSiShengChouJiangRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCFindTreasureSiShengChouJiangRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasureSiShengChouJiangRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasureSiShengChouJiangRsp_descriptor_;
}

const LCFindTreasureSiShengChouJiangRsp& LCFindTreasureSiShengChouJiangRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasureSiShengChouJiangRsp* LCFindTreasureSiShengChouJiangRsp::default_instance_ = NULL;

LCFindTreasureSiShengChouJiangRsp* LCFindTreasureSiShengChouJiangRsp::New() const {
  return new LCFindTreasureSiShengChouJiangRsp;
}

void LCFindTreasureSiShengChouJiangRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
    all_num_ = 0;
    server_all_num_ = 0;
  }
  reward_id_.Clear();
  person_total_reward_.Clear();
  server_total_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasureSiShengChouJiangRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        break;
      }

      // repeated int32 reward_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_reward_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reward_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        if (input->ExpectTag(32)) goto parse_all_num;
        break;
      }

      // optional int32 all_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_num_)));
          set_has_all_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_person_total_reward;
        break;
      }

      // repeated .proto_ff.FindTreasureSiShengRewardData person_total_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_person_total_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_person_total_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_person_total_reward;
        if (input->ExpectTag(50)) goto parse_server_total_reward;
        break;
      }

      // repeated .proto_ff.FindTreasureSiShengRewardData server_total_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_total_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_total_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_server_total_reward;
        if (input->ExpectTag(56)) goto parse_server_all_num;
        break;
      }

      // optional int32 server_all_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_all_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_all_num_)));
          set_has_server_all_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasureSiShengChouJiangRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated int32 reward_id = 3;
  for (int i = 0; i < this->reward_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->reward_id(i), output);
  }

  // optional int32 all_num = 4;
  if (has_all_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->all_num(), output);
  }

  // repeated .proto_ff.FindTreasureSiShengRewardData person_total_reward = 5;
  for (int i = 0; i < this->person_total_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->person_total_reward(i), output);
  }

  // repeated .proto_ff.FindTreasureSiShengRewardData server_total_reward = 6;
  for (int i = 0; i < this->server_total_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->server_total_reward(i), output);
  }

  // optional int32 server_all_num = 7;
  if (has_server_all_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->server_all_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasureSiShengChouJiangRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated int32 reward_id = 3;
  for (int i = 0; i < this->reward_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->reward_id(i), target);
  }

  // optional int32 all_num = 4;
  if (has_all_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->all_num(), target);
  }

  // repeated .proto_ff.FindTreasureSiShengRewardData person_total_reward = 5;
  for (int i = 0; i < this->person_total_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->person_total_reward(i), target);
  }

  // repeated .proto_ff.FindTreasureSiShengRewardData server_total_reward = 6;
  for (int i = 0; i < this->server_total_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->server_total_reward(i), target);
  }

  // optional int32 server_all_num = 7;
  if (has_server_all_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->server_all_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasureSiShengChouJiangRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 all_num = 4;
    if (has_all_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_num());
    }

    // optional int32 server_all_num = 7;
    if (has_server_all_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_all_num());
    }

  }
  // repeated int32 reward_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reward_id(i));
    }
    total_size += 1 * this->reward_id_size() + data_size;
  }

  // repeated .proto_ff.FindTreasureSiShengRewardData person_total_reward = 5;
  total_size += 1 * this->person_total_reward_size();
  for (int i = 0; i < this->person_total_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->person_total_reward(i));
  }

  // repeated .proto_ff.FindTreasureSiShengRewardData server_total_reward = 6;
  total_size += 1 * this->server_total_reward_size();
  for (int i = 0; i < this->server_total_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_total_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasureSiShengChouJiangRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasureSiShengChouJiangRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasureSiShengChouJiangRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasureSiShengChouJiangRsp::MergeFrom(const LCFindTreasureSiShengChouJiangRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_id_.MergeFrom(from.reward_id_);
  person_total_reward_.MergeFrom(from.person_total_reward_);
  server_total_reward_.MergeFrom(from.server_total_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_all_num()) {
      set_all_num(from.all_num());
    }
    if (from.has_server_all_num()) {
      set_server_all_num(from.server_all_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasureSiShengChouJiangRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasureSiShengChouJiangRsp::CopyFrom(const LCFindTreasureSiShengChouJiangRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasureSiShengChouJiangRsp::IsInitialized() const {

  return true;
}

void LCFindTreasureSiShengChouJiangRsp::Swap(LCFindTreasureSiShengChouJiangRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    reward_id_.Swap(&other->reward_id_);
    std::swap(all_num_, other->all_num_);
    person_total_reward_.Swap(&other->person_total_reward_);
    server_total_reward_.Swap(&other->server_total_reward_);
    std::swap(server_all_num_, other->server_all_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasureSiShengChouJiangRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasureSiShengChouJiangRsp_descriptor_;
  metadata.reflection = LCFindTreasureSiShengChouJiangRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasureSiShengGetTotalRewardReq::kIdFieldNumber;
const int CLFindTreasureSiShengGetTotalRewardReq::kTotalIdFieldNumber;
#endif  // !_MSC_VER

CLFindTreasureSiShengGetTotalRewardReq::CLFindTreasureSiShengGetTotalRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasureSiShengGetTotalRewardReq::InitAsDefaultInstance() {
}

CLFindTreasureSiShengGetTotalRewardReq::CLFindTreasureSiShengGetTotalRewardReq(const CLFindTreasureSiShengGetTotalRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasureSiShengGetTotalRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  total_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasureSiShengGetTotalRewardReq::~CLFindTreasureSiShengGetTotalRewardReq() {
  SharedDtor();
}

void CLFindTreasureSiShengGetTotalRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasureSiShengGetTotalRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasureSiShengGetTotalRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasureSiShengGetTotalRewardReq_descriptor_;
}

const CLFindTreasureSiShengGetTotalRewardReq& CLFindTreasureSiShengGetTotalRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasureSiShengGetTotalRewardReq* CLFindTreasureSiShengGetTotalRewardReq::default_instance_ = NULL;

CLFindTreasureSiShengGetTotalRewardReq* CLFindTreasureSiShengGetTotalRewardReq::New() const {
  return new CLFindTreasureSiShengGetTotalRewardReq;
}

void CLFindTreasureSiShengGetTotalRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    total_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasureSiShengGetTotalRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_id;
        break;
      }

      // optional int32 total_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_id_)));
          set_has_total_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasureSiShengGetTotalRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 total_id = 2;
  if (has_total_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasureSiShengGetTotalRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 total_id = 2;
  if (has_total_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasureSiShengGetTotalRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 total_id = 2;
    if (has_total_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasureSiShengGetTotalRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasureSiShengGetTotalRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasureSiShengGetTotalRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasureSiShengGetTotalRewardReq::MergeFrom(const CLFindTreasureSiShengGetTotalRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_total_id()) {
      set_total_id(from.total_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasureSiShengGetTotalRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasureSiShengGetTotalRewardReq::CopyFrom(const CLFindTreasureSiShengGetTotalRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasureSiShengGetTotalRewardReq::IsInitialized() const {

  return true;
}

void CLFindTreasureSiShengGetTotalRewardReq::Swap(CLFindTreasureSiShengGetTotalRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(total_id_, other->total_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasureSiShengGetTotalRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasureSiShengGetTotalRewardReq_descriptor_;
  metadata.reflection = CLFindTreasureSiShengGetTotalRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasureSiShengGetTotalRewardRsp::kRetCodeFieldNumber;
const int LCFindTreasureSiShengGetTotalRewardRsp::kIdFieldNumber;
const int LCFindTreasureSiShengGetTotalRewardRsp::kRewardFieldNumber;
#endif  // !_MSC_VER

LCFindTreasureSiShengGetTotalRewardRsp::LCFindTreasureSiShengGetTotalRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasureSiShengGetTotalRewardRsp::InitAsDefaultInstance() {
}

LCFindTreasureSiShengGetTotalRewardRsp::LCFindTreasureSiShengGetTotalRewardRsp(const LCFindTreasureSiShengGetTotalRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasureSiShengGetTotalRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasureSiShengGetTotalRewardRsp::~LCFindTreasureSiShengGetTotalRewardRsp() {
  SharedDtor();
}

void LCFindTreasureSiShengGetTotalRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCFindTreasureSiShengGetTotalRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasureSiShengGetTotalRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasureSiShengGetTotalRewardRsp_descriptor_;
}

const LCFindTreasureSiShengGetTotalRewardRsp& LCFindTreasureSiShengGetTotalRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasureSiShengGetTotalRewardRsp* LCFindTreasureSiShengGetTotalRewardRsp::default_instance_ = NULL;

LCFindTreasureSiShengGetTotalRewardRsp* LCFindTreasureSiShengGetTotalRewardRsp::New() const {
  return new LCFindTreasureSiShengGetTotalRewardRsp;
}

void LCFindTreasureSiShengGetTotalRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasureSiShengGetTotalRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.FindTreasureSiShengRewardData reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasureSiShengGetTotalRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated .proto_ff.FindTreasureSiShengRewardData reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasureSiShengGetTotalRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated .proto_ff.FindTreasureSiShengRewardData reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasureSiShengGetTotalRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .proto_ff.FindTreasureSiShengRewardData reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasureSiShengGetTotalRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasureSiShengGetTotalRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasureSiShengGetTotalRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasureSiShengGetTotalRewardRsp::MergeFrom(const LCFindTreasureSiShengGetTotalRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasureSiShengGetTotalRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasureSiShengGetTotalRewardRsp::CopyFrom(const LCFindTreasureSiShengGetTotalRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasureSiShengGetTotalRewardRsp::IsInitialized() const {

  return true;
}

void LCFindTreasureSiShengGetTotalRewardRsp::Swap(LCFindTreasureSiShengGetTotalRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasureSiShengGetTotalRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasureSiShengGetTotalRewardRsp_descriptor_;
  metadata.reflection = LCFindTreasureSiShengGetTotalRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFindTreasureSiShengGetServerTotalRewardReq::kIdFieldNumber;
const int CLFindTreasureSiShengGetServerTotalRewardReq::kTotalIdFieldNumber;
#endif  // !_MSC_VER

CLFindTreasureSiShengGetServerTotalRewardReq::CLFindTreasureSiShengGetServerTotalRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFindTreasureSiShengGetServerTotalRewardReq::InitAsDefaultInstance() {
}

CLFindTreasureSiShengGetServerTotalRewardReq::CLFindTreasureSiShengGetServerTotalRewardReq(const CLFindTreasureSiShengGetServerTotalRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFindTreasureSiShengGetServerTotalRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  total_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFindTreasureSiShengGetServerTotalRewardReq::~CLFindTreasureSiShengGetServerTotalRewardReq() {
  SharedDtor();
}

void CLFindTreasureSiShengGetServerTotalRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFindTreasureSiShengGetServerTotalRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFindTreasureSiShengGetServerTotalRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFindTreasureSiShengGetServerTotalRewardReq_descriptor_;
}

const CLFindTreasureSiShengGetServerTotalRewardReq& CLFindTreasureSiShengGetServerTotalRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

CLFindTreasureSiShengGetServerTotalRewardReq* CLFindTreasureSiShengGetServerTotalRewardReq::default_instance_ = NULL;

CLFindTreasureSiShengGetServerTotalRewardReq* CLFindTreasureSiShengGetServerTotalRewardReq::New() const {
  return new CLFindTreasureSiShengGetServerTotalRewardReq;
}

void CLFindTreasureSiShengGetServerTotalRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    total_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFindTreasureSiShengGetServerTotalRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_id;
        break;
      }

      // optional int32 total_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_id_)));
          set_has_total_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFindTreasureSiShengGetServerTotalRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 total_id = 2;
  if (has_total_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFindTreasureSiShengGetServerTotalRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 total_id = 2;
  if (has_total_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFindTreasureSiShengGetServerTotalRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 total_id = 2;
    if (has_total_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFindTreasureSiShengGetServerTotalRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFindTreasureSiShengGetServerTotalRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFindTreasureSiShengGetServerTotalRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFindTreasureSiShengGetServerTotalRewardReq::MergeFrom(const CLFindTreasureSiShengGetServerTotalRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_total_id()) {
      set_total_id(from.total_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFindTreasureSiShengGetServerTotalRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFindTreasureSiShengGetServerTotalRewardReq::CopyFrom(const CLFindTreasureSiShengGetServerTotalRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFindTreasureSiShengGetServerTotalRewardReq::IsInitialized() const {

  return true;
}

void CLFindTreasureSiShengGetServerTotalRewardReq::Swap(CLFindTreasureSiShengGetServerTotalRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(total_id_, other->total_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFindTreasureSiShengGetServerTotalRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFindTreasureSiShengGetServerTotalRewardReq_descriptor_;
  metadata.reflection = CLFindTreasureSiShengGetServerTotalRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFindTreasureSiShengGetServerTotalRewardRsp::kRetCodeFieldNumber;
const int LCFindTreasureSiShengGetServerTotalRewardRsp::kIdFieldNumber;
const int LCFindTreasureSiShengGetServerTotalRewardRsp::kRewardFieldNumber;
const int LCFindTreasureSiShengGetServerTotalRewardRsp::kAllNumFieldNumber;
#endif  // !_MSC_VER

LCFindTreasureSiShengGetServerTotalRewardRsp::LCFindTreasureSiShengGetServerTotalRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFindTreasureSiShengGetServerTotalRewardRsp::InitAsDefaultInstance() {
}

LCFindTreasureSiShengGetServerTotalRewardRsp::LCFindTreasureSiShengGetServerTotalRewardRsp(const LCFindTreasureSiShengGetServerTotalRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFindTreasureSiShengGetServerTotalRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  all_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFindTreasureSiShengGetServerTotalRewardRsp::~LCFindTreasureSiShengGetServerTotalRewardRsp() {
  SharedDtor();
}

void LCFindTreasureSiShengGetServerTotalRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCFindTreasureSiShengGetServerTotalRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFindTreasureSiShengGetServerTotalRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFindTreasureSiShengGetServerTotalRewardRsp_descriptor_;
}

const LCFindTreasureSiShengGetServerTotalRewardRsp& LCFindTreasureSiShengGetServerTotalRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FindTreasure_2eproto();
  return *default_instance_;
}

LCFindTreasureSiShengGetServerTotalRewardRsp* LCFindTreasureSiShengGetServerTotalRewardRsp::default_instance_ = NULL;

LCFindTreasureSiShengGetServerTotalRewardRsp* LCFindTreasureSiShengGetServerTotalRewardRsp::New() const {
  return new LCFindTreasureSiShengGetServerTotalRewardRsp;
}

void LCFindTreasureSiShengGetServerTotalRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
    all_num_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFindTreasureSiShengGetServerTotalRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.FindTreasureSiShengRewardData reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectTag(32)) goto parse_all_num;
        break;
      }

      // optional int32 all_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_num_)));
          set_has_all_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFindTreasureSiShengGetServerTotalRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated .proto_ff.FindTreasureSiShengRewardData reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  // optional int32 all_num = 4;
  if (has_all_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->all_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFindTreasureSiShengGetServerTotalRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated .proto_ff.FindTreasureSiShengRewardData reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  // optional int32 all_num = 4;
  if (has_all_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->all_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFindTreasureSiShengGetServerTotalRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 all_num = 4;
    if (has_all_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_num());
    }

  }
  // repeated .proto_ff.FindTreasureSiShengRewardData reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFindTreasureSiShengGetServerTotalRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFindTreasureSiShengGetServerTotalRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFindTreasureSiShengGetServerTotalRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFindTreasureSiShengGetServerTotalRewardRsp::MergeFrom(const LCFindTreasureSiShengGetServerTotalRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_all_num()) {
      set_all_num(from.all_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFindTreasureSiShengGetServerTotalRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFindTreasureSiShengGetServerTotalRewardRsp::CopyFrom(const LCFindTreasureSiShengGetServerTotalRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFindTreasureSiShengGetServerTotalRewardRsp::IsInitialized() const {

  return true;
}

void LCFindTreasureSiShengGetServerTotalRewardRsp::Swap(LCFindTreasureSiShengGetServerTotalRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    reward_.Swap(&other->reward_);
    std::swap(all_num_, other->all_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFindTreasureSiShengGetServerTotalRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFindTreasureSiShengGetServerTotalRewardRsp_descriptor_;
  metadata.reflection = LCFindTreasureSiShengGetServerTotalRewardRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
