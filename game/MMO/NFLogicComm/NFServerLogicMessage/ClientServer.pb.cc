// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* FunctionUnlockInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionUnlockInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionUnlockGetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionUnlockGetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionUnlockGetRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionUnlockGetRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeSkillUnlockNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeSkillUnlockNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeSkillLevReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeSkillLevReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeSkillLevRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeSkillLevRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeLevupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeLevupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeLevupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeLevupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeUnDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeUnDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeUnDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeUnDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFragmentUseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFragmentUseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFragmentUseRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFragmentUseRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFantasyInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFantasyInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFantasyInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFantasyInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFantasyActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFantasyActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFastasyActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFastasyActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFantasyLevelupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFantasyLevelupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFastasyLevelupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFastasyLevelupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFastasyDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFastasyDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFastasyDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFastasyDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFastasyUnDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFastasyUnDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFastasyUnDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFastasyUnDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSeatRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSeatRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSeatExpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSeatExpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLoginHangUpDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLoginHangUpDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLoginHangUpDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLoginHangUpDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHangUpRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHangUpRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHangUpRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHangUpRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDailyTaskDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDailyTaskDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDailyTaskDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDailyTaskDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDailyTaskNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDailyTaskNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDailyTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDailyTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDailyTaskRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDailyTaskRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskLevelupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskLevelupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskLevelupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskLevelupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyLimitTaskAddReadyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyLimitTaskAddReadyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyLimitTaskAddReadyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyLimitTaskAddReadyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyBackTaskBackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyBackTaskBackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyBackTaskBackRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyBackTaskBackRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyLimitTaskAddAllReadyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyLimitTaskAddAllReadyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyLimitTaskAddAllReadyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyLimitTaskAddAllReadyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyBackTaskBackAllReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyBackTaskBackAllReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyBackTaskBackAllRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyBackTaskBackAllRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClientServer_2eproto() {
  protobuf_AddDesc_ClientServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClientServer.proto");
  GOOGLE_CHECK(file != NULL);
  FunctionUnlockInfoRsp_descriptor_ = file->message_type(0);
  static const int FunctionUnlockInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoRsp, syntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoRsp, data_),
  };
  FunctionUnlockInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionUnlockInfoRsp_descriptor_,
      FunctionUnlockInfoRsp::default_instance_,
      FunctionUnlockInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionUnlockInfoRsp));
  FunctionUnlockGetRewardReq_descriptor_ = file->message_type(1);
  static const int FunctionUnlockGetRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockGetRewardReq, function_id_),
  };
  FunctionUnlockGetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionUnlockGetRewardReq_descriptor_,
      FunctionUnlockGetRewardReq::default_instance_,
      FunctionUnlockGetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockGetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockGetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionUnlockGetRewardReq));
  FunctionUnlockGetRewardRsp_descriptor_ = file->message_type(2);
  static const int FunctionUnlockGetRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockGetRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockGetRewardRsp, data_),
  };
  FunctionUnlockGetRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionUnlockGetRewardRsp_descriptor_,
      FunctionUnlockGetRewardRsp::default_instance_,
      FunctionUnlockGetRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockGetRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockGetRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionUnlockGetRewardRsp));
  FacadeInfoReq_descriptor_ = file->message_type(3);
  static const int FacadeInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoReq, facade_type_),
  };
  FacadeInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeInfoReq_descriptor_,
      FacadeInfoReq::default_instance_,
      FacadeInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeInfoReq));
  FacadeInfoRsp_descriptor_ = file->message_type(4);
  static const int FacadeInfoRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoRsp, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoRsp, facade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoRsp, facade_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoRsp, facade_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoRsp, use_facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoRsp, use_soul_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoRsp, fragment_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoRsp, fight_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoRsp, skill_data_),
  };
  FacadeInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeInfoRsp_descriptor_,
      FacadeInfoRsp::default_instance_,
      FacadeInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeInfoRsp));
  FacadeSkillUnlockNotify_descriptor_ = file->message_type(5);
  static const int FacadeSkillUnlockNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillUnlockNotify, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillUnlockNotify, skill_data_),
  };
  FacadeSkillUnlockNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeSkillUnlockNotify_descriptor_,
      FacadeSkillUnlockNotify::default_instance_,
      FacadeSkillUnlockNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillUnlockNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillUnlockNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeSkillUnlockNotify));
  FacadeSkillLevReq_descriptor_ = file->message_type(6);
  static const int FacadeSkillLevReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillLevReq, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillLevReq, skill_id_),
  };
  FacadeSkillLevReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeSkillLevReq_descriptor_,
      FacadeSkillLevReq::default_instance_,
      FacadeSkillLevReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillLevReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillLevReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeSkillLevReq));
  FacadeSkillLevRsp_descriptor_ = file->message_type(7);
  static const int FacadeSkillLevRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillLevRsp, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillLevRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillLevRsp, skill_data_),
  };
  FacadeSkillLevRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeSkillLevRsp_descriptor_,
      FacadeSkillLevRsp::default_instance_,
      FacadeSkillLevRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillLevRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillLevRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeSkillLevRsp));
  FacadeLevupReq_descriptor_ = file->message_type(8);
  static const int FacadeLevupReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeLevupReq, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeLevupReq, material_id_),
  };
  FacadeLevupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeLevupReq_descriptor_,
      FacadeLevupReq::default_instance_,
      FacadeLevupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeLevupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeLevupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeLevupReq));
  FacadeLevupRsp_descriptor_ = file->message_type(9);
  static const int FacadeLevupRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeLevupRsp, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeLevupRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeLevupRsp, facade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeLevupRsp, facade_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeLevupRsp, facade_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeLevupRsp, fight_value_),
  };
  FacadeLevupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeLevupRsp_descriptor_,
      FacadeLevupRsp::default_instance_,
      FacadeLevupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeLevupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeLevupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeLevupRsp));
  FacadeDressReq_descriptor_ = file->message_type(10);
  static const int FacadeDressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDressReq, facade_type_),
  };
  FacadeDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeDressReq_descriptor_,
      FacadeDressReq::default_instance_,
      FacadeDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeDressReq));
  FacadeDressRsp_descriptor_ = file->message_type(11);
  static const int FacadeDressRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDressRsp, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDressRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDressRsp, use_facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDressRsp, fight_value_),
  };
  FacadeDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeDressRsp_descriptor_,
      FacadeDressRsp::default_instance_,
      FacadeDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeDressRsp));
  FacadeUnDressReq_descriptor_ = file->message_type(12);
  static const int FacadeUnDressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeUnDressReq, facade_type_),
  };
  FacadeUnDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeUnDressReq_descriptor_,
      FacadeUnDressReq::default_instance_,
      FacadeUnDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeUnDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeUnDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeUnDressReq));
  FacadeUnDressRsp_descriptor_ = file->message_type(13);
  static const int FacadeUnDressRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeUnDressRsp, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeUnDressRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeUnDressRsp, use_facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeUnDressRsp, fight_value_),
  };
  FacadeUnDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeUnDressRsp_descriptor_,
      FacadeUnDressRsp::default_instance_,
      FacadeUnDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeUnDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeUnDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeUnDressRsp));
  FacadeFragmentUseReq_descriptor_ = file->message_type(14);
  static const int FacadeFragmentUseReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentUseReq, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentUseReq, fragment_id_),
  };
  FacadeFragmentUseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFragmentUseReq_descriptor_,
      FacadeFragmentUseReq::default_instance_,
      FacadeFragmentUseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentUseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentUseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFragmentUseReq));
  FacadeFragmentUseRsp_descriptor_ = file->message_type(15);
  static const int FacadeFragmentUseRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentUseRsp, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentUseRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentUseRsp, fragment_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentUseRsp, fight_value_),
  };
  FacadeFragmentUseRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFragmentUseRsp_descriptor_,
      FacadeFragmentUseRsp::default_instance_,
      FacadeFragmentUseRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentUseRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentUseRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFragmentUseRsp));
  FacadeFantasyInfoReq_descriptor_ = file->message_type(16);
  static const int FacadeFantasyInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyInfoReq, facade_type_),
  };
  FacadeFantasyInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFantasyInfoReq_descriptor_,
      FacadeFantasyInfoReq::default_instance_,
      FacadeFantasyInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFantasyInfoReq));
  FacadeFantasyInfoRsp_descriptor_ = file->message_type(17);
  static const int FacadeFantasyInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyInfoRsp, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyInfoRsp, fantasy_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyInfoRsp, equip_fantasy_id_),
  };
  FacadeFantasyInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFantasyInfoRsp_descriptor_,
      FacadeFantasyInfoRsp::default_instance_,
      FacadeFantasyInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFantasyInfoRsp));
  FacadeFantasyActiveReq_descriptor_ = file->message_type(18);
  static const int FacadeFantasyActiveReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyActiveReq, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyActiveReq, fantasy_id_),
  };
  FacadeFantasyActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFantasyActiveReq_descriptor_,
      FacadeFantasyActiveReq::default_instance_,
      FacadeFantasyActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFantasyActiveReq));
  FacadeFastasyActiveRsp_descriptor_ = file->message_type(19);
  static const int FacadeFastasyActiveRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyActiveRsp, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyActiveRsp, fantasy_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyActiveRsp, ret_code_),
  };
  FacadeFastasyActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFastasyActiveRsp_descriptor_,
      FacadeFastasyActiveRsp::default_instance_,
      FacadeFastasyActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFastasyActiveRsp));
  FacadeFantasyLevelupReq_descriptor_ = file->message_type(20);
  static const int FacadeFantasyLevelupReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyLevelupReq, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyLevelupReq, fantasy_id_),
  };
  FacadeFantasyLevelupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFantasyLevelupReq_descriptor_,
      FacadeFantasyLevelupReq::default_instance_,
      FacadeFantasyLevelupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyLevelupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyLevelupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFantasyLevelupReq));
  FacadeFastasyLevelupRsp_descriptor_ = file->message_type(21);
  static const int FacadeFastasyLevelupRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyLevelupRsp, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyLevelupRsp, fantasy_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyLevelupRsp, ret_code_),
  };
  FacadeFastasyLevelupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFastasyLevelupRsp_descriptor_,
      FacadeFastasyLevelupRsp::default_instance_,
      FacadeFastasyLevelupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyLevelupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyLevelupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFastasyLevelupRsp));
  FacadeFastasyDressReq_descriptor_ = file->message_type(22);
  static const int FacadeFastasyDressReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyDressReq, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyDressReq, equip_fantasy_id_),
  };
  FacadeFastasyDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFastasyDressReq_descriptor_,
      FacadeFastasyDressReq::default_instance_,
      FacadeFastasyDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFastasyDressReq));
  FacadeFastasyDressRsp_descriptor_ = file->message_type(23);
  static const int FacadeFastasyDressRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyDressRsp, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyDressRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyDressRsp, equip_fantasy_id_),
  };
  FacadeFastasyDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFastasyDressRsp_descriptor_,
      FacadeFastasyDressRsp::default_instance_,
      FacadeFastasyDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFastasyDressRsp));
  FacadeFastasyUnDressReq_descriptor_ = file->message_type(24);
  static const int FacadeFastasyUnDressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyUnDressReq, facade_type_),
  };
  FacadeFastasyUnDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFastasyUnDressReq_descriptor_,
      FacadeFastasyUnDressReq::default_instance_,
      FacadeFastasyUnDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyUnDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyUnDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFastasyUnDressReq));
  FacadeFastasyUnDressRsp_descriptor_ = file->message_type(25);
  static const int FacadeFastasyUnDressRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyUnDressRsp, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyUnDressRsp, ret_code_),
  };
  FacadeFastasyUnDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFastasyUnDressRsp_descriptor_,
      FacadeFastasyUnDressRsp::default_instance_,
      FacadeFastasyUnDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyUnDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFastasyUnDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFastasyUnDressRsp));
  PlayerSeatReq_descriptor_ = file->message_type(26);
  static const int PlayerSeatReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatReq, opt_),
  };
  PlayerSeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSeatReq_descriptor_,
      PlayerSeatReq::default_instance_,
      PlayerSeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSeatReq));
  PlayerSeatRsp_descriptor_ = file->message_type(27);
  static const int PlayerSeatRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatRsp, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatRsp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatRsp, online_hangup_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatRsp, online_all_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatRsp, items_),
  };
  PlayerSeatRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSeatRsp_descriptor_,
      PlayerSeatRsp::default_instance_,
      PlayerSeatRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSeatRsp));
  PlayerSeatExpRsp_descriptor_ = file->message_type(28);
  static const int PlayerSeatExpRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatExpRsp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatExpRsp, online_hangup_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatExpRsp, online_all_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatExpRsp, items_),
  };
  PlayerSeatExpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSeatExpRsp_descriptor_,
      PlayerSeatExpRsp::default_instance_,
      PlayerSeatExpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatExpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSeatExpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSeatExpRsp));
  PlayerLoginHangUpDataReq_descriptor_ = file->message_type(29);
  static const int PlayerLoginHangUpDataReq_offsets_[1] = {
  };
  PlayerLoginHangUpDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLoginHangUpDataReq_descriptor_,
      PlayerLoginHangUpDataReq::default_instance_,
      PlayerLoginHangUpDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLoginHangUpDataReq));
  PlayerLoginHangUpDataRsp_descriptor_ = file->message_type(30);
  static const int PlayerLoginHangUpDataRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataRsp, hangup_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataRsp, hangup_surplus_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataRsp, add_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataRsp, before_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataRsp, after_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataRsp, before_fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataRsp, after_fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataRsp, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataRsp, add_value_),
  };
  PlayerLoginHangUpDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLoginHangUpDataRsp_descriptor_,
      PlayerLoginHangUpDataRsp::default_instance_,
      PlayerLoginHangUpDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHangUpDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLoginHangUpDataRsp));
  PlayerHangUpRewardReq_descriptor_ = file->message_type(31);
  static const int PlayerHangUpRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHangUpRewardReq, opt_),
  };
  PlayerHangUpRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerHangUpRewardReq_descriptor_,
      PlayerHangUpRewardReq::default_instance_,
      PlayerHangUpRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHangUpRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHangUpRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHangUpRewardReq));
  PlayerHangUpRewardRsp_descriptor_ = file->message_type(32);
  static const int PlayerHangUpRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHangUpRewardRsp, ret_),
  };
  PlayerHangUpRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerHangUpRewardRsp_descriptor_,
      PlayerHangUpRewardRsp::default_instance_,
      PlayerHangUpRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHangUpRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHangUpRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHangUpRewardRsp));
  GetDailyTaskDataReq_descriptor_ = file->message_type(33);
  static const int GetDailyTaskDataReq_offsets_[1] = {
  };
  GetDailyTaskDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDailyTaskDataReq_descriptor_,
      GetDailyTaskDataReq::default_instance_,
      GetDailyTaskDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyTaskDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyTaskDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDailyTaskDataReq));
  GetDailyTaskDataRsp_descriptor_ = file->message_type(34);
  static const int GetDailyTaskDataRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyTaskDataRsp, data_),
  };
  GetDailyTaskDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDailyTaskDataRsp_descriptor_,
      GetDailyTaskDataRsp::default_instance_,
      GetDailyTaskDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyTaskDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyTaskDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDailyTaskDataRsp));
  UpdateDailyTaskNotify_descriptor_ = file->message_type(35);
  static const int UpdateDailyTaskNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTaskNotify, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTaskNotify, limit_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTaskNotify, reward_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTaskNotify, back_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTaskNotify, daily_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTaskNotify, daily_exp_),
  };
  UpdateDailyTaskNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDailyTaskNotify_descriptor_,
      UpdateDailyTaskNotify::default_instance_,
      UpdateDailyTaskNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTaskNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTaskNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDailyTaskNotify));
  GetDailyTaskRewardReq_descriptor_ = file->message_type(36);
  static const int GetDailyTaskRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyTaskRewardReq, reward_id_),
  };
  GetDailyTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDailyTaskRewardReq_descriptor_,
      GetDailyTaskRewardReq::default_instance_,
      GetDailyTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDailyTaskRewardReq));
  GetDailyTaskRewardRsp_descriptor_ = file->message_type(37);
  static const int GetDailyTaskRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyTaskRewardRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyTaskRewardRsp, reward_id_),
  };
  GetDailyTaskRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDailyTaskRewardRsp_descriptor_,
      GetDailyTaskRewardRsp::default_instance_,
      GetDailyTaskRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyTaskRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyTaskRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDailyTaskRewardRsp));
  DailyTaskLevelupReq_descriptor_ = file->message_type(38);
  static const int DailyTaskLevelupReq_offsets_[1] = {
  };
  DailyTaskLevelupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskLevelupReq_descriptor_,
      DailyTaskLevelupReq::default_instance_,
      DailyTaskLevelupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLevelupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLevelupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskLevelupReq));
  DailyTaskLevelupRsp_descriptor_ = file->message_type(39);
  static const int DailyTaskLevelupRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLevelupRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLevelupRsp, daily_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLevelupRsp, daily_exp_),
  };
  DailyTaskLevelupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskLevelupRsp_descriptor_,
      DailyTaskLevelupRsp::default_instance_,
      DailyTaskLevelupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLevelupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLevelupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskLevelupRsp));
  DailyLimitTaskAddReadyReq_descriptor_ = file->message_type(40);
  static const int DailyLimitTaskAddReadyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddReadyReq, task_id_),
  };
  DailyLimitTaskAddReadyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyLimitTaskAddReadyReq_descriptor_,
      DailyLimitTaskAddReadyReq::default_instance_,
      DailyLimitTaskAddReadyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddReadyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddReadyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyLimitTaskAddReadyReq));
  DailyLimitTaskAddReadyRsp_descriptor_ = file->message_type(41);
  static const int DailyLimitTaskAddReadyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddReadyRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddReadyRsp, data_),
  };
  DailyLimitTaskAddReadyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyLimitTaskAddReadyRsp_descriptor_,
      DailyLimitTaskAddReadyRsp::default_instance_,
      DailyLimitTaskAddReadyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddReadyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddReadyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyLimitTaskAddReadyRsp));
  DailyBackTaskBackReq_descriptor_ = file->message_type(42);
  static const int DailyBackTaskBackReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackReq, back_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackReq, left_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackReq, external_left_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackReq, type_),
  };
  DailyBackTaskBackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyBackTaskBackReq_descriptor_,
      DailyBackTaskBackReq::default_instance_,
      DailyBackTaskBackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyBackTaskBackReq));
  DailyBackTaskBackRsp_descriptor_ = file->message_type(43);
  static const int DailyBackTaskBackRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackRsp, data_),
  };
  DailyBackTaskBackRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyBackTaskBackRsp_descriptor_,
      DailyBackTaskBackRsp::default_instance_,
      DailyBackTaskBackRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyBackTaskBackRsp));
  DailyLimitTaskAddAllReadyReq_descriptor_ = file->message_type(44);
  static const int DailyLimitTaskAddAllReadyReq_offsets_[1] = {
  };
  DailyLimitTaskAddAllReadyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyLimitTaskAddAllReadyReq_descriptor_,
      DailyLimitTaskAddAllReadyReq::default_instance_,
      DailyLimitTaskAddAllReadyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddAllReadyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddAllReadyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyLimitTaskAddAllReadyReq));
  DailyLimitTaskAddAllReadyRsp_descriptor_ = file->message_type(45);
  static const int DailyLimitTaskAddAllReadyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddAllReadyRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddAllReadyRsp, data_),
  };
  DailyLimitTaskAddAllReadyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyLimitTaskAddAllReadyRsp_descriptor_,
      DailyLimitTaskAddAllReadyRsp::default_instance_,
      DailyLimitTaskAddAllReadyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddAllReadyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyLimitTaskAddAllReadyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyLimitTaskAddAllReadyRsp));
  DailyBackTaskBackAllReq_descriptor_ = file->message_type(46);
  static const int DailyBackTaskBackAllReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackAllReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackAllReq, back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackAllReq, external_back_),
  };
  DailyBackTaskBackAllReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyBackTaskBackAllReq_descriptor_,
      DailyBackTaskBackAllReq::default_instance_,
      DailyBackTaskBackAllReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackAllReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackAllReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyBackTaskBackAllReq));
  DailyBackTaskBackAllRsp_descriptor_ = file->message_type(47);
  static const int DailyBackTaskBackAllRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackAllRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackAllRsp, data_),
  };
  DailyBackTaskBackAllRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyBackTaskBackAllRsp_descriptor_,
      DailyBackTaskBackAllRsp::default_instance_,
      DailyBackTaskBackAllRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackAllRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyBackTaskBackAllRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyBackTaskBackAllRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClientServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionUnlockInfoRsp_descriptor_, &FunctionUnlockInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionUnlockGetRewardReq_descriptor_, &FunctionUnlockGetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionUnlockGetRewardRsp_descriptor_, &FunctionUnlockGetRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeInfoReq_descriptor_, &FacadeInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeInfoRsp_descriptor_, &FacadeInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeSkillUnlockNotify_descriptor_, &FacadeSkillUnlockNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeSkillLevReq_descriptor_, &FacadeSkillLevReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeSkillLevRsp_descriptor_, &FacadeSkillLevRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeLevupReq_descriptor_, &FacadeLevupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeLevupRsp_descriptor_, &FacadeLevupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeDressReq_descriptor_, &FacadeDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeDressRsp_descriptor_, &FacadeDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeUnDressReq_descriptor_, &FacadeUnDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeUnDressRsp_descriptor_, &FacadeUnDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFragmentUseReq_descriptor_, &FacadeFragmentUseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFragmentUseRsp_descriptor_, &FacadeFragmentUseRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFantasyInfoReq_descriptor_, &FacadeFantasyInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFantasyInfoRsp_descriptor_, &FacadeFantasyInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFantasyActiveReq_descriptor_, &FacadeFantasyActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFastasyActiveRsp_descriptor_, &FacadeFastasyActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFantasyLevelupReq_descriptor_, &FacadeFantasyLevelupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFastasyLevelupRsp_descriptor_, &FacadeFastasyLevelupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFastasyDressReq_descriptor_, &FacadeFastasyDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFastasyDressRsp_descriptor_, &FacadeFastasyDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFastasyUnDressReq_descriptor_, &FacadeFastasyUnDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFastasyUnDressRsp_descriptor_, &FacadeFastasyUnDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSeatReq_descriptor_, &PlayerSeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSeatRsp_descriptor_, &PlayerSeatRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSeatExpRsp_descriptor_, &PlayerSeatExpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLoginHangUpDataReq_descriptor_, &PlayerLoginHangUpDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLoginHangUpDataRsp_descriptor_, &PlayerLoginHangUpDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHangUpRewardReq_descriptor_, &PlayerHangUpRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHangUpRewardRsp_descriptor_, &PlayerHangUpRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDailyTaskDataReq_descriptor_, &GetDailyTaskDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDailyTaskDataRsp_descriptor_, &GetDailyTaskDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDailyTaskNotify_descriptor_, &UpdateDailyTaskNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDailyTaskRewardReq_descriptor_, &GetDailyTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDailyTaskRewardRsp_descriptor_, &GetDailyTaskRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskLevelupReq_descriptor_, &DailyTaskLevelupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskLevelupRsp_descriptor_, &DailyTaskLevelupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyLimitTaskAddReadyReq_descriptor_, &DailyLimitTaskAddReadyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyLimitTaskAddReadyRsp_descriptor_, &DailyLimitTaskAddReadyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyBackTaskBackReq_descriptor_, &DailyBackTaskBackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyBackTaskBackRsp_descriptor_, &DailyBackTaskBackRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyLimitTaskAddAllReadyReq_descriptor_, &DailyLimitTaskAddAllReadyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyLimitTaskAddAllReadyRsp_descriptor_, &DailyLimitTaskAddAllReadyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyBackTaskBackAllReq_descriptor_, &DailyBackTaskBackAllReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyBackTaskBackAllRsp_descriptor_, &DailyBackTaskBackAllRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClientServer_2eproto() {
  delete FunctionUnlockInfoRsp::default_instance_;
  delete FunctionUnlockInfoRsp_reflection_;
  delete FunctionUnlockGetRewardReq::default_instance_;
  delete FunctionUnlockGetRewardReq_reflection_;
  delete FunctionUnlockGetRewardRsp::default_instance_;
  delete FunctionUnlockGetRewardRsp_reflection_;
  delete FacadeInfoReq::default_instance_;
  delete FacadeInfoReq_reflection_;
  delete FacadeInfoRsp::default_instance_;
  delete FacadeInfoRsp_reflection_;
  delete FacadeSkillUnlockNotify::default_instance_;
  delete FacadeSkillUnlockNotify_reflection_;
  delete FacadeSkillLevReq::default_instance_;
  delete FacadeSkillLevReq_reflection_;
  delete FacadeSkillLevRsp::default_instance_;
  delete FacadeSkillLevRsp_reflection_;
  delete FacadeLevupReq::default_instance_;
  delete FacadeLevupReq_reflection_;
  delete FacadeLevupRsp::default_instance_;
  delete FacadeLevupRsp_reflection_;
  delete FacadeDressReq::default_instance_;
  delete FacadeDressReq_reflection_;
  delete FacadeDressRsp::default_instance_;
  delete FacadeDressRsp_reflection_;
  delete FacadeUnDressReq::default_instance_;
  delete FacadeUnDressReq_reflection_;
  delete FacadeUnDressRsp::default_instance_;
  delete FacadeUnDressRsp_reflection_;
  delete FacadeFragmentUseReq::default_instance_;
  delete FacadeFragmentUseReq_reflection_;
  delete FacadeFragmentUseRsp::default_instance_;
  delete FacadeFragmentUseRsp_reflection_;
  delete FacadeFantasyInfoReq::default_instance_;
  delete FacadeFantasyInfoReq_reflection_;
  delete FacadeFantasyInfoRsp::default_instance_;
  delete FacadeFantasyInfoRsp_reflection_;
  delete FacadeFantasyActiveReq::default_instance_;
  delete FacadeFantasyActiveReq_reflection_;
  delete FacadeFastasyActiveRsp::default_instance_;
  delete FacadeFastasyActiveRsp_reflection_;
  delete FacadeFantasyLevelupReq::default_instance_;
  delete FacadeFantasyLevelupReq_reflection_;
  delete FacadeFastasyLevelupRsp::default_instance_;
  delete FacadeFastasyLevelupRsp_reflection_;
  delete FacadeFastasyDressReq::default_instance_;
  delete FacadeFastasyDressReq_reflection_;
  delete FacadeFastasyDressRsp::default_instance_;
  delete FacadeFastasyDressRsp_reflection_;
  delete FacadeFastasyUnDressReq::default_instance_;
  delete FacadeFastasyUnDressReq_reflection_;
  delete FacadeFastasyUnDressRsp::default_instance_;
  delete FacadeFastasyUnDressRsp_reflection_;
  delete PlayerSeatReq::default_instance_;
  delete PlayerSeatReq_reflection_;
  delete PlayerSeatRsp::default_instance_;
  delete PlayerSeatRsp_reflection_;
  delete PlayerSeatExpRsp::default_instance_;
  delete PlayerSeatExpRsp_reflection_;
  delete PlayerLoginHangUpDataReq::default_instance_;
  delete PlayerLoginHangUpDataReq_reflection_;
  delete PlayerLoginHangUpDataRsp::default_instance_;
  delete PlayerLoginHangUpDataRsp_reflection_;
  delete PlayerHangUpRewardReq::default_instance_;
  delete PlayerHangUpRewardReq_reflection_;
  delete PlayerHangUpRewardRsp::default_instance_;
  delete PlayerHangUpRewardRsp_reflection_;
  delete GetDailyTaskDataReq::default_instance_;
  delete GetDailyTaskDataReq_reflection_;
  delete GetDailyTaskDataRsp::default_instance_;
  delete GetDailyTaskDataRsp_reflection_;
  delete UpdateDailyTaskNotify::default_instance_;
  delete UpdateDailyTaskNotify_reflection_;
  delete GetDailyTaskRewardReq::default_instance_;
  delete GetDailyTaskRewardReq_reflection_;
  delete GetDailyTaskRewardRsp::default_instance_;
  delete GetDailyTaskRewardRsp_reflection_;
  delete DailyTaskLevelupReq::default_instance_;
  delete DailyTaskLevelupReq_reflection_;
  delete DailyTaskLevelupRsp::default_instance_;
  delete DailyTaskLevelupRsp_reflection_;
  delete DailyLimitTaskAddReadyReq::default_instance_;
  delete DailyLimitTaskAddReadyReq_reflection_;
  delete DailyLimitTaskAddReadyRsp::default_instance_;
  delete DailyLimitTaskAddReadyRsp_reflection_;
  delete DailyBackTaskBackReq::default_instance_;
  delete DailyBackTaskBackReq_reflection_;
  delete DailyBackTaskBackRsp::default_instance_;
  delete DailyBackTaskBackRsp_reflection_;
  delete DailyLimitTaskAddAllReadyReq::default_instance_;
  delete DailyLimitTaskAddAllReadyReq_reflection_;
  delete DailyLimitTaskAddAllReadyRsp::default_instance_;
  delete DailyLimitTaskAddAllReadyRsp_reflection_;
  delete DailyBackTaskBackAllReq::default_instance_;
  delete DailyBackTaskBackAllReq_reflection_;
  delete DailyBackTaskBackAllRsp::default_instance_;
  delete DailyBackTaskBackAllRsp_reflection_;
}

void protobuf_AddDesc_ClientServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ClientServer.proto\022\010proto_ff\032\025yd_field"
    "options.proto\032\022common_logic.proto\032\tCom.p"
    "roto\"i\n\025FunctionUnlockInfoRsp\022\017\n\007retCode"
    "\030\001 \002(\005\022\017\n\007synType\030\002 \002(\005\022.\n\004data\030\003 \003(\0132 ."
    "proto_ff.FunctionUnlockInfoData\"1\n\032Funct"
    "ionUnlockGetRewardReq\022\023\n\013function_id\030\001 \001"
    "(\004\"^\n\032FunctionUnlockGetRewardRsp\022\020\n\010ret_"
    "code\030\001 \001(\005\022.\n\004data\030\002 \001(\0132 .proto_ff.Func"
    "tionUnlockInfoData\"$\n\rFacadeInfoReq\022\023\n\013f"
    "acade_type\030\001 \001(\r\"\203\002\n\rFacadeInfoRsp\022\023\n\013fa"
    "cade_type\030\001 \001(\r\022\021\n\tfacade_id\030\002 \001(\004\022\022\n\nfa"
    "cade_lev\030\003 \001(\r\022\022\n\nfacade_exp\030\004 \001(\004\022\022\n\nus"
    "e_facade\030\005 \001(\010\022\025\n\ruse_soul_item\030\006 \001(\010\0223\n"
    "\rfragment_data\030\007 \003(\0132\034.proto_ff.FacadeFr"
    "agmentData\022\023\n\013fight_value\030\010 \001(\004\022-\n\nskill"
    "_data\030\t \003(\0132\031.proto_ff.FacadeSkillData\"]"
    "\n\027FacadeSkillUnlockNotify\022\023\n\013facade_type"
    "\030\001 \001(\r\022-\n\nskill_data\030\002 \001(\0132\031.proto_ff.Fa"
    "cadeSkillData\":\n\021FacadeSkillLevReq\022\023\n\013fa"
    "cade_type\030\001 \001(\r\022\020\n\010skill_id\030\002 \001(\004\"i\n\021Fac"
    "adeSkillLevRsp\022\023\n\013facade_type\030\001 \001(\r\022\020\n\010r"
    "et_code\030\002 \001(\r\022-\n\nskill_data\030\003 \001(\0132\031.prot"
    "o_ff.FacadeSkillData\":\n\016FacadeLevupReq\022\023"
    "\n\013facade_type\030\001 \001(\r\022\023\n\013material_id\030\002 \001(\004"
    "\"\207\001\n\016FacadeLevupRsp\022\023\n\013facade_type\030\001 \001(\r"
    "\022\020\n\010ret_code\030\002 \001(\r\022\021\n\tfacade_id\030\003 \001(\004\022\022\n"
    "\nfacade_lev\030\004 \001(\r\022\022\n\nfacade_exp\030\005 \001(\004\022\023\n"
    "\013fight_value\030\010 \001(\004\"%\n\016FacadeDressReq\022\023\n\013"
    "facade_type\030\001 \001(\r\"`\n\016FacadeDressRsp\022\023\n\013f"
    "acade_type\030\001 \001(\r\022\020\n\010ret_code\030\002 \001(\r\022\022\n\nus"
    "e_facade\030\003 \001(\010\022\023\n\013fight_value\030\010 \001(\004\"\'\n\020F"
    "acadeUnDressReq\022\023\n\013facade_type\030\001 \001(\r\"b\n\020"
    "FacadeUnDressRsp\022\023\n\013facade_type\030\001 \001(\r\022\020\n"
    "\010ret_code\030\002 \001(\r\022\022\n\nuse_facade\030\003 \001(\010\022\023\n\013f"
    "ight_value\030\010 \001(\004\"@\n\024FacadeFragmentUseReq"
    "\022\023\n\013facade_type\030\001 \001(\r\022\023\n\013fragment_id\030\002 \001"
    "(\004\"\207\001\n\024FacadeFragmentUseRsp\022\023\n\013facade_ty"
    "pe\030\001 \001(\r\022\020\n\010ret_code\030\002 \001(\r\0223\n\rfragment_d"
    "ata\030\003 \003(\0132\034.proto_ff.FacadeFragmentData\022"
    "\023\n\013fight_value\030\004 \001(\004\"+\n\024FacadeFantasyInf"
    "oReq\022\023\n\013facade_type\030\001 \001(\r\"x\n\024FacadeFanta"
    "syInfoRsp\022\023\n\013facade_type\030\001 \001(\r\0221\n\014fantas"
    "y_data\030\005 \003(\0132\033.proto_ff.FacadeFantasyDat"
    "a\022\030\n\020equip_fantasy_id\030\006 \001(\004\"A\n\026FacadeFan"
    "tasyActiveReq\022\023\n\013facade_type\030\001 \001(\r\022\022\n\nfa"
    "ntasy_id\030\002 \001(\004\"r\n\026FacadeFastasyActiveRsp"
    "\022\023\n\013facade_type\030\001 \001(\r\0221\n\014fantasy_data\030\002 "
    "\001(\0132\033.proto_ff.FacadeFantasyData\022\020\n\010ret_"
    "code\030\003 \001(\r\"B\n\027FacadeFantasyLevelupReq\022\023\n"
    "\013facade_type\030\001 \001(\r\022\022\n\nfantasy_id\030\002 \001(\004\"s"
    "\n\027FacadeFastasyLevelupRsp\022\023\n\013facade_type"
    "\030\001 \001(\r\0221\n\014fantasy_data\030\002 \001(\0132\033.proto_ff."
    "FacadeFantasyData\022\020\n\010ret_code\030\003 \001(\r\"F\n\025F"
    "acadeFastasyDressReq\022\023\n\013facade_type\030\001 \001("
    "\r\022\030\n\020equip_fantasy_id\030\002 \001(\004\"X\n\025FacadeFas"
    "tasyDressRsp\022\023\n\013facade_type\030\001 \001(\r\022\020\n\010ret"
    "_code\030\002 \001(\r\022\030\n\020equip_fantasy_id\030\003 \001(\004\".\n"
    "\027FacadeFastasyUnDressReq\022\023\n\013facade_type\030"
    "\001 \001(\r\"@\n\027FacadeFastasyUnDressRsp\022\023\n\013faca"
    "de_type\030\001 \001(\r\022\020\n\010ret_code\030\002 \001(\r\"\034\n\rPlaye"
    "rSeatReq\022\013\n\003opt\030\001 \001(\005\"\216\001\n\rPlayerSeatRsp\022"
    "\013\n\003opt\030\001 \001(\005\022\013\n\003ret\030\002 \001(\005\022\013\n\003exp\030\003 \001(\004\022\032"
    "\n\022online_hangup_time\030\004 \001(\r\022\026\n\016online_all"
    "_exp\030\005 \001(\004\022\"\n\005items\030\006 \003(\0132\023.proto_ff.Com"
    "Pair64\"w\n\020PlayerSeatExpRsp\022\013\n\003exp\030\001 \001(\004\022"
    "\032\n\022online_hangup_time\030\002 \001(\r\022\026\n\016online_al"
    "l_exp\030\003 \001(\004\022\"\n\005items\030\004 \003(\0132\023.proto_ff.Co"
    "mPair64\"\032\n\030PlayerLoginHangUpDataReq\"\344\001\n\030"
    "PlayerLoginHangUpDataRsp\022\023\n\013hangup_time\030"
    "\001 \001(\005\022\033\n\023hangup_surplus_time\030\002 \001(\005\022\017\n\007ad"
    "d_exp\030\003 \001(\004\022\021\n\tbefore_lv\030\004 \001(\005\022\020\n\010after_"
    "lv\030\005 \001(\005\022\024\n\014before_fight\030\006 \001(\004\022\023\n\013after_"
    "fight\030\007 \001(\004\022\"\n\005items\030\010 \003(\0132\023.proto_ff.Co"
    "mPair64\022\021\n\tadd_value\030\t \003(\005\"$\n\025PlayerHang"
    "UpRewardReq\022\013\n\003opt\030\001 \001(\005\"$\n\025PlayerHangUp"
    "RewardRsp\022\013\n\003ret\030\002 \001(\005\"\025\n\023GetDailyTaskDa"
    "taReq\"\?\n\023GetDailyTaskDataRsp\022(\n\004data\030\001 \001"
    "(\0132\032.proto_ff.DailyTaskAllData\"\200\002\n\025Updat"
    "eDailyTaskNotify\022&\n\004data\030\001 \003(\0132\030.proto_f"
    "f.DailyTaskEntry\0221\n\nlimit_data\030\002 \003(\0132\035.p"
    "roto_ff.DailyTaskLimitEntry\0223\n\013reward_da"
    "ta\030\003 \003(\0132\036.proto_ff.DailyTaskRewardEntry"
    "\022/\n\tback_data\030\004 \003(\0132\034.proto_ff.DailyTask"
    "BackEntry\022\023\n\013daily_score\030\005 \001(\r\022\021\n\tdaily_"
    "exp\030\006 \001(\004\"*\n\025GetDailyTaskRewardReq\022\021\n\tre"
    "ward_id\030\001 \001(\005\"<\n\025GetDailyTaskRewardRsp\022\020"
    "\n\010ret_code\030\001 \001(\005\022\021\n\treward_id\030\002 \001(\005\"\025\n\023D"
    "ailyTaskLevelupReq\"O\n\023DailyTaskLevelupRs"
    "p\022\020\n\010ret_code\030\001 \001(\005\022\023\n\013daily_level\030\002 \001(\r"
    "\022\021\n\tdaily_exp\030\003 \001(\004\",\n\031DailyLimitTaskAdd"
    "ReadyReq\022\017\n\007task_id\030\001 \001(\003\"Z\n\031DailyLimitT"
    "askAddReadyRsp\022\020\n\010ret_code\030\001 \001(\005\022+\n\004data"
    "\030\002 \001(\0132\035.proto_ff.DailyTaskLimitEntry\"d\n"
    "\024DailyBackTaskBackReq\022\017\n\007back_id\030\001 \001(\003\022\021"
    "\n\tleft_time\030\002 \001(\005\022\032\n\022external_left_time\030"
    "\003 \001(\005\022\014\n\004type\030\004 \001(\005\"T\n\024DailyBackTaskBack"
    "Rsp\022\020\n\010ret_code\030\001 \001(\005\022*\n\004data\030\002 \001(\0132\034.pr"
    "oto_ff.DailyTaskBackEntry\"\036\n\034DailyLimitT"
    "askAddAllReadyReq\"]\n\034DailyLimitTaskAddAl"
    "lReadyRsp\022\020\n\010ret_code\030\001 \001(\005\022+\n\004data\030\002 \003("
    "\0132\035.proto_ff.DailyTaskLimitEntry\"L\n\027Dail"
    "yBackTaskBackAllReq\022\014\n\004type\030\001 \001(\005\022\014\n\004bac"
    "k\030\002 \001(\010\022\025\n\rexternal_back\030\003 \001(\010\"W\n\027DailyB"
    "ackTaskBackAllRsp\022\020\n\010ret_code\030\001 \001(\005\022*\n\004d"
    "ata\030\002 \003(\0132\034.proto_ff.DailyTaskBackEntry", 4199);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClientServer.proto", &protobuf_RegisterTypes);
  FunctionUnlockInfoRsp::default_instance_ = new FunctionUnlockInfoRsp();
  FunctionUnlockGetRewardReq::default_instance_ = new FunctionUnlockGetRewardReq();
  FunctionUnlockGetRewardRsp::default_instance_ = new FunctionUnlockGetRewardRsp();
  FacadeInfoReq::default_instance_ = new FacadeInfoReq();
  FacadeInfoRsp::default_instance_ = new FacadeInfoRsp();
  FacadeSkillUnlockNotify::default_instance_ = new FacadeSkillUnlockNotify();
  FacadeSkillLevReq::default_instance_ = new FacadeSkillLevReq();
  FacadeSkillLevRsp::default_instance_ = new FacadeSkillLevRsp();
  FacadeLevupReq::default_instance_ = new FacadeLevupReq();
  FacadeLevupRsp::default_instance_ = new FacadeLevupRsp();
  FacadeDressReq::default_instance_ = new FacadeDressReq();
  FacadeDressRsp::default_instance_ = new FacadeDressRsp();
  FacadeUnDressReq::default_instance_ = new FacadeUnDressReq();
  FacadeUnDressRsp::default_instance_ = new FacadeUnDressRsp();
  FacadeFragmentUseReq::default_instance_ = new FacadeFragmentUseReq();
  FacadeFragmentUseRsp::default_instance_ = new FacadeFragmentUseRsp();
  FacadeFantasyInfoReq::default_instance_ = new FacadeFantasyInfoReq();
  FacadeFantasyInfoRsp::default_instance_ = new FacadeFantasyInfoRsp();
  FacadeFantasyActiveReq::default_instance_ = new FacadeFantasyActiveReq();
  FacadeFastasyActiveRsp::default_instance_ = new FacadeFastasyActiveRsp();
  FacadeFantasyLevelupReq::default_instance_ = new FacadeFantasyLevelupReq();
  FacadeFastasyLevelupRsp::default_instance_ = new FacadeFastasyLevelupRsp();
  FacadeFastasyDressReq::default_instance_ = new FacadeFastasyDressReq();
  FacadeFastasyDressRsp::default_instance_ = new FacadeFastasyDressRsp();
  FacadeFastasyUnDressReq::default_instance_ = new FacadeFastasyUnDressReq();
  FacadeFastasyUnDressRsp::default_instance_ = new FacadeFastasyUnDressRsp();
  PlayerSeatReq::default_instance_ = new PlayerSeatReq();
  PlayerSeatRsp::default_instance_ = new PlayerSeatRsp();
  PlayerSeatExpRsp::default_instance_ = new PlayerSeatExpRsp();
  PlayerLoginHangUpDataReq::default_instance_ = new PlayerLoginHangUpDataReq();
  PlayerLoginHangUpDataRsp::default_instance_ = new PlayerLoginHangUpDataRsp();
  PlayerHangUpRewardReq::default_instance_ = new PlayerHangUpRewardReq();
  PlayerHangUpRewardRsp::default_instance_ = new PlayerHangUpRewardRsp();
  GetDailyTaskDataReq::default_instance_ = new GetDailyTaskDataReq();
  GetDailyTaskDataRsp::default_instance_ = new GetDailyTaskDataRsp();
  UpdateDailyTaskNotify::default_instance_ = new UpdateDailyTaskNotify();
  GetDailyTaskRewardReq::default_instance_ = new GetDailyTaskRewardReq();
  GetDailyTaskRewardRsp::default_instance_ = new GetDailyTaskRewardRsp();
  DailyTaskLevelupReq::default_instance_ = new DailyTaskLevelupReq();
  DailyTaskLevelupRsp::default_instance_ = new DailyTaskLevelupRsp();
  DailyLimitTaskAddReadyReq::default_instance_ = new DailyLimitTaskAddReadyReq();
  DailyLimitTaskAddReadyRsp::default_instance_ = new DailyLimitTaskAddReadyRsp();
  DailyBackTaskBackReq::default_instance_ = new DailyBackTaskBackReq();
  DailyBackTaskBackRsp::default_instance_ = new DailyBackTaskBackRsp();
  DailyLimitTaskAddAllReadyReq::default_instance_ = new DailyLimitTaskAddAllReadyReq();
  DailyLimitTaskAddAllReadyRsp::default_instance_ = new DailyLimitTaskAddAllReadyRsp();
  DailyBackTaskBackAllReq::default_instance_ = new DailyBackTaskBackAllReq();
  DailyBackTaskBackAllRsp::default_instance_ = new DailyBackTaskBackAllRsp();
  FunctionUnlockInfoRsp::default_instance_->InitAsDefaultInstance();
  FunctionUnlockGetRewardReq::default_instance_->InitAsDefaultInstance();
  FunctionUnlockGetRewardRsp::default_instance_->InitAsDefaultInstance();
  FacadeInfoReq::default_instance_->InitAsDefaultInstance();
  FacadeInfoRsp::default_instance_->InitAsDefaultInstance();
  FacadeSkillUnlockNotify::default_instance_->InitAsDefaultInstance();
  FacadeSkillLevReq::default_instance_->InitAsDefaultInstance();
  FacadeSkillLevRsp::default_instance_->InitAsDefaultInstance();
  FacadeLevupReq::default_instance_->InitAsDefaultInstance();
  FacadeLevupRsp::default_instance_->InitAsDefaultInstance();
  FacadeDressReq::default_instance_->InitAsDefaultInstance();
  FacadeDressRsp::default_instance_->InitAsDefaultInstance();
  FacadeUnDressReq::default_instance_->InitAsDefaultInstance();
  FacadeUnDressRsp::default_instance_->InitAsDefaultInstance();
  FacadeFragmentUseReq::default_instance_->InitAsDefaultInstance();
  FacadeFragmentUseRsp::default_instance_->InitAsDefaultInstance();
  FacadeFantasyInfoReq::default_instance_->InitAsDefaultInstance();
  FacadeFantasyInfoRsp::default_instance_->InitAsDefaultInstance();
  FacadeFantasyActiveReq::default_instance_->InitAsDefaultInstance();
  FacadeFastasyActiveRsp::default_instance_->InitAsDefaultInstance();
  FacadeFantasyLevelupReq::default_instance_->InitAsDefaultInstance();
  FacadeFastasyLevelupRsp::default_instance_->InitAsDefaultInstance();
  FacadeFastasyDressReq::default_instance_->InitAsDefaultInstance();
  FacadeFastasyDressRsp::default_instance_->InitAsDefaultInstance();
  FacadeFastasyUnDressReq::default_instance_->InitAsDefaultInstance();
  FacadeFastasyUnDressRsp::default_instance_->InitAsDefaultInstance();
  PlayerSeatReq::default_instance_->InitAsDefaultInstance();
  PlayerSeatRsp::default_instance_->InitAsDefaultInstance();
  PlayerSeatExpRsp::default_instance_->InitAsDefaultInstance();
  PlayerLoginHangUpDataReq::default_instance_->InitAsDefaultInstance();
  PlayerLoginHangUpDataRsp::default_instance_->InitAsDefaultInstance();
  PlayerHangUpRewardReq::default_instance_->InitAsDefaultInstance();
  PlayerHangUpRewardRsp::default_instance_->InitAsDefaultInstance();
  GetDailyTaskDataReq::default_instance_->InitAsDefaultInstance();
  GetDailyTaskDataRsp::default_instance_->InitAsDefaultInstance();
  UpdateDailyTaskNotify::default_instance_->InitAsDefaultInstance();
  GetDailyTaskRewardReq::default_instance_->InitAsDefaultInstance();
  GetDailyTaskRewardRsp::default_instance_->InitAsDefaultInstance();
  DailyTaskLevelupReq::default_instance_->InitAsDefaultInstance();
  DailyTaskLevelupRsp::default_instance_->InitAsDefaultInstance();
  DailyLimitTaskAddReadyReq::default_instance_->InitAsDefaultInstance();
  DailyLimitTaskAddReadyRsp::default_instance_->InitAsDefaultInstance();
  DailyBackTaskBackReq::default_instance_->InitAsDefaultInstance();
  DailyBackTaskBackRsp::default_instance_->InitAsDefaultInstance();
  DailyLimitTaskAddAllReadyReq::default_instance_->InitAsDefaultInstance();
  DailyLimitTaskAddAllReadyRsp::default_instance_->InitAsDefaultInstance();
  DailyBackTaskBackAllReq::default_instance_->InitAsDefaultInstance();
  DailyBackTaskBackAllRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientServer_2eproto {
  StaticDescriptorInitializer_ClientServer_2eproto() {
    protobuf_AddDesc_ClientServer_2eproto();
  }
} static_descriptor_initializer_ClientServer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FunctionUnlockInfoRsp::kRetCodeFieldNumber;
const int FunctionUnlockInfoRsp::kSynTypeFieldNumber;
const int FunctionUnlockInfoRsp::kDataFieldNumber;
#endif  // !_MSC_VER

FunctionUnlockInfoRsp::FunctionUnlockInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionUnlockInfoRsp::InitAsDefaultInstance() {
}

FunctionUnlockInfoRsp::FunctionUnlockInfoRsp(const FunctionUnlockInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionUnlockInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  syntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionUnlockInfoRsp::~FunctionUnlockInfoRsp() {
  SharedDtor();
}

void FunctionUnlockInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionUnlockInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionUnlockInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlockInfoRsp_descriptor_;
}

const FunctionUnlockInfoRsp& FunctionUnlockInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FunctionUnlockInfoRsp* FunctionUnlockInfoRsp::default_instance_ = NULL;

FunctionUnlockInfoRsp* FunctionUnlockInfoRsp::New() const {
  return new FunctionUnlockInfoRsp;
}

void FunctionUnlockInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    syntype_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionUnlockInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_synType;
        break;
      }

      // required int32 synType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &syntype_)));
          set_has_syntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .proto_ff.FunctionUnlockInfoData data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionUnlockInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 synType = 2;
  if (has_syntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->syntype(), output);
  }

  // repeated .proto_ff.FunctionUnlockInfoData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionUnlockInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 synType = 2;
  if (has_syntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->syntype(), target);
  }

  // repeated .proto_ff.FunctionUnlockInfoData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionUnlockInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 synType = 2;
    if (has_syntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->syntype());
    }

  }
  // repeated .proto_ff.FunctionUnlockInfoData data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionUnlockInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionUnlockInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionUnlockInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionUnlockInfoRsp::MergeFrom(const FunctionUnlockInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_syntype()) {
      set_syntype(from.syntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionUnlockInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionUnlockInfoRsp::CopyFrom(const FunctionUnlockInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionUnlockInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FunctionUnlockInfoRsp::Swap(FunctionUnlockInfoRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(syntype_, other->syntype_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionUnlockInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionUnlockInfoRsp_descriptor_;
  metadata.reflection = FunctionUnlockInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionUnlockGetRewardReq::kFunctionIdFieldNumber;
#endif  // !_MSC_VER

FunctionUnlockGetRewardReq::FunctionUnlockGetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionUnlockGetRewardReq::InitAsDefaultInstance() {
}

FunctionUnlockGetRewardReq::FunctionUnlockGetRewardReq(const FunctionUnlockGetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionUnlockGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  function_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionUnlockGetRewardReq::~FunctionUnlockGetRewardReq() {
  SharedDtor();
}

void FunctionUnlockGetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionUnlockGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionUnlockGetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlockGetRewardReq_descriptor_;
}

const FunctionUnlockGetRewardReq& FunctionUnlockGetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FunctionUnlockGetRewardReq* FunctionUnlockGetRewardReq::default_instance_ = NULL;

FunctionUnlockGetRewardReq* FunctionUnlockGetRewardReq::New() const {
  return new FunctionUnlockGetRewardReq;
}

void FunctionUnlockGetRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    function_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionUnlockGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 function_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_id_)));
          set_has_function_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionUnlockGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 function_id = 1;
  if (has_function_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->function_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionUnlockGetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 function_id = 1;
  if (has_function_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->function_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionUnlockGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 function_id = 1;
    if (has_function_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->function_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionUnlockGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionUnlockGetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionUnlockGetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionUnlockGetRewardReq::MergeFrom(const FunctionUnlockGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_function_id()) {
      set_function_id(from.function_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionUnlockGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionUnlockGetRewardReq::CopyFrom(const FunctionUnlockGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionUnlockGetRewardReq::IsInitialized() const {

  return true;
}

void FunctionUnlockGetRewardReq::Swap(FunctionUnlockGetRewardReq* other) {
  if (other != this) {
    std::swap(function_id_, other->function_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionUnlockGetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionUnlockGetRewardReq_descriptor_;
  metadata.reflection = FunctionUnlockGetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionUnlockGetRewardRsp::kRetCodeFieldNumber;
const int FunctionUnlockGetRewardRsp::kDataFieldNumber;
#endif  // !_MSC_VER

FunctionUnlockGetRewardRsp::FunctionUnlockGetRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionUnlockGetRewardRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FunctionUnlockInfoData*>(&::proto_ff::FunctionUnlockInfoData::default_instance());
}

FunctionUnlockGetRewardRsp::FunctionUnlockGetRewardRsp(const FunctionUnlockGetRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionUnlockGetRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionUnlockGetRewardRsp::~FunctionUnlockGetRewardRsp() {
  SharedDtor();
}

void FunctionUnlockGetRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FunctionUnlockGetRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionUnlockGetRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlockGetRewardRsp_descriptor_;
}

const FunctionUnlockGetRewardRsp& FunctionUnlockGetRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FunctionUnlockGetRewardRsp* FunctionUnlockGetRewardRsp::default_instance_ = NULL;

FunctionUnlockGetRewardRsp* FunctionUnlockGetRewardRsp::New() const {
  return new FunctionUnlockGetRewardRsp;
}

void FunctionUnlockGetRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FunctionUnlockInfoData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionUnlockGetRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.FunctionUnlockInfoData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionUnlockGetRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.FunctionUnlockInfoData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionUnlockGetRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.FunctionUnlockInfoData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionUnlockGetRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.FunctionUnlockInfoData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionUnlockGetRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionUnlockGetRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionUnlockGetRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionUnlockGetRewardRsp::MergeFrom(const FunctionUnlockGetRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FunctionUnlockInfoData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionUnlockGetRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionUnlockGetRewardRsp::CopyFrom(const FunctionUnlockGetRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionUnlockGetRewardRsp::IsInitialized() const {

  return true;
}

void FunctionUnlockGetRewardRsp::Swap(FunctionUnlockGetRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionUnlockGetRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionUnlockGetRewardRsp_descriptor_;
  metadata.reflection = FunctionUnlockGetRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeInfoReq::kFacadeTypeFieldNumber;
#endif  // !_MSC_VER

FacadeInfoReq::FacadeInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeInfoReq::InitAsDefaultInstance() {
}

FacadeInfoReq::FacadeInfoReq(const FacadeInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeInfoReq::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeInfoReq::~FacadeInfoReq() {
  SharedDtor();
}

void FacadeInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeInfoReq_descriptor_;
}

const FacadeInfoReq& FacadeInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeInfoReq* FacadeInfoReq::default_instance_ = NULL;

FacadeInfoReq* FacadeInfoReq::New() const {
  return new FacadeInfoReq;
}

void FacadeInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeInfoReq::MergeFrom(const FacadeInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeInfoReq::CopyFrom(const FacadeInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeInfoReq::IsInitialized() const {

  return true;
}

void FacadeInfoReq::Swap(FacadeInfoReq* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeInfoReq_descriptor_;
  metadata.reflection = FacadeInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeInfoRsp::kFacadeTypeFieldNumber;
const int FacadeInfoRsp::kFacadeIdFieldNumber;
const int FacadeInfoRsp::kFacadeLevFieldNumber;
const int FacadeInfoRsp::kFacadeExpFieldNumber;
const int FacadeInfoRsp::kUseFacadeFieldNumber;
const int FacadeInfoRsp::kUseSoulItemFieldNumber;
const int FacadeInfoRsp::kFragmentDataFieldNumber;
const int FacadeInfoRsp::kFightValueFieldNumber;
const int FacadeInfoRsp::kSkillDataFieldNumber;
#endif  // !_MSC_VER

FacadeInfoRsp::FacadeInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeInfoRsp::InitAsDefaultInstance() {
}

FacadeInfoRsp::FacadeInfoRsp(const FacadeInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  facade_id_ = GOOGLE_ULONGLONG(0);
  facade_lev_ = 0u;
  facade_exp_ = GOOGLE_ULONGLONG(0);
  use_facade_ = false;
  use_soul_item_ = false;
  fight_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeInfoRsp::~FacadeInfoRsp() {
  SharedDtor();
}

void FacadeInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeInfoRsp_descriptor_;
}

const FacadeInfoRsp& FacadeInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeInfoRsp* FacadeInfoRsp::default_instance_ = NULL;

FacadeInfoRsp* FacadeInfoRsp::New() const {
  return new FacadeInfoRsp;
}

void FacadeInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    facade_id_ = GOOGLE_ULONGLONG(0);
    facade_lev_ = 0u;
    facade_exp_ = GOOGLE_ULONGLONG(0);
    use_facade_ = false;
    use_soul_item_ = false;
    fight_value_ = GOOGLE_ULONGLONG(0);
  }
  fragment_data_.Clear();
  skill_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_facade_id;
        break;
      }

      // optional uint64 facade_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facade_id_)));
          set_has_facade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_facade_lev;
        break;
      }

      // optional uint32 facade_lev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facade_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_lev_)));
          set_has_facade_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_facade_exp;
        break;
      }

      // optional uint64 facade_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facade_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facade_exp_)));
          set_has_facade_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_use_facade;
        break;
      }

      // optional bool use_facade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_facade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_facade_)));
          set_has_use_facade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_use_soul_item;
        break;
      }

      // optional bool use_soul_item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_soul_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_soul_item_)));
          set_has_use_soul_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fragment_data;
        break;
      }

      // repeated .proto_ff.FacadeFragmentData fragment_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragment_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fragment_data;
        if (input->ExpectTag(64)) goto parse_fight_value;
        break;
      }

      // optional uint64 fight_value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_value_)));
          set_has_fight_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill_data;
        break;
      }

      // repeated .proto_ff.FacadeSkillData skill_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint64 facade_id = 2;
  if (has_facade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->facade_id(), output);
  }

  // optional uint32 facade_lev = 3;
  if (has_facade_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->facade_lev(), output);
  }

  // optional uint64 facade_exp = 4;
  if (has_facade_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->facade_exp(), output);
  }

  // optional bool use_facade = 5;
  if (has_use_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_facade(), output);
  }

  // optional bool use_soul_item = 6;
  if (has_use_soul_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_soul_item(), output);
  }

  // repeated .proto_ff.FacadeFragmentData fragment_data = 7;
  for (int i = 0; i < this->fragment_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fragment_data(i), output);
  }

  // optional uint64 fight_value = 8;
  if (has_fight_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fight_value(), output);
  }

  // repeated .proto_ff.FacadeSkillData skill_data = 9;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->skill_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint64 facade_id = 2;
  if (has_facade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->facade_id(), target);
  }

  // optional uint32 facade_lev = 3;
  if (has_facade_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->facade_lev(), target);
  }

  // optional uint64 facade_exp = 4;
  if (has_facade_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->facade_exp(), target);
  }

  // optional bool use_facade = 5;
  if (has_use_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_facade(), target);
  }

  // optional bool use_soul_item = 6;
  if (has_use_soul_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_soul_item(), target);
  }

  // repeated .proto_ff.FacadeFragmentData fragment_data = 7;
  for (int i = 0; i < this->fragment_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fragment_data(i), target);
  }

  // optional uint64 fight_value = 8;
  if (has_fight_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fight_value(), target);
  }

  // repeated .proto_ff.FacadeSkillData skill_data = 9;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->skill_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint64 facade_id = 2;
    if (has_facade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facade_id());
    }

    // optional uint32 facade_lev = 3;
    if (has_facade_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_lev());
    }

    // optional uint64 facade_exp = 4;
    if (has_facade_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facade_exp());
    }

    // optional bool use_facade = 5;
    if (has_use_facade()) {
      total_size += 1 + 1;
    }

    // optional bool use_soul_item = 6;
    if (has_use_soul_item()) {
      total_size += 1 + 1;
    }

    // optional uint64 fight_value = 8;
    if (has_fight_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight_value());
    }

  }
  // repeated .proto_ff.FacadeFragmentData fragment_data = 7;
  total_size += 1 * this->fragment_data_size();
  for (int i = 0; i < this->fragment_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragment_data(i));
  }

  // repeated .proto_ff.FacadeSkillData skill_data = 9;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeInfoRsp::MergeFrom(const FacadeInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fragment_data_.MergeFrom(from.fragment_data_);
  skill_data_.MergeFrom(from.skill_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_facade_id()) {
      set_facade_id(from.facade_id());
    }
    if (from.has_facade_lev()) {
      set_facade_lev(from.facade_lev());
    }
    if (from.has_facade_exp()) {
      set_facade_exp(from.facade_exp());
    }
    if (from.has_use_facade()) {
      set_use_facade(from.use_facade());
    }
    if (from.has_use_soul_item()) {
      set_use_soul_item(from.use_soul_item());
    }
    if (from.has_fight_value()) {
      set_fight_value(from.fight_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeInfoRsp::CopyFrom(const FacadeInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeInfoRsp::IsInitialized() const {

  return true;
}

void FacadeInfoRsp::Swap(FacadeInfoRsp* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(facade_id_, other->facade_id_);
    std::swap(facade_lev_, other->facade_lev_);
    std::swap(facade_exp_, other->facade_exp_);
    std::swap(use_facade_, other->use_facade_);
    std::swap(use_soul_item_, other->use_soul_item_);
    fragment_data_.Swap(&other->fragment_data_);
    std::swap(fight_value_, other->fight_value_);
    skill_data_.Swap(&other->skill_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeInfoRsp_descriptor_;
  metadata.reflection = FacadeInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeSkillUnlockNotify::kFacadeTypeFieldNumber;
const int FacadeSkillUnlockNotify::kSkillDataFieldNumber;
#endif  // !_MSC_VER

FacadeSkillUnlockNotify::FacadeSkillUnlockNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeSkillUnlockNotify::InitAsDefaultInstance() {
  skill_data_ = const_cast< ::proto_ff::FacadeSkillData*>(&::proto_ff::FacadeSkillData::default_instance());
}

FacadeSkillUnlockNotify::FacadeSkillUnlockNotify(const FacadeSkillUnlockNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeSkillUnlockNotify::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  skill_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeSkillUnlockNotify::~FacadeSkillUnlockNotify() {
  SharedDtor();
}

void FacadeSkillUnlockNotify::SharedDtor() {
  if (this != default_instance_) {
    delete skill_data_;
  }
}

void FacadeSkillUnlockNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeSkillUnlockNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeSkillUnlockNotify_descriptor_;
}

const FacadeSkillUnlockNotify& FacadeSkillUnlockNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeSkillUnlockNotify* FacadeSkillUnlockNotify::default_instance_ = NULL;

FacadeSkillUnlockNotify* FacadeSkillUnlockNotify::New() const {
  return new FacadeSkillUnlockNotify;
}

void FacadeSkillUnlockNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    if (has_skill_data()) {
      if (skill_data_ != NULL) skill_data_->::proto_ff::FacadeSkillData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeSkillUnlockNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_data;
        break;
      }

      // optional .proto_ff.FacadeSkillData skill_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeSkillUnlockNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional .proto_ff.FacadeSkillData skill_data = 2;
  if (has_skill_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeSkillUnlockNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional .proto_ff.FacadeSkillData skill_data = 2;
  if (has_skill_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeSkillUnlockNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional .proto_ff.FacadeSkillData skill_data = 2;
    if (has_skill_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeSkillUnlockNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeSkillUnlockNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeSkillUnlockNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeSkillUnlockNotify::MergeFrom(const FacadeSkillUnlockNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_skill_data()) {
      mutable_skill_data()->::proto_ff::FacadeSkillData::MergeFrom(from.skill_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeSkillUnlockNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeSkillUnlockNotify::CopyFrom(const FacadeSkillUnlockNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeSkillUnlockNotify::IsInitialized() const {

  return true;
}

void FacadeSkillUnlockNotify::Swap(FacadeSkillUnlockNotify* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(skill_data_, other->skill_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeSkillUnlockNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeSkillUnlockNotify_descriptor_;
  metadata.reflection = FacadeSkillUnlockNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeSkillLevReq::kFacadeTypeFieldNumber;
const int FacadeSkillLevReq::kSkillIdFieldNumber;
#endif  // !_MSC_VER

FacadeSkillLevReq::FacadeSkillLevReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeSkillLevReq::InitAsDefaultInstance() {
}

FacadeSkillLevReq::FacadeSkillLevReq(const FacadeSkillLevReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeSkillLevReq::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  skill_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeSkillLevReq::~FacadeSkillLevReq() {
  SharedDtor();
}

void FacadeSkillLevReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeSkillLevReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeSkillLevReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeSkillLevReq_descriptor_;
}

const FacadeSkillLevReq& FacadeSkillLevReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeSkillLevReq* FacadeSkillLevReq::default_instance_ = NULL;

FacadeSkillLevReq* FacadeSkillLevReq::New() const {
  return new FacadeSkillLevReq;
}

void FacadeSkillLevReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    skill_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeSkillLevReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // optional uint64 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeSkillLevReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint64 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeSkillLevReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint64 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeSkillLevReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint64 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeSkillLevReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeSkillLevReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeSkillLevReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeSkillLevReq::MergeFrom(const FacadeSkillLevReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeSkillLevReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeSkillLevReq::CopyFrom(const FacadeSkillLevReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeSkillLevReq::IsInitialized() const {

  return true;
}

void FacadeSkillLevReq::Swap(FacadeSkillLevReq* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeSkillLevReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeSkillLevReq_descriptor_;
  metadata.reflection = FacadeSkillLevReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeSkillLevRsp::kFacadeTypeFieldNumber;
const int FacadeSkillLevRsp::kRetCodeFieldNumber;
const int FacadeSkillLevRsp::kSkillDataFieldNumber;
#endif  // !_MSC_VER

FacadeSkillLevRsp::FacadeSkillLevRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeSkillLevRsp::InitAsDefaultInstance() {
  skill_data_ = const_cast< ::proto_ff::FacadeSkillData*>(&::proto_ff::FacadeSkillData::default_instance());
}

FacadeSkillLevRsp::FacadeSkillLevRsp(const FacadeSkillLevRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeSkillLevRsp::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  ret_code_ = 0u;
  skill_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeSkillLevRsp::~FacadeSkillLevRsp() {
  SharedDtor();
}

void FacadeSkillLevRsp::SharedDtor() {
  if (this != default_instance_) {
    delete skill_data_;
  }
}

void FacadeSkillLevRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeSkillLevRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeSkillLevRsp_descriptor_;
}

const FacadeSkillLevRsp& FacadeSkillLevRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeSkillLevRsp* FacadeSkillLevRsp::default_instance_ = NULL;

FacadeSkillLevRsp* FacadeSkillLevRsp::New() const {
  return new FacadeSkillLevRsp;
}

void FacadeSkillLevRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    ret_code_ = 0u;
    if (has_skill_data()) {
      if (skill_data_ != NULL) skill_data_->::proto_ff::FacadeSkillData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeSkillLevRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_code;
        break;
      }

      // optional uint32 ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill_data;
        break;
      }

      // optional .proto_ff.FacadeSkillData skill_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeSkillLevRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret_code(), output);
  }

  // optional .proto_ff.FacadeSkillData skill_data = 3;
  if (has_skill_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeSkillLevRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret_code(), target);
  }

  // optional .proto_ff.FacadeSkillData skill_data = 3;
  if (has_skill_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeSkillLevRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint32 ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

    // optional .proto_ff.FacadeSkillData skill_data = 3;
    if (has_skill_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeSkillLevRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeSkillLevRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeSkillLevRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeSkillLevRsp::MergeFrom(const FacadeSkillLevRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_skill_data()) {
      mutable_skill_data()->::proto_ff::FacadeSkillData::MergeFrom(from.skill_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeSkillLevRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeSkillLevRsp::CopyFrom(const FacadeSkillLevRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeSkillLevRsp::IsInitialized() const {

  return true;
}

void FacadeSkillLevRsp::Swap(FacadeSkillLevRsp* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(skill_data_, other->skill_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeSkillLevRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeSkillLevRsp_descriptor_;
  metadata.reflection = FacadeSkillLevRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeLevupReq::kFacadeTypeFieldNumber;
const int FacadeLevupReq::kMaterialIdFieldNumber;
#endif  // !_MSC_VER

FacadeLevupReq::FacadeLevupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeLevupReq::InitAsDefaultInstance() {
}

FacadeLevupReq::FacadeLevupReq(const FacadeLevupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeLevupReq::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  material_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeLevupReq::~FacadeLevupReq() {
  SharedDtor();
}

void FacadeLevupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeLevupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeLevupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeLevupReq_descriptor_;
}

const FacadeLevupReq& FacadeLevupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeLevupReq* FacadeLevupReq::default_instance_ = NULL;

FacadeLevupReq* FacadeLevupReq::New() const {
  return new FacadeLevupReq;
}

void FacadeLevupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    material_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeLevupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_material_id;
        break;
      }

      // optional uint64 material_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_material_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &material_id_)));
          set_has_material_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeLevupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint64 material_id = 2;
  if (has_material_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->material_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeLevupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint64 material_id = 2;
  if (has_material_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->material_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeLevupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint64 material_id = 2;
    if (has_material_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->material_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeLevupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeLevupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeLevupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeLevupReq::MergeFrom(const FacadeLevupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_material_id()) {
      set_material_id(from.material_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeLevupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeLevupReq::CopyFrom(const FacadeLevupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeLevupReq::IsInitialized() const {

  return true;
}

void FacadeLevupReq::Swap(FacadeLevupReq* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(material_id_, other->material_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeLevupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeLevupReq_descriptor_;
  metadata.reflection = FacadeLevupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeLevupRsp::kFacadeTypeFieldNumber;
const int FacadeLevupRsp::kRetCodeFieldNumber;
const int FacadeLevupRsp::kFacadeIdFieldNumber;
const int FacadeLevupRsp::kFacadeLevFieldNumber;
const int FacadeLevupRsp::kFacadeExpFieldNumber;
const int FacadeLevupRsp::kFightValueFieldNumber;
#endif  // !_MSC_VER

FacadeLevupRsp::FacadeLevupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeLevupRsp::InitAsDefaultInstance() {
}

FacadeLevupRsp::FacadeLevupRsp(const FacadeLevupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeLevupRsp::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  ret_code_ = 0u;
  facade_id_ = GOOGLE_ULONGLONG(0);
  facade_lev_ = 0u;
  facade_exp_ = GOOGLE_ULONGLONG(0);
  fight_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeLevupRsp::~FacadeLevupRsp() {
  SharedDtor();
}

void FacadeLevupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeLevupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeLevupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeLevupRsp_descriptor_;
}

const FacadeLevupRsp& FacadeLevupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeLevupRsp* FacadeLevupRsp::default_instance_ = NULL;

FacadeLevupRsp* FacadeLevupRsp::New() const {
  return new FacadeLevupRsp;
}

void FacadeLevupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    ret_code_ = 0u;
    facade_id_ = GOOGLE_ULONGLONG(0);
    facade_lev_ = 0u;
    facade_exp_ = GOOGLE_ULONGLONG(0);
    fight_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeLevupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_code;
        break;
      }

      // optional uint32 ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_facade_id;
        break;
      }

      // optional uint64 facade_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facade_id_)));
          set_has_facade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_facade_lev;
        break;
      }

      // optional uint32 facade_lev = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facade_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_lev_)));
          set_has_facade_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_facade_exp;
        break;
      }

      // optional uint64 facade_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facade_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facade_exp_)));
          set_has_facade_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight_value;
        break;
      }

      // optional uint64 fight_value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_value_)));
          set_has_fight_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeLevupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret_code(), output);
  }

  // optional uint64 facade_id = 3;
  if (has_facade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->facade_id(), output);
  }

  // optional uint32 facade_lev = 4;
  if (has_facade_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->facade_lev(), output);
  }

  // optional uint64 facade_exp = 5;
  if (has_facade_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->facade_exp(), output);
  }

  // optional uint64 fight_value = 8;
  if (has_fight_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fight_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeLevupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret_code(), target);
  }

  // optional uint64 facade_id = 3;
  if (has_facade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->facade_id(), target);
  }

  // optional uint32 facade_lev = 4;
  if (has_facade_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->facade_lev(), target);
  }

  // optional uint64 facade_exp = 5;
  if (has_facade_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->facade_exp(), target);
  }

  // optional uint64 fight_value = 8;
  if (has_fight_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fight_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeLevupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint32 ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

    // optional uint64 facade_id = 3;
    if (has_facade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facade_id());
    }

    // optional uint32 facade_lev = 4;
    if (has_facade_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_lev());
    }

    // optional uint64 facade_exp = 5;
    if (has_facade_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facade_exp());
    }

    // optional uint64 fight_value = 8;
    if (has_fight_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeLevupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeLevupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeLevupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeLevupRsp::MergeFrom(const FacadeLevupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_facade_id()) {
      set_facade_id(from.facade_id());
    }
    if (from.has_facade_lev()) {
      set_facade_lev(from.facade_lev());
    }
    if (from.has_facade_exp()) {
      set_facade_exp(from.facade_exp());
    }
    if (from.has_fight_value()) {
      set_fight_value(from.fight_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeLevupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeLevupRsp::CopyFrom(const FacadeLevupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeLevupRsp::IsInitialized() const {

  return true;
}

void FacadeLevupRsp::Swap(FacadeLevupRsp* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(facade_id_, other->facade_id_);
    std::swap(facade_lev_, other->facade_lev_);
    std::swap(facade_exp_, other->facade_exp_);
    std::swap(fight_value_, other->fight_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeLevupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeLevupRsp_descriptor_;
  metadata.reflection = FacadeLevupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeDressReq::kFacadeTypeFieldNumber;
#endif  // !_MSC_VER

FacadeDressReq::FacadeDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeDressReq::InitAsDefaultInstance() {
}

FacadeDressReq::FacadeDressReq(const FacadeDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeDressReq::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeDressReq::~FacadeDressReq() {
  SharedDtor();
}

void FacadeDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeDressReq_descriptor_;
}

const FacadeDressReq& FacadeDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeDressReq* FacadeDressReq::default_instance_ = NULL;

FacadeDressReq* FacadeDressReq::New() const {
  return new FacadeDressReq;
}

void FacadeDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeDressReq::MergeFrom(const FacadeDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeDressReq::CopyFrom(const FacadeDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeDressReq::IsInitialized() const {

  return true;
}

void FacadeDressReq::Swap(FacadeDressReq* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeDressReq_descriptor_;
  metadata.reflection = FacadeDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeDressRsp::kFacadeTypeFieldNumber;
const int FacadeDressRsp::kRetCodeFieldNumber;
const int FacadeDressRsp::kUseFacadeFieldNumber;
const int FacadeDressRsp::kFightValueFieldNumber;
#endif  // !_MSC_VER

FacadeDressRsp::FacadeDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeDressRsp::InitAsDefaultInstance() {
}

FacadeDressRsp::FacadeDressRsp(const FacadeDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeDressRsp::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  ret_code_ = 0u;
  use_facade_ = false;
  fight_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeDressRsp::~FacadeDressRsp() {
  SharedDtor();
}

void FacadeDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeDressRsp_descriptor_;
}

const FacadeDressRsp& FacadeDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeDressRsp* FacadeDressRsp::default_instance_ = NULL;

FacadeDressRsp* FacadeDressRsp::New() const {
  return new FacadeDressRsp;
}

void FacadeDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    ret_code_ = 0u;
    use_facade_ = false;
    fight_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_code;
        break;
      }

      // optional uint32 ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_facade;
        break;
      }

      // optional bool use_facade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_facade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_facade_)));
          set_has_use_facade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight_value;
        break;
      }

      // optional uint64 fight_value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_value_)));
          set_has_fight_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret_code(), output);
  }

  // optional bool use_facade = 3;
  if (has_use_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_facade(), output);
  }

  // optional uint64 fight_value = 8;
  if (has_fight_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fight_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret_code(), target);
  }

  // optional bool use_facade = 3;
  if (has_use_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_facade(), target);
  }

  // optional uint64 fight_value = 8;
  if (has_fight_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fight_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint32 ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

    // optional bool use_facade = 3;
    if (has_use_facade()) {
      total_size += 1 + 1;
    }

    // optional uint64 fight_value = 8;
    if (has_fight_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeDressRsp::MergeFrom(const FacadeDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_use_facade()) {
      set_use_facade(from.use_facade());
    }
    if (from.has_fight_value()) {
      set_fight_value(from.fight_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeDressRsp::CopyFrom(const FacadeDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeDressRsp::IsInitialized() const {

  return true;
}

void FacadeDressRsp::Swap(FacadeDressRsp* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(use_facade_, other->use_facade_);
    std::swap(fight_value_, other->fight_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeDressRsp_descriptor_;
  metadata.reflection = FacadeDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeUnDressReq::kFacadeTypeFieldNumber;
#endif  // !_MSC_VER

FacadeUnDressReq::FacadeUnDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeUnDressReq::InitAsDefaultInstance() {
}

FacadeUnDressReq::FacadeUnDressReq(const FacadeUnDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeUnDressReq::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeUnDressReq::~FacadeUnDressReq() {
  SharedDtor();
}

void FacadeUnDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeUnDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeUnDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeUnDressReq_descriptor_;
}

const FacadeUnDressReq& FacadeUnDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeUnDressReq* FacadeUnDressReq::default_instance_ = NULL;

FacadeUnDressReq* FacadeUnDressReq::New() const {
  return new FacadeUnDressReq;
}

void FacadeUnDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeUnDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeUnDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeUnDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeUnDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeUnDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeUnDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeUnDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeUnDressReq::MergeFrom(const FacadeUnDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeUnDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeUnDressReq::CopyFrom(const FacadeUnDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeUnDressReq::IsInitialized() const {

  return true;
}

void FacadeUnDressReq::Swap(FacadeUnDressReq* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeUnDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeUnDressReq_descriptor_;
  metadata.reflection = FacadeUnDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeUnDressRsp::kFacadeTypeFieldNumber;
const int FacadeUnDressRsp::kRetCodeFieldNumber;
const int FacadeUnDressRsp::kUseFacadeFieldNumber;
const int FacadeUnDressRsp::kFightValueFieldNumber;
#endif  // !_MSC_VER

FacadeUnDressRsp::FacadeUnDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeUnDressRsp::InitAsDefaultInstance() {
}

FacadeUnDressRsp::FacadeUnDressRsp(const FacadeUnDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeUnDressRsp::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  ret_code_ = 0u;
  use_facade_ = false;
  fight_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeUnDressRsp::~FacadeUnDressRsp() {
  SharedDtor();
}

void FacadeUnDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeUnDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeUnDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeUnDressRsp_descriptor_;
}

const FacadeUnDressRsp& FacadeUnDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeUnDressRsp* FacadeUnDressRsp::default_instance_ = NULL;

FacadeUnDressRsp* FacadeUnDressRsp::New() const {
  return new FacadeUnDressRsp;
}

void FacadeUnDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    ret_code_ = 0u;
    use_facade_ = false;
    fight_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeUnDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_code;
        break;
      }

      // optional uint32 ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_facade;
        break;
      }

      // optional bool use_facade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_facade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_facade_)));
          set_has_use_facade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight_value;
        break;
      }

      // optional uint64 fight_value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_value_)));
          set_has_fight_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeUnDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret_code(), output);
  }

  // optional bool use_facade = 3;
  if (has_use_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_facade(), output);
  }

  // optional uint64 fight_value = 8;
  if (has_fight_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fight_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeUnDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret_code(), target);
  }

  // optional bool use_facade = 3;
  if (has_use_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_facade(), target);
  }

  // optional uint64 fight_value = 8;
  if (has_fight_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fight_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeUnDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint32 ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

    // optional bool use_facade = 3;
    if (has_use_facade()) {
      total_size += 1 + 1;
    }

    // optional uint64 fight_value = 8;
    if (has_fight_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeUnDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeUnDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeUnDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeUnDressRsp::MergeFrom(const FacadeUnDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_use_facade()) {
      set_use_facade(from.use_facade());
    }
    if (from.has_fight_value()) {
      set_fight_value(from.fight_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeUnDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeUnDressRsp::CopyFrom(const FacadeUnDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeUnDressRsp::IsInitialized() const {

  return true;
}

void FacadeUnDressRsp::Swap(FacadeUnDressRsp* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(use_facade_, other->use_facade_);
    std::swap(fight_value_, other->fight_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeUnDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeUnDressRsp_descriptor_;
  metadata.reflection = FacadeUnDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFragmentUseReq::kFacadeTypeFieldNumber;
const int FacadeFragmentUseReq::kFragmentIdFieldNumber;
#endif  // !_MSC_VER

FacadeFragmentUseReq::FacadeFragmentUseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFragmentUseReq::InitAsDefaultInstance() {
}

FacadeFragmentUseReq::FacadeFragmentUseReq(const FacadeFragmentUseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFragmentUseReq::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  fragment_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFragmentUseReq::~FacadeFragmentUseReq() {
  SharedDtor();
}

void FacadeFragmentUseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFragmentUseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFragmentUseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFragmentUseReq_descriptor_;
}

const FacadeFragmentUseReq& FacadeFragmentUseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeFragmentUseReq* FacadeFragmentUseReq::default_instance_ = NULL;

FacadeFragmentUseReq* FacadeFragmentUseReq::New() const {
  return new FacadeFragmentUseReq;
}

void FacadeFragmentUseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    fragment_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFragmentUseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fragment_id;
        break;
      }

      // optional uint64 fragment_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fragment_id_)));
          set_has_fragment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFragmentUseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint64 fragment_id = 2;
  if (has_fragment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fragment_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFragmentUseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint64 fragment_id = 2;
  if (has_fragment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fragment_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFragmentUseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint64 fragment_id = 2;
    if (has_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fragment_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFragmentUseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFragmentUseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFragmentUseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFragmentUseReq::MergeFrom(const FacadeFragmentUseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_fragment_id()) {
      set_fragment_id(from.fragment_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFragmentUseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFragmentUseReq::CopyFrom(const FacadeFragmentUseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFragmentUseReq::IsInitialized() const {

  return true;
}

void FacadeFragmentUseReq::Swap(FacadeFragmentUseReq* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(fragment_id_, other->fragment_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFragmentUseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFragmentUseReq_descriptor_;
  metadata.reflection = FacadeFragmentUseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFragmentUseRsp::kFacadeTypeFieldNumber;
const int FacadeFragmentUseRsp::kRetCodeFieldNumber;
const int FacadeFragmentUseRsp::kFragmentDataFieldNumber;
const int FacadeFragmentUseRsp::kFightValueFieldNumber;
#endif  // !_MSC_VER

FacadeFragmentUseRsp::FacadeFragmentUseRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFragmentUseRsp::InitAsDefaultInstance() {
}

FacadeFragmentUseRsp::FacadeFragmentUseRsp(const FacadeFragmentUseRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFragmentUseRsp::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  ret_code_ = 0u;
  fight_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFragmentUseRsp::~FacadeFragmentUseRsp() {
  SharedDtor();
}

void FacadeFragmentUseRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFragmentUseRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFragmentUseRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFragmentUseRsp_descriptor_;
}

const FacadeFragmentUseRsp& FacadeFragmentUseRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeFragmentUseRsp* FacadeFragmentUseRsp::default_instance_ = NULL;

FacadeFragmentUseRsp* FacadeFragmentUseRsp::New() const {
  return new FacadeFragmentUseRsp;
}

void FacadeFragmentUseRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    ret_code_ = 0u;
    fight_value_ = GOOGLE_ULONGLONG(0);
  }
  fragment_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFragmentUseRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_code;
        break;
      }

      // optional uint32 ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fragment_data;
        break;
      }

      // repeated .proto_ff.FacadeFragmentData fragment_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragment_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fragment_data;
        if (input->ExpectTag(32)) goto parse_fight_value;
        break;
      }

      // optional uint64 fight_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_value_)));
          set_has_fight_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFragmentUseRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret_code(), output);
  }

  // repeated .proto_ff.FacadeFragmentData fragment_data = 3;
  for (int i = 0; i < this->fragment_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fragment_data(i), output);
  }

  // optional uint64 fight_value = 4;
  if (has_fight_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fight_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFragmentUseRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret_code(), target);
  }

  // repeated .proto_ff.FacadeFragmentData fragment_data = 3;
  for (int i = 0; i < this->fragment_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fragment_data(i), target);
  }

  // optional uint64 fight_value = 4;
  if (has_fight_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fight_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFragmentUseRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint32 ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

    // optional uint64 fight_value = 4;
    if (has_fight_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight_value());
    }

  }
  // repeated .proto_ff.FacadeFragmentData fragment_data = 3;
  total_size += 1 * this->fragment_data_size();
  for (int i = 0; i < this->fragment_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragment_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFragmentUseRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFragmentUseRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFragmentUseRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFragmentUseRsp::MergeFrom(const FacadeFragmentUseRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fragment_data_.MergeFrom(from.fragment_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_fight_value()) {
      set_fight_value(from.fight_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFragmentUseRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFragmentUseRsp::CopyFrom(const FacadeFragmentUseRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFragmentUseRsp::IsInitialized() const {

  return true;
}

void FacadeFragmentUseRsp::Swap(FacadeFragmentUseRsp* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(ret_code_, other->ret_code_);
    fragment_data_.Swap(&other->fragment_data_);
    std::swap(fight_value_, other->fight_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFragmentUseRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFragmentUseRsp_descriptor_;
  metadata.reflection = FacadeFragmentUseRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFantasyInfoReq::kFacadeTypeFieldNumber;
#endif  // !_MSC_VER

FacadeFantasyInfoReq::FacadeFantasyInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFantasyInfoReq::InitAsDefaultInstance() {
}

FacadeFantasyInfoReq::FacadeFantasyInfoReq(const FacadeFantasyInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFantasyInfoReq::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFantasyInfoReq::~FacadeFantasyInfoReq() {
  SharedDtor();
}

void FacadeFantasyInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFantasyInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFantasyInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFantasyInfoReq_descriptor_;
}

const FacadeFantasyInfoReq& FacadeFantasyInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeFantasyInfoReq* FacadeFantasyInfoReq::default_instance_ = NULL;

FacadeFantasyInfoReq* FacadeFantasyInfoReq::New() const {
  return new FacadeFantasyInfoReq;
}

void FacadeFantasyInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFantasyInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFantasyInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFantasyInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFantasyInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFantasyInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFantasyInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFantasyInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFantasyInfoReq::MergeFrom(const FacadeFantasyInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFantasyInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFantasyInfoReq::CopyFrom(const FacadeFantasyInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFantasyInfoReq::IsInitialized() const {

  return true;
}

void FacadeFantasyInfoReq::Swap(FacadeFantasyInfoReq* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFantasyInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFantasyInfoReq_descriptor_;
  metadata.reflection = FacadeFantasyInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFantasyInfoRsp::kFacadeTypeFieldNumber;
const int FacadeFantasyInfoRsp::kFantasyDataFieldNumber;
const int FacadeFantasyInfoRsp::kEquipFantasyIdFieldNumber;
#endif  // !_MSC_VER

FacadeFantasyInfoRsp::FacadeFantasyInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFantasyInfoRsp::InitAsDefaultInstance() {
}

FacadeFantasyInfoRsp::FacadeFantasyInfoRsp(const FacadeFantasyInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFantasyInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFantasyInfoRsp::~FacadeFantasyInfoRsp() {
  SharedDtor();
}

void FacadeFantasyInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFantasyInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFantasyInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFantasyInfoRsp_descriptor_;
}

const FacadeFantasyInfoRsp& FacadeFantasyInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeFantasyInfoRsp* FacadeFantasyInfoRsp::default_instance_ = NULL;

FacadeFantasyInfoRsp* FacadeFantasyInfoRsp::New() const {
  return new FacadeFantasyInfoRsp;
}

void FacadeFantasyInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  }
  fantasy_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFantasyInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fantasy_data;
        break;
      }

      // repeated .proto_ff.FacadeFantasyData fantasy_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasy_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fantasy_data;
        if (input->ExpectTag(48)) goto parse_equip_fantasy_id;
        break;
      }

      // optional uint64 equip_fantasy_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_fantasy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_fantasy_id_)));
          set_has_equip_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFantasyInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // repeated .proto_ff.FacadeFantasyData fantasy_data = 5;
  for (int i = 0; i < this->fantasy_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fantasy_data(i), output);
  }

  // optional uint64 equip_fantasy_id = 6;
  if (has_equip_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->equip_fantasy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFantasyInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // repeated .proto_ff.FacadeFantasyData fantasy_data = 5;
  for (int i = 0; i < this->fantasy_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fantasy_data(i), target);
  }

  // optional uint64 equip_fantasy_id = 6;
  if (has_equip_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->equip_fantasy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFantasyInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint64 equip_fantasy_id = 6;
    if (has_equip_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_fantasy_id());
    }

  }
  // repeated .proto_ff.FacadeFantasyData fantasy_data = 5;
  total_size += 1 * this->fantasy_data_size();
  for (int i = 0; i < this->fantasy_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasy_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFantasyInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFantasyInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFantasyInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFantasyInfoRsp::MergeFrom(const FacadeFantasyInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fantasy_data_.MergeFrom(from.fantasy_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_equip_fantasy_id()) {
      set_equip_fantasy_id(from.equip_fantasy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFantasyInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFantasyInfoRsp::CopyFrom(const FacadeFantasyInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFantasyInfoRsp::IsInitialized() const {

  return true;
}

void FacadeFantasyInfoRsp::Swap(FacadeFantasyInfoRsp* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    fantasy_data_.Swap(&other->fantasy_data_);
    std::swap(equip_fantasy_id_, other->equip_fantasy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFantasyInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFantasyInfoRsp_descriptor_;
  metadata.reflection = FacadeFantasyInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFantasyActiveReq::kFacadeTypeFieldNumber;
const int FacadeFantasyActiveReq::kFantasyIdFieldNumber;
#endif  // !_MSC_VER

FacadeFantasyActiveReq::FacadeFantasyActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFantasyActiveReq::InitAsDefaultInstance() {
}

FacadeFantasyActiveReq::FacadeFantasyActiveReq(const FacadeFantasyActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFantasyActiveReq::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  fantasy_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFantasyActiveReq::~FacadeFantasyActiveReq() {
  SharedDtor();
}

void FacadeFantasyActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFantasyActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFantasyActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFantasyActiveReq_descriptor_;
}

const FacadeFantasyActiveReq& FacadeFantasyActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeFantasyActiveReq* FacadeFantasyActiveReq::default_instance_ = NULL;

FacadeFantasyActiveReq* FacadeFantasyActiveReq::New() const {
  return new FacadeFantasyActiveReq;
}

void FacadeFantasyActiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    fantasy_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFantasyActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fantasy_id;
        break;
      }

      // optional uint64 fantasy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_id_)));
          set_has_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFantasyActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint64 fantasy_id = 2;
  if (has_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fantasy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFantasyActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint64 fantasy_id = 2;
  if (has_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fantasy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFantasyActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint64 fantasy_id = 2;
    if (has_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFantasyActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFantasyActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFantasyActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFantasyActiveReq::MergeFrom(const FacadeFantasyActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_fantasy_id()) {
      set_fantasy_id(from.fantasy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFantasyActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFantasyActiveReq::CopyFrom(const FacadeFantasyActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFantasyActiveReq::IsInitialized() const {

  return true;
}

void FacadeFantasyActiveReq::Swap(FacadeFantasyActiveReq* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(fantasy_id_, other->fantasy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFantasyActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFantasyActiveReq_descriptor_;
  metadata.reflection = FacadeFantasyActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFastasyActiveRsp::kFacadeTypeFieldNumber;
const int FacadeFastasyActiveRsp::kFantasyDataFieldNumber;
const int FacadeFastasyActiveRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

FacadeFastasyActiveRsp::FacadeFastasyActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFastasyActiveRsp::InitAsDefaultInstance() {
  fantasy_data_ = const_cast< ::proto_ff::FacadeFantasyData*>(&::proto_ff::FacadeFantasyData::default_instance());
}

FacadeFastasyActiveRsp::FacadeFastasyActiveRsp(const FacadeFastasyActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFastasyActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  fantasy_data_ = NULL;
  ret_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFastasyActiveRsp::~FacadeFastasyActiveRsp() {
  SharedDtor();
}

void FacadeFastasyActiveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete fantasy_data_;
  }
}

void FacadeFastasyActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFastasyActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFastasyActiveRsp_descriptor_;
}

const FacadeFastasyActiveRsp& FacadeFastasyActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeFastasyActiveRsp* FacadeFastasyActiveRsp::default_instance_ = NULL;

FacadeFastasyActiveRsp* FacadeFastasyActiveRsp::New() const {
  return new FacadeFastasyActiveRsp;
}

void FacadeFastasyActiveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    if (has_fantasy_data()) {
      if (fantasy_data_ != NULL) fantasy_data_->::proto_ff::FacadeFantasyData::Clear();
    }
    ret_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFastasyActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fantasy_data;
        break;
      }

      // optional .proto_ff.FacadeFantasyData fantasy_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fantasy_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret_code;
        break;
      }

      // optional uint32 ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFastasyActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional .proto_ff.FacadeFantasyData fantasy_data = 2;
  if (has_fantasy_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fantasy_data(), output);
  }

  // optional uint32 ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFastasyActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional .proto_ff.FacadeFantasyData fantasy_data = 2;
  if (has_fantasy_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fantasy_data(), target);
  }

  // optional uint32 ret_code = 3;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFastasyActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional .proto_ff.FacadeFantasyData fantasy_data = 2;
    if (has_fantasy_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fantasy_data());
    }

    // optional uint32 ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFastasyActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFastasyActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFastasyActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFastasyActiveRsp::MergeFrom(const FacadeFastasyActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_fantasy_data()) {
      mutable_fantasy_data()->::proto_ff::FacadeFantasyData::MergeFrom(from.fantasy_data());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFastasyActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFastasyActiveRsp::CopyFrom(const FacadeFastasyActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFastasyActiveRsp::IsInitialized() const {

  return true;
}

void FacadeFastasyActiveRsp::Swap(FacadeFastasyActiveRsp* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(fantasy_data_, other->fantasy_data_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFastasyActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFastasyActiveRsp_descriptor_;
  metadata.reflection = FacadeFastasyActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFantasyLevelupReq::kFacadeTypeFieldNumber;
const int FacadeFantasyLevelupReq::kFantasyIdFieldNumber;
#endif  // !_MSC_VER

FacadeFantasyLevelupReq::FacadeFantasyLevelupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFantasyLevelupReq::InitAsDefaultInstance() {
}

FacadeFantasyLevelupReq::FacadeFantasyLevelupReq(const FacadeFantasyLevelupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFantasyLevelupReq::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  fantasy_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFantasyLevelupReq::~FacadeFantasyLevelupReq() {
  SharedDtor();
}

void FacadeFantasyLevelupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFantasyLevelupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFantasyLevelupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFantasyLevelupReq_descriptor_;
}

const FacadeFantasyLevelupReq& FacadeFantasyLevelupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeFantasyLevelupReq* FacadeFantasyLevelupReq::default_instance_ = NULL;

FacadeFantasyLevelupReq* FacadeFantasyLevelupReq::New() const {
  return new FacadeFantasyLevelupReq;
}

void FacadeFantasyLevelupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    fantasy_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFantasyLevelupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fantasy_id;
        break;
      }

      // optional uint64 fantasy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_id_)));
          set_has_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFantasyLevelupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint64 fantasy_id = 2;
  if (has_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fantasy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFantasyLevelupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint64 fantasy_id = 2;
  if (has_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fantasy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFantasyLevelupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint64 fantasy_id = 2;
    if (has_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFantasyLevelupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFantasyLevelupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFantasyLevelupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFantasyLevelupReq::MergeFrom(const FacadeFantasyLevelupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_fantasy_id()) {
      set_fantasy_id(from.fantasy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFantasyLevelupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFantasyLevelupReq::CopyFrom(const FacadeFantasyLevelupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFantasyLevelupReq::IsInitialized() const {

  return true;
}

void FacadeFantasyLevelupReq::Swap(FacadeFantasyLevelupReq* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(fantasy_id_, other->fantasy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFantasyLevelupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFantasyLevelupReq_descriptor_;
  metadata.reflection = FacadeFantasyLevelupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFastasyLevelupRsp::kFacadeTypeFieldNumber;
const int FacadeFastasyLevelupRsp::kFantasyDataFieldNumber;
const int FacadeFastasyLevelupRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

FacadeFastasyLevelupRsp::FacadeFastasyLevelupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFastasyLevelupRsp::InitAsDefaultInstance() {
  fantasy_data_ = const_cast< ::proto_ff::FacadeFantasyData*>(&::proto_ff::FacadeFantasyData::default_instance());
}

FacadeFastasyLevelupRsp::FacadeFastasyLevelupRsp(const FacadeFastasyLevelupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFastasyLevelupRsp::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  fantasy_data_ = NULL;
  ret_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFastasyLevelupRsp::~FacadeFastasyLevelupRsp() {
  SharedDtor();
}

void FacadeFastasyLevelupRsp::SharedDtor() {
  if (this != default_instance_) {
    delete fantasy_data_;
  }
}

void FacadeFastasyLevelupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFastasyLevelupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFastasyLevelupRsp_descriptor_;
}

const FacadeFastasyLevelupRsp& FacadeFastasyLevelupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeFastasyLevelupRsp* FacadeFastasyLevelupRsp::default_instance_ = NULL;

FacadeFastasyLevelupRsp* FacadeFastasyLevelupRsp::New() const {
  return new FacadeFastasyLevelupRsp;
}

void FacadeFastasyLevelupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    if (has_fantasy_data()) {
      if (fantasy_data_ != NULL) fantasy_data_->::proto_ff::FacadeFantasyData::Clear();
    }
    ret_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFastasyLevelupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fantasy_data;
        break;
      }

      // optional .proto_ff.FacadeFantasyData fantasy_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fantasy_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret_code;
        break;
      }

      // optional uint32 ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFastasyLevelupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional .proto_ff.FacadeFantasyData fantasy_data = 2;
  if (has_fantasy_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fantasy_data(), output);
  }

  // optional uint32 ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFastasyLevelupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional .proto_ff.FacadeFantasyData fantasy_data = 2;
  if (has_fantasy_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fantasy_data(), target);
  }

  // optional uint32 ret_code = 3;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFastasyLevelupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional .proto_ff.FacadeFantasyData fantasy_data = 2;
    if (has_fantasy_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fantasy_data());
    }

    // optional uint32 ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFastasyLevelupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFastasyLevelupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFastasyLevelupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFastasyLevelupRsp::MergeFrom(const FacadeFastasyLevelupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_fantasy_data()) {
      mutable_fantasy_data()->::proto_ff::FacadeFantasyData::MergeFrom(from.fantasy_data());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFastasyLevelupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFastasyLevelupRsp::CopyFrom(const FacadeFastasyLevelupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFastasyLevelupRsp::IsInitialized() const {

  return true;
}

void FacadeFastasyLevelupRsp::Swap(FacadeFastasyLevelupRsp* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(fantasy_data_, other->fantasy_data_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFastasyLevelupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFastasyLevelupRsp_descriptor_;
  metadata.reflection = FacadeFastasyLevelupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFastasyDressReq::kFacadeTypeFieldNumber;
const int FacadeFastasyDressReq::kEquipFantasyIdFieldNumber;
#endif  // !_MSC_VER

FacadeFastasyDressReq::FacadeFastasyDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFastasyDressReq::InitAsDefaultInstance() {
}

FacadeFastasyDressReq::FacadeFastasyDressReq(const FacadeFastasyDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFastasyDressReq::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFastasyDressReq::~FacadeFastasyDressReq() {
  SharedDtor();
}

void FacadeFastasyDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFastasyDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFastasyDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFastasyDressReq_descriptor_;
}

const FacadeFastasyDressReq& FacadeFastasyDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeFastasyDressReq* FacadeFastasyDressReq::default_instance_ = NULL;

FacadeFastasyDressReq* FacadeFastasyDressReq::New() const {
  return new FacadeFastasyDressReq;
}

void FacadeFastasyDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFastasyDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_fantasy_id;
        break;
      }

      // optional uint64 equip_fantasy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_fantasy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_fantasy_id_)));
          set_has_equip_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFastasyDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint64 equip_fantasy_id = 2;
  if (has_equip_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->equip_fantasy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFastasyDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint64 equip_fantasy_id = 2;
  if (has_equip_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->equip_fantasy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFastasyDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint64 equip_fantasy_id = 2;
    if (has_equip_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_fantasy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFastasyDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFastasyDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFastasyDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFastasyDressReq::MergeFrom(const FacadeFastasyDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_equip_fantasy_id()) {
      set_equip_fantasy_id(from.equip_fantasy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFastasyDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFastasyDressReq::CopyFrom(const FacadeFastasyDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFastasyDressReq::IsInitialized() const {

  return true;
}

void FacadeFastasyDressReq::Swap(FacadeFastasyDressReq* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(equip_fantasy_id_, other->equip_fantasy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFastasyDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFastasyDressReq_descriptor_;
  metadata.reflection = FacadeFastasyDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFastasyDressRsp::kFacadeTypeFieldNumber;
const int FacadeFastasyDressRsp::kRetCodeFieldNumber;
const int FacadeFastasyDressRsp::kEquipFantasyIdFieldNumber;
#endif  // !_MSC_VER

FacadeFastasyDressRsp::FacadeFastasyDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFastasyDressRsp::InitAsDefaultInstance() {
}

FacadeFastasyDressRsp::FacadeFastasyDressRsp(const FacadeFastasyDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFastasyDressRsp::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  ret_code_ = 0u;
  equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFastasyDressRsp::~FacadeFastasyDressRsp() {
  SharedDtor();
}

void FacadeFastasyDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFastasyDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFastasyDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFastasyDressRsp_descriptor_;
}

const FacadeFastasyDressRsp& FacadeFastasyDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeFastasyDressRsp* FacadeFastasyDressRsp::default_instance_ = NULL;

FacadeFastasyDressRsp* FacadeFastasyDressRsp::New() const {
  return new FacadeFastasyDressRsp;
}

void FacadeFastasyDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    ret_code_ = 0u;
    equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFastasyDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_code;
        break;
      }

      // optional uint32 ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_fantasy_id;
        break;
      }

      // optional uint64 equip_fantasy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_fantasy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_fantasy_id_)));
          set_has_equip_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFastasyDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret_code(), output);
  }

  // optional uint64 equip_fantasy_id = 3;
  if (has_equip_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->equip_fantasy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFastasyDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret_code(), target);
  }

  // optional uint64 equip_fantasy_id = 3;
  if (has_equip_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->equip_fantasy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFastasyDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint32 ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

    // optional uint64 equip_fantasy_id = 3;
    if (has_equip_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_fantasy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFastasyDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFastasyDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFastasyDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFastasyDressRsp::MergeFrom(const FacadeFastasyDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_equip_fantasy_id()) {
      set_equip_fantasy_id(from.equip_fantasy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFastasyDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFastasyDressRsp::CopyFrom(const FacadeFastasyDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFastasyDressRsp::IsInitialized() const {

  return true;
}

void FacadeFastasyDressRsp::Swap(FacadeFastasyDressRsp* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(equip_fantasy_id_, other->equip_fantasy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFastasyDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFastasyDressRsp_descriptor_;
  metadata.reflection = FacadeFastasyDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFastasyUnDressReq::kFacadeTypeFieldNumber;
#endif  // !_MSC_VER

FacadeFastasyUnDressReq::FacadeFastasyUnDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFastasyUnDressReq::InitAsDefaultInstance() {
}

FacadeFastasyUnDressReq::FacadeFastasyUnDressReq(const FacadeFastasyUnDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFastasyUnDressReq::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFastasyUnDressReq::~FacadeFastasyUnDressReq() {
  SharedDtor();
}

void FacadeFastasyUnDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFastasyUnDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFastasyUnDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFastasyUnDressReq_descriptor_;
}

const FacadeFastasyUnDressReq& FacadeFastasyUnDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeFastasyUnDressReq* FacadeFastasyUnDressReq::default_instance_ = NULL;

FacadeFastasyUnDressReq* FacadeFastasyUnDressReq::New() const {
  return new FacadeFastasyUnDressReq;
}

void FacadeFastasyUnDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFastasyUnDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFastasyUnDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFastasyUnDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFastasyUnDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFastasyUnDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFastasyUnDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFastasyUnDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFastasyUnDressReq::MergeFrom(const FacadeFastasyUnDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFastasyUnDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFastasyUnDressReq::CopyFrom(const FacadeFastasyUnDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFastasyUnDressReq::IsInitialized() const {

  return true;
}

void FacadeFastasyUnDressReq::Swap(FacadeFastasyUnDressReq* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFastasyUnDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFastasyUnDressReq_descriptor_;
  metadata.reflection = FacadeFastasyUnDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFastasyUnDressRsp::kFacadeTypeFieldNumber;
const int FacadeFastasyUnDressRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

FacadeFastasyUnDressRsp::FacadeFastasyUnDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFastasyUnDressRsp::InitAsDefaultInstance() {
}

FacadeFastasyUnDressRsp::FacadeFastasyUnDressRsp(const FacadeFastasyUnDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFastasyUnDressRsp::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  ret_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFastasyUnDressRsp::~FacadeFastasyUnDressRsp() {
  SharedDtor();
}

void FacadeFastasyUnDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFastasyUnDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFastasyUnDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFastasyUnDressRsp_descriptor_;
}

const FacadeFastasyUnDressRsp& FacadeFastasyUnDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

FacadeFastasyUnDressRsp* FacadeFastasyUnDressRsp::default_instance_ = NULL;

FacadeFastasyUnDressRsp* FacadeFastasyUnDressRsp::New() const {
  return new FacadeFastasyUnDressRsp;
}

void FacadeFastasyUnDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    ret_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFastasyUnDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_code;
        break;
      }

      // optional uint32 ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFastasyUnDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFastasyUnDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint32 ret_code = 2;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFastasyUnDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint32 ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFastasyUnDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFastasyUnDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFastasyUnDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFastasyUnDressRsp::MergeFrom(const FacadeFastasyUnDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFastasyUnDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFastasyUnDressRsp::CopyFrom(const FacadeFastasyUnDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFastasyUnDressRsp::IsInitialized() const {

  return true;
}

void FacadeFastasyUnDressRsp::Swap(FacadeFastasyUnDressRsp* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFastasyUnDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFastasyUnDressRsp_descriptor_;
  metadata.reflection = FacadeFastasyUnDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSeatReq::kOptFieldNumber;
#endif  // !_MSC_VER

PlayerSeatReq::PlayerSeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSeatReq::InitAsDefaultInstance() {
}

PlayerSeatReq::PlayerSeatReq(const PlayerSeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSeatReq::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSeatReq::~PlayerSeatReq() {
  SharedDtor();
}

void PlayerSeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSeatReq_descriptor_;
}

const PlayerSeatReq& PlayerSeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

PlayerSeatReq* PlayerSeatReq::default_instance_ = NULL;

PlayerSeatReq* PlayerSeatReq::New() const {
  return new PlayerSeatReq;
}

void PlayerSeatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSeatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSeatReq::MergeFrom(const PlayerSeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSeatReq::CopyFrom(const PlayerSeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSeatReq::IsInitialized() const {

  return true;
}

void PlayerSeatReq::Swap(PlayerSeatReq* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSeatReq_descriptor_;
  metadata.reflection = PlayerSeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSeatRsp::kOptFieldNumber;
const int PlayerSeatRsp::kRetFieldNumber;
const int PlayerSeatRsp::kExpFieldNumber;
const int PlayerSeatRsp::kOnlineHangupTimeFieldNumber;
const int PlayerSeatRsp::kOnlineAllExpFieldNumber;
const int PlayerSeatRsp::kItemsFieldNumber;
#endif  // !_MSC_VER

PlayerSeatRsp::PlayerSeatRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSeatRsp::InitAsDefaultInstance() {
}

PlayerSeatRsp::PlayerSeatRsp(const PlayerSeatRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSeatRsp::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ret_ = 0;
  exp_ = GOOGLE_ULONGLONG(0);
  online_hangup_time_ = 0u;
  online_all_exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSeatRsp::~PlayerSeatRsp() {
  SharedDtor();
}

void PlayerSeatRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSeatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSeatRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSeatRsp_descriptor_;
}

const PlayerSeatRsp& PlayerSeatRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

PlayerSeatRsp* PlayerSeatRsp::default_instance_ = NULL;

PlayerSeatRsp* PlayerSeatRsp::New() const {
  return new PlayerSeatRsp;
}

void PlayerSeatRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
    ret_ = 0;
    exp_ = GOOGLE_ULONGLONG(0);
    online_hangup_time_ = 0u;
    online_all_exp_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSeatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_online_hangup_time;
        break;
      }

      // optional uint32 online_hangup_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_hangup_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_hangup_time_)));
          set_has_online_hangup_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_online_all_exp;
        break;
      }

      // optional uint64 online_all_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_all_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &online_all_exp_)));
          set_has_online_all_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComPair64 items = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSeatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->exp(), output);
  }

  // optional uint32 online_hangup_time = 4;
  if (has_online_hangup_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->online_hangup_time(), output);
  }

  // optional uint64 online_all_exp = 5;
  if (has_online_all_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->online_all_exp(), output);
  }

  // repeated .proto_ff.ComPair64 items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSeatRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->exp(), target);
  }

  // optional uint32 online_hangup_time = 4;
  if (has_online_hangup_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->online_hangup_time(), target);
  }

  // optional uint64 online_all_exp = 5;
  if (has_online_all_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->online_all_exp(), target);
  }

  // repeated .proto_ff.ComPair64 items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSeatRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint32 online_hangup_time = 4;
    if (has_online_hangup_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_hangup_time());
    }

    // optional uint64 online_all_exp = 5;
    if (has_online_all_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->online_all_exp());
    }

  }
  // repeated .proto_ff.ComPair64 items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSeatRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSeatRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSeatRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSeatRsp::MergeFrom(const PlayerSeatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_online_hangup_time()) {
      set_online_hangup_time(from.online_hangup_time());
    }
    if (from.has_online_all_exp()) {
      set_online_all_exp(from.online_all_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSeatRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSeatRsp::CopyFrom(const PlayerSeatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSeatRsp::IsInitialized() const {

  return true;
}

void PlayerSeatRsp::Swap(PlayerSeatRsp* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(ret_, other->ret_);
    std::swap(exp_, other->exp_);
    std::swap(online_hangup_time_, other->online_hangup_time_);
    std::swap(online_all_exp_, other->online_all_exp_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSeatRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSeatRsp_descriptor_;
  metadata.reflection = PlayerSeatRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSeatExpRsp::kExpFieldNumber;
const int PlayerSeatExpRsp::kOnlineHangupTimeFieldNumber;
const int PlayerSeatExpRsp::kOnlineAllExpFieldNumber;
const int PlayerSeatExpRsp::kItemsFieldNumber;
#endif  // !_MSC_VER

PlayerSeatExpRsp::PlayerSeatExpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSeatExpRsp::InitAsDefaultInstance() {
}

PlayerSeatExpRsp::PlayerSeatExpRsp(const PlayerSeatExpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSeatExpRsp::SharedCtor() {
  _cached_size_ = 0;
  exp_ = GOOGLE_ULONGLONG(0);
  online_hangup_time_ = 0u;
  online_all_exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSeatExpRsp::~PlayerSeatExpRsp() {
  SharedDtor();
}

void PlayerSeatExpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSeatExpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSeatExpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSeatExpRsp_descriptor_;
}

const PlayerSeatExpRsp& PlayerSeatExpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

PlayerSeatExpRsp* PlayerSeatExpRsp::default_instance_ = NULL;

PlayerSeatExpRsp* PlayerSeatExpRsp::New() const {
  return new PlayerSeatExpRsp;
}

void PlayerSeatExpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = GOOGLE_ULONGLONG(0);
    online_hangup_time_ = 0u;
    online_all_exp_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSeatExpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online_hangup_time;
        break;
      }

      // optional uint32 online_hangup_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_hangup_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_hangup_time_)));
          set_has_online_hangup_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online_all_exp;
        break;
      }

      // optional uint64 online_all_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_all_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &online_all_exp_)));
          set_has_online_all_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComPair64 items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSeatExpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->exp(), output);
  }

  // optional uint32 online_hangup_time = 2;
  if (has_online_hangup_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->online_hangup_time(), output);
  }

  // optional uint64 online_all_exp = 3;
  if (has_online_all_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->online_all_exp(), output);
  }

  // repeated .proto_ff.ComPair64 items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSeatExpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->exp(), target);
  }

  // optional uint32 online_hangup_time = 2;
  if (has_online_hangup_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->online_hangup_time(), target);
  }

  // optional uint64 online_all_exp = 3;
  if (has_online_all_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->online_all_exp(), target);
  }

  // repeated .proto_ff.ComPair64 items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSeatExpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint32 online_hangup_time = 2;
    if (has_online_hangup_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_hangup_time());
    }

    // optional uint64 online_all_exp = 3;
    if (has_online_all_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->online_all_exp());
    }

  }
  // repeated .proto_ff.ComPair64 items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSeatExpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSeatExpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSeatExpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSeatExpRsp::MergeFrom(const PlayerSeatExpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_online_hangup_time()) {
      set_online_hangup_time(from.online_hangup_time());
    }
    if (from.has_online_all_exp()) {
      set_online_all_exp(from.online_all_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSeatExpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSeatExpRsp::CopyFrom(const PlayerSeatExpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSeatExpRsp::IsInitialized() const {

  return true;
}

void PlayerSeatExpRsp::Swap(PlayerSeatExpRsp* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(online_hangup_time_, other->online_hangup_time_);
    std::swap(online_all_exp_, other->online_all_exp_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSeatExpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSeatExpRsp_descriptor_;
  metadata.reflection = PlayerSeatExpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerLoginHangUpDataReq::PlayerLoginHangUpDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLoginHangUpDataReq::InitAsDefaultInstance() {
}

PlayerLoginHangUpDataReq::PlayerLoginHangUpDataReq(const PlayerLoginHangUpDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLoginHangUpDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLoginHangUpDataReq::~PlayerLoginHangUpDataReq() {
  SharedDtor();
}

void PlayerLoginHangUpDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLoginHangUpDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLoginHangUpDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLoginHangUpDataReq_descriptor_;
}

const PlayerLoginHangUpDataReq& PlayerLoginHangUpDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

PlayerLoginHangUpDataReq* PlayerLoginHangUpDataReq::default_instance_ = NULL;

PlayerLoginHangUpDataReq* PlayerLoginHangUpDataReq::New() const {
  return new PlayerLoginHangUpDataReq;
}

void PlayerLoginHangUpDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLoginHangUpDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerLoginHangUpDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLoginHangUpDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLoginHangUpDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLoginHangUpDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLoginHangUpDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLoginHangUpDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLoginHangUpDataReq::MergeFrom(const PlayerLoginHangUpDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLoginHangUpDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginHangUpDataReq::CopyFrom(const PlayerLoginHangUpDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginHangUpDataReq::IsInitialized() const {

  return true;
}

void PlayerLoginHangUpDataReq::Swap(PlayerLoginHangUpDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLoginHangUpDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLoginHangUpDataReq_descriptor_;
  metadata.reflection = PlayerLoginHangUpDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLoginHangUpDataRsp::kHangupTimeFieldNumber;
const int PlayerLoginHangUpDataRsp::kHangupSurplusTimeFieldNumber;
const int PlayerLoginHangUpDataRsp::kAddExpFieldNumber;
const int PlayerLoginHangUpDataRsp::kBeforeLvFieldNumber;
const int PlayerLoginHangUpDataRsp::kAfterLvFieldNumber;
const int PlayerLoginHangUpDataRsp::kBeforeFightFieldNumber;
const int PlayerLoginHangUpDataRsp::kAfterFightFieldNumber;
const int PlayerLoginHangUpDataRsp::kItemsFieldNumber;
const int PlayerLoginHangUpDataRsp::kAddValueFieldNumber;
#endif  // !_MSC_VER

PlayerLoginHangUpDataRsp::PlayerLoginHangUpDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLoginHangUpDataRsp::InitAsDefaultInstance() {
}

PlayerLoginHangUpDataRsp::PlayerLoginHangUpDataRsp(const PlayerLoginHangUpDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLoginHangUpDataRsp::SharedCtor() {
  _cached_size_ = 0;
  hangup_time_ = 0;
  hangup_surplus_time_ = 0;
  add_exp_ = GOOGLE_ULONGLONG(0);
  before_lv_ = 0;
  after_lv_ = 0;
  before_fight_ = GOOGLE_ULONGLONG(0);
  after_fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLoginHangUpDataRsp::~PlayerLoginHangUpDataRsp() {
  SharedDtor();
}

void PlayerLoginHangUpDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLoginHangUpDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLoginHangUpDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLoginHangUpDataRsp_descriptor_;
}

const PlayerLoginHangUpDataRsp& PlayerLoginHangUpDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

PlayerLoginHangUpDataRsp* PlayerLoginHangUpDataRsp::default_instance_ = NULL;

PlayerLoginHangUpDataRsp* PlayerLoginHangUpDataRsp::New() const {
  return new PlayerLoginHangUpDataRsp;
}

void PlayerLoginHangUpDataRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hangup_time_ = 0;
    hangup_surplus_time_ = 0;
    add_exp_ = GOOGLE_ULONGLONG(0);
    before_lv_ = 0;
    after_lv_ = 0;
    before_fight_ = GOOGLE_ULONGLONG(0);
    after_fight_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  add_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLoginHangUpDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hangup_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hangup_time_)));
          set_has_hangup_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hangup_surplus_time;
        break;
      }

      // optional int32 hangup_surplus_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hangup_surplus_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hangup_surplus_time_)));
          set_has_hangup_surplus_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_exp;
        break;
      }

      // optional uint64 add_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_before_lv;
        break;
      }

      // optional int32 before_lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_before_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &before_lv_)));
          set_has_before_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_after_lv;
        break;
      }

      // optional int32 after_lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_after_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &after_lv_)));
          set_has_after_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_before_fight;
        break;
      }

      // optional uint64 before_fight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_before_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &before_fight_)));
          set_has_before_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_after_fight;
        break;
      }

      // optional uint64 after_fight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_after_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &after_fight_)));
          set_has_after_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComPair64 items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        if (input->ExpectTag(72)) goto parse_add_value;
        break;
      }

      // repeated int32 add_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_add_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_add_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_add_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLoginHangUpDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hangup_time = 1;
  if (has_hangup_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hangup_time(), output);
  }

  // optional int32 hangup_surplus_time = 2;
  if (has_hangup_surplus_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hangup_surplus_time(), output);
  }

  // optional uint64 add_exp = 3;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->add_exp(), output);
  }

  // optional int32 before_lv = 4;
  if (has_before_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->before_lv(), output);
  }

  // optional int32 after_lv = 5;
  if (has_after_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->after_lv(), output);
  }

  // optional uint64 before_fight = 6;
  if (has_before_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->before_fight(), output);
  }

  // optional uint64 after_fight = 7;
  if (has_after_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->after_fight(), output);
  }

  // repeated .proto_ff.ComPair64 items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->items(i), output);
  }

  // repeated int32 add_value = 9;
  for (int i = 0; i < this->add_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->add_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLoginHangUpDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hangup_time = 1;
  if (has_hangup_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hangup_time(), target);
  }

  // optional int32 hangup_surplus_time = 2;
  if (has_hangup_surplus_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hangup_surplus_time(), target);
  }

  // optional uint64 add_exp = 3;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->add_exp(), target);
  }

  // optional int32 before_lv = 4;
  if (has_before_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->before_lv(), target);
  }

  // optional int32 after_lv = 5;
  if (has_after_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->after_lv(), target);
  }

  // optional uint64 before_fight = 6;
  if (has_before_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->before_fight(), target);
  }

  // optional uint64 after_fight = 7;
  if (has_after_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->after_fight(), target);
  }

  // repeated .proto_ff.ComPair64 items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->items(i), target);
  }

  // repeated int32 add_value = 9;
  for (int i = 0; i < this->add_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->add_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLoginHangUpDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hangup_time = 1;
    if (has_hangup_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hangup_time());
    }

    // optional int32 hangup_surplus_time = 2;
    if (has_hangup_surplus_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hangup_surplus_time());
    }

    // optional uint64 add_exp = 3;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_exp());
    }

    // optional int32 before_lv = 4;
    if (has_before_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->before_lv());
    }

    // optional int32 after_lv = 5;
    if (has_after_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->after_lv());
    }

    // optional uint64 before_fight = 6;
    if (has_before_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->before_fight());
    }

    // optional uint64 after_fight = 7;
    if (has_after_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->after_fight());
    }

  }
  // repeated .proto_ff.ComPair64 items = 8;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated int32 add_value = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->add_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->add_value(i));
    }
    total_size += 1 * this->add_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLoginHangUpDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLoginHangUpDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLoginHangUpDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLoginHangUpDataRsp::MergeFrom(const PlayerLoginHangUpDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  add_value_.MergeFrom(from.add_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hangup_time()) {
      set_hangup_time(from.hangup_time());
    }
    if (from.has_hangup_surplus_time()) {
      set_hangup_surplus_time(from.hangup_surplus_time());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
    if (from.has_before_lv()) {
      set_before_lv(from.before_lv());
    }
    if (from.has_after_lv()) {
      set_after_lv(from.after_lv());
    }
    if (from.has_before_fight()) {
      set_before_fight(from.before_fight());
    }
    if (from.has_after_fight()) {
      set_after_fight(from.after_fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLoginHangUpDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginHangUpDataRsp::CopyFrom(const PlayerLoginHangUpDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginHangUpDataRsp::IsInitialized() const {

  return true;
}

void PlayerLoginHangUpDataRsp::Swap(PlayerLoginHangUpDataRsp* other) {
  if (other != this) {
    std::swap(hangup_time_, other->hangup_time_);
    std::swap(hangup_surplus_time_, other->hangup_surplus_time_);
    std::swap(add_exp_, other->add_exp_);
    std::swap(before_lv_, other->before_lv_);
    std::swap(after_lv_, other->after_lv_);
    std::swap(before_fight_, other->before_fight_);
    std::swap(after_fight_, other->after_fight_);
    items_.Swap(&other->items_);
    add_value_.Swap(&other->add_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLoginHangUpDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLoginHangUpDataRsp_descriptor_;
  metadata.reflection = PlayerLoginHangUpDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerHangUpRewardReq::kOptFieldNumber;
#endif  // !_MSC_VER

PlayerHangUpRewardReq::PlayerHangUpRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerHangUpRewardReq::InitAsDefaultInstance() {
}

PlayerHangUpRewardReq::PlayerHangUpRewardReq(const PlayerHangUpRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerHangUpRewardReq::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHangUpRewardReq::~PlayerHangUpRewardReq() {
  SharedDtor();
}

void PlayerHangUpRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerHangUpRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHangUpRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHangUpRewardReq_descriptor_;
}

const PlayerHangUpRewardReq& PlayerHangUpRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

PlayerHangUpRewardReq* PlayerHangUpRewardReq::default_instance_ = NULL;

PlayerHangUpRewardReq* PlayerHangUpRewardReq::New() const {
  return new PlayerHangUpRewardReq;
}

void PlayerHangUpRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerHangUpRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerHangUpRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerHangUpRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerHangUpRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHangUpRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHangUpRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerHangUpRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHangUpRewardReq::MergeFrom(const PlayerHangUpRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerHangUpRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHangUpRewardReq::CopyFrom(const PlayerHangUpRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHangUpRewardReq::IsInitialized() const {

  return true;
}

void PlayerHangUpRewardReq::Swap(PlayerHangUpRewardReq* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerHangUpRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHangUpRewardReq_descriptor_;
  metadata.reflection = PlayerHangUpRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerHangUpRewardRsp::kRetFieldNumber;
#endif  // !_MSC_VER

PlayerHangUpRewardRsp::PlayerHangUpRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerHangUpRewardRsp::InitAsDefaultInstance() {
}

PlayerHangUpRewardRsp::PlayerHangUpRewardRsp(const PlayerHangUpRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerHangUpRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHangUpRewardRsp::~PlayerHangUpRewardRsp() {
  SharedDtor();
}

void PlayerHangUpRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerHangUpRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHangUpRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHangUpRewardRsp_descriptor_;
}

const PlayerHangUpRewardRsp& PlayerHangUpRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

PlayerHangUpRewardRsp* PlayerHangUpRewardRsp::default_instance_ = NULL;

PlayerHangUpRewardRsp* PlayerHangUpRewardRsp::New() const {
  return new PlayerHangUpRewardRsp;
}

void PlayerHangUpRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerHangUpRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerHangUpRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerHangUpRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerHangUpRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHangUpRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHangUpRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerHangUpRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHangUpRewardRsp::MergeFrom(const PlayerHangUpRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerHangUpRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHangUpRewardRsp::CopyFrom(const PlayerHangUpRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHangUpRewardRsp::IsInitialized() const {

  return true;
}

void PlayerHangUpRewardRsp::Swap(PlayerHangUpRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerHangUpRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHangUpRewardRsp_descriptor_;
  metadata.reflection = PlayerHangUpRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetDailyTaskDataReq::GetDailyTaskDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDailyTaskDataReq::InitAsDefaultInstance() {
}

GetDailyTaskDataReq::GetDailyTaskDataReq(const GetDailyTaskDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDailyTaskDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDailyTaskDataReq::~GetDailyTaskDataReq() {
  SharedDtor();
}

void GetDailyTaskDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDailyTaskDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDailyTaskDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDailyTaskDataReq_descriptor_;
}

const GetDailyTaskDataReq& GetDailyTaskDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

GetDailyTaskDataReq* GetDailyTaskDataReq::default_instance_ = NULL;

GetDailyTaskDataReq* GetDailyTaskDataReq::New() const {
  return new GetDailyTaskDataReq;
}

void GetDailyTaskDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDailyTaskDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetDailyTaskDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDailyTaskDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDailyTaskDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDailyTaskDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDailyTaskDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDailyTaskDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDailyTaskDataReq::MergeFrom(const GetDailyTaskDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDailyTaskDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDailyTaskDataReq::CopyFrom(const GetDailyTaskDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDailyTaskDataReq::IsInitialized() const {

  return true;
}

void GetDailyTaskDataReq::Swap(GetDailyTaskDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDailyTaskDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDailyTaskDataReq_descriptor_;
  metadata.reflection = GetDailyTaskDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDailyTaskDataRsp::kDataFieldNumber;
#endif  // !_MSC_VER

GetDailyTaskDataRsp::GetDailyTaskDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDailyTaskDataRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::DailyTaskAllData*>(&::proto_ff::DailyTaskAllData::default_instance());
}

GetDailyTaskDataRsp::GetDailyTaskDataRsp(const GetDailyTaskDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDailyTaskDataRsp::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDailyTaskDataRsp::~GetDailyTaskDataRsp() {
  SharedDtor();
}

void GetDailyTaskDataRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GetDailyTaskDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDailyTaskDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDailyTaskDataRsp_descriptor_;
}

const GetDailyTaskDataRsp& GetDailyTaskDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

GetDailyTaskDataRsp* GetDailyTaskDataRsp::default_instance_ = NULL;

GetDailyTaskDataRsp* GetDailyTaskDataRsp::New() const {
  return new GetDailyTaskDataRsp;
}

void GetDailyTaskDataRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::DailyTaskAllData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDailyTaskDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.DailyTaskAllData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDailyTaskDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.DailyTaskAllData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDailyTaskDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.DailyTaskAllData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDailyTaskDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.DailyTaskAllData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDailyTaskDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDailyTaskDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDailyTaskDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDailyTaskDataRsp::MergeFrom(const GetDailyTaskDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::DailyTaskAllData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDailyTaskDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDailyTaskDataRsp::CopyFrom(const GetDailyTaskDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDailyTaskDataRsp::IsInitialized() const {

  return true;
}

void GetDailyTaskDataRsp::Swap(GetDailyTaskDataRsp* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDailyTaskDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDailyTaskDataRsp_descriptor_;
  metadata.reflection = GetDailyTaskDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDailyTaskNotify::kDataFieldNumber;
const int UpdateDailyTaskNotify::kLimitDataFieldNumber;
const int UpdateDailyTaskNotify::kRewardDataFieldNumber;
const int UpdateDailyTaskNotify::kBackDataFieldNumber;
const int UpdateDailyTaskNotify::kDailyScoreFieldNumber;
const int UpdateDailyTaskNotify::kDailyExpFieldNumber;
#endif  // !_MSC_VER

UpdateDailyTaskNotify::UpdateDailyTaskNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDailyTaskNotify::InitAsDefaultInstance() {
}

UpdateDailyTaskNotify::UpdateDailyTaskNotify(const UpdateDailyTaskNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDailyTaskNotify::SharedCtor() {
  _cached_size_ = 0;
  daily_score_ = 0u;
  daily_exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDailyTaskNotify::~UpdateDailyTaskNotify() {
  SharedDtor();
}

void UpdateDailyTaskNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateDailyTaskNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDailyTaskNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDailyTaskNotify_descriptor_;
}

const UpdateDailyTaskNotify& UpdateDailyTaskNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

UpdateDailyTaskNotify* UpdateDailyTaskNotify::default_instance_ = NULL;

UpdateDailyTaskNotify* UpdateDailyTaskNotify::New() const {
  return new UpdateDailyTaskNotify;
}

void UpdateDailyTaskNotify::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    daily_score_ = 0u;
    daily_exp_ = GOOGLE_ULONGLONG(0);
  }
  data_.Clear();
  limit_data_.Clear();
  reward_data_.Clear();
  back_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDailyTaskNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DailyTaskEntry data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(18)) goto parse_limit_data;
        break;
      }

      // repeated .proto_ff.DailyTaskLimitEntry limit_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limit_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_limit_data;
        if (input->ExpectTag(26)) goto parse_reward_data;
        break;
      }

      // repeated .proto_ff.DailyTaskRewardEntry reward_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward_data;
        if (input->ExpectTag(34)) goto parse_back_data;
        break;
      }

      // repeated .proto_ff.DailyTaskBackEntry back_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_back_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_back_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_back_data;
        if (input->ExpectTag(40)) goto parse_daily_score;
        break;
      }

      // optional uint32 daily_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_score_)));
          set_has_daily_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_daily_exp;
        break;
      }

      // optional uint64 daily_exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &daily_exp_)));
          set_has_daily_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDailyTaskNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DailyTaskEntry data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // repeated .proto_ff.DailyTaskLimitEntry limit_data = 2;
  for (int i = 0; i < this->limit_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->limit_data(i), output);
  }

  // repeated .proto_ff.DailyTaskRewardEntry reward_data = 3;
  for (int i = 0; i < this->reward_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward_data(i), output);
  }

  // repeated .proto_ff.DailyTaskBackEntry back_data = 4;
  for (int i = 0; i < this->back_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->back_data(i), output);
  }

  // optional uint32 daily_score = 5;
  if (has_daily_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->daily_score(), output);
  }

  // optional uint64 daily_exp = 6;
  if (has_daily_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->daily_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDailyTaskNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DailyTaskEntry data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // repeated .proto_ff.DailyTaskLimitEntry limit_data = 2;
  for (int i = 0; i < this->limit_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->limit_data(i), target);
  }

  // repeated .proto_ff.DailyTaskRewardEntry reward_data = 3;
  for (int i = 0; i < this->reward_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward_data(i), target);
  }

  // repeated .proto_ff.DailyTaskBackEntry back_data = 4;
  for (int i = 0; i < this->back_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->back_data(i), target);
  }

  // optional uint32 daily_score = 5;
  if (has_daily_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->daily_score(), target);
  }

  // optional uint64 daily_exp = 6;
  if (has_daily_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->daily_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDailyTaskNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional uint32 daily_score = 5;
    if (has_daily_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_score());
    }

    // optional uint64 daily_exp = 6;
    if (has_daily_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->daily_exp());
    }

  }
  // repeated .proto_ff.DailyTaskEntry data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated .proto_ff.DailyTaskLimitEntry limit_data = 2;
  total_size += 1 * this->limit_data_size();
  for (int i = 0; i < this->limit_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limit_data(i));
  }

  // repeated .proto_ff.DailyTaskRewardEntry reward_data = 3;
  total_size += 1 * this->reward_data_size();
  for (int i = 0; i < this->reward_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_data(i));
  }

  // repeated .proto_ff.DailyTaskBackEntry back_data = 4;
  total_size += 1 * this->back_data_size();
  for (int i = 0; i < this->back_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->back_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDailyTaskNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDailyTaskNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDailyTaskNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDailyTaskNotify::MergeFrom(const UpdateDailyTaskNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  limit_data_.MergeFrom(from.limit_data_);
  reward_data_.MergeFrom(from.reward_data_);
  back_data_.MergeFrom(from.back_data_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_daily_score()) {
      set_daily_score(from.daily_score());
    }
    if (from.has_daily_exp()) {
      set_daily_exp(from.daily_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDailyTaskNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDailyTaskNotify::CopyFrom(const UpdateDailyTaskNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDailyTaskNotify::IsInitialized() const {

  return true;
}

void UpdateDailyTaskNotify::Swap(UpdateDailyTaskNotify* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    limit_data_.Swap(&other->limit_data_);
    reward_data_.Swap(&other->reward_data_);
    back_data_.Swap(&other->back_data_);
    std::swap(daily_score_, other->daily_score_);
    std::swap(daily_exp_, other->daily_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDailyTaskNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDailyTaskNotify_descriptor_;
  metadata.reflection = UpdateDailyTaskNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDailyTaskRewardReq::kRewardIdFieldNumber;
#endif  // !_MSC_VER

GetDailyTaskRewardReq::GetDailyTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDailyTaskRewardReq::InitAsDefaultInstance() {
}

GetDailyTaskRewardReq::GetDailyTaskRewardReq(const GetDailyTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDailyTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  reward_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDailyTaskRewardReq::~GetDailyTaskRewardReq() {
  SharedDtor();
}

void GetDailyTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDailyTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDailyTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDailyTaskRewardReq_descriptor_;
}

const GetDailyTaskRewardReq& GetDailyTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

GetDailyTaskRewardReq* GetDailyTaskRewardReq::default_instance_ = NULL;

GetDailyTaskRewardReq* GetDailyTaskRewardReq::New() const {
  return new GetDailyTaskRewardReq;
}

void GetDailyTaskRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDailyTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reward_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDailyTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reward_id = 1;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reward_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDailyTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reward_id = 1;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reward_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDailyTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reward_id = 1;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDailyTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDailyTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDailyTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDailyTaskRewardReq::MergeFrom(const GetDailyTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDailyTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDailyTaskRewardReq::CopyFrom(const GetDailyTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDailyTaskRewardReq::IsInitialized() const {

  return true;
}

void GetDailyTaskRewardReq::Swap(GetDailyTaskRewardReq* other) {
  if (other != this) {
    std::swap(reward_id_, other->reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDailyTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDailyTaskRewardReq_descriptor_;
  metadata.reflection = GetDailyTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDailyTaskRewardRsp::kRetCodeFieldNumber;
const int GetDailyTaskRewardRsp::kRewardIdFieldNumber;
#endif  // !_MSC_VER

GetDailyTaskRewardRsp::GetDailyTaskRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDailyTaskRewardRsp::InitAsDefaultInstance() {
}

GetDailyTaskRewardRsp::GetDailyTaskRewardRsp(const GetDailyTaskRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDailyTaskRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  reward_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDailyTaskRewardRsp::~GetDailyTaskRewardRsp() {
  SharedDtor();
}

void GetDailyTaskRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDailyTaskRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDailyTaskRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDailyTaskRewardRsp_descriptor_;
}

const GetDailyTaskRewardRsp& GetDailyTaskRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

GetDailyTaskRewardRsp* GetDailyTaskRewardRsp::default_instance_ = NULL;

GetDailyTaskRewardRsp* GetDailyTaskRewardRsp::New() const {
  return new GetDailyTaskRewardRsp;
}

void GetDailyTaskRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    reward_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDailyTaskRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_id;
        break;
      }

      // optional int32 reward_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDailyTaskRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 reward_id = 2;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDailyTaskRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 reward_id = 2;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDailyTaskRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 reward_id = 2;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDailyTaskRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDailyTaskRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDailyTaskRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDailyTaskRewardRsp::MergeFrom(const GetDailyTaskRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDailyTaskRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDailyTaskRewardRsp::CopyFrom(const GetDailyTaskRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDailyTaskRewardRsp::IsInitialized() const {

  return true;
}

void GetDailyTaskRewardRsp::Swap(GetDailyTaskRewardRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDailyTaskRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDailyTaskRewardRsp_descriptor_;
  metadata.reflection = GetDailyTaskRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyTaskLevelupReq::DailyTaskLevelupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskLevelupReq::InitAsDefaultInstance() {
}

DailyTaskLevelupReq::DailyTaskLevelupReq(const DailyTaskLevelupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskLevelupReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskLevelupReq::~DailyTaskLevelupReq() {
  SharedDtor();
}

void DailyTaskLevelupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskLevelupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskLevelupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskLevelupReq_descriptor_;
}

const DailyTaskLevelupReq& DailyTaskLevelupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

DailyTaskLevelupReq* DailyTaskLevelupReq::default_instance_ = NULL;

DailyTaskLevelupReq* DailyTaskLevelupReq::New() const {
  return new DailyTaskLevelupReq;
}

void DailyTaskLevelupReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskLevelupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyTaskLevelupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskLevelupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskLevelupReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskLevelupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskLevelupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskLevelupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskLevelupReq::MergeFrom(const DailyTaskLevelupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskLevelupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskLevelupReq::CopyFrom(const DailyTaskLevelupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskLevelupReq::IsInitialized() const {

  return true;
}

void DailyTaskLevelupReq::Swap(DailyTaskLevelupReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskLevelupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskLevelupReq_descriptor_;
  metadata.reflection = DailyTaskLevelupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskLevelupRsp::kRetCodeFieldNumber;
const int DailyTaskLevelupRsp::kDailyLevelFieldNumber;
const int DailyTaskLevelupRsp::kDailyExpFieldNumber;
#endif  // !_MSC_VER

DailyTaskLevelupRsp::DailyTaskLevelupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskLevelupRsp::InitAsDefaultInstance() {
}

DailyTaskLevelupRsp::DailyTaskLevelupRsp(const DailyTaskLevelupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskLevelupRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  daily_level_ = 0u;
  daily_exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskLevelupRsp::~DailyTaskLevelupRsp() {
  SharedDtor();
}

void DailyTaskLevelupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskLevelupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskLevelupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskLevelupRsp_descriptor_;
}

const DailyTaskLevelupRsp& DailyTaskLevelupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

DailyTaskLevelupRsp* DailyTaskLevelupRsp::default_instance_ = NULL;

DailyTaskLevelupRsp* DailyTaskLevelupRsp::New() const {
  return new DailyTaskLevelupRsp;
}

void DailyTaskLevelupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    daily_level_ = 0u;
    daily_exp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskLevelupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_daily_level;
        break;
      }

      // optional uint32 daily_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_level_)));
          set_has_daily_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_daily_exp;
        break;
      }

      // optional uint64 daily_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &daily_exp_)));
          set_has_daily_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskLevelupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint32 daily_level = 2;
  if (has_daily_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->daily_level(), output);
  }

  // optional uint64 daily_exp = 3;
  if (has_daily_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->daily_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskLevelupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint32 daily_level = 2;
  if (has_daily_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->daily_level(), target);
  }

  // optional uint64 daily_exp = 3;
  if (has_daily_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->daily_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskLevelupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint32 daily_level = 2;
    if (has_daily_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_level());
    }

    // optional uint64 daily_exp = 3;
    if (has_daily_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->daily_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskLevelupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskLevelupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskLevelupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskLevelupRsp::MergeFrom(const DailyTaskLevelupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_daily_level()) {
      set_daily_level(from.daily_level());
    }
    if (from.has_daily_exp()) {
      set_daily_exp(from.daily_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskLevelupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskLevelupRsp::CopyFrom(const DailyTaskLevelupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskLevelupRsp::IsInitialized() const {

  return true;
}

void DailyTaskLevelupRsp::Swap(DailyTaskLevelupRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(daily_level_, other->daily_level_);
    std::swap(daily_exp_, other->daily_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskLevelupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskLevelupRsp_descriptor_;
  metadata.reflection = DailyTaskLevelupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyLimitTaskAddReadyReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

DailyLimitTaskAddReadyReq::DailyLimitTaskAddReadyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyLimitTaskAddReadyReq::InitAsDefaultInstance() {
}

DailyLimitTaskAddReadyReq::DailyLimitTaskAddReadyReq(const DailyLimitTaskAddReadyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyLimitTaskAddReadyReq::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyLimitTaskAddReadyReq::~DailyLimitTaskAddReadyReq() {
  SharedDtor();
}

void DailyLimitTaskAddReadyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyLimitTaskAddReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyLimitTaskAddReadyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyLimitTaskAddReadyReq_descriptor_;
}

const DailyLimitTaskAddReadyReq& DailyLimitTaskAddReadyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

DailyLimitTaskAddReadyReq* DailyLimitTaskAddReadyReq::default_instance_ = NULL;

DailyLimitTaskAddReadyReq* DailyLimitTaskAddReadyReq::New() const {
  return new DailyLimitTaskAddReadyReq;
}

void DailyLimitTaskAddReadyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyLimitTaskAddReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyLimitTaskAddReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyLimitTaskAddReadyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyLimitTaskAddReadyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyLimitTaskAddReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyLimitTaskAddReadyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyLimitTaskAddReadyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyLimitTaskAddReadyReq::MergeFrom(const DailyLimitTaskAddReadyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyLimitTaskAddReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyLimitTaskAddReadyReq::CopyFrom(const DailyLimitTaskAddReadyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyLimitTaskAddReadyReq::IsInitialized() const {

  return true;
}

void DailyLimitTaskAddReadyReq::Swap(DailyLimitTaskAddReadyReq* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyLimitTaskAddReadyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyLimitTaskAddReadyReq_descriptor_;
  metadata.reflection = DailyLimitTaskAddReadyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyLimitTaskAddReadyRsp::kRetCodeFieldNumber;
const int DailyLimitTaskAddReadyRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyLimitTaskAddReadyRsp::DailyLimitTaskAddReadyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyLimitTaskAddReadyRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::DailyTaskLimitEntry*>(&::proto_ff::DailyTaskLimitEntry::default_instance());
}

DailyLimitTaskAddReadyRsp::DailyLimitTaskAddReadyRsp(const DailyLimitTaskAddReadyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyLimitTaskAddReadyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyLimitTaskAddReadyRsp::~DailyLimitTaskAddReadyRsp() {
  SharedDtor();
}

void DailyLimitTaskAddReadyRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyLimitTaskAddReadyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyLimitTaskAddReadyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyLimitTaskAddReadyRsp_descriptor_;
}

const DailyLimitTaskAddReadyRsp& DailyLimitTaskAddReadyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

DailyLimitTaskAddReadyRsp* DailyLimitTaskAddReadyRsp::default_instance_ = NULL;

DailyLimitTaskAddReadyRsp* DailyLimitTaskAddReadyRsp::New() const {
  return new DailyLimitTaskAddReadyRsp;
}

void DailyLimitTaskAddReadyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::DailyTaskLimitEntry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyLimitTaskAddReadyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.DailyTaskLimitEntry data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyLimitTaskAddReadyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.DailyTaskLimitEntry data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyLimitTaskAddReadyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.DailyTaskLimitEntry data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyLimitTaskAddReadyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.DailyTaskLimitEntry data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyLimitTaskAddReadyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyLimitTaskAddReadyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyLimitTaskAddReadyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyLimitTaskAddReadyRsp::MergeFrom(const DailyLimitTaskAddReadyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::DailyTaskLimitEntry::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyLimitTaskAddReadyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyLimitTaskAddReadyRsp::CopyFrom(const DailyLimitTaskAddReadyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyLimitTaskAddReadyRsp::IsInitialized() const {

  return true;
}

void DailyLimitTaskAddReadyRsp::Swap(DailyLimitTaskAddReadyRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyLimitTaskAddReadyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyLimitTaskAddReadyRsp_descriptor_;
  metadata.reflection = DailyLimitTaskAddReadyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyBackTaskBackReq::kBackIdFieldNumber;
const int DailyBackTaskBackReq::kLeftTimeFieldNumber;
const int DailyBackTaskBackReq::kExternalLeftTimeFieldNumber;
const int DailyBackTaskBackReq::kTypeFieldNumber;
#endif  // !_MSC_VER

DailyBackTaskBackReq::DailyBackTaskBackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyBackTaskBackReq::InitAsDefaultInstance() {
}

DailyBackTaskBackReq::DailyBackTaskBackReq(const DailyBackTaskBackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyBackTaskBackReq::SharedCtor() {
  _cached_size_ = 0;
  back_id_ = GOOGLE_LONGLONG(0);
  left_time_ = 0;
  external_left_time_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyBackTaskBackReq::~DailyBackTaskBackReq() {
  SharedDtor();
}

void DailyBackTaskBackReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyBackTaskBackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyBackTaskBackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyBackTaskBackReq_descriptor_;
}

const DailyBackTaskBackReq& DailyBackTaskBackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

DailyBackTaskBackReq* DailyBackTaskBackReq::default_instance_ = NULL;

DailyBackTaskBackReq* DailyBackTaskBackReq::New() const {
  return new DailyBackTaskBackReq;
}

void DailyBackTaskBackReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    back_id_ = GOOGLE_LONGLONG(0);
    left_time_ = 0;
    external_left_time_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyBackTaskBackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 back_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &back_id_)));
          set_has_back_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_external_left_time;
        break;
      }

      // optional int32 external_left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_external_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_left_time_)));
          set_has_external_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyBackTaskBackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 back_id = 1;
  if (has_back_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->back_id(), output);
  }

  // optional int32 left_time = 2;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_time(), output);
  }

  // optional int32 external_left_time = 3;
  if (has_external_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->external_left_time(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyBackTaskBackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 back_id = 1;
  if (has_back_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->back_id(), target);
  }

  // optional int32 left_time = 2;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_time(), target);
  }

  // optional int32 external_left_time = 3;
  if (has_external_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->external_left_time(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyBackTaskBackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 back_id = 1;
    if (has_back_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->back_id());
    }

    // optional int32 left_time = 2;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

    // optional int32 external_left_time = 3;
    if (has_external_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->external_left_time());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyBackTaskBackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyBackTaskBackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyBackTaskBackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyBackTaskBackReq::MergeFrom(const DailyBackTaskBackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_back_id()) {
      set_back_id(from.back_id());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
    if (from.has_external_left_time()) {
      set_external_left_time(from.external_left_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyBackTaskBackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyBackTaskBackReq::CopyFrom(const DailyBackTaskBackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyBackTaskBackReq::IsInitialized() const {

  return true;
}

void DailyBackTaskBackReq::Swap(DailyBackTaskBackReq* other) {
  if (other != this) {
    std::swap(back_id_, other->back_id_);
    std::swap(left_time_, other->left_time_);
    std::swap(external_left_time_, other->external_left_time_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyBackTaskBackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyBackTaskBackReq_descriptor_;
  metadata.reflection = DailyBackTaskBackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyBackTaskBackRsp::kRetCodeFieldNumber;
const int DailyBackTaskBackRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyBackTaskBackRsp::DailyBackTaskBackRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyBackTaskBackRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::DailyTaskBackEntry*>(&::proto_ff::DailyTaskBackEntry::default_instance());
}

DailyBackTaskBackRsp::DailyBackTaskBackRsp(const DailyBackTaskBackRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyBackTaskBackRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyBackTaskBackRsp::~DailyBackTaskBackRsp() {
  SharedDtor();
}

void DailyBackTaskBackRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DailyBackTaskBackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyBackTaskBackRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyBackTaskBackRsp_descriptor_;
}

const DailyBackTaskBackRsp& DailyBackTaskBackRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

DailyBackTaskBackRsp* DailyBackTaskBackRsp::default_instance_ = NULL;

DailyBackTaskBackRsp* DailyBackTaskBackRsp::New() const {
  return new DailyBackTaskBackRsp;
}

void DailyBackTaskBackRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::DailyTaskBackEntry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyBackTaskBackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.DailyTaskBackEntry data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyBackTaskBackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.DailyTaskBackEntry data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyBackTaskBackRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.DailyTaskBackEntry data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyBackTaskBackRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.DailyTaskBackEntry data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyBackTaskBackRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyBackTaskBackRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyBackTaskBackRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyBackTaskBackRsp::MergeFrom(const DailyBackTaskBackRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::DailyTaskBackEntry::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyBackTaskBackRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyBackTaskBackRsp::CopyFrom(const DailyBackTaskBackRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyBackTaskBackRsp::IsInitialized() const {

  return true;
}

void DailyBackTaskBackRsp::Swap(DailyBackTaskBackRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyBackTaskBackRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyBackTaskBackRsp_descriptor_;
  metadata.reflection = DailyBackTaskBackRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyLimitTaskAddAllReadyReq::DailyLimitTaskAddAllReadyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyLimitTaskAddAllReadyReq::InitAsDefaultInstance() {
}

DailyLimitTaskAddAllReadyReq::DailyLimitTaskAddAllReadyReq(const DailyLimitTaskAddAllReadyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyLimitTaskAddAllReadyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyLimitTaskAddAllReadyReq::~DailyLimitTaskAddAllReadyReq() {
  SharedDtor();
}

void DailyLimitTaskAddAllReadyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyLimitTaskAddAllReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyLimitTaskAddAllReadyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyLimitTaskAddAllReadyReq_descriptor_;
}

const DailyLimitTaskAddAllReadyReq& DailyLimitTaskAddAllReadyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

DailyLimitTaskAddAllReadyReq* DailyLimitTaskAddAllReadyReq::default_instance_ = NULL;

DailyLimitTaskAddAllReadyReq* DailyLimitTaskAddAllReadyReq::New() const {
  return new DailyLimitTaskAddAllReadyReq;
}

void DailyLimitTaskAddAllReadyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyLimitTaskAddAllReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyLimitTaskAddAllReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyLimitTaskAddAllReadyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyLimitTaskAddAllReadyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyLimitTaskAddAllReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyLimitTaskAddAllReadyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyLimitTaskAddAllReadyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyLimitTaskAddAllReadyReq::MergeFrom(const DailyLimitTaskAddAllReadyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyLimitTaskAddAllReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyLimitTaskAddAllReadyReq::CopyFrom(const DailyLimitTaskAddAllReadyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyLimitTaskAddAllReadyReq::IsInitialized() const {

  return true;
}

void DailyLimitTaskAddAllReadyReq::Swap(DailyLimitTaskAddAllReadyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyLimitTaskAddAllReadyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyLimitTaskAddAllReadyReq_descriptor_;
  metadata.reflection = DailyLimitTaskAddAllReadyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyLimitTaskAddAllReadyRsp::kRetCodeFieldNumber;
const int DailyLimitTaskAddAllReadyRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyLimitTaskAddAllReadyRsp::DailyLimitTaskAddAllReadyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyLimitTaskAddAllReadyRsp::InitAsDefaultInstance() {
}

DailyLimitTaskAddAllReadyRsp::DailyLimitTaskAddAllReadyRsp(const DailyLimitTaskAddAllReadyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyLimitTaskAddAllReadyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyLimitTaskAddAllReadyRsp::~DailyLimitTaskAddAllReadyRsp() {
  SharedDtor();
}

void DailyLimitTaskAddAllReadyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyLimitTaskAddAllReadyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyLimitTaskAddAllReadyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyLimitTaskAddAllReadyRsp_descriptor_;
}

const DailyLimitTaskAddAllReadyRsp& DailyLimitTaskAddAllReadyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

DailyLimitTaskAddAllReadyRsp* DailyLimitTaskAddAllReadyRsp::default_instance_ = NULL;

DailyLimitTaskAddAllReadyRsp* DailyLimitTaskAddAllReadyRsp::New() const {
  return new DailyLimitTaskAddAllReadyRsp;
}

void DailyLimitTaskAddAllReadyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyLimitTaskAddAllReadyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .proto_ff.DailyTaskLimitEntry data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyLimitTaskAddAllReadyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // repeated .proto_ff.DailyTaskLimitEntry data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyLimitTaskAddAllReadyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // repeated .proto_ff.DailyTaskLimitEntry data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyLimitTaskAddAllReadyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  // repeated .proto_ff.DailyTaskLimitEntry data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyLimitTaskAddAllReadyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyLimitTaskAddAllReadyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyLimitTaskAddAllReadyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyLimitTaskAddAllReadyRsp::MergeFrom(const DailyLimitTaskAddAllReadyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyLimitTaskAddAllReadyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyLimitTaskAddAllReadyRsp::CopyFrom(const DailyLimitTaskAddAllReadyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyLimitTaskAddAllReadyRsp::IsInitialized() const {

  return true;
}

void DailyLimitTaskAddAllReadyRsp::Swap(DailyLimitTaskAddAllReadyRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyLimitTaskAddAllReadyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyLimitTaskAddAllReadyRsp_descriptor_;
  metadata.reflection = DailyLimitTaskAddAllReadyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyBackTaskBackAllReq::kTypeFieldNumber;
const int DailyBackTaskBackAllReq::kBackFieldNumber;
const int DailyBackTaskBackAllReq::kExternalBackFieldNumber;
#endif  // !_MSC_VER

DailyBackTaskBackAllReq::DailyBackTaskBackAllReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyBackTaskBackAllReq::InitAsDefaultInstance() {
}

DailyBackTaskBackAllReq::DailyBackTaskBackAllReq(const DailyBackTaskBackAllReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyBackTaskBackAllReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  back_ = false;
  external_back_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyBackTaskBackAllReq::~DailyBackTaskBackAllReq() {
  SharedDtor();
}

void DailyBackTaskBackAllReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyBackTaskBackAllReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyBackTaskBackAllReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyBackTaskBackAllReq_descriptor_;
}

const DailyBackTaskBackAllReq& DailyBackTaskBackAllReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

DailyBackTaskBackAllReq* DailyBackTaskBackAllReq::default_instance_ = NULL;

DailyBackTaskBackAllReq* DailyBackTaskBackAllReq::New() const {
  return new DailyBackTaskBackAllReq;
}

void DailyBackTaskBackAllReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    back_ = false;
    external_back_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyBackTaskBackAllReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_back;
        break;
      }

      // optional bool back = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_)));
          set_has_back();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_external_back;
        break;
      }

      // optional bool external_back = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_external_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &external_back_)));
          set_has_external_back();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyBackTaskBackAllReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional bool back = 2;
  if (has_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->back(), output);
  }

  // optional bool external_back = 3;
  if (has_external_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->external_back(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyBackTaskBackAllReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional bool back = 2;
  if (has_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->back(), target);
  }

  // optional bool external_back = 3;
  if (has_external_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->external_back(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyBackTaskBackAllReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool back = 2;
    if (has_back()) {
      total_size += 1 + 1;
    }

    // optional bool external_back = 3;
    if (has_external_back()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyBackTaskBackAllReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyBackTaskBackAllReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyBackTaskBackAllReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyBackTaskBackAllReq::MergeFrom(const DailyBackTaskBackAllReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_back()) {
      set_back(from.back());
    }
    if (from.has_external_back()) {
      set_external_back(from.external_back());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyBackTaskBackAllReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyBackTaskBackAllReq::CopyFrom(const DailyBackTaskBackAllReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyBackTaskBackAllReq::IsInitialized() const {

  return true;
}

void DailyBackTaskBackAllReq::Swap(DailyBackTaskBackAllReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(back_, other->back_);
    std::swap(external_back_, other->external_back_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyBackTaskBackAllReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyBackTaskBackAllReq_descriptor_;
  metadata.reflection = DailyBackTaskBackAllReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyBackTaskBackAllRsp::kRetCodeFieldNumber;
const int DailyBackTaskBackAllRsp::kDataFieldNumber;
#endif  // !_MSC_VER

DailyBackTaskBackAllRsp::DailyBackTaskBackAllRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyBackTaskBackAllRsp::InitAsDefaultInstance() {
}

DailyBackTaskBackAllRsp::DailyBackTaskBackAllRsp(const DailyBackTaskBackAllRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyBackTaskBackAllRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyBackTaskBackAllRsp::~DailyBackTaskBackAllRsp() {
  SharedDtor();
}

void DailyBackTaskBackAllRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyBackTaskBackAllRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyBackTaskBackAllRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyBackTaskBackAllRsp_descriptor_;
}

const DailyBackTaskBackAllRsp& DailyBackTaskBackAllRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientServer_2eproto();
  return *default_instance_;
}

DailyBackTaskBackAllRsp* DailyBackTaskBackAllRsp::default_instance_ = NULL;

DailyBackTaskBackAllRsp* DailyBackTaskBackAllRsp::New() const {
  return new DailyBackTaskBackAllRsp;
}

void DailyBackTaskBackAllRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyBackTaskBackAllRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .proto_ff.DailyTaskBackEntry data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyBackTaskBackAllRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // repeated .proto_ff.DailyTaskBackEntry data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyBackTaskBackAllRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // repeated .proto_ff.DailyTaskBackEntry data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyBackTaskBackAllRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  // repeated .proto_ff.DailyTaskBackEntry data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyBackTaskBackAllRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyBackTaskBackAllRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyBackTaskBackAllRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyBackTaskBackAllRsp::MergeFrom(const DailyBackTaskBackAllRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyBackTaskBackAllRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyBackTaskBackAllRsp::CopyFrom(const DailyBackTaskBackAllRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyBackTaskBackAllRsp::IsInitialized() const {

  return true;
}

void DailyBackTaskBackAllRsp::Swap(DailyBackTaskBackAllRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyBackTaskBackAllRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyBackTaskBackAllRsp_descriptor_;
  metadata.reflection = DailyBackTaskBackAllRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
