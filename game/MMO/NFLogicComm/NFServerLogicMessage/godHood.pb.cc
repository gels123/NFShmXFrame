// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: godHood.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "godHood.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* godHoodgodHoodattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  godHoodgodHoodattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* godHoodgodHood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  godHoodgodHood_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_godHoodgodHood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_godHoodgodHood_reflection_ = NULL;
const ::google::protobuf::Descriptor* godHoodexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  godHoodexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_godHoodexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_godHoodexp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_godHood_2eproto() {
  protobuf_AddDesc_godHood_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "godHood.proto");
  GOOGLE_CHECK(file != NULL);
  godHoodgodHoodattributeDesc_descriptor_ = file->message_type(0);
  static const int godHoodgodHoodattributeDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHoodattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHoodattributeDesc, up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHoodattributeDesc, value_),
  };
  godHoodgodHoodattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      godHoodgodHoodattributeDesc_descriptor_,
      godHoodgodHoodattributeDesc::default_instance_,
      godHoodgodHoodattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHoodattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHoodattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(godHoodgodHoodattributeDesc));
  godHoodgodHood_descriptor_ = file->message_type(1);
  static const int godHoodgodHood_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHood, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHood, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHood, attrnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHood, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHood, lvup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHood, basicsexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHood, attribute_),
  };
  godHoodgodHood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      godHoodgodHood_descriptor_,
      godHoodgodHood::default_instance_,
      godHoodgodHood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodgodHood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(godHoodgodHood));
  Sheet_godHoodgodHood_descriptor_ = file->message_type(2);
  static const int Sheet_godHoodgodHood_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godHoodgodHood, godhoodgodhood_list_),
  };
  Sheet_godHoodgodHood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_godHoodgodHood_descriptor_,
      Sheet_godHoodgodHood::default_instance_,
      Sheet_godHoodgodHood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godHoodgodHood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godHoodgodHood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_godHoodgodHood));
  godHoodexp_descriptor_ = file->message_type(3);
  static const int godHoodexp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodexp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodexp, exp_),
  };
  godHoodexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      godHoodexp_descriptor_,
      godHoodexp::default_instance_,
      godHoodexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godHoodexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(godHoodexp));
  Sheet_godHoodexp_descriptor_ = file->message_type(4);
  static const int Sheet_godHoodexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godHoodexp, godhoodexp_list_),
  };
  Sheet_godHoodexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_godHoodexp_descriptor_,
      Sheet_godHoodexp::default_instance_,
      Sheet_godHoodexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godHoodexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godHoodexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_godHoodexp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_godHood_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    godHoodgodHoodattributeDesc_descriptor_, &godHoodgodHoodattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    godHoodgodHood_descriptor_, &godHoodgodHood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_godHoodgodHood_descriptor_, &Sheet_godHoodgodHood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    godHoodexp_descriptor_, &godHoodexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_godHoodexp_descriptor_, &Sheet_godHoodexp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_godHood_2eproto() {
  delete godHoodgodHoodattributeDesc::default_instance_;
  delete godHoodgodHoodattributeDesc_reflection_;
  delete godHoodgodHood::default_instance_;
  delete godHoodgodHood_reflection_;
  delete Sheet_godHoodgodHood::default_instance_;
  delete Sheet_godHoodgodHood_reflection_;
  delete godHoodexp::default_instance_;
  delete godHoodexp_reflection_;
  delete Sheet_godHoodexp::default_instance_;
  delete Sheet_godHoodexp_reflection_;
}

void protobuf_AddDesc_godHood_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rgodHood.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"c\n\033godHoodgodHoodattributeDesc\022"
    "\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\002up\030\002 \001(\005B\n\302\377\024\006\345"
    "\242\236\351\207\217\022\026\n\005value\030\003 \001(\005B\007\302\377\024\003\345\200\274\"\242\002\n\016godHoo"
    "dgodHood\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\347\201\265\351\255\204ID\022\030\n\004ty"
    "pe\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\036\n\007attrNum\030\003 \001(\005B\r\302"
    "\377\024\t\345\261\236\346\200\247\346\225\260\022\033\n\007quality\030\004 \001(\005B\n\302\377\024\006\345\223\201\350\264"
    "\250\022\036\n\004lvUp\030\005 \001(\005B\020\302\377\024\014\347\255\211\347\272\247\344\270\212\351\231\220\022/\n\tbas"
    "icsExp\030\006 \001(\005B\034\302\377\024\030\345\210\206\350\247\243\347\232\204\345\237\272\347\241\200\347\273\217\351\252\214\345"
    "\200\274\022N\n\tattribute\030\007 \003(\0132%.proto_ff.godHood"
    "godHoodattributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301"
    "\024\002\"T\n\024Sheet_godHoodgodHood\022<\n\023godHoodgod"
    "Hood_List\030\001 \003(\0132\030.proto_ff.godHoodgodHoo"
    "dB\005\210\301\024\310\001\"F\n\ngodHoodexp\022\026\n\002lv\030\001 \001(\005B\n\302\377\024\006"
    "\347\255\211\347\272\247\022 \n\003exp\030\002 \001(\005B\023\302\377\024\017\345\215\207\347\272\247\347\273\217\351\252\214\345\200\274"
    "\"H\n\020Sheet_godHoodexp\0224\n\017godHoodexp_List\030"
    "\001 \003(\0132\024.proto_ff.godHoodexpB\005\210\301\024\254\002", 674);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "godHood.proto", &protobuf_RegisterTypes);
  godHoodgodHoodattributeDesc::default_instance_ = new godHoodgodHoodattributeDesc();
  godHoodgodHood::default_instance_ = new godHoodgodHood();
  Sheet_godHoodgodHood::default_instance_ = new Sheet_godHoodgodHood();
  godHoodexp::default_instance_ = new godHoodexp();
  Sheet_godHoodexp::default_instance_ = new Sheet_godHoodexp();
  godHoodgodHoodattributeDesc::default_instance_->InitAsDefaultInstance();
  godHoodgodHood::default_instance_->InitAsDefaultInstance();
  Sheet_godHoodgodHood::default_instance_->InitAsDefaultInstance();
  godHoodexp::default_instance_->InitAsDefaultInstance();
  Sheet_godHoodexp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_godHood_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_godHood_2eproto {
  StaticDescriptorInitializer_godHood_2eproto() {
    protobuf_AddDesc_godHood_2eproto();
  }
} static_descriptor_initializer_godHood_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int godHoodgodHoodattributeDesc::kTypeFieldNumber;
const int godHoodgodHoodattributeDesc::kUpFieldNumber;
const int godHoodgodHoodattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

godHoodgodHoodattributeDesc::godHoodgodHoodattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void godHoodgodHoodattributeDesc::InitAsDefaultInstance() {
}

godHoodgodHoodattributeDesc::godHoodgodHoodattributeDesc(const godHoodgodHoodattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void godHoodgodHoodattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  up_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

godHoodgodHoodattributeDesc::~godHoodgodHoodattributeDesc() {
  SharedDtor();
}

void godHoodgodHoodattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void godHoodgodHoodattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* godHoodgodHoodattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return godHoodgodHoodattributeDesc_descriptor_;
}

const godHoodgodHoodattributeDesc& godHoodgodHoodattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godHood_2eproto();
  return *default_instance_;
}

godHoodgodHoodattributeDesc* godHoodgodHoodattributeDesc::default_instance_ = NULL;

godHoodgodHoodattributeDesc* godHoodgodHoodattributeDesc::New() const {
  return new godHoodgodHoodattributeDesc;
}

void godHoodgodHoodattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    up_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool godHoodgodHoodattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_up;
        break;
      }

      // optional int32 up = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &up_)));
          set_has_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void godHoodgodHoodattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 up = 2;
  if (has_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->up(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* godHoodgodHoodattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 up = 2;
  if (has_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->up(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int godHoodgodHoodattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 up = 2;
    if (has_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->up());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void godHoodgodHoodattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const godHoodgodHoodattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const godHoodgodHoodattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void godHoodgodHoodattributeDesc::MergeFrom(const godHoodgodHoodattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_up()) {
      set_up(from.up());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void godHoodgodHoodattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void godHoodgodHoodattributeDesc::CopyFrom(const godHoodgodHoodattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool godHoodgodHoodattributeDesc::IsInitialized() const {

  return true;
}

void godHoodgodHoodattributeDesc::Swap(godHoodgodHoodattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(up_, other->up_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata godHoodgodHoodattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = godHoodgodHoodattributeDesc_descriptor_;
  metadata.reflection = godHoodgodHoodattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int godHoodgodHood::kIdFieldNumber;
const int godHoodgodHood::kTypeFieldNumber;
const int godHoodgodHood::kAttrNumFieldNumber;
const int godHoodgodHood::kQualityFieldNumber;
const int godHoodgodHood::kLvUpFieldNumber;
const int godHoodgodHood::kBasicsExpFieldNumber;
const int godHoodgodHood::kAttributeFieldNumber;
#endif  // !_MSC_VER

godHoodgodHood::godHoodgodHood()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void godHoodgodHood::InitAsDefaultInstance() {
}

godHoodgodHood::godHoodgodHood(const godHoodgodHood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void godHoodgodHood::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  attrnum_ = 0;
  quality_ = 0;
  lvup_ = 0;
  basicsexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

godHoodgodHood::~godHoodgodHood() {
  SharedDtor();
}

void godHoodgodHood::SharedDtor() {
  if (this != default_instance_) {
  }
}

void godHoodgodHood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* godHoodgodHood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return godHoodgodHood_descriptor_;
}

const godHoodgodHood& godHoodgodHood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godHood_2eproto();
  return *default_instance_;
}

godHoodgodHood* godHoodgodHood::default_instance_ = NULL;

godHoodgodHood* godHoodgodHood::New() const {
  return new godHoodgodHood;
}

void godHoodgodHood::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    attrnum_ = 0;
    quality_ = 0;
    lvup_ = 0;
    basicsexp_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool godHoodgodHood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attrNum;
        break;
      }

      // optional int32 attrNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrnum_)));
          set_has_attrnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // optional int32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lvUp;
        break;
      }

      // optional int32 lvUp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvup_)));
          set_has_lvup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_basicsExp;
        break;
      }

      // optional int32 basicsExp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basicsExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basicsexp_)));
          set_has_basicsexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.godHoodgodHoodattributeDesc attribute = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void godHoodgodHood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 attrNum = 3;
  if (has_attrnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attrnum(), output);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  // optional int32 lvUp = 5;
  if (has_lvup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lvup(), output);
  }

  // optional int32 basicsExp = 6;
  if (has_basicsexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->basicsexp(), output);
  }

  // repeated .proto_ff.godHoodgodHoodattributeDesc attribute = 7;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* godHoodgodHood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 attrNum = 3;
  if (has_attrnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attrnum(), target);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quality(), target);
  }

  // optional int32 lvUp = 5;
  if (has_lvup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lvup(), target);
  }

  // optional int32 basicsExp = 6;
  if (has_basicsexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->basicsexp(), target);
  }

  // repeated .proto_ff.godHoodgodHoodattributeDesc attribute = 7;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int godHoodgodHood::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 attrNum = 3;
    if (has_attrnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrnum());
    }

    // optional int32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 lvUp = 5;
    if (has_lvup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvup());
    }

    // optional int32 basicsExp = 6;
    if (has_basicsexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basicsexp());
    }

  }
  // repeated .proto_ff.godHoodgodHoodattributeDesc attribute = 7;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void godHoodgodHood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const godHoodgodHood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const godHoodgodHood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void godHoodgodHood::MergeFrom(const godHoodgodHood& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_attrnum()) {
      set_attrnum(from.attrnum());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_lvup()) {
      set_lvup(from.lvup());
    }
    if (from.has_basicsexp()) {
      set_basicsexp(from.basicsexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void godHoodgodHood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void godHoodgodHood::CopyFrom(const godHoodgodHood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool godHoodgodHood::IsInitialized() const {

  return true;
}

void godHoodgodHood::Swap(godHoodgodHood* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(attrnum_, other->attrnum_);
    std::swap(quality_, other->quality_);
    std::swap(lvup_, other->lvup_);
    std::swap(basicsexp_, other->basicsexp_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata godHoodgodHood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = godHoodgodHood_descriptor_;
  metadata.reflection = godHoodgodHood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_godHoodgodHood::kGodHoodgodHoodListFieldNumber;
#endif  // !_MSC_VER

Sheet_godHoodgodHood::Sheet_godHoodgodHood()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_godHoodgodHood::InitAsDefaultInstance() {
}

Sheet_godHoodgodHood::Sheet_godHoodgodHood(const Sheet_godHoodgodHood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_godHoodgodHood::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_godHoodgodHood::~Sheet_godHoodgodHood() {
  SharedDtor();
}

void Sheet_godHoodgodHood::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_godHoodgodHood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_godHoodgodHood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_godHoodgodHood_descriptor_;
}

const Sheet_godHoodgodHood& Sheet_godHoodgodHood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godHood_2eproto();
  return *default_instance_;
}

Sheet_godHoodgodHood* Sheet_godHoodgodHood::default_instance_ = NULL;

Sheet_godHoodgodHood* Sheet_godHoodgodHood::New() const {
  return new Sheet_godHoodgodHood;
}

void Sheet_godHoodgodHood::Clear() {
  godhoodgodhood_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_godHoodgodHood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.godHoodgodHood godHoodgodHood_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godHoodgodHood_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_godhoodgodhood_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_godHoodgodHood_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_godHoodgodHood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.godHoodgodHood godHoodgodHood_List = 1;
  for (int i = 0; i < this->godhoodgodhood_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->godhoodgodhood_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_godHoodgodHood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.godHoodgodHood godHoodgodHood_List = 1;
  for (int i = 0; i < this->godhoodgodhood_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->godhoodgodhood_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_godHoodgodHood::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.godHoodgodHood godHoodgodHood_List = 1;
  total_size += 1 * this->godhoodgodhood_list_size();
  for (int i = 0; i < this->godhoodgodhood_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->godhoodgodhood_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_godHoodgodHood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_godHoodgodHood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_godHoodgodHood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_godHoodgodHood::MergeFrom(const Sheet_godHoodgodHood& from) {
  GOOGLE_CHECK_NE(&from, this);
  godhoodgodhood_list_.MergeFrom(from.godhoodgodhood_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_godHoodgodHood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_godHoodgodHood::CopyFrom(const Sheet_godHoodgodHood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_godHoodgodHood::IsInitialized() const {

  return true;
}

void Sheet_godHoodgodHood::Swap(Sheet_godHoodgodHood* other) {
  if (other != this) {
    godhoodgodhood_list_.Swap(&other->godhoodgodhood_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_godHoodgodHood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_godHoodgodHood_descriptor_;
  metadata.reflection = Sheet_godHoodgodHood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int godHoodexp::kLvFieldNumber;
const int godHoodexp::kExpFieldNumber;
#endif  // !_MSC_VER

godHoodexp::godHoodexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void godHoodexp::InitAsDefaultInstance() {
}

godHoodexp::godHoodexp(const godHoodexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void godHoodexp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

godHoodexp::~godHoodexp() {
  SharedDtor();
}

void godHoodexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void godHoodexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* godHoodexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return godHoodexp_descriptor_;
}

const godHoodexp& godHoodexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godHood_2eproto();
  return *default_instance_;
}

godHoodexp* godHoodexp::default_instance_ = NULL;

godHoodexp* godHoodexp::New() const {
  return new godHoodexp;
}

void godHoodexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool godHoodexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void godHoodexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* godHoodexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int godHoodexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void godHoodexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const godHoodexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const godHoodexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void godHoodexp::MergeFrom(const godHoodexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void godHoodexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void godHoodexp::CopyFrom(const godHoodexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool godHoodexp::IsInitialized() const {

  return true;
}

void godHoodexp::Swap(godHoodexp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata godHoodexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = godHoodexp_descriptor_;
  metadata.reflection = godHoodexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_godHoodexp::kGodHoodexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_godHoodexp::Sheet_godHoodexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_godHoodexp::InitAsDefaultInstance() {
}

Sheet_godHoodexp::Sheet_godHoodexp(const Sheet_godHoodexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_godHoodexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_godHoodexp::~Sheet_godHoodexp() {
  SharedDtor();
}

void Sheet_godHoodexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_godHoodexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_godHoodexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_godHoodexp_descriptor_;
}

const Sheet_godHoodexp& Sheet_godHoodexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godHood_2eproto();
  return *default_instance_;
}

Sheet_godHoodexp* Sheet_godHoodexp::default_instance_ = NULL;

Sheet_godHoodexp* Sheet_godHoodexp::New() const {
  return new Sheet_godHoodexp;
}

void Sheet_godHoodexp::Clear() {
  godhoodexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_godHoodexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.godHoodexp godHoodexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godHoodexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_godhoodexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_godHoodexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_godHoodexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.godHoodexp godHoodexp_List = 1;
  for (int i = 0; i < this->godhoodexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->godhoodexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_godHoodexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.godHoodexp godHoodexp_List = 1;
  for (int i = 0; i < this->godhoodexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->godhoodexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_godHoodexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.godHoodexp godHoodexp_List = 1;
  total_size += 1 * this->godhoodexp_list_size();
  for (int i = 0; i < this->godhoodexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->godhoodexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_godHoodexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_godHoodexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_godHoodexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_godHoodexp::MergeFrom(const Sheet_godHoodexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  godhoodexp_list_.MergeFrom(from.godhoodexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_godHoodexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_godHoodexp::CopyFrom(const Sheet_godHoodexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_godHoodexp::IsInitialized() const {

  return true;
}

void Sheet_godHoodexp::Swap(Sheet_godHoodexp* other) {
  if (other != this) {
    godhoodexp_list_.Swap(&other->godhoodexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_godHoodexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_godHoodexp_descriptor_;
  metadata.reflection = Sheet_godHoodexp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
