// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Turn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Turn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NotifyTurn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyTurn_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyTurnGrow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyTurnGrow_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyTurnSimple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyTurnSimple_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyTurnHelper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyTurnHelper_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyTurnTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyTurnTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnRecvTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnRecvTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnRecvTaskRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnRecvTaskRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnLvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnLvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnLvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnLvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnHelperReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnHelperReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnHelperRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnHelperRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyTurnNewHelper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyTurnNewHelper_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnChgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnChgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnChgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnChgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnEquipDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnEquipDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnEquipDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnEquipDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnStrongReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnStrongReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnStrongRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnStrongRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnEvolveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnEvolveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnEvolveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnEvolveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnAwakenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnAwakenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnAwakenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnAwakenRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnComposeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnComposeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnComposeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnComposeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnStarReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnStarReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnStarRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnStarRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnStrongActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnStrongActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnStrongActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnStrongActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnStarActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnStarActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnStarActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnStarActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCTurnHelperReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCTurnHelperReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLNotifyTurnHelper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLNotifyTurnHelper_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCTurnHelperRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCTurnHelperRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Turn_2eproto() {
  protobuf_AddDesc_Turn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Turn.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyTurn_descriptor_ = file->message_type(0);
  static const int NotifyTurn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurn, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurn, entrys_),
  };
  NotifyTurn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyTurn_descriptor_,
      NotifyTurn::default_instance_,
      NotifyTurn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyTurn));
  NotifyTurnGrow_descriptor_ = file->message_type(1);
  static const int NotifyTurnGrow_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnGrow, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnGrow, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnGrow, grow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnGrow, strong_ids_),
  };
  NotifyTurnGrow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyTurnGrow_descriptor_,
      NotifyTurnGrow::default_instance_,
      NotifyTurnGrow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnGrow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnGrow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyTurnGrow));
  NotifyTurnSimple_descriptor_ = file->message_type(2);
  static const int NotifyTurnSimple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnSimple, simple_),
  };
  NotifyTurnSimple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyTurnSimple_descriptor_,
      NotifyTurnSimple::default_instance_,
      NotifyTurnSimple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnSimple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnSimple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyTurnSimple));
  NotifyTurnHelper_descriptor_ = file->message_type(3);
  static const int NotifyTurnHelper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnHelper, infos_),
  };
  NotifyTurnHelper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyTurnHelper_descriptor_,
      NotifyTurnHelper::default_instance_,
      NotifyTurnHelper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnHelper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnHelper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyTurnHelper));
  NotifyTurnTask_descriptor_ = file->message_type(4);
  static const int NotifyTurnTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnTask, tasks_),
  };
  NotifyTurnTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyTurnTask_descriptor_,
      NotifyTurnTask::default_instance_,
      NotifyTurnTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyTurnTask));
  TurnRecvTaskReq_descriptor_ = file->message_type(5);
  static const int TurnRecvTaskReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnRecvTaskReq, id_),
  };
  TurnRecvTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnRecvTaskReq_descriptor_,
      TurnRecvTaskReq::default_instance_,
      TurnRecvTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnRecvTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnRecvTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnRecvTaskReq));
  TurnRecvTaskRsp_descriptor_ = file->message_type(6);
  static const int TurnRecvTaskRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnRecvTaskRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnRecvTaskRsp, id_),
  };
  TurnRecvTaskRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnRecvTaskRsp_descriptor_,
      TurnRecvTaskRsp::default_instance_,
      TurnRecvTaskRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnRecvTaskRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnRecvTaskRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnRecvTaskRsp));
  TurnLvReq_descriptor_ = file->message_type(7);
  static const int TurnLvReq_offsets_[1] = {
  };
  TurnLvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnLvReq_descriptor_,
      TurnLvReq::default_instance_,
      TurnLvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnLvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnLvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnLvReq));
  TurnLvRsp_descriptor_ = file->message_type(8);
  static const int TurnLvRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnLvRsp, ret_),
  };
  TurnLvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnLvRsp_descriptor_,
      TurnLvRsp::default_instance_,
      TurnLvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnLvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnLvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnLvRsp));
  TurnHelperReq_descriptor_ = file->message_type(9);
  static const int TurnHelperReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnHelperReq, cid_),
  };
  TurnHelperReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnHelperReq_descriptor_,
      TurnHelperReq::default_instance_,
      TurnHelperReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnHelperReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnHelperReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnHelperReq));
  TurnHelperRsp_descriptor_ = file->message_type(10);
  static const int TurnHelperRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnHelperRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnHelperRsp, cid_),
  };
  TurnHelperRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnHelperRsp_descriptor_,
      TurnHelperRsp::default_instance_,
      TurnHelperRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnHelperRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnHelperRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnHelperRsp));
  NotifyTurnNewHelper_descriptor_ = file->message_type(11);
  static const int NotifyTurnNewHelper_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnNewHelper, helper_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnNewHelper, helper_name_),
  };
  NotifyTurnNewHelper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyTurnNewHelper_descriptor_,
      NotifyTurnNewHelper::default_instance_,
      NotifyTurnNewHelper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnNewHelper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTurnNewHelper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyTurnNewHelper));
  TurnChgReq_descriptor_ = file->message_type(12);
  static const int TurnChgReq_offsets_[1] = {
  };
  TurnChgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnChgReq_descriptor_,
      TurnChgReq::default_instance_,
      TurnChgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnChgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnChgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnChgReq));
  TurnChgRsp_descriptor_ = file->message_type(13);
  static const int TurnChgRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnChgRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnChgRsp, code_),
  };
  TurnChgRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnChgRsp_descriptor_,
      TurnChgRsp::default_instance_,
      TurnChgRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnChgRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnChgRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnChgRsp));
  TurnEquipDressReq_descriptor_ = file->message_type(14);
  static const int TurnEquipDressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEquipDressReq, bag_pos_),
  };
  TurnEquipDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnEquipDressReq_descriptor_,
      TurnEquipDressReq::default_instance_,
      TurnEquipDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEquipDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEquipDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnEquipDressReq));
  TurnEquipDressRsp_descriptor_ = file->message_type(15);
  static const int TurnEquipDressRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEquipDressRsp, bag_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEquipDressRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEquipDressRsp, trans_),
  };
  TurnEquipDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnEquipDressRsp_descriptor_,
      TurnEquipDressRsp::default_instance_,
      TurnEquipDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEquipDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEquipDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnEquipDressRsp));
  TurnStrongReq_descriptor_ = file->message_type(16);
  static const int TurnStrongReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongReq, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongReq, pos_),
  };
  TurnStrongReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnStrongReq_descriptor_,
      TurnStrongReq::default_instance_,
      TurnStrongReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnStrongReq));
  TurnStrongRsp_descriptor_ = file->message_type(17);
  static const int TurnStrongRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongRsp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongRsp, pos_),
  };
  TurnStrongRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnStrongRsp_descriptor_,
      TurnStrongRsp::default_instance_,
      TurnStrongRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnStrongRsp));
  TurnEvolveReq_descriptor_ = file->message_type(18);
  static const int TurnEvolveReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEvolveReq, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEvolveReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEvolveReq, cost_bag_pos_),
  };
  TurnEvolveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnEvolveReq_descriptor_,
      TurnEvolveReq::default_instance_,
      TurnEvolveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEvolveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEvolveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnEvolveReq));
  TurnEvolveRsp_descriptor_ = file->message_type(19);
  static const int TurnEvolveRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEvolveRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEvolveRsp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEvolveRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEvolveRsp, cost_bag_pos_),
  };
  TurnEvolveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnEvolveRsp_descriptor_,
      TurnEvolveRsp::default_instance_,
      TurnEvolveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEvolveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnEvolveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnEvolveRsp));
  TurnAwakenReq_descriptor_ = file->message_type(20);
  static const int TurnAwakenReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnAwakenReq, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnAwakenReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnAwakenReq, cost_bag_pos_),
  };
  TurnAwakenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnAwakenReq_descriptor_,
      TurnAwakenReq::default_instance_,
      TurnAwakenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnAwakenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnAwakenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnAwakenReq));
  TurnAwakenRsp_descriptor_ = file->message_type(21);
  static const int TurnAwakenRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnAwakenRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnAwakenRsp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnAwakenRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnAwakenRsp, cost_bag_pos_),
  };
  TurnAwakenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnAwakenRsp_descriptor_,
      TurnAwakenRsp::default_instance_,
      TurnAwakenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnAwakenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnAwakenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnAwakenRsp));
  TurnComposeReq_descriptor_ = file->message_type(22);
  static const int TurnComposeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnComposeReq, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnComposeReq, pos_),
  };
  TurnComposeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnComposeReq_descriptor_,
      TurnComposeReq::default_instance_,
      TurnComposeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnComposeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnComposeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnComposeReq));
  TurnComposeRsp_descriptor_ = file->message_type(23);
  static const int TurnComposeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnComposeRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnComposeRsp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnComposeRsp, pos_),
  };
  TurnComposeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnComposeRsp_descriptor_,
      TurnComposeRsp::default_instance_,
      TurnComposeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnComposeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnComposeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnComposeRsp));
  TurnStarReq_descriptor_ = file->message_type(24);
  static const int TurnStarReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarReq, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarReq, pos_),
  };
  TurnStarReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnStarReq_descriptor_,
      TurnStarReq::default_instance_,
      TurnStarReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnStarReq));
  TurnStarRsp_descriptor_ = file->message_type(25);
  static const int TurnStarRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarRsp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarRsp, pos_),
  };
  TurnStarRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnStarRsp_descriptor_,
      TurnStarRsp::default_instance_,
      TurnStarRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnStarRsp));
  TurnStrongActiveReq_descriptor_ = file->message_type(26);
  static const int TurnStrongActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongActiveReq, id_),
  };
  TurnStrongActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnStrongActiveReq_descriptor_,
      TurnStrongActiveReq::default_instance_,
      TurnStrongActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnStrongActiveReq));
  TurnStrongActiveRsp_descriptor_ = file->message_type(27);
  static const int TurnStrongActiveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongActiveRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongActiveRsp, id_),
  };
  TurnStrongActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnStrongActiveRsp_descriptor_,
      TurnStrongActiveRsp::default_instance_,
      TurnStrongActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStrongActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnStrongActiveRsp));
  TurnStarActiveReq_descriptor_ = file->message_type(28);
  static const int TurnStarActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarActiveReq, id_),
  };
  TurnStarActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnStarActiveReq_descriptor_,
      TurnStarActiveReq::default_instance_,
      TurnStarActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnStarActiveReq));
  TurnStarActiveRsp_descriptor_ = file->message_type(29);
  static const int TurnStarActiveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarActiveRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarActiveRsp, id_),
  };
  TurnStarActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnStarActiveRsp_descriptor_,
      TurnStarActiveRsp::default_instance_,
      TurnStarActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnStarActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnStarActiveRsp));
  LCTurnHelperReq_descriptor_ = file->message_type(30);
  static const int LCTurnHelperReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCTurnHelperReq, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCTurnHelperReq, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCTurnHelperReq, dst_),
  };
  LCTurnHelperReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCTurnHelperReq_descriptor_,
      LCTurnHelperReq::default_instance_,
      LCTurnHelperReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCTurnHelperReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCTurnHelperReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCTurnHelperReq));
  CLNotifyTurnHelper_descriptor_ = file->message_type(31);
  static const int CLNotifyTurnHelper_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLNotifyTurnHelper, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLNotifyTurnHelper, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLNotifyTurnHelper, dst_),
  };
  CLNotifyTurnHelper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLNotifyTurnHelper_descriptor_,
      CLNotifyTurnHelper::default_instance_,
      CLNotifyTurnHelper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLNotifyTurnHelper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLNotifyTurnHelper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLNotifyTurnHelper));
  LCTurnHelperRsp_descriptor_ = file->message_type(32);
  static const int LCTurnHelperRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCTurnHelperRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCTurnHelperRsp, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCTurnHelperRsp, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCTurnHelperRsp, dst_),
  };
  LCTurnHelperRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCTurnHelperRsp_descriptor_,
      LCTurnHelperRsp::default_instance_,
      LCTurnHelperRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCTurnHelperRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCTurnHelperRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCTurnHelperRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Turn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyTurn_descriptor_, &NotifyTurn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyTurnGrow_descriptor_, &NotifyTurnGrow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyTurnSimple_descriptor_, &NotifyTurnSimple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyTurnHelper_descriptor_, &NotifyTurnHelper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyTurnTask_descriptor_, &NotifyTurnTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnRecvTaskReq_descriptor_, &TurnRecvTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnRecvTaskRsp_descriptor_, &TurnRecvTaskRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnLvReq_descriptor_, &TurnLvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnLvRsp_descriptor_, &TurnLvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnHelperReq_descriptor_, &TurnHelperReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnHelperRsp_descriptor_, &TurnHelperRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyTurnNewHelper_descriptor_, &NotifyTurnNewHelper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnChgReq_descriptor_, &TurnChgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnChgRsp_descriptor_, &TurnChgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnEquipDressReq_descriptor_, &TurnEquipDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnEquipDressRsp_descriptor_, &TurnEquipDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnStrongReq_descriptor_, &TurnStrongReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnStrongRsp_descriptor_, &TurnStrongRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnEvolveReq_descriptor_, &TurnEvolveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnEvolveRsp_descriptor_, &TurnEvolveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnAwakenReq_descriptor_, &TurnAwakenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnAwakenRsp_descriptor_, &TurnAwakenRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnComposeReq_descriptor_, &TurnComposeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnComposeRsp_descriptor_, &TurnComposeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnStarReq_descriptor_, &TurnStarReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnStarRsp_descriptor_, &TurnStarRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnStrongActiveReq_descriptor_, &TurnStrongActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnStrongActiveRsp_descriptor_, &TurnStrongActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnStarActiveReq_descriptor_, &TurnStarActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnStarActiveRsp_descriptor_, &TurnStarActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCTurnHelperReq_descriptor_, &LCTurnHelperReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLNotifyTurnHelper_descriptor_, &CLNotifyTurnHelper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCTurnHelperRsp_descriptor_, &LCTurnHelperRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Turn_2eproto() {
  delete NotifyTurn::default_instance_;
  delete NotifyTurn_reflection_;
  delete NotifyTurnGrow::default_instance_;
  delete NotifyTurnGrow_reflection_;
  delete NotifyTurnSimple::default_instance_;
  delete NotifyTurnSimple_reflection_;
  delete NotifyTurnHelper::default_instance_;
  delete NotifyTurnHelper_reflection_;
  delete NotifyTurnTask::default_instance_;
  delete NotifyTurnTask_reflection_;
  delete TurnRecvTaskReq::default_instance_;
  delete TurnRecvTaskReq_reflection_;
  delete TurnRecvTaskRsp::default_instance_;
  delete TurnRecvTaskRsp_reflection_;
  delete TurnLvReq::default_instance_;
  delete TurnLvReq_reflection_;
  delete TurnLvRsp::default_instance_;
  delete TurnLvRsp_reflection_;
  delete TurnHelperReq::default_instance_;
  delete TurnHelperReq_reflection_;
  delete TurnHelperRsp::default_instance_;
  delete TurnHelperRsp_reflection_;
  delete NotifyTurnNewHelper::default_instance_;
  delete NotifyTurnNewHelper_reflection_;
  delete TurnChgReq::default_instance_;
  delete TurnChgReq_reflection_;
  delete TurnChgRsp::default_instance_;
  delete TurnChgRsp_reflection_;
  delete TurnEquipDressReq::default_instance_;
  delete TurnEquipDressReq_reflection_;
  delete TurnEquipDressRsp::default_instance_;
  delete TurnEquipDressRsp_reflection_;
  delete TurnStrongReq::default_instance_;
  delete TurnStrongReq_reflection_;
  delete TurnStrongRsp::default_instance_;
  delete TurnStrongRsp_reflection_;
  delete TurnEvolveReq::default_instance_;
  delete TurnEvolveReq_reflection_;
  delete TurnEvolveRsp::default_instance_;
  delete TurnEvolveRsp_reflection_;
  delete TurnAwakenReq::default_instance_;
  delete TurnAwakenReq_reflection_;
  delete TurnAwakenRsp::default_instance_;
  delete TurnAwakenRsp_reflection_;
  delete TurnComposeReq::default_instance_;
  delete TurnComposeReq_reflection_;
  delete TurnComposeRsp::default_instance_;
  delete TurnComposeRsp_reflection_;
  delete TurnStarReq::default_instance_;
  delete TurnStarReq_reflection_;
  delete TurnStarRsp::default_instance_;
  delete TurnStarRsp_reflection_;
  delete TurnStrongActiveReq::default_instance_;
  delete TurnStrongActiveReq_reflection_;
  delete TurnStrongActiveRsp::default_instance_;
  delete TurnStrongActiveRsp_reflection_;
  delete TurnStarActiveReq::default_instance_;
  delete TurnStarActiveReq_reflection_;
  delete TurnStarActiveRsp::default_instance_;
  delete TurnStarActiveRsp_reflection_;
  delete LCTurnHelperReq::default_instance_;
  delete LCTurnHelperReq_reflection_;
  delete CLNotifyTurnHelper::default_instance_;
  delete CLNotifyTurnHelper_reflection_;
  delete LCTurnHelperRsp::default_instance_;
  delete LCTurnHelperRsp_reflection_;
}

void protobuf_AddDesc_Turn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nTurn.proto\022\010proto_ff\032\tCom.proto\032\017ComDe"
    "fine.proto\"\?\n\nNotifyTurn\022\014\n\004type\030\001 \001(\005\022#"
    "\n\006entrys\030\002 \003(\0132\023.proto_ff.TurnEntry\"`\n\016N"
    "otifyTurnGrow\022\014\n\004type\030\001 \001(\005\022\n\n\002lv\030\002 \001(\005\022"
    " \n\004grow\030\003 \001(\0132\022.proto_ff.TurnGrow\022\022\n\nstr"
    "ong_ids\030\004 \003(\005\"8\n\020NotifyTurnSimple\022$\n\006sim"
    "ple\030\001 \001(\0132\024.proto_ff.TurnSimple\"7\n\020Notif"
    "yTurnHelper\022#\n\005infos\030\001 \003(\0132\024.proto_ff.Tu"
    "rnHelper\"3\n\016NotifyTurnTask\022!\n\005tasks\030\001 \003("
    "\0132\022.proto_ff.TurnTask\"\035\n\017TurnRecvTaskReq"
    "\022\n\n\002id\030\001 \001(\005\"*\n\017TurnRecvTaskRsp\022\013\n\003ret\030\001"
    " \001(\005\022\n\n\002id\030\002 \001(\005\"\013\n\tTurnLvReq\"\030\n\tTurnLvR"
    "sp\022\013\n\003ret\030\001 \001(\005\"\034\n\rTurnHelperReq\022\013\n\003cid\030"
    "\001 \001(\004\")\n\rTurnHelperRsp\022\013\n\003ret\030\001 \001(\005\022\013\n\003c"
    "id\030\002 \001(\004\">\n\023NotifyTurnNewHelper\022\022\n\nhelpe"
    "r_cid\030\001 \001(\004\022\023\n\013helper_name\030\002 \001(\014\"\014\n\nTurn"
    "ChgReq\"\'\n\nTurnChgRsp\022\013\n\003ret\030\001 \001(\005\022\014\n\004cod"
    "e\030\002 \001(\005\"$\n\021TurnEquipDressReq\022\017\n\007bag_pos\030"
    "\001 \001(\005\"@\n\021TurnEquipDressRsp\022\017\n\007bag_pos\030\001 "
    "\001(\005\022\013\n\003ret\030\002 \001(\005\022\r\n\005trans\030\003 \001(\005\"(\n\rTurnS"
    "trongReq\022\n\n\002lv\030\001 \001(\005\022\013\n\003pos\030\002 \001(\005\"5\n\rTur"
    "nStrongRsp\022\013\n\003ret\030\001 \001(\005\022\n\n\002lv\030\002 \001(\005\022\013\n\003p"
    "os\030\003 \001(\005\">\n\rTurnEvolveReq\022\n\n\002lv\030\001 \001(\005\022\013\n"
    "\003pos\030\002 \001(\005\022\024\n\014cost_bag_pos\030\003 \003(\005\"K\n\rTurn"
    "EvolveRsp\022\013\n\003ret\030\001 \001(\005\022\n\n\002lv\030\002 \001(\005\022\013\n\003po"
    "s\030\003 \001(\005\022\024\n\014cost_bag_pos\030\004 \003(\005\">\n\rTurnAwa"
    "kenReq\022\n\n\002lv\030\001 \001(\005\022\013\n\003pos\030\002 \001(\005\022\024\n\014cost_"
    "bag_pos\030\003 \003(\005\"K\n\rTurnAwakenRsp\022\013\n\003ret\030\001 "
    "\001(\005\022\n\n\002lv\030\002 \001(\005\022\013\n\003pos\030\003 \001(\005\022\024\n\014cost_bag"
    "_pos\030\004 \003(\005\")\n\016TurnComposeReq\022\n\n\002lv\030\001 \001(\005"
    "\022\013\n\003pos\030\002 \001(\005\"6\n\016TurnComposeRsp\022\013\n\003ret\030\001"
    " \001(\005\022\n\n\002lv\030\002 \001(\005\022\013\n\003pos\030\003 \001(\005\"&\n\013TurnSta"
    "rReq\022\n\n\002lv\030\001 \001(\005\022\013\n\003pos\030\002 \001(\005\"3\n\013TurnSta"
    "rRsp\022\013\n\003ret\030\001 \001(\005\022\n\n\002lv\030\002 \001(\005\022\013\n\003pos\030\003 \001"
    "(\005\"!\n\023TurnStrongActiveReq\022\n\n\002id\030\001 \001(\005\".\n"
    "\023TurnStrongActiveRsp\022\013\n\003ret\030\001 \001(\005\022\n\n\002id\030"
    "\002 \001(\005\"\037\n\021TurnStarActiveReq\022\n\n\002id\030\001 \001(\005\","
    "\n\021TurnStarActiveRsp\022\013\n\003ret\030\001 \001(\005\022\n\n\002id\030\002"
    " \001(\005\"=\n\017LCTurnHelperReq\022\013\n\003src\030\001 \001(\004\022\020\n\010"
    "src_name\030\002 \001(\014\022\013\n\003dst\030\003 \001(\004\"@\n\022CLNotifyT"
    "urnHelper\022\013\n\003src\030\001 \001(\004\022\020\n\010src_name\030\002 \001(\014"
    "\022\013\n\003dst\030\003 \001(\004\"J\n\017LCTurnHelperRsp\022\013\n\003ret\030"
    "\001 \001(\005\022\013\n\003src\030\002 \001(\004\022\020\n\010src_name\030\003 \001(\014\022\013\n\003"
    "dst\030\004 \001(\004", 1729);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Turn.proto", &protobuf_RegisterTypes);
  NotifyTurn::default_instance_ = new NotifyTurn();
  NotifyTurnGrow::default_instance_ = new NotifyTurnGrow();
  NotifyTurnSimple::default_instance_ = new NotifyTurnSimple();
  NotifyTurnHelper::default_instance_ = new NotifyTurnHelper();
  NotifyTurnTask::default_instance_ = new NotifyTurnTask();
  TurnRecvTaskReq::default_instance_ = new TurnRecvTaskReq();
  TurnRecvTaskRsp::default_instance_ = new TurnRecvTaskRsp();
  TurnLvReq::default_instance_ = new TurnLvReq();
  TurnLvRsp::default_instance_ = new TurnLvRsp();
  TurnHelperReq::default_instance_ = new TurnHelperReq();
  TurnHelperRsp::default_instance_ = new TurnHelperRsp();
  NotifyTurnNewHelper::default_instance_ = new NotifyTurnNewHelper();
  TurnChgReq::default_instance_ = new TurnChgReq();
  TurnChgRsp::default_instance_ = new TurnChgRsp();
  TurnEquipDressReq::default_instance_ = new TurnEquipDressReq();
  TurnEquipDressRsp::default_instance_ = new TurnEquipDressRsp();
  TurnStrongReq::default_instance_ = new TurnStrongReq();
  TurnStrongRsp::default_instance_ = new TurnStrongRsp();
  TurnEvolveReq::default_instance_ = new TurnEvolveReq();
  TurnEvolveRsp::default_instance_ = new TurnEvolveRsp();
  TurnAwakenReq::default_instance_ = new TurnAwakenReq();
  TurnAwakenRsp::default_instance_ = new TurnAwakenRsp();
  TurnComposeReq::default_instance_ = new TurnComposeReq();
  TurnComposeRsp::default_instance_ = new TurnComposeRsp();
  TurnStarReq::default_instance_ = new TurnStarReq();
  TurnStarRsp::default_instance_ = new TurnStarRsp();
  TurnStrongActiveReq::default_instance_ = new TurnStrongActiveReq();
  TurnStrongActiveRsp::default_instance_ = new TurnStrongActiveRsp();
  TurnStarActiveReq::default_instance_ = new TurnStarActiveReq();
  TurnStarActiveRsp::default_instance_ = new TurnStarActiveRsp();
  LCTurnHelperReq::default_instance_ = new LCTurnHelperReq();
  CLNotifyTurnHelper::default_instance_ = new CLNotifyTurnHelper();
  LCTurnHelperRsp::default_instance_ = new LCTurnHelperRsp();
  NotifyTurn::default_instance_->InitAsDefaultInstance();
  NotifyTurnGrow::default_instance_->InitAsDefaultInstance();
  NotifyTurnSimple::default_instance_->InitAsDefaultInstance();
  NotifyTurnHelper::default_instance_->InitAsDefaultInstance();
  NotifyTurnTask::default_instance_->InitAsDefaultInstance();
  TurnRecvTaskReq::default_instance_->InitAsDefaultInstance();
  TurnRecvTaskRsp::default_instance_->InitAsDefaultInstance();
  TurnLvReq::default_instance_->InitAsDefaultInstance();
  TurnLvRsp::default_instance_->InitAsDefaultInstance();
  TurnHelperReq::default_instance_->InitAsDefaultInstance();
  TurnHelperRsp::default_instance_->InitAsDefaultInstance();
  NotifyTurnNewHelper::default_instance_->InitAsDefaultInstance();
  TurnChgReq::default_instance_->InitAsDefaultInstance();
  TurnChgRsp::default_instance_->InitAsDefaultInstance();
  TurnEquipDressReq::default_instance_->InitAsDefaultInstance();
  TurnEquipDressRsp::default_instance_->InitAsDefaultInstance();
  TurnStrongReq::default_instance_->InitAsDefaultInstance();
  TurnStrongRsp::default_instance_->InitAsDefaultInstance();
  TurnEvolveReq::default_instance_->InitAsDefaultInstance();
  TurnEvolveRsp::default_instance_->InitAsDefaultInstance();
  TurnAwakenReq::default_instance_->InitAsDefaultInstance();
  TurnAwakenRsp::default_instance_->InitAsDefaultInstance();
  TurnComposeReq::default_instance_->InitAsDefaultInstance();
  TurnComposeRsp::default_instance_->InitAsDefaultInstance();
  TurnStarReq::default_instance_->InitAsDefaultInstance();
  TurnStarRsp::default_instance_->InitAsDefaultInstance();
  TurnStrongActiveReq::default_instance_->InitAsDefaultInstance();
  TurnStrongActiveRsp::default_instance_->InitAsDefaultInstance();
  TurnStarActiveReq::default_instance_->InitAsDefaultInstance();
  TurnStarActiveRsp::default_instance_->InitAsDefaultInstance();
  LCTurnHelperReq::default_instance_->InitAsDefaultInstance();
  CLNotifyTurnHelper::default_instance_->InitAsDefaultInstance();
  LCTurnHelperRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Turn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Turn_2eproto {
  StaticDescriptorInitializer_Turn_2eproto() {
    protobuf_AddDesc_Turn_2eproto();
  }
} static_descriptor_initializer_Turn_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifyTurn::kTypeFieldNumber;
const int NotifyTurn::kEntrysFieldNumber;
#endif  // !_MSC_VER

NotifyTurn::NotifyTurn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyTurn::InitAsDefaultInstance() {
}

NotifyTurn::NotifyTurn(const NotifyTurn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyTurn::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyTurn::~NotifyTurn() {
  SharedDtor();
}

void NotifyTurn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyTurn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyTurn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyTurn_descriptor_;
}

const NotifyTurn& NotifyTurn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

NotifyTurn* NotifyTurn::default_instance_ = NULL;

NotifyTurn* NotifyTurn::New() const {
  return new NotifyTurn;
}

void NotifyTurn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.TurnEntry entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.TurnEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyTurn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.TurnEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyTurn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.TurnEntry entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyTurn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyTurn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyTurn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyTurn::MergeFrom(const NotifyTurn& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyTurn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyTurn::CopyFrom(const NotifyTurn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTurn::IsInitialized() const {

  for (int i = 0; i < entrys_size(); i++) {
    if (!this->entrys(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyTurn::Swap(NotifyTurn* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    entrys_.Swap(&other->entrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyTurn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyTurn_descriptor_;
  metadata.reflection = NotifyTurn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyTurnGrow::kTypeFieldNumber;
const int NotifyTurnGrow::kLvFieldNumber;
const int NotifyTurnGrow::kGrowFieldNumber;
const int NotifyTurnGrow::kStrongIdsFieldNumber;
#endif  // !_MSC_VER

NotifyTurnGrow::NotifyTurnGrow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyTurnGrow::InitAsDefaultInstance() {
  grow_ = const_cast< ::proto_ff::TurnGrow*>(&::proto_ff::TurnGrow::default_instance());
}

NotifyTurnGrow::NotifyTurnGrow(const NotifyTurnGrow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyTurnGrow::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  lv_ = 0;
  grow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyTurnGrow::~NotifyTurnGrow() {
  SharedDtor();
}

void NotifyTurnGrow::SharedDtor() {
  if (this != default_instance_) {
    delete grow_;
  }
}

void NotifyTurnGrow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyTurnGrow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyTurnGrow_descriptor_;
}

const NotifyTurnGrow& NotifyTurnGrow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

NotifyTurnGrow* NotifyTurnGrow::default_instance_ = NULL;

NotifyTurnGrow* NotifyTurnGrow::New() const {
  return new NotifyTurnGrow;
}

void NotifyTurnGrow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    lv_ = 0;
    if (has_grow()) {
      if (grow_ != NULL) grow_->::proto_ff::TurnGrow::Clear();
    }
  }
  strong_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyTurnGrow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_grow;
        break;
      }

      // optional .proto_ff.TurnGrow grow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_strong_ids;
        break;
      }

      // repeated int32 strong_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strong_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_strong_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_strong_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_strong_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyTurnGrow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional .proto_ff.TurnGrow grow = 3;
  if (has_grow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->grow(), output);
  }

  // repeated int32 strong_ids = 4;
  for (int i = 0; i < this->strong_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->strong_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyTurnGrow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional .proto_ff.TurnGrow grow = 3;
  if (has_grow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->grow(), target);
  }

  // repeated int32 strong_ids = 4;
  for (int i = 0; i < this->strong_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->strong_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyTurnGrow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional .proto_ff.TurnGrow grow = 3;
    if (has_grow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grow());
    }

  }
  // repeated int32 strong_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->strong_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->strong_ids(i));
    }
    total_size += 1 * this->strong_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyTurnGrow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyTurnGrow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyTurnGrow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyTurnGrow::MergeFrom(const NotifyTurnGrow& from) {
  GOOGLE_CHECK_NE(&from, this);
  strong_ids_.MergeFrom(from.strong_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_grow()) {
      mutable_grow()->::proto_ff::TurnGrow::MergeFrom(from.grow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyTurnGrow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyTurnGrow::CopyFrom(const NotifyTurnGrow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTurnGrow::IsInitialized() const {

  if (has_grow()) {
    if (!this->grow().IsInitialized()) return false;
  }
  return true;
}

void NotifyTurnGrow::Swap(NotifyTurnGrow* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(lv_, other->lv_);
    std::swap(grow_, other->grow_);
    strong_ids_.Swap(&other->strong_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyTurnGrow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyTurnGrow_descriptor_;
  metadata.reflection = NotifyTurnGrow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyTurnSimple::kSimpleFieldNumber;
#endif  // !_MSC_VER

NotifyTurnSimple::NotifyTurnSimple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyTurnSimple::InitAsDefaultInstance() {
  simple_ = const_cast< ::proto_ff::TurnSimple*>(&::proto_ff::TurnSimple::default_instance());
}

NotifyTurnSimple::NotifyTurnSimple(const NotifyTurnSimple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyTurnSimple::SharedCtor() {
  _cached_size_ = 0;
  simple_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyTurnSimple::~NotifyTurnSimple() {
  SharedDtor();
}

void NotifyTurnSimple::SharedDtor() {
  if (this != default_instance_) {
    delete simple_;
  }
}

void NotifyTurnSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyTurnSimple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyTurnSimple_descriptor_;
}

const NotifyTurnSimple& NotifyTurnSimple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

NotifyTurnSimple* NotifyTurnSimple::default_instance_ = NULL;

NotifyTurnSimple* NotifyTurnSimple::New() const {
  return new NotifyTurnSimple;
}

void NotifyTurnSimple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_simple()) {
      if (simple_ != NULL) simple_->::proto_ff::TurnSimple::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyTurnSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.TurnSimple simple = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyTurnSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.TurnSimple simple = 1;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->simple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyTurnSimple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.TurnSimple simple = 1;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->simple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyTurnSimple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.TurnSimple simple = 1;
    if (has_simple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyTurnSimple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyTurnSimple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyTurnSimple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyTurnSimple::MergeFrom(const NotifyTurnSimple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simple()) {
      mutable_simple()->::proto_ff::TurnSimple::MergeFrom(from.simple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyTurnSimple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyTurnSimple::CopyFrom(const NotifyTurnSimple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTurnSimple::IsInitialized() const {

  return true;
}

void NotifyTurnSimple::Swap(NotifyTurnSimple* other) {
  if (other != this) {
    std::swap(simple_, other->simple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyTurnSimple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyTurnSimple_descriptor_;
  metadata.reflection = NotifyTurnSimple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyTurnHelper::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyTurnHelper::NotifyTurnHelper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyTurnHelper::InitAsDefaultInstance() {
}

NotifyTurnHelper::NotifyTurnHelper(const NotifyTurnHelper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyTurnHelper::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyTurnHelper::~NotifyTurnHelper() {
  SharedDtor();
}

void NotifyTurnHelper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyTurnHelper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyTurnHelper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyTurnHelper_descriptor_;
}

const NotifyTurnHelper& NotifyTurnHelper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

NotifyTurnHelper* NotifyTurnHelper::default_instance_ = NULL;

NotifyTurnHelper* NotifyTurnHelper::New() const {
  return new NotifyTurnHelper;
}

void NotifyTurnHelper::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyTurnHelper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.TurnHelper infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyTurnHelper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.TurnHelper infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyTurnHelper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.TurnHelper infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyTurnHelper::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.TurnHelper infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyTurnHelper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyTurnHelper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyTurnHelper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyTurnHelper::MergeFrom(const NotifyTurnHelper& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyTurnHelper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyTurnHelper::CopyFrom(const NotifyTurnHelper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTurnHelper::IsInitialized() const {

  return true;
}

void NotifyTurnHelper::Swap(NotifyTurnHelper* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyTurnHelper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyTurnHelper_descriptor_;
  metadata.reflection = NotifyTurnHelper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyTurnTask::kTasksFieldNumber;
#endif  // !_MSC_VER

NotifyTurnTask::NotifyTurnTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyTurnTask::InitAsDefaultInstance() {
}

NotifyTurnTask::NotifyTurnTask(const NotifyTurnTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyTurnTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyTurnTask::~NotifyTurnTask() {
  SharedDtor();
}

void NotifyTurnTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyTurnTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyTurnTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyTurnTask_descriptor_;
}

const NotifyTurnTask& NotifyTurnTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

NotifyTurnTask* NotifyTurnTask::default_instance_ = NULL;

NotifyTurnTask* NotifyTurnTask::New() const {
  return new NotifyTurnTask;
}

void NotifyTurnTask::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyTurnTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.TurnTask tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyTurnTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.TurnTask tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyTurnTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.TurnTask tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyTurnTask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.TurnTask tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyTurnTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyTurnTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyTurnTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyTurnTask::MergeFrom(const NotifyTurnTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyTurnTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyTurnTask::CopyFrom(const NotifyTurnTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTurnTask::IsInitialized() const {

  return true;
}

void NotifyTurnTask::Swap(NotifyTurnTask* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyTurnTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyTurnTask_descriptor_;
  metadata.reflection = NotifyTurnTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnRecvTaskReq::kIdFieldNumber;
#endif  // !_MSC_VER

TurnRecvTaskReq::TurnRecvTaskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnRecvTaskReq::InitAsDefaultInstance() {
}

TurnRecvTaskReq::TurnRecvTaskReq(const TurnRecvTaskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnRecvTaskReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnRecvTaskReq::~TurnRecvTaskReq() {
  SharedDtor();
}

void TurnRecvTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnRecvTaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnRecvTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnRecvTaskReq_descriptor_;
}

const TurnRecvTaskReq& TurnRecvTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnRecvTaskReq* TurnRecvTaskReq::default_instance_ = NULL;

TurnRecvTaskReq* TurnRecvTaskReq::New() const {
  return new TurnRecvTaskReq;
}

void TurnRecvTaskReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnRecvTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnRecvTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnRecvTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnRecvTaskReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnRecvTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnRecvTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnRecvTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnRecvTaskReq::MergeFrom(const TurnRecvTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnRecvTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnRecvTaskReq::CopyFrom(const TurnRecvTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnRecvTaskReq::IsInitialized() const {

  return true;
}

void TurnRecvTaskReq::Swap(TurnRecvTaskReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnRecvTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnRecvTaskReq_descriptor_;
  metadata.reflection = TurnRecvTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnRecvTaskRsp::kRetFieldNumber;
const int TurnRecvTaskRsp::kIdFieldNumber;
#endif  // !_MSC_VER

TurnRecvTaskRsp::TurnRecvTaskRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnRecvTaskRsp::InitAsDefaultInstance() {
}

TurnRecvTaskRsp::TurnRecvTaskRsp(const TurnRecvTaskRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnRecvTaskRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnRecvTaskRsp::~TurnRecvTaskRsp() {
  SharedDtor();
}

void TurnRecvTaskRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnRecvTaskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnRecvTaskRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnRecvTaskRsp_descriptor_;
}

const TurnRecvTaskRsp& TurnRecvTaskRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnRecvTaskRsp* TurnRecvTaskRsp::default_instance_ = NULL;

TurnRecvTaskRsp* TurnRecvTaskRsp::New() const {
  return new TurnRecvTaskRsp;
}

void TurnRecvTaskRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnRecvTaskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnRecvTaskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnRecvTaskRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnRecvTaskRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnRecvTaskRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnRecvTaskRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnRecvTaskRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnRecvTaskRsp::MergeFrom(const TurnRecvTaskRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnRecvTaskRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnRecvTaskRsp::CopyFrom(const TurnRecvTaskRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnRecvTaskRsp::IsInitialized() const {

  return true;
}

void TurnRecvTaskRsp::Swap(TurnRecvTaskRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnRecvTaskRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnRecvTaskRsp_descriptor_;
  metadata.reflection = TurnRecvTaskRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TurnLvReq::TurnLvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnLvReq::InitAsDefaultInstance() {
}

TurnLvReq::TurnLvReq(const TurnLvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnLvReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnLvReq::~TurnLvReq() {
  SharedDtor();
}

void TurnLvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnLvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnLvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnLvReq_descriptor_;
}

const TurnLvReq& TurnLvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnLvReq* TurnLvReq::default_instance_ = NULL;

TurnLvReq* TurnLvReq::New() const {
  return new TurnLvReq;
}

void TurnLvReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnLvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TurnLvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnLvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnLvReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnLvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnLvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnLvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnLvReq::MergeFrom(const TurnLvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnLvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnLvReq::CopyFrom(const TurnLvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnLvReq::IsInitialized() const {

  return true;
}

void TurnLvReq::Swap(TurnLvReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnLvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnLvReq_descriptor_;
  metadata.reflection = TurnLvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnLvRsp::kRetFieldNumber;
#endif  // !_MSC_VER

TurnLvRsp::TurnLvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnLvRsp::InitAsDefaultInstance() {
}

TurnLvRsp::TurnLvRsp(const TurnLvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnLvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnLvRsp::~TurnLvRsp() {
  SharedDtor();
}

void TurnLvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnLvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnLvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnLvRsp_descriptor_;
}

const TurnLvRsp& TurnLvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnLvRsp* TurnLvRsp::default_instance_ = NULL;

TurnLvRsp* TurnLvRsp::New() const {
  return new TurnLvRsp;
}

void TurnLvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnLvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnLvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnLvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnLvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnLvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnLvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnLvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnLvRsp::MergeFrom(const TurnLvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnLvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnLvRsp::CopyFrom(const TurnLvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnLvRsp::IsInitialized() const {

  return true;
}

void TurnLvRsp::Swap(TurnLvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnLvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnLvRsp_descriptor_;
  metadata.reflection = TurnLvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnHelperReq::kCidFieldNumber;
#endif  // !_MSC_VER

TurnHelperReq::TurnHelperReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnHelperReq::InitAsDefaultInstance() {
}

TurnHelperReq::TurnHelperReq(const TurnHelperReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnHelperReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnHelperReq::~TurnHelperReq() {
  SharedDtor();
}

void TurnHelperReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnHelperReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnHelperReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnHelperReq_descriptor_;
}

const TurnHelperReq& TurnHelperReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnHelperReq* TurnHelperReq::default_instance_ = NULL;

TurnHelperReq* TurnHelperReq::New() const {
  return new TurnHelperReq;
}

void TurnHelperReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnHelperReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnHelperReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnHelperReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnHelperReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnHelperReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnHelperReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnHelperReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnHelperReq::MergeFrom(const TurnHelperReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnHelperReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnHelperReq::CopyFrom(const TurnHelperReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnHelperReq::IsInitialized() const {

  return true;
}

void TurnHelperReq::Swap(TurnHelperReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnHelperReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnHelperReq_descriptor_;
  metadata.reflection = TurnHelperReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnHelperRsp::kRetFieldNumber;
const int TurnHelperRsp::kCidFieldNumber;
#endif  // !_MSC_VER

TurnHelperRsp::TurnHelperRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnHelperRsp::InitAsDefaultInstance() {
}

TurnHelperRsp::TurnHelperRsp(const TurnHelperRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnHelperRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnHelperRsp::~TurnHelperRsp() {
  SharedDtor();
}

void TurnHelperRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnHelperRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnHelperRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnHelperRsp_descriptor_;
}

const TurnHelperRsp& TurnHelperRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnHelperRsp* TurnHelperRsp::default_instance_ = NULL;

TurnHelperRsp* TurnHelperRsp::New() const {
  return new TurnHelperRsp;
}

void TurnHelperRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnHelperRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnHelperRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnHelperRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnHelperRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnHelperRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnHelperRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnHelperRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnHelperRsp::MergeFrom(const TurnHelperRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnHelperRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnHelperRsp::CopyFrom(const TurnHelperRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnHelperRsp::IsInitialized() const {

  return true;
}

void TurnHelperRsp::Swap(TurnHelperRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnHelperRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnHelperRsp_descriptor_;
  metadata.reflection = TurnHelperRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyTurnNewHelper::kHelperCidFieldNumber;
const int NotifyTurnNewHelper::kHelperNameFieldNumber;
#endif  // !_MSC_VER

NotifyTurnNewHelper::NotifyTurnNewHelper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyTurnNewHelper::InitAsDefaultInstance() {
}

NotifyTurnNewHelper::NotifyTurnNewHelper(const NotifyTurnNewHelper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyTurnNewHelper::SharedCtor() {
  _cached_size_ = 0;
  helper_cid_ = GOOGLE_ULONGLONG(0);
  helper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyTurnNewHelper::~NotifyTurnNewHelper() {
  SharedDtor();
}

void NotifyTurnNewHelper::SharedDtor() {
  if (helper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete helper_name_;
  }
  if (this != default_instance_) {
  }
}

void NotifyTurnNewHelper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyTurnNewHelper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyTurnNewHelper_descriptor_;
}

const NotifyTurnNewHelper& NotifyTurnNewHelper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

NotifyTurnNewHelper* NotifyTurnNewHelper::default_instance_ = NULL;

NotifyTurnNewHelper* NotifyTurnNewHelper::New() const {
  return new NotifyTurnNewHelper;
}

void NotifyTurnNewHelper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    helper_cid_ = GOOGLE_ULONGLONG(0);
    if (has_helper_name()) {
      if (helper_name_ != &::google::protobuf::internal::kEmptyString) {
        helper_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyTurnNewHelper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 helper_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &helper_cid_)));
          set_has_helper_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_helper_name;
        break;
      }

      // optional bytes helper_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helper_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_helper_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyTurnNewHelper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 helper_cid = 1;
  if (has_helper_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->helper_cid(), output);
  }

  // optional bytes helper_name = 2;
  if (has_helper_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->helper_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyTurnNewHelper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 helper_cid = 1;
  if (has_helper_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->helper_cid(), target);
  }

  // optional bytes helper_name = 2;
  if (has_helper_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->helper_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyTurnNewHelper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 helper_cid = 1;
    if (has_helper_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->helper_cid());
    }

    // optional bytes helper_name = 2;
    if (has_helper_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->helper_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyTurnNewHelper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyTurnNewHelper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyTurnNewHelper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyTurnNewHelper::MergeFrom(const NotifyTurnNewHelper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_helper_cid()) {
      set_helper_cid(from.helper_cid());
    }
    if (from.has_helper_name()) {
      set_helper_name(from.helper_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyTurnNewHelper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyTurnNewHelper::CopyFrom(const NotifyTurnNewHelper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTurnNewHelper::IsInitialized() const {

  return true;
}

void NotifyTurnNewHelper::Swap(NotifyTurnNewHelper* other) {
  if (other != this) {
    std::swap(helper_cid_, other->helper_cid_);
    std::swap(helper_name_, other->helper_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyTurnNewHelper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyTurnNewHelper_descriptor_;
  metadata.reflection = NotifyTurnNewHelper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TurnChgReq::TurnChgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnChgReq::InitAsDefaultInstance() {
}

TurnChgReq::TurnChgReq(const TurnChgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnChgReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnChgReq::~TurnChgReq() {
  SharedDtor();
}

void TurnChgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnChgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnChgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnChgReq_descriptor_;
}

const TurnChgReq& TurnChgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnChgReq* TurnChgReq::default_instance_ = NULL;

TurnChgReq* TurnChgReq::New() const {
  return new TurnChgReq;
}

void TurnChgReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnChgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TurnChgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnChgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnChgReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnChgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnChgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnChgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnChgReq::MergeFrom(const TurnChgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnChgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnChgReq::CopyFrom(const TurnChgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnChgReq::IsInitialized() const {

  return true;
}

void TurnChgReq::Swap(TurnChgReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnChgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnChgReq_descriptor_;
  metadata.reflection = TurnChgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnChgRsp::kRetFieldNumber;
const int TurnChgRsp::kCodeFieldNumber;
#endif  // !_MSC_VER

TurnChgRsp::TurnChgRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnChgRsp::InitAsDefaultInstance() {
}

TurnChgRsp::TurnChgRsp(const TurnChgRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnChgRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnChgRsp::~TurnChgRsp() {
  SharedDtor();
}

void TurnChgRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnChgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnChgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnChgRsp_descriptor_;
}

const TurnChgRsp& TurnChgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnChgRsp* TurnChgRsp::default_instance_ = NULL;

TurnChgRsp* TurnChgRsp::New() const {
  return new TurnChgRsp;
}

void TurnChgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnChgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnChgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnChgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnChgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnChgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnChgRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnChgRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnChgRsp::MergeFrom(const TurnChgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnChgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnChgRsp::CopyFrom(const TurnChgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnChgRsp::IsInitialized() const {

  return true;
}

void TurnChgRsp::Swap(TurnChgRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnChgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnChgRsp_descriptor_;
  metadata.reflection = TurnChgRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnEquipDressReq::kBagPosFieldNumber;
#endif  // !_MSC_VER

TurnEquipDressReq::TurnEquipDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnEquipDressReq::InitAsDefaultInstance() {
}

TurnEquipDressReq::TurnEquipDressReq(const TurnEquipDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnEquipDressReq::SharedCtor() {
  _cached_size_ = 0;
  bag_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnEquipDressReq::~TurnEquipDressReq() {
  SharedDtor();
}

void TurnEquipDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnEquipDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnEquipDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnEquipDressReq_descriptor_;
}

const TurnEquipDressReq& TurnEquipDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnEquipDressReq* TurnEquipDressReq::default_instance_ = NULL;

TurnEquipDressReq* TurnEquipDressReq::New() const {
  return new TurnEquipDressReq;
}

void TurnEquipDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bag_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnEquipDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bag_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnEquipDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bag_pos = 1;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bag_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnEquipDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bag_pos = 1;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bag_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnEquipDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bag_pos = 1;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnEquipDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnEquipDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnEquipDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnEquipDressReq::MergeFrom(const TurnEquipDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnEquipDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnEquipDressReq::CopyFrom(const TurnEquipDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnEquipDressReq::IsInitialized() const {

  return true;
}

void TurnEquipDressReq::Swap(TurnEquipDressReq* other) {
  if (other != this) {
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnEquipDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnEquipDressReq_descriptor_;
  metadata.reflection = TurnEquipDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnEquipDressRsp::kBagPosFieldNumber;
const int TurnEquipDressRsp::kRetFieldNumber;
const int TurnEquipDressRsp::kTransFieldNumber;
#endif  // !_MSC_VER

TurnEquipDressRsp::TurnEquipDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnEquipDressRsp::InitAsDefaultInstance() {
}

TurnEquipDressRsp::TurnEquipDressRsp(const TurnEquipDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnEquipDressRsp::SharedCtor() {
  _cached_size_ = 0;
  bag_pos_ = 0;
  ret_ = 0;
  trans_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnEquipDressRsp::~TurnEquipDressRsp() {
  SharedDtor();
}

void TurnEquipDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnEquipDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnEquipDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnEquipDressRsp_descriptor_;
}

const TurnEquipDressRsp& TurnEquipDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnEquipDressRsp* TurnEquipDressRsp::default_instance_ = NULL;

TurnEquipDressRsp* TurnEquipDressRsp::New() const {
  return new TurnEquipDressRsp;
}

void TurnEquipDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bag_pos_ = 0;
    ret_ = 0;
    trans_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnEquipDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bag_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trans;
        break;
      }

      // optional int32 trans = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_)));
          set_has_trans();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnEquipDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bag_pos = 1;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bag_pos(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 trans = 3;
  if (has_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trans(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnEquipDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bag_pos = 1;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bag_pos(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 trans = 3;
  if (has_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trans(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnEquipDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bag_pos = 1;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 trans = 3;
    if (has_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnEquipDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnEquipDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnEquipDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnEquipDressRsp::MergeFrom(const TurnEquipDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_trans()) {
      set_trans(from.trans());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnEquipDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnEquipDressRsp::CopyFrom(const TurnEquipDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnEquipDressRsp::IsInitialized() const {

  return true;
}

void TurnEquipDressRsp::Swap(TurnEquipDressRsp* other) {
  if (other != this) {
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(ret_, other->ret_);
    std::swap(trans_, other->trans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnEquipDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnEquipDressRsp_descriptor_;
  metadata.reflection = TurnEquipDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnStrongReq::kLvFieldNumber;
const int TurnStrongReq::kPosFieldNumber;
#endif  // !_MSC_VER

TurnStrongReq::TurnStrongReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnStrongReq::InitAsDefaultInstance() {
}

TurnStrongReq::TurnStrongReq(const TurnStrongReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnStrongReq::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnStrongReq::~TurnStrongReq() {
  SharedDtor();
}

void TurnStrongReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnStrongReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnStrongReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnStrongReq_descriptor_;
}

const TurnStrongReq& TurnStrongReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnStrongReq* TurnStrongReq::default_instance_ = NULL;

TurnStrongReq* TurnStrongReq::New() const {
  return new TurnStrongReq;
}

void TurnStrongReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnStrongReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnStrongReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnStrongReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnStrongReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnStrongReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnStrongReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnStrongReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnStrongReq::MergeFrom(const TurnStrongReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnStrongReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnStrongReq::CopyFrom(const TurnStrongReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnStrongReq::IsInitialized() const {

  return true;
}

void TurnStrongReq::Swap(TurnStrongReq* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnStrongReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnStrongReq_descriptor_;
  metadata.reflection = TurnStrongReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnStrongRsp::kRetFieldNumber;
const int TurnStrongRsp::kLvFieldNumber;
const int TurnStrongRsp::kPosFieldNumber;
#endif  // !_MSC_VER

TurnStrongRsp::TurnStrongRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnStrongRsp::InitAsDefaultInstance() {
}

TurnStrongRsp::TurnStrongRsp(const TurnStrongRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnStrongRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  lv_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnStrongRsp::~TurnStrongRsp() {
  SharedDtor();
}

void TurnStrongRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnStrongRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnStrongRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnStrongRsp_descriptor_;
}

const TurnStrongRsp& TurnStrongRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnStrongRsp* TurnStrongRsp::default_instance_ = NULL;

TurnStrongRsp* TurnStrongRsp::New() const {
  return new TurnStrongRsp;
}

void TurnStrongRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    lv_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnStrongRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnStrongRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnStrongRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnStrongRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnStrongRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnStrongRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnStrongRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnStrongRsp::MergeFrom(const TurnStrongRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnStrongRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnStrongRsp::CopyFrom(const TurnStrongRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnStrongRsp::IsInitialized() const {

  return true;
}

void TurnStrongRsp::Swap(TurnStrongRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(lv_, other->lv_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnStrongRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnStrongRsp_descriptor_;
  metadata.reflection = TurnStrongRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnEvolveReq::kLvFieldNumber;
const int TurnEvolveReq::kPosFieldNumber;
const int TurnEvolveReq::kCostBagPosFieldNumber;
#endif  // !_MSC_VER

TurnEvolveReq::TurnEvolveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnEvolveReq::InitAsDefaultInstance() {
}

TurnEvolveReq::TurnEvolveReq(const TurnEvolveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnEvolveReq::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnEvolveReq::~TurnEvolveReq() {
  SharedDtor();
}

void TurnEvolveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnEvolveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnEvolveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnEvolveReq_descriptor_;
}

const TurnEvolveReq& TurnEvolveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnEvolveReq* TurnEvolveReq::default_instance_ = NULL;

TurnEvolveReq* TurnEvolveReq::New() const {
  return new TurnEvolveReq;
}

void TurnEvolveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    pos_ = 0;
  }
  cost_bag_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnEvolveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_bag_pos;
        break;
      }

      // repeated int32 cost_bag_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cost_bag_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cost_bag_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_bag_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnEvolveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // repeated int32 cost_bag_pos = 3;
  for (int i = 0; i < this->cost_bag_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cost_bag_pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnEvolveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // repeated int32 cost_bag_pos = 3;
  for (int i = 0; i < this->cost_bag_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cost_bag_pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnEvolveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  // repeated int32 cost_bag_pos = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cost_bag_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cost_bag_pos(i));
    }
    total_size += 1 * this->cost_bag_pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnEvolveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnEvolveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnEvolveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnEvolveReq::MergeFrom(const TurnEvolveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_bag_pos_.MergeFrom(from.cost_bag_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnEvolveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnEvolveReq::CopyFrom(const TurnEvolveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnEvolveReq::IsInitialized() const {

  return true;
}

void TurnEvolveReq::Swap(TurnEvolveReq* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(pos_, other->pos_);
    cost_bag_pos_.Swap(&other->cost_bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnEvolveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnEvolveReq_descriptor_;
  metadata.reflection = TurnEvolveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnEvolveRsp::kRetFieldNumber;
const int TurnEvolveRsp::kLvFieldNumber;
const int TurnEvolveRsp::kPosFieldNumber;
const int TurnEvolveRsp::kCostBagPosFieldNumber;
#endif  // !_MSC_VER

TurnEvolveRsp::TurnEvolveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnEvolveRsp::InitAsDefaultInstance() {
}

TurnEvolveRsp::TurnEvolveRsp(const TurnEvolveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnEvolveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  lv_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnEvolveRsp::~TurnEvolveRsp() {
  SharedDtor();
}

void TurnEvolveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnEvolveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnEvolveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnEvolveRsp_descriptor_;
}

const TurnEvolveRsp& TurnEvolveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnEvolveRsp* TurnEvolveRsp::default_instance_ = NULL;

TurnEvolveRsp* TurnEvolveRsp::New() const {
  return new TurnEvolveRsp;
}

void TurnEvolveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    lv_ = 0;
    pos_ = 0;
  }
  cost_bag_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnEvolveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_bag_pos;
        break;
      }

      // repeated int32 cost_bag_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cost_bag_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cost_bag_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_bag_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnEvolveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  // repeated int32 cost_bag_pos = 4;
  for (int i = 0; i < this->cost_bag_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cost_bag_pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnEvolveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  // repeated int32 cost_bag_pos = 4;
  for (int i = 0; i < this->cost_bag_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cost_bag_pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnEvolveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  // repeated int32 cost_bag_pos = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cost_bag_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cost_bag_pos(i));
    }
    total_size += 1 * this->cost_bag_pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnEvolveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnEvolveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnEvolveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnEvolveRsp::MergeFrom(const TurnEvolveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_bag_pos_.MergeFrom(from.cost_bag_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnEvolveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnEvolveRsp::CopyFrom(const TurnEvolveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnEvolveRsp::IsInitialized() const {

  return true;
}

void TurnEvolveRsp::Swap(TurnEvolveRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(lv_, other->lv_);
    std::swap(pos_, other->pos_);
    cost_bag_pos_.Swap(&other->cost_bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnEvolveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnEvolveRsp_descriptor_;
  metadata.reflection = TurnEvolveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnAwakenReq::kLvFieldNumber;
const int TurnAwakenReq::kPosFieldNumber;
const int TurnAwakenReq::kCostBagPosFieldNumber;
#endif  // !_MSC_VER

TurnAwakenReq::TurnAwakenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnAwakenReq::InitAsDefaultInstance() {
}

TurnAwakenReq::TurnAwakenReq(const TurnAwakenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnAwakenReq::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnAwakenReq::~TurnAwakenReq() {
  SharedDtor();
}

void TurnAwakenReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnAwakenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnAwakenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnAwakenReq_descriptor_;
}

const TurnAwakenReq& TurnAwakenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnAwakenReq* TurnAwakenReq::default_instance_ = NULL;

TurnAwakenReq* TurnAwakenReq::New() const {
  return new TurnAwakenReq;
}

void TurnAwakenReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    pos_ = 0;
  }
  cost_bag_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnAwakenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_bag_pos;
        break;
      }

      // repeated int32 cost_bag_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cost_bag_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cost_bag_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_bag_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnAwakenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // repeated int32 cost_bag_pos = 3;
  for (int i = 0; i < this->cost_bag_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cost_bag_pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnAwakenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // repeated int32 cost_bag_pos = 3;
  for (int i = 0; i < this->cost_bag_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cost_bag_pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnAwakenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  // repeated int32 cost_bag_pos = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cost_bag_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cost_bag_pos(i));
    }
    total_size += 1 * this->cost_bag_pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnAwakenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnAwakenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnAwakenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnAwakenReq::MergeFrom(const TurnAwakenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_bag_pos_.MergeFrom(from.cost_bag_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnAwakenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnAwakenReq::CopyFrom(const TurnAwakenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnAwakenReq::IsInitialized() const {

  return true;
}

void TurnAwakenReq::Swap(TurnAwakenReq* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(pos_, other->pos_);
    cost_bag_pos_.Swap(&other->cost_bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnAwakenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnAwakenReq_descriptor_;
  metadata.reflection = TurnAwakenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnAwakenRsp::kRetFieldNumber;
const int TurnAwakenRsp::kLvFieldNumber;
const int TurnAwakenRsp::kPosFieldNumber;
const int TurnAwakenRsp::kCostBagPosFieldNumber;
#endif  // !_MSC_VER

TurnAwakenRsp::TurnAwakenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnAwakenRsp::InitAsDefaultInstance() {
}

TurnAwakenRsp::TurnAwakenRsp(const TurnAwakenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnAwakenRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  lv_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnAwakenRsp::~TurnAwakenRsp() {
  SharedDtor();
}

void TurnAwakenRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnAwakenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnAwakenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnAwakenRsp_descriptor_;
}

const TurnAwakenRsp& TurnAwakenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnAwakenRsp* TurnAwakenRsp::default_instance_ = NULL;

TurnAwakenRsp* TurnAwakenRsp::New() const {
  return new TurnAwakenRsp;
}

void TurnAwakenRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    lv_ = 0;
    pos_ = 0;
  }
  cost_bag_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnAwakenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_bag_pos;
        break;
      }

      // repeated int32 cost_bag_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cost_bag_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cost_bag_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_bag_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnAwakenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  // repeated int32 cost_bag_pos = 4;
  for (int i = 0; i < this->cost_bag_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cost_bag_pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnAwakenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  // repeated int32 cost_bag_pos = 4;
  for (int i = 0; i < this->cost_bag_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cost_bag_pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnAwakenRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  // repeated int32 cost_bag_pos = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cost_bag_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cost_bag_pos(i));
    }
    total_size += 1 * this->cost_bag_pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnAwakenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnAwakenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnAwakenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnAwakenRsp::MergeFrom(const TurnAwakenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_bag_pos_.MergeFrom(from.cost_bag_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnAwakenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnAwakenRsp::CopyFrom(const TurnAwakenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnAwakenRsp::IsInitialized() const {

  return true;
}

void TurnAwakenRsp::Swap(TurnAwakenRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(lv_, other->lv_);
    std::swap(pos_, other->pos_);
    cost_bag_pos_.Swap(&other->cost_bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnAwakenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnAwakenRsp_descriptor_;
  metadata.reflection = TurnAwakenRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnComposeReq::kLvFieldNumber;
const int TurnComposeReq::kPosFieldNumber;
#endif  // !_MSC_VER

TurnComposeReq::TurnComposeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnComposeReq::InitAsDefaultInstance() {
}

TurnComposeReq::TurnComposeReq(const TurnComposeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnComposeReq::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnComposeReq::~TurnComposeReq() {
  SharedDtor();
}

void TurnComposeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnComposeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnComposeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnComposeReq_descriptor_;
}

const TurnComposeReq& TurnComposeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnComposeReq* TurnComposeReq::default_instance_ = NULL;

TurnComposeReq* TurnComposeReq::New() const {
  return new TurnComposeReq;
}

void TurnComposeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnComposeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnComposeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnComposeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnComposeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnComposeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnComposeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnComposeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnComposeReq::MergeFrom(const TurnComposeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnComposeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnComposeReq::CopyFrom(const TurnComposeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnComposeReq::IsInitialized() const {

  return true;
}

void TurnComposeReq::Swap(TurnComposeReq* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnComposeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnComposeReq_descriptor_;
  metadata.reflection = TurnComposeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnComposeRsp::kRetFieldNumber;
const int TurnComposeRsp::kLvFieldNumber;
const int TurnComposeRsp::kPosFieldNumber;
#endif  // !_MSC_VER

TurnComposeRsp::TurnComposeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnComposeRsp::InitAsDefaultInstance() {
}

TurnComposeRsp::TurnComposeRsp(const TurnComposeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnComposeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  lv_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnComposeRsp::~TurnComposeRsp() {
  SharedDtor();
}

void TurnComposeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnComposeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnComposeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnComposeRsp_descriptor_;
}

const TurnComposeRsp& TurnComposeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnComposeRsp* TurnComposeRsp::default_instance_ = NULL;

TurnComposeRsp* TurnComposeRsp::New() const {
  return new TurnComposeRsp;
}

void TurnComposeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    lv_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnComposeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnComposeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnComposeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnComposeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnComposeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnComposeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnComposeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnComposeRsp::MergeFrom(const TurnComposeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnComposeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnComposeRsp::CopyFrom(const TurnComposeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnComposeRsp::IsInitialized() const {

  return true;
}

void TurnComposeRsp::Swap(TurnComposeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(lv_, other->lv_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnComposeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnComposeRsp_descriptor_;
  metadata.reflection = TurnComposeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnStarReq::kLvFieldNumber;
const int TurnStarReq::kPosFieldNumber;
#endif  // !_MSC_VER

TurnStarReq::TurnStarReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnStarReq::InitAsDefaultInstance() {
}

TurnStarReq::TurnStarReq(const TurnStarReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnStarReq::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnStarReq::~TurnStarReq() {
  SharedDtor();
}

void TurnStarReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnStarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnStarReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnStarReq_descriptor_;
}

const TurnStarReq& TurnStarReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnStarReq* TurnStarReq::default_instance_ = NULL;

TurnStarReq* TurnStarReq::New() const {
  return new TurnStarReq;
}

void TurnStarReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnStarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnStarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnStarReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnStarReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnStarReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnStarReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnStarReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnStarReq::MergeFrom(const TurnStarReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnStarReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnStarReq::CopyFrom(const TurnStarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnStarReq::IsInitialized() const {

  return true;
}

void TurnStarReq::Swap(TurnStarReq* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnStarReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnStarReq_descriptor_;
  metadata.reflection = TurnStarReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnStarRsp::kRetFieldNumber;
const int TurnStarRsp::kLvFieldNumber;
const int TurnStarRsp::kPosFieldNumber;
#endif  // !_MSC_VER

TurnStarRsp::TurnStarRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnStarRsp::InitAsDefaultInstance() {
}

TurnStarRsp::TurnStarRsp(const TurnStarRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnStarRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  lv_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnStarRsp::~TurnStarRsp() {
  SharedDtor();
}

void TurnStarRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnStarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnStarRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnStarRsp_descriptor_;
}

const TurnStarRsp& TurnStarRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnStarRsp* TurnStarRsp::default_instance_ = NULL;

TurnStarRsp* TurnStarRsp::New() const {
  return new TurnStarRsp;
}

void TurnStarRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    lv_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnStarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnStarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnStarRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnStarRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnStarRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnStarRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnStarRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnStarRsp::MergeFrom(const TurnStarRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnStarRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnStarRsp::CopyFrom(const TurnStarRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnStarRsp::IsInitialized() const {

  return true;
}

void TurnStarRsp::Swap(TurnStarRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(lv_, other->lv_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnStarRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnStarRsp_descriptor_;
  metadata.reflection = TurnStarRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnStrongActiveReq::kIdFieldNumber;
#endif  // !_MSC_VER

TurnStrongActiveReq::TurnStrongActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnStrongActiveReq::InitAsDefaultInstance() {
}

TurnStrongActiveReq::TurnStrongActiveReq(const TurnStrongActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnStrongActiveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnStrongActiveReq::~TurnStrongActiveReq() {
  SharedDtor();
}

void TurnStrongActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnStrongActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnStrongActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnStrongActiveReq_descriptor_;
}

const TurnStrongActiveReq& TurnStrongActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnStrongActiveReq* TurnStrongActiveReq::default_instance_ = NULL;

TurnStrongActiveReq* TurnStrongActiveReq::New() const {
  return new TurnStrongActiveReq;
}

void TurnStrongActiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnStrongActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnStrongActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnStrongActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnStrongActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnStrongActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnStrongActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnStrongActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnStrongActiveReq::MergeFrom(const TurnStrongActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnStrongActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnStrongActiveReq::CopyFrom(const TurnStrongActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnStrongActiveReq::IsInitialized() const {

  return true;
}

void TurnStrongActiveReq::Swap(TurnStrongActiveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnStrongActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnStrongActiveReq_descriptor_;
  metadata.reflection = TurnStrongActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnStrongActiveRsp::kRetFieldNumber;
const int TurnStrongActiveRsp::kIdFieldNumber;
#endif  // !_MSC_VER

TurnStrongActiveRsp::TurnStrongActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnStrongActiveRsp::InitAsDefaultInstance() {
}

TurnStrongActiveRsp::TurnStrongActiveRsp(const TurnStrongActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnStrongActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnStrongActiveRsp::~TurnStrongActiveRsp() {
  SharedDtor();
}

void TurnStrongActiveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnStrongActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnStrongActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnStrongActiveRsp_descriptor_;
}

const TurnStrongActiveRsp& TurnStrongActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnStrongActiveRsp* TurnStrongActiveRsp::default_instance_ = NULL;

TurnStrongActiveRsp* TurnStrongActiveRsp::New() const {
  return new TurnStrongActiveRsp;
}

void TurnStrongActiveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnStrongActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnStrongActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnStrongActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnStrongActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnStrongActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnStrongActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnStrongActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnStrongActiveRsp::MergeFrom(const TurnStrongActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnStrongActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnStrongActiveRsp::CopyFrom(const TurnStrongActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnStrongActiveRsp::IsInitialized() const {

  return true;
}

void TurnStrongActiveRsp::Swap(TurnStrongActiveRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnStrongActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnStrongActiveRsp_descriptor_;
  metadata.reflection = TurnStrongActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnStarActiveReq::kIdFieldNumber;
#endif  // !_MSC_VER

TurnStarActiveReq::TurnStarActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnStarActiveReq::InitAsDefaultInstance() {
}

TurnStarActiveReq::TurnStarActiveReq(const TurnStarActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnStarActiveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnStarActiveReq::~TurnStarActiveReq() {
  SharedDtor();
}

void TurnStarActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnStarActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnStarActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnStarActiveReq_descriptor_;
}

const TurnStarActiveReq& TurnStarActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnStarActiveReq* TurnStarActiveReq::default_instance_ = NULL;

TurnStarActiveReq* TurnStarActiveReq::New() const {
  return new TurnStarActiveReq;
}

void TurnStarActiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnStarActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnStarActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnStarActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnStarActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnStarActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnStarActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnStarActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnStarActiveReq::MergeFrom(const TurnStarActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnStarActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnStarActiveReq::CopyFrom(const TurnStarActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnStarActiveReq::IsInitialized() const {

  return true;
}

void TurnStarActiveReq::Swap(TurnStarActiveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnStarActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnStarActiveReq_descriptor_;
  metadata.reflection = TurnStarActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnStarActiveRsp::kRetFieldNumber;
const int TurnStarActiveRsp::kIdFieldNumber;
#endif  // !_MSC_VER

TurnStarActiveRsp::TurnStarActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnStarActiveRsp::InitAsDefaultInstance() {
}

TurnStarActiveRsp::TurnStarActiveRsp(const TurnStarActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnStarActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnStarActiveRsp::~TurnStarActiveRsp() {
  SharedDtor();
}

void TurnStarActiveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnStarActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnStarActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnStarActiveRsp_descriptor_;
}

const TurnStarActiveRsp& TurnStarActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

TurnStarActiveRsp* TurnStarActiveRsp::default_instance_ = NULL;

TurnStarActiveRsp* TurnStarActiveRsp::New() const {
  return new TurnStarActiveRsp;
}

void TurnStarActiveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnStarActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnStarActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnStarActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnStarActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnStarActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnStarActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnStarActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnStarActiveRsp::MergeFrom(const TurnStarActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnStarActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnStarActiveRsp::CopyFrom(const TurnStarActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnStarActiveRsp::IsInitialized() const {

  return true;
}

void TurnStarActiveRsp::Swap(TurnStarActiveRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnStarActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnStarActiveRsp_descriptor_;
  metadata.reflection = TurnStarActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCTurnHelperReq::kSrcFieldNumber;
const int LCTurnHelperReq::kSrcNameFieldNumber;
const int LCTurnHelperReq::kDstFieldNumber;
#endif  // !_MSC_VER

LCTurnHelperReq::LCTurnHelperReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCTurnHelperReq::InitAsDefaultInstance() {
}

LCTurnHelperReq::LCTurnHelperReq(const LCTurnHelperReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCTurnHelperReq::SharedCtor() {
  _cached_size_ = 0;
  src_ = GOOGLE_ULONGLONG(0);
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCTurnHelperReq::~LCTurnHelperReq() {
  SharedDtor();
}

void LCTurnHelperReq::SharedDtor() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (this != default_instance_) {
  }
}

void LCTurnHelperReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCTurnHelperReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCTurnHelperReq_descriptor_;
}

const LCTurnHelperReq& LCTurnHelperReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

LCTurnHelperReq* LCTurnHelperReq::default_instance_ = NULL;

LCTurnHelperReq* LCTurnHelperReq::New() const {
  return new LCTurnHelperReq;
}

void LCTurnHelperReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_ = GOOGLE_ULONGLONG(0);
    if (has_src_name()) {
      if (src_name_ != &::google::protobuf::internal::kEmptyString) {
        src_name_->clear();
      }
    }
    dst_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCTurnHelperReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_src_name;
        break;
      }

      // optional bytes src_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dst;
        break;
      }

      // optional uint64 dst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_)));
          set_has_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCTurnHelperReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src(), output);
  }

  // optional bytes src_name = 2;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->src_name(), output);
  }

  // optional uint64 dst = 3;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCTurnHelperReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src(), target);
  }

  // optional bytes src_name = 2;
  if (has_src_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->src_name(), target);
  }

  // optional uint64 dst = 3;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCTurnHelperReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src());
    }

    // optional bytes src_name = 2;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_name());
    }

    // optional uint64 dst = 3;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCTurnHelperReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCTurnHelperReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCTurnHelperReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCTurnHelperReq::MergeFrom(const LCTurnHelperReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCTurnHelperReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCTurnHelperReq::CopyFrom(const LCTurnHelperReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCTurnHelperReq::IsInitialized() const {

  return true;
}

void LCTurnHelperReq::Swap(LCTurnHelperReq* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(src_name_, other->src_name_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCTurnHelperReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCTurnHelperReq_descriptor_;
  metadata.reflection = LCTurnHelperReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLNotifyTurnHelper::kSrcFieldNumber;
const int CLNotifyTurnHelper::kSrcNameFieldNumber;
const int CLNotifyTurnHelper::kDstFieldNumber;
#endif  // !_MSC_VER

CLNotifyTurnHelper::CLNotifyTurnHelper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLNotifyTurnHelper::InitAsDefaultInstance() {
}

CLNotifyTurnHelper::CLNotifyTurnHelper(const CLNotifyTurnHelper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLNotifyTurnHelper::SharedCtor() {
  _cached_size_ = 0;
  src_ = GOOGLE_ULONGLONG(0);
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLNotifyTurnHelper::~CLNotifyTurnHelper() {
  SharedDtor();
}

void CLNotifyTurnHelper::SharedDtor() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (this != default_instance_) {
  }
}

void CLNotifyTurnHelper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLNotifyTurnHelper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLNotifyTurnHelper_descriptor_;
}

const CLNotifyTurnHelper& CLNotifyTurnHelper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

CLNotifyTurnHelper* CLNotifyTurnHelper::default_instance_ = NULL;

CLNotifyTurnHelper* CLNotifyTurnHelper::New() const {
  return new CLNotifyTurnHelper;
}

void CLNotifyTurnHelper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_ = GOOGLE_ULONGLONG(0);
    if (has_src_name()) {
      if (src_name_ != &::google::protobuf::internal::kEmptyString) {
        src_name_->clear();
      }
    }
    dst_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLNotifyTurnHelper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_src_name;
        break;
      }

      // optional bytes src_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dst;
        break;
      }

      // optional uint64 dst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_)));
          set_has_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLNotifyTurnHelper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src(), output);
  }

  // optional bytes src_name = 2;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->src_name(), output);
  }

  // optional uint64 dst = 3;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLNotifyTurnHelper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src(), target);
  }

  // optional bytes src_name = 2;
  if (has_src_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->src_name(), target);
  }

  // optional uint64 dst = 3;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLNotifyTurnHelper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src());
    }

    // optional bytes src_name = 2;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_name());
    }

    // optional uint64 dst = 3;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLNotifyTurnHelper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLNotifyTurnHelper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLNotifyTurnHelper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLNotifyTurnHelper::MergeFrom(const CLNotifyTurnHelper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLNotifyTurnHelper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLNotifyTurnHelper::CopyFrom(const CLNotifyTurnHelper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLNotifyTurnHelper::IsInitialized() const {

  return true;
}

void CLNotifyTurnHelper::Swap(CLNotifyTurnHelper* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(src_name_, other->src_name_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLNotifyTurnHelper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLNotifyTurnHelper_descriptor_;
  metadata.reflection = CLNotifyTurnHelper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCTurnHelperRsp::kRetFieldNumber;
const int LCTurnHelperRsp::kSrcFieldNumber;
const int LCTurnHelperRsp::kSrcNameFieldNumber;
const int LCTurnHelperRsp::kDstFieldNumber;
#endif  // !_MSC_VER

LCTurnHelperRsp::LCTurnHelperRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCTurnHelperRsp::InitAsDefaultInstance() {
}

LCTurnHelperRsp::LCTurnHelperRsp(const LCTurnHelperRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCTurnHelperRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  src_ = GOOGLE_ULONGLONG(0);
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCTurnHelperRsp::~LCTurnHelperRsp() {
  SharedDtor();
}

void LCTurnHelperRsp::SharedDtor() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (this != default_instance_) {
  }
}

void LCTurnHelperRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCTurnHelperRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCTurnHelperRsp_descriptor_;
}

const LCTurnHelperRsp& LCTurnHelperRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Turn_2eproto();
  return *default_instance_;
}

LCTurnHelperRsp* LCTurnHelperRsp::default_instance_ = NULL;

LCTurnHelperRsp* LCTurnHelperRsp::New() const {
  return new LCTurnHelperRsp;
}

void LCTurnHelperRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    src_ = GOOGLE_ULONGLONG(0);
    if (has_src_name()) {
      if (src_name_ != &::google::protobuf::internal::kEmptyString) {
        src_name_->clear();
      }
    }
    dst_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCTurnHelperRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src;
        break;
      }

      // optional uint64 src = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_src_name;
        break;
      }

      // optional bytes src_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst;
        break;
      }

      // optional uint64 dst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_)));
          set_has_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCTurnHelperRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 src = 2;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->src(), output);
  }

  // optional bytes src_name = 3;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->src_name(), output);
  }

  // optional uint64 dst = 4;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCTurnHelperRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 src = 2;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->src(), target);
  }

  // optional bytes src_name = 3;
  if (has_src_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->src_name(), target);
  }

  // optional uint64 dst = 4;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCTurnHelperRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 src = 2;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src());
    }

    // optional bytes src_name = 3;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_name());
    }

    // optional uint64 dst = 4;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCTurnHelperRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCTurnHelperRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCTurnHelperRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCTurnHelperRsp::MergeFrom(const LCTurnHelperRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCTurnHelperRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCTurnHelperRsp::CopyFrom(const LCTurnHelperRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCTurnHelperRsp::IsInitialized() const {

  return true;
}

void LCTurnHelperRsp::Swap(LCTurnHelperRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(src_, other->src_);
    std::swap(src_name_, other->src_name_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCTurnHelperRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCTurnHelperRsp_descriptor_;
  metadata.reflection = LCTurnHelperRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
