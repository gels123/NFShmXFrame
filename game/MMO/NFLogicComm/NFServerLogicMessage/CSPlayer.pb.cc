// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSPlayer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSPlayer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* PlayerInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureAttrSyn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureAttrSyn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureAttrBroadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureAttrBroadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureStateBroadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureStateBroadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoticeShowInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoticeShowInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChgNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChgNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChgNameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChgNameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReliveNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReliveNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReliveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReliveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReliveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReliveRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSPlayer_2eproto() {
  protobuf_AddDesc_CSPlayer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSPlayer.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerInfoRsp_descriptor_ = file->message_type(0);
  static const int PlayerInfoRsp_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, unlockinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, skill_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, godevil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, donate_),
  };
  PlayerInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfoRsp_descriptor_,
      PlayerInfoRsp::default_instance_,
      PlayerInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfoRsp));
  CreatureAttrSyn_descriptor_ = file->message_type(1);
  static const int CreatureAttrSyn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrSyn, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrSyn, attr_),
  };
  CreatureAttrSyn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureAttrSyn_descriptor_,
      CreatureAttrSyn::default_instance_,
      CreatureAttrSyn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrSyn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrSyn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureAttrSyn));
  CreatureAttrBroadRsp_descriptor_ = file->message_type(2);
  static const int CreatureAttrBroadRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrBroadRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrBroadRsp, attr_),
  };
  CreatureAttrBroadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureAttrBroadRsp_descriptor_,
      CreatureAttrBroadRsp::default_instance_,
      CreatureAttrBroadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrBroadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrBroadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureAttrBroadRsp));
  CreatureStateBroadRsp_descriptor_ = file->message_type(3);
  static const int CreatureStateBroadRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureStateBroadRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureStateBroadRsp, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureStateBroadRsp, beforestate_),
  };
  CreatureStateBroadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureStateBroadRsp_descriptor_,
      CreatureStateBroadRsp::default_instance_,
      CreatureStateBroadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureStateBroadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureStateBroadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureStateBroadRsp));
  NoticeShowInfoRsp_descriptor_ = file->message_type(4);
  static const int NoticeShowInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeShowInfoRsp, show_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeShowInfoRsp, add_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeShowInfoRsp, item_lst_),
  };
  NoticeShowInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoticeShowInfoRsp_descriptor_,
      NoticeShowInfoRsp::default_instance_,
      NoticeShowInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeShowInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeShowInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoticeShowInfoRsp));
  ChgNameReq_descriptor_ = file->message_type(5);
  static const int ChgNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameReq, name_),
  };
  ChgNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChgNameReq_descriptor_,
      ChgNameReq::default_instance_,
      ChgNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChgNameReq));
  ChgNameRsp_descriptor_ = file->message_type(6);
  static const int ChgNameRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameRsp, name_),
  };
  ChgNameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChgNameRsp_descriptor_,
      ChgNameRsp::default_instance_,
      ChgNameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChgNameRsp));
  PlayerReliveNotify_descriptor_ = file->message_type(7);
  static const int PlayerReliveNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, is_tired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, already_num_),
  };
  PlayerReliveNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReliveNotify_descriptor_,
      PlayerReliveNotify::default_instance_,
      PlayerReliveNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReliveNotify));
  PlayerReliveReq_descriptor_ = file->message_type(8);
  static const int PlayerReliveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveReq, type_),
  };
  PlayerReliveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReliveReq_descriptor_,
      PlayerReliveReq::default_instance_,
      PlayerReliveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReliveReq));
  PlayerReliveRsp_descriptor_ = file->message_type(9);
  static const int PlayerReliveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveRsp, ret_),
  };
  PlayerReliveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReliveRsp_descriptor_,
      PlayerReliveRsp::default_instance_,
      PlayerReliveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReliveRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSPlayer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfoRsp_descriptor_, &PlayerInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureAttrSyn_descriptor_, &CreatureAttrSyn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureAttrBroadRsp_descriptor_, &CreatureAttrBroadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureStateBroadRsp_descriptor_, &CreatureStateBroadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoticeShowInfoRsp_descriptor_, &NoticeShowInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChgNameReq_descriptor_, &ChgNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChgNameRsp_descriptor_, &ChgNameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReliveNotify_descriptor_, &PlayerReliveNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReliveReq_descriptor_, &PlayerReliveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReliveRsp_descriptor_, &PlayerReliveRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSPlayer_2eproto() {
  delete PlayerInfoRsp::default_instance_;
  delete PlayerInfoRsp_reflection_;
  delete CreatureAttrSyn::default_instance_;
  delete CreatureAttrSyn_reflection_;
  delete CreatureAttrBroadRsp::default_instance_;
  delete CreatureAttrBroadRsp_reflection_;
  delete CreatureStateBroadRsp::default_instance_;
  delete CreatureStateBroadRsp_reflection_;
  delete NoticeShowInfoRsp::default_instance_;
  delete NoticeShowInfoRsp_reflection_;
  delete ChgNameReq::default_instance_;
  delete ChgNameReq_reflection_;
  delete ChgNameRsp::default_instance_;
  delete ChgNameRsp_reflection_;
  delete PlayerReliveNotify::default_instance_;
  delete PlayerReliveNotify_reflection_;
  delete PlayerReliveReq::default_instance_;
  delete PlayerReliveReq_reflection_;
  delete PlayerReliveRsp::default_instance_;
  delete PlayerReliveRsp_reflection_;
}

void protobuf_AddDesc_CSPlayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016CSPlayer.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\032\022common_logic.proto\032\tCom.proto"
    "\"\207\003\n\rPlayerInfoRsp\022\013\n\003cid\030\001 \001(\004\022\014\n\004name\030"
    "\002 \001(\014\022\013\n\003zid\030\003 \001(\r\022\020\n\010opentime\030\004 \001(\004\022\022\n\n"
    "createtime\030\005 \001(\004\022)\n\006facade\030\006 \001(\0132\031.proto"
    "_ff.RoleFacadeProto\022\036\n\004attr\030\007 \003(\0132\020.prot"
    "o_ff.Attr64\022\r\n\005mapid\030\010 \001(\004\022 \n\003pos\030\t \001(\0132"
    "\023.proto_ff.Vector3PB\0220\n\nunlockInfo\030\n \001(\013"
    "2\034.proto_ff.FunctionUnlockInfo\022\r\n\005state\030"
    "\013 \001(\005\0222\n\013skill_group\030\014 \001(\0132\035.proto_ff.Sk"
    "illGroupListProto\022\'\n\007godevil\030\r \001(\0132\026.pro"
    "to_ff.GodEvilProto\022\016\n\006donate\030\016 \001(\005\">\n\017Cr"
    "eatureAttrSyn\022\013\n\003cid\030\001 \001(\004\022\036\n\004attr\030\002 \003(\013"
    "2\020.proto_ff.Attr64\"C\n\024CreatureAttrBroadR"
    "sp\022\013\n\003cid\030\001 \001(\004\022\036\n\004attr\030\002 \003(\0132\020.proto_ff"
    ".Attr64\"K\n\025CreatureStateBroadRsp\022\013\n\003cid\030"
    "\001 \001(\004\022\020\n\010curstate\030\002 \001(\r\022\023\n\013beforestate\030\003"
    " \001(\r\"h\n\021NoticeShowInfoRsp\022\021\n\tshow_type\030\001"
    " \001(\005\022\017\n\007add_val\030\002 \001(\004\022/\n\010item_lst\030\003 \001(\0132"
    "\035.proto_ff.MultItemSimpleProto\"\032\n\nChgNam"
    "eReq\022\014\n\004name\030\001 \001(\t\"+\n\nChgNameRsp\022\017\n\007retc"
    "ode\030\001 \002(\005\022\014\n\004name\030\002 \001(\014\"h\n\022PlayerReliveN"
    "otify\022\014\n\004name\030\001 \001(\014\022\020\n\010left_num\030\002 \001(\005\022\013\n"
    "\003sec\030\003 \001(\005\022\020\n\010is_tired\030\004 \001(\010\022\023\n\013already_"
    "num\030\005 \001(\005\"\037\n\017PlayerReliveReq\022\014\n\004type\030\001 \001"
    "(\005\"\036\n\017PlayerReliveRsp\022\013\n\003ret\030\001 \002(\005", 1034);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSPlayer.proto", &protobuf_RegisterTypes);
  PlayerInfoRsp::default_instance_ = new PlayerInfoRsp();
  CreatureAttrSyn::default_instance_ = new CreatureAttrSyn();
  CreatureAttrBroadRsp::default_instance_ = new CreatureAttrBroadRsp();
  CreatureStateBroadRsp::default_instance_ = new CreatureStateBroadRsp();
  NoticeShowInfoRsp::default_instance_ = new NoticeShowInfoRsp();
  ChgNameReq::default_instance_ = new ChgNameReq();
  ChgNameRsp::default_instance_ = new ChgNameRsp();
  PlayerReliveNotify::default_instance_ = new PlayerReliveNotify();
  PlayerReliveReq::default_instance_ = new PlayerReliveReq();
  PlayerReliveRsp::default_instance_ = new PlayerReliveRsp();
  PlayerInfoRsp::default_instance_->InitAsDefaultInstance();
  CreatureAttrSyn::default_instance_->InitAsDefaultInstance();
  CreatureAttrBroadRsp::default_instance_->InitAsDefaultInstance();
  CreatureStateBroadRsp::default_instance_->InitAsDefaultInstance();
  NoticeShowInfoRsp::default_instance_->InitAsDefaultInstance();
  ChgNameReq::default_instance_->InitAsDefaultInstance();
  ChgNameRsp::default_instance_->InitAsDefaultInstance();
  PlayerReliveNotify::default_instance_->InitAsDefaultInstance();
  PlayerReliveReq::default_instance_->InitAsDefaultInstance();
  PlayerReliveRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSPlayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSPlayer_2eproto {
  StaticDescriptorInitializer_CSPlayer_2eproto() {
    protobuf_AddDesc_CSPlayer_2eproto();
  }
} static_descriptor_initializer_CSPlayer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerInfoRsp::kCidFieldNumber;
const int PlayerInfoRsp::kNameFieldNumber;
const int PlayerInfoRsp::kZidFieldNumber;
const int PlayerInfoRsp::kOpentimeFieldNumber;
const int PlayerInfoRsp::kCreatetimeFieldNumber;
const int PlayerInfoRsp::kFacadeFieldNumber;
const int PlayerInfoRsp::kAttrFieldNumber;
const int PlayerInfoRsp::kMapidFieldNumber;
const int PlayerInfoRsp::kPosFieldNumber;
const int PlayerInfoRsp::kUnlockInfoFieldNumber;
const int PlayerInfoRsp::kStateFieldNumber;
const int PlayerInfoRsp::kSkillGroupFieldNumber;
const int PlayerInfoRsp::kGodevilFieldNumber;
const int PlayerInfoRsp::kDonateFieldNumber;
#endif  // !_MSC_VER

PlayerInfoRsp::PlayerInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfoRsp::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  unlockinfo_ = const_cast< ::proto_ff::FunctionUnlockInfo*>(&::proto_ff::FunctionUnlockInfo::default_instance());
  skill_group_ = const_cast< ::proto_ff::SkillGroupListProto*>(&::proto_ff::SkillGroupListProto::default_instance());
  godevil_ = const_cast< ::proto_ff::GodEvilProto*>(&::proto_ff::GodEvilProto::default_instance());
}

PlayerInfoRsp::PlayerInfoRsp(const PlayerInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  opentime_ = GOOGLE_ULONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  mapid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  unlockinfo_ = NULL;
  state_ = 0;
  skill_group_ = NULL;
  godevil_ = NULL;
  donate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoRsp::~PlayerInfoRsp() {
  SharedDtor();
}

void PlayerInfoRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
    delete pos_;
    delete unlockinfo_;
    delete skill_group_;
    delete godevil_;
  }
}

void PlayerInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoRsp_descriptor_;
}

const PlayerInfoRsp& PlayerInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayer_2eproto();
  return *default_instance_;
}

PlayerInfoRsp* PlayerInfoRsp::default_instance_ = NULL;

PlayerInfoRsp* PlayerInfoRsp::New() const {
  return new PlayerInfoRsp;
}

void PlayerInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0u;
    opentime_ = GOOGLE_ULONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    mapid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    if (has_unlockinfo()) {
      if (unlockinfo_ != NULL) unlockinfo_->::proto_ff::FunctionUnlockInfo::Clear();
    }
    state_ = 0;
    if (has_skill_group()) {
      if (skill_group_ != NULL) skill_group_->::proto_ff::SkillGroupListProto::Clear();
    }
    if (has_godevil()) {
      if (godevil_ != NULL) godevil_->::proto_ff::GodEvilProto::Clear();
    }
    donate_ = 0;
  }
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opentime;
        break;
      }

      // optional uint64 opentime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_createtime;
        break;
      }

      // optional uint64 createtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attr;
        break;
      }

      // repeated .proto_ff.Attr64 attr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attr;
        if (input->ExpectTag(64)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_unlockInfo;
        break;
      }

      // optional .proto_ff.FunctionUnlockInfo unlockInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlockInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlockinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_state;
        break;
      }

      // optional int32 state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skill_group;
        break;
      }

      // optional .proto_ff.SkillGroupListProto skill_group = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_godevil;
        break;
      }

      // optional .proto_ff.GodEvilProto godevil = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godevil:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_godevil()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_donate;
        break;
      }

      // optional int32 donate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_donate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donate_)));
          set_has_donate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  // optional uint64 opentime = 4;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->opentime(), output);
  }

  // optional uint64 createtime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->createtime(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 6;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->facade(), output);
  }

  // repeated .proto_ff.Attr64 attr = 7;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attr(i), output);
  }

  // optional uint64 mapid = 8;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->mapid(), output);
  }

  // optional .proto_ff.Vector3PB pos = 9;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pos(), output);
  }

  // optional .proto_ff.FunctionUnlockInfo unlockInfo = 10;
  if (has_unlockinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->unlockinfo(), output);
  }

  // optional int32 state = 11;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->state(), output);
  }

  // optional .proto_ff.SkillGroupListProto skill_group = 12;
  if (has_skill_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->skill_group(), output);
  }

  // optional .proto_ff.GodEvilProto godevil = 13;
  if (has_godevil()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->godevil(), output);
  }

  // optional int32 donate = 14;
  if (has_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->donate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  // optional uint64 opentime = 4;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->opentime(), target);
  }

  // optional uint64 createtime = 5;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->createtime(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 6;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->facade(), target);
  }

  // repeated .proto_ff.Attr64 attr = 7;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attr(i), target);
  }

  // optional uint64 mapid = 8;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->mapid(), target);
  }

  // optional .proto_ff.Vector3PB pos = 9;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pos(), target);
  }

  // optional .proto_ff.FunctionUnlockInfo unlockInfo = 10;
  if (has_unlockinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->unlockinfo(), target);
  }

  // optional int32 state = 11;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->state(), target);
  }

  // optional .proto_ff.SkillGroupListProto skill_group = 12;
  if (has_skill_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->skill_group(), target);
  }

  // optional .proto_ff.GodEvilProto godevil = 13;
  if (has_godevil()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->godevil(), target);
  }

  // optional int32 donate = 14;
  if (has_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->donate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint64 opentime = 4;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opentime());
    }

    // optional uint64 createtime = 5;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional .proto_ff.RoleFacadeProto facade = 6;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional uint64 mapid = 8;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.Vector3PB pos = 9;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .proto_ff.FunctionUnlockInfo unlockInfo = 10;
    if (has_unlockinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlockinfo());
    }

    // optional int32 state = 11;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .proto_ff.SkillGroupListProto skill_group = 12;
    if (has_skill_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_group());
    }

    // optional .proto_ff.GodEvilProto godevil = 13;
    if (has_godevil()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->godevil());
    }

    // optional int32 donate = 14;
    if (has_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donate());
    }

  }
  // repeated .proto_ff.Attr64 attr = 7;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfoRsp::MergeFrom(const PlayerInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_unlockinfo()) {
      mutable_unlockinfo()->::proto_ff::FunctionUnlockInfo::MergeFrom(from.unlockinfo());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_skill_group()) {
      mutable_skill_group()->::proto_ff::SkillGroupListProto::MergeFrom(from.skill_group());
    }
    if (from.has_godevil()) {
      mutable_godevil()->::proto_ff::GodEvilProto::MergeFrom(from.godevil());
    }
    if (from.has_donate()) {
      set_donate(from.donate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoRsp::CopyFrom(const PlayerInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoRsp::IsInitialized() const {

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_godevil()) {
    if (!this->godevil().IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoRsp::Swap(PlayerInfoRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(opentime_, other->opentime_);
    std::swap(createtime_, other->createtime_);
    std::swap(facade_, other->facade_);
    attr_.Swap(&other->attr_);
    std::swap(mapid_, other->mapid_);
    std::swap(pos_, other->pos_);
    std::swap(unlockinfo_, other->unlockinfo_);
    std::swap(state_, other->state_);
    std::swap(skill_group_, other->skill_group_);
    std::swap(godevil_, other->godevil_);
    std::swap(donate_, other->donate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoRsp_descriptor_;
  metadata.reflection = PlayerInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureAttrSyn::kCidFieldNumber;
const int CreatureAttrSyn::kAttrFieldNumber;
#endif  // !_MSC_VER

CreatureAttrSyn::CreatureAttrSyn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureAttrSyn::InitAsDefaultInstance() {
}

CreatureAttrSyn::CreatureAttrSyn(const CreatureAttrSyn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureAttrSyn::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureAttrSyn::~CreatureAttrSyn() {
  SharedDtor();
}

void CreatureAttrSyn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatureAttrSyn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureAttrSyn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureAttrSyn_descriptor_;
}

const CreatureAttrSyn& CreatureAttrSyn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayer_2eproto();
  return *default_instance_;
}

CreatureAttrSyn* CreatureAttrSyn::default_instance_ = NULL;

CreatureAttrSyn* CreatureAttrSyn::New() const {
  return new CreatureAttrSyn;
}

void CreatureAttrSyn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureAttrSyn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // repeated .proto_ff.Attr64 attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureAttrSyn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated .proto_ff.Attr64 attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureAttrSyn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated .proto_ff.Attr64 attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureAttrSyn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated .proto_ff.Attr64 attr = 2;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureAttrSyn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureAttrSyn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureAttrSyn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureAttrSyn::MergeFrom(const CreatureAttrSyn& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureAttrSyn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureAttrSyn::CopyFrom(const CreatureAttrSyn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureAttrSyn::IsInitialized() const {

  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  return true;
}

void CreatureAttrSyn::Swap(CreatureAttrSyn* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureAttrSyn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureAttrSyn_descriptor_;
  metadata.reflection = CreatureAttrSyn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureAttrBroadRsp::kCidFieldNumber;
const int CreatureAttrBroadRsp::kAttrFieldNumber;
#endif  // !_MSC_VER

CreatureAttrBroadRsp::CreatureAttrBroadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureAttrBroadRsp::InitAsDefaultInstance() {
}

CreatureAttrBroadRsp::CreatureAttrBroadRsp(const CreatureAttrBroadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureAttrBroadRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureAttrBroadRsp::~CreatureAttrBroadRsp() {
  SharedDtor();
}

void CreatureAttrBroadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatureAttrBroadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureAttrBroadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureAttrBroadRsp_descriptor_;
}

const CreatureAttrBroadRsp& CreatureAttrBroadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayer_2eproto();
  return *default_instance_;
}

CreatureAttrBroadRsp* CreatureAttrBroadRsp::default_instance_ = NULL;

CreatureAttrBroadRsp* CreatureAttrBroadRsp::New() const {
  return new CreatureAttrBroadRsp;
}

void CreatureAttrBroadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureAttrBroadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // repeated .proto_ff.Attr64 attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureAttrBroadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated .proto_ff.Attr64 attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureAttrBroadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated .proto_ff.Attr64 attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureAttrBroadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated .proto_ff.Attr64 attr = 2;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureAttrBroadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureAttrBroadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureAttrBroadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureAttrBroadRsp::MergeFrom(const CreatureAttrBroadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureAttrBroadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureAttrBroadRsp::CopyFrom(const CreatureAttrBroadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureAttrBroadRsp::IsInitialized() const {

  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  return true;
}

void CreatureAttrBroadRsp::Swap(CreatureAttrBroadRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureAttrBroadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureAttrBroadRsp_descriptor_;
  metadata.reflection = CreatureAttrBroadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureStateBroadRsp::kCidFieldNumber;
const int CreatureStateBroadRsp::kCurstateFieldNumber;
const int CreatureStateBroadRsp::kBeforestateFieldNumber;
#endif  // !_MSC_VER

CreatureStateBroadRsp::CreatureStateBroadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureStateBroadRsp::InitAsDefaultInstance() {
}

CreatureStateBroadRsp::CreatureStateBroadRsp(const CreatureStateBroadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureStateBroadRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  curstate_ = 0u;
  beforestate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureStateBroadRsp::~CreatureStateBroadRsp() {
  SharedDtor();
}

void CreatureStateBroadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatureStateBroadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureStateBroadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureStateBroadRsp_descriptor_;
}

const CreatureStateBroadRsp& CreatureStateBroadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayer_2eproto();
  return *default_instance_;
}

CreatureStateBroadRsp* CreatureStateBroadRsp::default_instance_ = NULL;

CreatureStateBroadRsp* CreatureStateBroadRsp::New() const {
  return new CreatureStateBroadRsp;
}

void CreatureStateBroadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    curstate_ = 0u;
    beforestate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureStateBroadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curstate;
        break;
      }

      // optional uint32 curstate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beforestate;
        break;
      }

      // optional uint32 beforestate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beforestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beforestate_)));
          set_has_beforestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureStateBroadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 curstate = 2;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curstate(), output);
  }

  // optional uint32 beforestate = 3;
  if (has_beforestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->beforestate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureStateBroadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 curstate = 2;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curstate(), target);
  }

  // optional uint32 beforestate = 3;
  if (has_beforestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->beforestate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureStateBroadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 curstate = 2;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstate());
    }

    // optional uint32 beforestate = 3;
    if (has_beforestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beforestate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureStateBroadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureStateBroadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureStateBroadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureStateBroadRsp::MergeFrom(const CreatureStateBroadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
    if (from.has_beforestate()) {
      set_beforestate(from.beforestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureStateBroadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureStateBroadRsp::CopyFrom(const CreatureStateBroadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureStateBroadRsp::IsInitialized() const {

  return true;
}

void CreatureStateBroadRsp::Swap(CreatureStateBroadRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(curstate_, other->curstate_);
    std::swap(beforestate_, other->beforestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureStateBroadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureStateBroadRsp_descriptor_;
  metadata.reflection = CreatureStateBroadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NoticeShowInfoRsp::kShowTypeFieldNumber;
const int NoticeShowInfoRsp::kAddValFieldNumber;
const int NoticeShowInfoRsp::kItemLstFieldNumber;
#endif  // !_MSC_VER

NoticeShowInfoRsp::NoticeShowInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoticeShowInfoRsp::InitAsDefaultInstance() {
  item_lst_ = const_cast< ::proto_ff::MultItemSimpleProto*>(&::proto_ff::MultItemSimpleProto::default_instance());
}

NoticeShowInfoRsp::NoticeShowInfoRsp(const NoticeShowInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoticeShowInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  show_type_ = 0;
  add_val_ = GOOGLE_ULONGLONG(0);
  item_lst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoticeShowInfoRsp::~NoticeShowInfoRsp() {
  SharedDtor();
}

void NoticeShowInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete item_lst_;
  }
}

void NoticeShowInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoticeShowInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeShowInfoRsp_descriptor_;
}

const NoticeShowInfoRsp& NoticeShowInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayer_2eproto();
  return *default_instance_;
}

NoticeShowInfoRsp* NoticeShowInfoRsp::default_instance_ = NULL;

NoticeShowInfoRsp* NoticeShowInfoRsp::New() const {
  return new NoticeShowInfoRsp;
}

void NoticeShowInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    show_type_ = 0;
    add_val_ = GOOGLE_ULONGLONG(0);
    if (has_item_lst()) {
      if (item_lst_ != NULL) item_lst_->::proto_ff::MultItemSimpleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoticeShowInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 show_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_type_)));
          set_has_show_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_val;
        break;
      }

      // optional uint64 add_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_val_)));
          set_has_add_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_lst;
        break;
      }

      // optional .proto_ff.MultItemSimpleProto item_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NoticeShowInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 show_type = 1;
  if (has_show_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->show_type(), output);
  }

  // optional uint64 add_val = 2;
  if (has_add_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->add_val(), output);
  }

  // optional .proto_ff.MultItemSimpleProto item_lst = 3;
  if (has_item_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_lst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoticeShowInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 show_type = 1;
  if (has_show_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->show_type(), target);
  }

  // optional uint64 add_val = 2;
  if (has_add_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->add_val(), target);
  }

  // optional .proto_ff.MultItemSimpleProto item_lst = 3;
  if (has_item_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_lst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoticeShowInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 show_type = 1;
    if (has_show_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_type());
    }

    // optional uint64 add_val = 2;
    if (has_add_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_val());
    }

    // optional .proto_ff.MultItemSimpleProto item_lst = 3;
    if (has_item_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_lst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoticeShowInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoticeShowInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoticeShowInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoticeShowInfoRsp::MergeFrom(const NoticeShowInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_show_type()) {
      set_show_type(from.show_type());
    }
    if (from.has_add_val()) {
      set_add_val(from.add_val());
    }
    if (from.has_item_lst()) {
      mutable_item_lst()->::proto_ff::MultItemSimpleProto::MergeFrom(from.item_lst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoticeShowInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeShowInfoRsp::CopyFrom(const NoticeShowInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeShowInfoRsp::IsInitialized() const {

  return true;
}

void NoticeShowInfoRsp::Swap(NoticeShowInfoRsp* other) {
  if (other != this) {
    std::swap(show_type_, other->show_type_);
    std::swap(add_val_, other->add_val_);
    std::swap(item_lst_, other->item_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoticeShowInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoticeShowInfoRsp_descriptor_;
  metadata.reflection = NoticeShowInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChgNameReq::kNameFieldNumber;
#endif  // !_MSC_VER

ChgNameReq::ChgNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChgNameReq::InitAsDefaultInstance() {
}

ChgNameReq::ChgNameReq(const ChgNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChgNameReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChgNameReq::~ChgNameReq() {
  SharedDtor();
}

void ChgNameReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChgNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChgNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChgNameReq_descriptor_;
}

const ChgNameReq& ChgNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayer_2eproto();
  return *default_instance_;
}

ChgNameReq* ChgNameReq::default_instance_ = NULL;

ChgNameReq* ChgNameReq::New() const {
  return new ChgNameReq;
}

void ChgNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChgNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChgNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChgNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChgNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChgNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChgNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChgNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChgNameReq::MergeFrom(const ChgNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChgNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChgNameReq::CopyFrom(const ChgNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChgNameReq::IsInitialized() const {

  return true;
}

void ChgNameReq::Swap(ChgNameReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChgNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChgNameReq_descriptor_;
  metadata.reflection = ChgNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChgNameRsp::kRetcodeFieldNumber;
const int ChgNameRsp::kNameFieldNumber;
#endif  // !_MSC_VER

ChgNameRsp::ChgNameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChgNameRsp::InitAsDefaultInstance() {
}

ChgNameRsp::ChgNameRsp(const ChgNameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChgNameRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChgNameRsp::~ChgNameRsp() {
  SharedDtor();
}

void ChgNameRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChgNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChgNameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChgNameRsp_descriptor_;
}

const ChgNameRsp& ChgNameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayer_2eproto();
  return *default_instance_;
}

ChgNameRsp* ChgNameRsp::default_instance_ = NULL;

ChgNameRsp* ChgNameRsp::New() const {
  return new ChgNameRsp;
}

void ChgNameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChgNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChgNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChgNameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChgNameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChgNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChgNameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChgNameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChgNameRsp::MergeFrom(const ChgNameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChgNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChgNameRsp::CopyFrom(const ChgNameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChgNameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChgNameRsp::Swap(ChgNameRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChgNameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChgNameRsp_descriptor_;
  metadata.reflection = ChgNameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReliveNotify::kNameFieldNumber;
const int PlayerReliveNotify::kLeftNumFieldNumber;
const int PlayerReliveNotify::kSecFieldNumber;
const int PlayerReliveNotify::kIsTiredFieldNumber;
const int PlayerReliveNotify::kAlreadyNumFieldNumber;
#endif  // !_MSC_VER

PlayerReliveNotify::PlayerReliveNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReliveNotify::InitAsDefaultInstance() {
}

PlayerReliveNotify::PlayerReliveNotify(const PlayerReliveNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReliveNotify::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  left_num_ = 0;
  sec_ = 0;
  is_tired_ = false;
  already_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReliveNotify::~PlayerReliveNotify() {
  SharedDtor();
}

void PlayerReliveNotify::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerReliveNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReliveNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReliveNotify_descriptor_;
}

const PlayerReliveNotify& PlayerReliveNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayer_2eproto();
  return *default_instance_;
}

PlayerReliveNotify* PlayerReliveNotify::default_instance_ = NULL;

PlayerReliveNotify* PlayerReliveNotify::New() const {
  return new PlayerReliveNotify;
}

void PlayerReliveNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    left_num_ = 0;
    sec_ = 0;
    is_tired_ = false;
    already_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReliveNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_num;
        break;
      }

      // optional int32 left_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sec;
        break;
      }

      // optional int32 sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_tired;
        break;
      }

      // optional bool is_tired = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_tired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tired_)));
          set_has_is_tired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_already_num;
        break;
      }

      // optional int32 already_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &already_num_)));
          set_has_already_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReliveNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional int32 left_num = 2;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_num(), output);
  }

  // optional int32 sec = 3;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sec(), output);
  }

  // optional bool is_tired = 4;
  if (has_is_tired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_tired(), output);
  }

  // optional int32 already_num = 5;
  if (has_already_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->already_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReliveNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 left_num = 2;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_num(), target);
  }

  // optional int32 sec = 3;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sec(), target);
  }

  // optional bool is_tired = 4;
  if (has_is_tired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_tired(), target);
  }

  // optional int32 already_num = 5;
  if (has_already_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->already_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReliveNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 left_num = 2;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_num());
    }

    // optional int32 sec = 3;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sec());
    }

    // optional bool is_tired = 4;
    if (has_is_tired()) {
      total_size += 1 + 1;
    }

    // optional int32 already_num = 5;
    if (has_already_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->already_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReliveNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReliveNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReliveNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReliveNotify::MergeFrom(const PlayerReliveNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_is_tired()) {
      set_is_tired(from.is_tired());
    }
    if (from.has_already_num()) {
      set_already_num(from.already_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReliveNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReliveNotify::CopyFrom(const PlayerReliveNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReliveNotify::IsInitialized() const {

  return true;
}

void PlayerReliveNotify::Swap(PlayerReliveNotify* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(left_num_, other->left_num_);
    std::swap(sec_, other->sec_);
    std::swap(is_tired_, other->is_tired_);
    std::swap(already_num_, other->already_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReliveNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReliveNotify_descriptor_;
  metadata.reflection = PlayerReliveNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReliveReq::kTypeFieldNumber;
#endif  // !_MSC_VER

PlayerReliveReq::PlayerReliveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReliveReq::InitAsDefaultInstance() {
}

PlayerReliveReq::PlayerReliveReq(const PlayerReliveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReliveReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReliveReq::~PlayerReliveReq() {
  SharedDtor();
}

void PlayerReliveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerReliveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReliveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReliveReq_descriptor_;
}

const PlayerReliveReq& PlayerReliveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayer_2eproto();
  return *default_instance_;
}

PlayerReliveReq* PlayerReliveReq::default_instance_ = NULL;

PlayerReliveReq* PlayerReliveReq::New() const {
  return new PlayerReliveReq;
}

void PlayerReliveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReliveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReliveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReliveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReliveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReliveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReliveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReliveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReliveReq::MergeFrom(const PlayerReliveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReliveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReliveReq::CopyFrom(const PlayerReliveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReliveReq::IsInitialized() const {

  return true;
}

void PlayerReliveReq::Swap(PlayerReliveReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReliveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReliveReq_descriptor_;
  metadata.reflection = PlayerReliveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReliveRsp::kRetFieldNumber;
#endif  // !_MSC_VER

PlayerReliveRsp::PlayerReliveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReliveRsp::InitAsDefaultInstance() {
}

PlayerReliveRsp::PlayerReliveRsp(const PlayerReliveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReliveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReliveRsp::~PlayerReliveRsp() {
  SharedDtor();
}

void PlayerReliveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerReliveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReliveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReliveRsp_descriptor_;
}

const PlayerReliveRsp& PlayerReliveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayer_2eproto();
  return *default_instance_;
}

PlayerReliveRsp* PlayerReliveRsp::default_instance_ = NULL;

PlayerReliveRsp* PlayerReliveRsp::New() const {
  return new PlayerReliveRsp;
}

void PlayerReliveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReliveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReliveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReliveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReliveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReliveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReliveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReliveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReliveRsp::MergeFrom(const PlayerReliveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReliveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReliveRsp::CopyFrom(const PlayerReliveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReliveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerReliveRsp::Swap(PlayerReliveRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReliveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReliveRsp_descriptor_;
  metadata.reflection = PlayerReliveRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
