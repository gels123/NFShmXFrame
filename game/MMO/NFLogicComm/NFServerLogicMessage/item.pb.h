// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#ifndef PROTOBUF_item_2eproto__INCLUDED
#define PROTOBUF_item_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_item_2eproto();
void protobuf_AssignDesc_item_2eproto();
void protobuf_ShutdownFile_item_2eproto();

class E_ItemItem;
class Sheet_ItemItem;

// ===================================================================

class E_ItemItem : public ::google::protobuf::Message {
 public:
  E_ItemItem();
  virtual ~E_ItemItem();

  E_ItemItem(const E_ItemItem& from);

  inline E_ItemItem& operator=(const E_ItemItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_ItemItem& default_instance();

  void Swap(E_ItemItem* other);

  // implements Message ----------------------------------------------

  E_ItemItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_ItemItem& from);
  void MergeFrom(const E_ItemItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // optional string m_name = 2;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 2;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional int32 m_itemtype = 3;
  inline bool has_m_itemtype() const;
  inline void clear_m_itemtype();
  static const int kMItemtypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_itemtype() const;
  inline void set_m_itemtype(::google::protobuf::int32 value);

  // optional int32 m_subtype = 4;
  inline bool has_m_subtype() const;
  inline void clear_m_subtype();
  static const int kMSubtypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_subtype() const;
  inline void set_m_subtype(::google::protobuf::int32 value);

  // optional int32 m_functiontype = 5;
  inline bool has_m_functiontype() const;
  inline void clear_m_functiontype();
  static const int kMFunctiontypeFieldNumber = 5;
  inline ::google::protobuf::int32 m_functiontype() const;
  inline void set_m_functiontype(::google::protobuf::int32 value);

  // optional string m_functionvalue = 6;
  inline bool has_m_functionvalue() const;
  inline void clear_m_functionvalue();
  static const int kMFunctionvalueFieldNumber = 6;
  inline const ::std::string& m_functionvalue() const;
  inline void set_m_functionvalue(const ::std::string& value);
  inline void set_m_functionvalue(const char* value);
  inline void set_m_functionvalue(const char* value, size_t size);
  inline ::std::string* mutable_m_functionvalue();
  inline ::std::string* release_m_functionvalue();
  inline void set_allocated_m_functionvalue(::std::string* m_functionvalue);

  // optional string m_usecondition = 7;
  inline bool has_m_usecondition() const;
  inline void clear_m_usecondition();
  static const int kMUseconditionFieldNumber = 7;
  inline const ::std::string& m_usecondition() const;
  inline void set_m_usecondition(const ::std::string& value);
  inline void set_m_usecondition(const char* value);
  inline void set_m_usecondition(const char* value, size_t size);
  inline ::std::string* mutable_m_usecondition();
  inline ::std::string* release_m_usecondition();
  inline void set_allocated_m_usecondition(::std::string* m_usecondition);

  // optional int64 m_waiguanlink = 8;
  inline bool has_m_waiguanlink() const;
  inline void clear_m_waiguanlink();
  static const int kMWaiguanlinkFieldNumber = 8;
  inline ::google::protobuf::int64 m_waiguanlink() const;
  inline void set_m_waiguanlink(::google::protobuf::int64 value);

  // optional int32 m_level = 9;
  inline bool has_m_level() const;
  inline void clear_m_level();
  static const int kMLevelFieldNumber = 9;
  inline ::google::protobuf::int32 m_level() const;
  inline void set_m_level(::google::protobuf::int32 value);

  // optional int32 m_quality = 10;
  inline bool has_m_quality() const;
  inline void clear_m_quality();
  static const int kMQualityFieldNumber = 10;
  inline ::google::protobuf::int32 m_quality() const;
  inline void set_m_quality(::google::protobuf::int32 value);

  // optional int32 m_levelrequest = 11;
  inline bool has_m_levelrequest() const;
  inline void clear_m_levelrequest();
  static const int kMLevelrequestFieldNumber = 11;
  inline ::google::protobuf::int32 m_levelrequest() const;
  inline void set_m_levelrequest(::google::protobuf::int32 value);

  // optional string m_profession = 12;
  inline bool has_m_profession() const;
  inline void clear_m_profession();
  static const int kMProfessionFieldNumber = 12;
  inline const ::std::string& m_profession() const;
  inline void set_m_profession(const ::std::string& value);
  inline void set_m_profession(const char* value);
  inline void set_m_profession(const char* value, size_t size);
  inline ::std::string* mutable_m_profession();
  inline ::std::string* release_m_profession();
  inline void set_allocated_m_profession(::std::string* m_profession);

  // optional int32 m_bindtype = 13;
  inline bool has_m_bindtype() const;
  inline void clear_m_bindtype();
  static const int kMBindtypeFieldNumber = 13;
  inline ::google::protobuf::int32 m_bindtype() const;
  inline void set_m_bindtype(::google::protobuf::int32 value);

  // optional int32 m_istradebind = 14;
  inline bool has_m_istradebind() const;
  inline void clear_m_istradebind();
  static const int kMIstradebindFieldNumber = 14;
  inline ::google::protobuf::int32 m_istradebind() const;
  inline void set_m_istradebind(::google::protobuf::int32 value);

  // optional int32 m_dropnum = 15;
  inline bool has_m_dropnum() const;
  inline void clear_m_dropnum();
  static const int kMDropnumFieldNumber = 15;
  inline ::google::protobuf::int32 m_dropnum() const;
  inline void set_m_dropnum(::google::protobuf::int32 value);

  // optional int32 m_stacklimit = 16;
  inline bool has_m_stacklimit() const;
  inline void clear_m_stacklimit();
  static const int kMStacklimitFieldNumber = 16;
  inline ::google::protobuf::int32 m_stacklimit() const;
  inline void set_m_stacklimit(::google::protobuf::int32 value);

  // optional int32 m_sellprice = 17;
  inline bool has_m_sellprice() const;
  inline void clear_m_sellprice();
  static const int kMSellpriceFieldNumber = 17;
  inline ::google::protobuf::int32 m_sellprice() const;
  inline void set_m_sellprice(::google::protobuf::int32 value);

  // optional int64 m_sellbox = 18;
  inline bool has_m_sellbox() const;
  inline void clear_m_sellbox();
  static const int kMSellboxFieldNumber = 18;
  inline ::google::protobuf::int64 m_sellbox() const;
  inline void set_m_sellbox(::google::protobuf::int64 value);

  // optional int32 m_broadcast = 19;
  inline bool has_m_broadcast() const;
  inline void clear_m_broadcast();
  static const int kMBroadcastFieldNumber = 19;
  inline ::google::protobuf::int32 m_broadcast() const;
  inline void set_m_broadcast(::google::protobuf::int32 value);

  // optional int32 m_iscanbatchuse = 20;
  inline bool has_m_iscanbatchuse() const;
  inline void clear_m_iscanbatchuse();
  static const int kMIscanbatchuseFieldNumber = 20;
  inline ::google::protobuf::int32 m_iscanbatchuse() const;
  inline void set_m_iscanbatchuse(::google::protobuf::int32 value);

  // optional int32 m_dayuse = 21;
  inline bool has_m_dayuse() const;
  inline void clear_m_dayuse();
  static const int kMDayuseFieldNumber = 21;
  inline ::google::protobuf::int32 m_dayuse() const;
  inline void set_m_dayuse(::google::protobuf::int32 value);

  // optional int32 m_time = 22;
  inline bool has_m_time() const;
  inline void clear_m_time();
  static const int kMTimeFieldNumber = 22;
  inline ::google::protobuf::int32 m_time() const;
  inline void set_m_time(::google::protobuf::int32 value);

  // optional string m_uselimit = 23;
  inline bool has_m_uselimit() const;
  inline void clear_m_uselimit();
  static const int kMUselimitFieldNumber = 23;
  inline const ::std::string& m_uselimit() const;
  inline void set_m_uselimit(const ::std::string& value);
  inline void set_m_uselimit(const char* value);
  inline void set_m_uselimit(const char* value, size_t size);
  inline ::std::string* mutable_m_uselimit();
  inline ::std::string* release_m_uselimit();
  inline void set_allocated_m_uselimit(::std::string* m_uselimit);

  // optional int32 m_blessing = 24;
  inline bool has_m_blessing() const;
  inline void clear_m_blessing();
  static const int kMBlessingFieldNumber = 24;
  inline ::google::protobuf::int32 m_blessing() const;
  inline void set_m_blessing(::google::protobuf::int32 value);

  // optional int32 m_invest = 25;
  inline bool has_m_invest() const;
  inline void clear_m_invest();
  static const int kMInvestFieldNumber = 25;
  inline ::google::protobuf::int32 m_invest() const;
  inline void set_m_invest(::google::protobuf::int32 value);

  // optional int32 m_exchange = 26;
  inline bool has_m_exchange() const;
  inline void clear_m_exchange();
  static const int kMExchangeFieldNumber = 26;
  inline ::google::protobuf::int32 m_exchange() const;
  inline void set_m_exchange(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_ItemItem)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_itemtype();
  inline void clear_has_m_itemtype();
  inline void set_has_m_subtype();
  inline void clear_has_m_subtype();
  inline void set_has_m_functiontype();
  inline void clear_has_m_functiontype();
  inline void set_has_m_functionvalue();
  inline void clear_has_m_functionvalue();
  inline void set_has_m_usecondition();
  inline void clear_has_m_usecondition();
  inline void set_has_m_waiguanlink();
  inline void clear_has_m_waiguanlink();
  inline void set_has_m_level();
  inline void clear_has_m_level();
  inline void set_has_m_quality();
  inline void clear_has_m_quality();
  inline void set_has_m_levelrequest();
  inline void clear_has_m_levelrequest();
  inline void set_has_m_profession();
  inline void clear_has_m_profession();
  inline void set_has_m_bindtype();
  inline void clear_has_m_bindtype();
  inline void set_has_m_istradebind();
  inline void clear_has_m_istradebind();
  inline void set_has_m_dropnum();
  inline void clear_has_m_dropnum();
  inline void set_has_m_stacklimit();
  inline void clear_has_m_stacklimit();
  inline void set_has_m_sellprice();
  inline void clear_has_m_sellprice();
  inline void set_has_m_sellbox();
  inline void clear_has_m_sellbox();
  inline void set_has_m_broadcast();
  inline void clear_has_m_broadcast();
  inline void set_has_m_iscanbatchuse();
  inline void clear_has_m_iscanbatchuse();
  inline void set_has_m_dayuse();
  inline void clear_has_m_dayuse();
  inline void set_has_m_time();
  inline void clear_has_m_time();
  inline void set_has_m_uselimit();
  inline void clear_has_m_uselimit();
  inline void set_has_m_blessing();
  inline void clear_has_m_blessing();
  inline void set_has_m_invest();
  inline void clear_has_m_invest();
  inline void set_has_m_exchange();
  inline void clear_has_m_exchange();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;
  ::std::string* m_name_;
  ::google::protobuf::int32 m_itemtype_;
  ::google::protobuf::int32 m_subtype_;
  ::std::string* m_functionvalue_;
  ::std::string* m_usecondition_;
  ::google::protobuf::int32 m_functiontype_;
  ::google::protobuf::int32 m_level_;
  ::google::protobuf::int64 m_waiguanlink_;
  ::google::protobuf::int32 m_quality_;
  ::google::protobuf::int32 m_levelrequest_;
  ::std::string* m_profession_;
  ::google::protobuf::int32 m_bindtype_;
  ::google::protobuf::int32 m_istradebind_;
  ::google::protobuf::int32 m_dropnum_;
  ::google::protobuf::int32 m_stacklimit_;
  ::google::protobuf::int64 m_sellbox_;
  ::google::protobuf::int32 m_sellprice_;
  ::google::protobuf::int32 m_broadcast_;
  ::google::protobuf::int32 m_iscanbatchuse_;
  ::google::protobuf::int32 m_dayuse_;
  ::std::string* m_uselimit_;
  ::google::protobuf::int32 m_time_;
  ::google::protobuf::int32 m_blessing_;
  ::google::protobuf::int32 m_invest_;
  ::google::protobuf::int32 m_exchange_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_item_2eproto();
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static E_ItemItem* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_ItemItem : public ::google::protobuf::Message {
 public:
  Sheet_ItemItem();
  virtual ~Sheet_ItemItem();

  Sheet_ItemItem(const Sheet_ItemItem& from);

  inline Sheet_ItemItem& operator=(const Sheet_ItemItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_ItemItem& default_instance();

  void Swap(Sheet_ItemItem* other);

  // implements Message ----------------------------------------------

  Sheet_ItemItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_ItemItem& from);
  void MergeFrom(const Sheet_ItemItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_ItemItem E_ItemItem_List = 1;
  inline int e_itemitem_list_size() const;
  inline void clear_e_itemitem_list();
  static const int kEItemItemListFieldNumber = 1;
  inline const ::proto_ff::E_ItemItem& e_itemitem_list(int index) const;
  inline ::proto_ff::E_ItemItem* mutable_e_itemitem_list(int index);
  inline ::proto_ff::E_ItemItem* add_e_itemitem_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ItemItem >&
      e_itemitem_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ItemItem >*
      mutable_e_itemitem_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_ItemItem)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ItemItem > e_itemitem_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_item_2eproto();
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static Sheet_ItemItem* default_instance_;
};
// ===================================================================


// ===================================================================

// E_ItemItem

// optional int64 m_id = 1;
inline bool E_ItemItem::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_ItemItem::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_ItemItem::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_ItemItem::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_ItemItem::m_id() const {
  return m_id_;
}
inline void E_ItemItem::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_name = 2;
inline bool E_ItemItem::has_m_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_ItemItem::set_has_m_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_ItemItem::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_ItemItem::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& E_ItemItem::m_name() const {
  return *m_name_;
}
inline void E_ItemItem::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_ItemItem::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_ItemItem::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_ItemItem::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* E_ItemItem::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_ItemItem::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_itemtype = 3;
inline bool E_ItemItem::has_m_itemtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_ItemItem::set_has_m_itemtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_ItemItem::clear_has_m_itemtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_ItemItem::clear_m_itemtype() {
  m_itemtype_ = 0;
  clear_has_m_itemtype();
}
inline ::google::protobuf::int32 E_ItemItem::m_itemtype() const {
  return m_itemtype_;
}
inline void E_ItemItem::set_m_itemtype(::google::protobuf::int32 value) {
  set_has_m_itemtype();
  m_itemtype_ = value;
}

// optional int32 m_subtype = 4;
inline bool E_ItemItem::has_m_subtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_ItemItem::set_has_m_subtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_ItemItem::clear_has_m_subtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_ItemItem::clear_m_subtype() {
  m_subtype_ = 0;
  clear_has_m_subtype();
}
inline ::google::protobuf::int32 E_ItemItem::m_subtype() const {
  return m_subtype_;
}
inline void E_ItemItem::set_m_subtype(::google::protobuf::int32 value) {
  set_has_m_subtype();
  m_subtype_ = value;
}

// optional int32 m_functiontype = 5;
inline bool E_ItemItem::has_m_functiontype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_ItemItem::set_has_m_functiontype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_ItemItem::clear_has_m_functiontype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_ItemItem::clear_m_functiontype() {
  m_functiontype_ = 0;
  clear_has_m_functiontype();
}
inline ::google::protobuf::int32 E_ItemItem::m_functiontype() const {
  return m_functiontype_;
}
inline void E_ItemItem::set_m_functiontype(::google::protobuf::int32 value) {
  set_has_m_functiontype();
  m_functiontype_ = value;
}

// optional string m_functionvalue = 6;
inline bool E_ItemItem::has_m_functionvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_ItemItem::set_has_m_functionvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_ItemItem::clear_has_m_functionvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_ItemItem::clear_m_functionvalue() {
  if (m_functionvalue_ != &::google::protobuf::internal::kEmptyString) {
    m_functionvalue_->clear();
  }
  clear_has_m_functionvalue();
}
inline const ::std::string& E_ItemItem::m_functionvalue() const {
  return *m_functionvalue_;
}
inline void E_ItemItem::set_m_functionvalue(const ::std::string& value) {
  set_has_m_functionvalue();
  if (m_functionvalue_ == &::google::protobuf::internal::kEmptyString) {
    m_functionvalue_ = new ::std::string;
  }
  m_functionvalue_->assign(value);
}
inline void E_ItemItem::set_m_functionvalue(const char* value) {
  set_has_m_functionvalue();
  if (m_functionvalue_ == &::google::protobuf::internal::kEmptyString) {
    m_functionvalue_ = new ::std::string;
  }
  m_functionvalue_->assign(value);
}
inline void E_ItemItem::set_m_functionvalue(const char* value, size_t size) {
  set_has_m_functionvalue();
  if (m_functionvalue_ == &::google::protobuf::internal::kEmptyString) {
    m_functionvalue_ = new ::std::string;
  }
  m_functionvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_ItemItem::mutable_m_functionvalue() {
  set_has_m_functionvalue();
  if (m_functionvalue_ == &::google::protobuf::internal::kEmptyString) {
    m_functionvalue_ = new ::std::string;
  }
  return m_functionvalue_;
}
inline ::std::string* E_ItemItem::release_m_functionvalue() {
  clear_has_m_functionvalue();
  if (m_functionvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_functionvalue_;
    m_functionvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_ItemItem::set_allocated_m_functionvalue(::std::string* m_functionvalue) {
  if (m_functionvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete m_functionvalue_;
  }
  if (m_functionvalue) {
    set_has_m_functionvalue();
    m_functionvalue_ = m_functionvalue;
  } else {
    clear_has_m_functionvalue();
    m_functionvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_usecondition = 7;
inline bool E_ItemItem::has_m_usecondition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_ItemItem::set_has_m_usecondition() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_ItemItem::clear_has_m_usecondition() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_ItemItem::clear_m_usecondition() {
  if (m_usecondition_ != &::google::protobuf::internal::kEmptyString) {
    m_usecondition_->clear();
  }
  clear_has_m_usecondition();
}
inline const ::std::string& E_ItemItem::m_usecondition() const {
  return *m_usecondition_;
}
inline void E_ItemItem::set_m_usecondition(const ::std::string& value) {
  set_has_m_usecondition();
  if (m_usecondition_ == &::google::protobuf::internal::kEmptyString) {
    m_usecondition_ = new ::std::string;
  }
  m_usecondition_->assign(value);
}
inline void E_ItemItem::set_m_usecondition(const char* value) {
  set_has_m_usecondition();
  if (m_usecondition_ == &::google::protobuf::internal::kEmptyString) {
    m_usecondition_ = new ::std::string;
  }
  m_usecondition_->assign(value);
}
inline void E_ItemItem::set_m_usecondition(const char* value, size_t size) {
  set_has_m_usecondition();
  if (m_usecondition_ == &::google::protobuf::internal::kEmptyString) {
    m_usecondition_ = new ::std::string;
  }
  m_usecondition_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_ItemItem::mutable_m_usecondition() {
  set_has_m_usecondition();
  if (m_usecondition_ == &::google::protobuf::internal::kEmptyString) {
    m_usecondition_ = new ::std::string;
  }
  return m_usecondition_;
}
inline ::std::string* E_ItemItem::release_m_usecondition() {
  clear_has_m_usecondition();
  if (m_usecondition_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_usecondition_;
    m_usecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_ItemItem::set_allocated_m_usecondition(::std::string* m_usecondition) {
  if (m_usecondition_ != &::google::protobuf::internal::kEmptyString) {
    delete m_usecondition_;
  }
  if (m_usecondition) {
    set_has_m_usecondition();
    m_usecondition_ = m_usecondition;
  } else {
    clear_has_m_usecondition();
    m_usecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 m_waiguanlink = 8;
inline bool E_ItemItem::has_m_waiguanlink() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_ItemItem::set_has_m_waiguanlink() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_ItemItem::clear_has_m_waiguanlink() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_ItemItem::clear_m_waiguanlink() {
  m_waiguanlink_ = GOOGLE_LONGLONG(0);
  clear_has_m_waiguanlink();
}
inline ::google::protobuf::int64 E_ItemItem::m_waiguanlink() const {
  return m_waiguanlink_;
}
inline void E_ItemItem::set_m_waiguanlink(::google::protobuf::int64 value) {
  set_has_m_waiguanlink();
  m_waiguanlink_ = value;
}

// optional int32 m_level = 9;
inline bool E_ItemItem::has_m_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_ItemItem::set_has_m_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_ItemItem::clear_has_m_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_ItemItem::clear_m_level() {
  m_level_ = 0;
  clear_has_m_level();
}
inline ::google::protobuf::int32 E_ItemItem::m_level() const {
  return m_level_;
}
inline void E_ItemItem::set_m_level(::google::protobuf::int32 value) {
  set_has_m_level();
  m_level_ = value;
}

// optional int32 m_quality = 10;
inline bool E_ItemItem::has_m_quality() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_ItemItem::set_has_m_quality() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_ItemItem::clear_has_m_quality() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_ItemItem::clear_m_quality() {
  m_quality_ = 0;
  clear_has_m_quality();
}
inline ::google::protobuf::int32 E_ItemItem::m_quality() const {
  return m_quality_;
}
inline void E_ItemItem::set_m_quality(::google::protobuf::int32 value) {
  set_has_m_quality();
  m_quality_ = value;
}

// optional int32 m_levelrequest = 11;
inline bool E_ItemItem::has_m_levelrequest() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_ItemItem::set_has_m_levelrequest() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_ItemItem::clear_has_m_levelrequest() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_ItemItem::clear_m_levelrequest() {
  m_levelrequest_ = 0;
  clear_has_m_levelrequest();
}
inline ::google::protobuf::int32 E_ItemItem::m_levelrequest() const {
  return m_levelrequest_;
}
inline void E_ItemItem::set_m_levelrequest(::google::protobuf::int32 value) {
  set_has_m_levelrequest();
  m_levelrequest_ = value;
}

// optional string m_profession = 12;
inline bool E_ItemItem::has_m_profession() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_ItemItem::set_has_m_profession() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_ItemItem::clear_has_m_profession() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_ItemItem::clear_m_profession() {
  if (m_profession_ != &::google::protobuf::internal::kEmptyString) {
    m_profession_->clear();
  }
  clear_has_m_profession();
}
inline const ::std::string& E_ItemItem::m_profession() const {
  return *m_profession_;
}
inline void E_ItemItem::set_m_profession(const ::std::string& value) {
  set_has_m_profession();
  if (m_profession_ == &::google::protobuf::internal::kEmptyString) {
    m_profession_ = new ::std::string;
  }
  m_profession_->assign(value);
}
inline void E_ItemItem::set_m_profession(const char* value) {
  set_has_m_profession();
  if (m_profession_ == &::google::protobuf::internal::kEmptyString) {
    m_profession_ = new ::std::string;
  }
  m_profession_->assign(value);
}
inline void E_ItemItem::set_m_profession(const char* value, size_t size) {
  set_has_m_profession();
  if (m_profession_ == &::google::protobuf::internal::kEmptyString) {
    m_profession_ = new ::std::string;
  }
  m_profession_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_ItemItem::mutable_m_profession() {
  set_has_m_profession();
  if (m_profession_ == &::google::protobuf::internal::kEmptyString) {
    m_profession_ = new ::std::string;
  }
  return m_profession_;
}
inline ::std::string* E_ItemItem::release_m_profession() {
  clear_has_m_profession();
  if (m_profession_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_profession_;
    m_profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_ItemItem::set_allocated_m_profession(::std::string* m_profession) {
  if (m_profession_ != &::google::protobuf::internal::kEmptyString) {
    delete m_profession_;
  }
  if (m_profession) {
    set_has_m_profession();
    m_profession_ = m_profession;
  } else {
    clear_has_m_profession();
    m_profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_bindtype = 13;
inline bool E_ItemItem::has_m_bindtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_ItemItem::set_has_m_bindtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_ItemItem::clear_has_m_bindtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_ItemItem::clear_m_bindtype() {
  m_bindtype_ = 0;
  clear_has_m_bindtype();
}
inline ::google::protobuf::int32 E_ItemItem::m_bindtype() const {
  return m_bindtype_;
}
inline void E_ItemItem::set_m_bindtype(::google::protobuf::int32 value) {
  set_has_m_bindtype();
  m_bindtype_ = value;
}

// optional int32 m_istradebind = 14;
inline bool E_ItemItem::has_m_istradebind() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_ItemItem::set_has_m_istradebind() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_ItemItem::clear_has_m_istradebind() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_ItemItem::clear_m_istradebind() {
  m_istradebind_ = 0;
  clear_has_m_istradebind();
}
inline ::google::protobuf::int32 E_ItemItem::m_istradebind() const {
  return m_istradebind_;
}
inline void E_ItemItem::set_m_istradebind(::google::protobuf::int32 value) {
  set_has_m_istradebind();
  m_istradebind_ = value;
}

// optional int32 m_dropnum = 15;
inline bool E_ItemItem::has_m_dropnum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_ItemItem::set_has_m_dropnum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_ItemItem::clear_has_m_dropnum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_ItemItem::clear_m_dropnum() {
  m_dropnum_ = 0;
  clear_has_m_dropnum();
}
inline ::google::protobuf::int32 E_ItemItem::m_dropnum() const {
  return m_dropnum_;
}
inline void E_ItemItem::set_m_dropnum(::google::protobuf::int32 value) {
  set_has_m_dropnum();
  m_dropnum_ = value;
}

// optional int32 m_stacklimit = 16;
inline bool E_ItemItem::has_m_stacklimit() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_ItemItem::set_has_m_stacklimit() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_ItemItem::clear_has_m_stacklimit() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_ItemItem::clear_m_stacklimit() {
  m_stacklimit_ = 0;
  clear_has_m_stacklimit();
}
inline ::google::protobuf::int32 E_ItemItem::m_stacklimit() const {
  return m_stacklimit_;
}
inline void E_ItemItem::set_m_stacklimit(::google::protobuf::int32 value) {
  set_has_m_stacklimit();
  m_stacklimit_ = value;
}

// optional int32 m_sellprice = 17;
inline bool E_ItemItem::has_m_sellprice() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_ItemItem::set_has_m_sellprice() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_ItemItem::clear_has_m_sellprice() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_ItemItem::clear_m_sellprice() {
  m_sellprice_ = 0;
  clear_has_m_sellprice();
}
inline ::google::protobuf::int32 E_ItemItem::m_sellprice() const {
  return m_sellprice_;
}
inline void E_ItemItem::set_m_sellprice(::google::protobuf::int32 value) {
  set_has_m_sellprice();
  m_sellprice_ = value;
}

// optional int64 m_sellbox = 18;
inline bool E_ItemItem::has_m_sellbox() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void E_ItemItem::set_has_m_sellbox() {
  _has_bits_[0] |= 0x00020000u;
}
inline void E_ItemItem::clear_has_m_sellbox() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void E_ItemItem::clear_m_sellbox() {
  m_sellbox_ = GOOGLE_LONGLONG(0);
  clear_has_m_sellbox();
}
inline ::google::protobuf::int64 E_ItemItem::m_sellbox() const {
  return m_sellbox_;
}
inline void E_ItemItem::set_m_sellbox(::google::protobuf::int64 value) {
  set_has_m_sellbox();
  m_sellbox_ = value;
}

// optional int32 m_broadcast = 19;
inline bool E_ItemItem::has_m_broadcast() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void E_ItemItem::set_has_m_broadcast() {
  _has_bits_[0] |= 0x00040000u;
}
inline void E_ItemItem::clear_has_m_broadcast() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void E_ItemItem::clear_m_broadcast() {
  m_broadcast_ = 0;
  clear_has_m_broadcast();
}
inline ::google::protobuf::int32 E_ItemItem::m_broadcast() const {
  return m_broadcast_;
}
inline void E_ItemItem::set_m_broadcast(::google::protobuf::int32 value) {
  set_has_m_broadcast();
  m_broadcast_ = value;
}

// optional int32 m_iscanbatchuse = 20;
inline bool E_ItemItem::has_m_iscanbatchuse() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void E_ItemItem::set_has_m_iscanbatchuse() {
  _has_bits_[0] |= 0x00080000u;
}
inline void E_ItemItem::clear_has_m_iscanbatchuse() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void E_ItemItem::clear_m_iscanbatchuse() {
  m_iscanbatchuse_ = 0;
  clear_has_m_iscanbatchuse();
}
inline ::google::protobuf::int32 E_ItemItem::m_iscanbatchuse() const {
  return m_iscanbatchuse_;
}
inline void E_ItemItem::set_m_iscanbatchuse(::google::protobuf::int32 value) {
  set_has_m_iscanbatchuse();
  m_iscanbatchuse_ = value;
}

// optional int32 m_dayuse = 21;
inline bool E_ItemItem::has_m_dayuse() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void E_ItemItem::set_has_m_dayuse() {
  _has_bits_[0] |= 0x00100000u;
}
inline void E_ItemItem::clear_has_m_dayuse() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void E_ItemItem::clear_m_dayuse() {
  m_dayuse_ = 0;
  clear_has_m_dayuse();
}
inline ::google::protobuf::int32 E_ItemItem::m_dayuse() const {
  return m_dayuse_;
}
inline void E_ItemItem::set_m_dayuse(::google::protobuf::int32 value) {
  set_has_m_dayuse();
  m_dayuse_ = value;
}

// optional int32 m_time = 22;
inline bool E_ItemItem::has_m_time() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void E_ItemItem::set_has_m_time() {
  _has_bits_[0] |= 0x00200000u;
}
inline void E_ItemItem::clear_has_m_time() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void E_ItemItem::clear_m_time() {
  m_time_ = 0;
  clear_has_m_time();
}
inline ::google::protobuf::int32 E_ItemItem::m_time() const {
  return m_time_;
}
inline void E_ItemItem::set_m_time(::google::protobuf::int32 value) {
  set_has_m_time();
  m_time_ = value;
}

// optional string m_uselimit = 23;
inline bool E_ItemItem::has_m_uselimit() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void E_ItemItem::set_has_m_uselimit() {
  _has_bits_[0] |= 0x00400000u;
}
inline void E_ItemItem::clear_has_m_uselimit() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void E_ItemItem::clear_m_uselimit() {
  if (m_uselimit_ != &::google::protobuf::internal::kEmptyString) {
    m_uselimit_->clear();
  }
  clear_has_m_uselimit();
}
inline const ::std::string& E_ItemItem::m_uselimit() const {
  return *m_uselimit_;
}
inline void E_ItemItem::set_m_uselimit(const ::std::string& value) {
  set_has_m_uselimit();
  if (m_uselimit_ == &::google::protobuf::internal::kEmptyString) {
    m_uselimit_ = new ::std::string;
  }
  m_uselimit_->assign(value);
}
inline void E_ItemItem::set_m_uselimit(const char* value) {
  set_has_m_uselimit();
  if (m_uselimit_ == &::google::protobuf::internal::kEmptyString) {
    m_uselimit_ = new ::std::string;
  }
  m_uselimit_->assign(value);
}
inline void E_ItemItem::set_m_uselimit(const char* value, size_t size) {
  set_has_m_uselimit();
  if (m_uselimit_ == &::google::protobuf::internal::kEmptyString) {
    m_uselimit_ = new ::std::string;
  }
  m_uselimit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_ItemItem::mutable_m_uselimit() {
  set_has_m_uselimit();
  if (m_uselimit_ == &::google::protobuf::internal::kEmptyString) {
    m_uselimit_ = new ::std::string;
  }
  return m_uselimit_;
}
inline ::std::string* E_ItemItem::release_m_uselimit() {
  clear_has_m_uselimit();
  if (m_uselimit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_uselimit_;
    m_uselimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_ItemItem::set_allocated_m_uselimit(::std::string* m_uselimit) {
  if (m_uselimit_ != &::google::protobuf::internal::kEmptyString) {
    delete m_uselimit_;
  }
  if (m_uselimit) {
    set_has_m_uselimit();
    m_uselimit_ = m_uselimit;
  } else {
    clear_has_m_uselimit();
    m_uselimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_blessing = 24;
inline bool E_ItemItem::has_m_blessing() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void E_ItemItem::set_has_m_blessing() {
  _has_bits_[0] |= 0x00800000u;
}
inline void E_ItemItem::clear_has_m_blessing() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void E_ItemItem::clear_m_blessing() {
  m_blessing_ = 0;
  clear_has_m_blessing();
}
inline ::google::protobuf::int32 E_ItemItem::m_blessing() const {
  return m_blessing_;
}
inline void E_ItemItem::set_m_blessing(::google::protobuf::int32 value) {
  set_has_m_blessing();
  m_blessing_ = value;
}

// optional int32 m_invest = 25;
inline bool E_ItemItem::has_m_invest() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void E_ItemItem::set_has_m_invest() {
  _has_bits_[0] |= 0x01000000u;
}
inline void E_ItemItem::clear_has_m_invest() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void E_ItemItem::clear_m_invest() {
  m_invest_ = 0;
  clear_has_m_invest();
}
inline ::google::protobuf::int32 E_ItemItem::m_invest() const {
  return m_invest_;
}
inline void E_ItemItem::set_m_invest(::google::protobuf::int32 value) {
  set_has_m_invest();
  m_invest_ = value;
}

// optional int32 m_exchange = 26;
inline bool E_ItemItem::has_m_exchange() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void E_ItemItem::set_has_m_exchange() {
  _has_bits_[0] |= 0x02000000u;
}
inline void E_ItemItem::clear_has_m_exchange() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void E_ItemItem::clear_m_exchange() {
  m_exchange_ = 0;
  clear_has_m_exchange();
}
inline ::google::protobuf::int32 E_ItemItem::m_exchange() const {
  return m_exchange_;
}
inline void E_ItemItem::set_m_exchange(::google::protobuf::int32 value) {
  set_has_m_exchange();
  m_exchange_ = value;
}

// -------------------------------------------------------------------

// Sheet_ItemItem

// repeated .proto_ff.E_ItemItem E_ItemItem_List = 1;
inline int Sheet_ItemItem::e_itemitem_list_size() const {
  return e_itemitem_list_.size();
}
inline void Sheet_ItemItem::clear_e_itemitem_list() {
  e_itemitem_list_.Clear();
}
inline const ::proto_ff::E_ItemItem& Sheet_ItemItem::e_itemitem_list(int index) const {
  return e_itemitem_list_.Get(index);
}
inline ::proto_ff::E_ItemItem* Sheet_ItemItem::mutable_e_itemitem_list(int index) {
  return e_itemitem_list_.Mutable(index);
}
inline ::proto_ff::E_ItemItem* Sheet_ItemItem::add_e_itemitem_list() {
  return e_itemitem_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ItemItem >&
Sheet_ItemItem::e_itemitem_list() const {
  return e_itemitem_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ItemItem >*
Sheet_ItemItem::mutable_e_itemitem_list() {
  return &e_itemitem_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_item_2eproto__INCLUDED
