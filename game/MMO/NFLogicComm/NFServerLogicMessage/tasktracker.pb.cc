// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tasktracker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tasktracker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* tasktrackertasktracker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tasktrackertasktracker_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_tasktrackertasktracker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_tasktrackertasktracker_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tasktracker_2eproto() {
  protobuf_AddDesc_tasktracker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tasktracker.proto");
  GOOGLE_CHECK(file != NULL);
  tasktrackertasktracker_descriptor_ = file->message_type(0);
  static const int tasktrackertasktracker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktrackertasktracker, comid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktrackertasktracker, trueid_),
  };
  tasktrackertasktracker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tasktrackertasktracker_descriptor_,
      tasktrackertasktracker::default_instance_,
      tasktrackertasktracker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktrackertasktracker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktrackertasktracker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tasktrackertasktracker));
  Sheet_tasktrackertasktracker_descriptor_ = file->message_type(1);
  static const int Sheet_tasktrackertasktracker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_tasktrackertasktracker, tasktrackertasktracker_list_),
  };
  Sheet_tasktrackertasktracker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_tasktrackertasktracker_descriptor_,
      Sheet_tasktrackertasktracker::default_instance_,
      Sheet_tasktrackertasktracker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_tasktrackertasktracker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_tasktrackertasktracker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_tasktrackertasktracker));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tasktracker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tasktrackertasktracker_descriptor_, &tasktrackertasktracker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_tasktrackertasktracker_descriptor_, &Sheet_tasktrackertasktracker::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tasktracker_2eproto() {
  delete tasktrackertasktracker::default_instance_;
  delete tasktrackertasktracker_reflection_;
  delete Sheet_tasktrackertasktracker::default_instance_;
  delete Sheet_tasktrackertasktracker_reflection_;
}

void protobuf_AddDesc_tasktracker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021tasktracker.proto\022\010proto_ff\032\025yd_fieldo"
    "ptions.proto\"q\n\026tasktrackertasktracker\022\'"
    "\n\005comID\030\001 \001(\005B\030\302\377\024\024\345\256\214\346\210\220\346\235\241\344\273\266\347\261\273\345\236\213ID\022"
    ".\n\006trueID\030\002 \001(\005B\036\302\377\024\032\345\256\236\351\231\205\345\256\214\346\210\220\346\235\241\344\273\266\347"
    "\261\273\345\236\213ID\"k\n\034Sheet_tasktrackertasktracker\022"
    "K\n\033tasktrackertasktracker_List\030\001 \003(\0132 .p"
    "roto_ff.tasktrackertasktrackerB\004\210\301\024<", 276);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tasktracker.proto", &protobuf_RegisterTypes);
  tasktrackertasktracker::default_instance_ = new tasktrackertasktracker();
  Sheet_tasktrackertasktracker::default_instance_ = new Sheet_tasktrackertasktracker();
  tasktrackertasktracker::default_instance_->InitAsDefaultInstance();
  Sheet_tasktrackertasktracker::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tasktracker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tasktracker_2eproto {
  StaticDescriptorInitializer_tasktracker_2eproto() {
    protobuf_AddDesc_tasktracker_2eproto();
  }
} static_descriptor_initializer_tasktracker_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tasktrackertasktracker::kComIDFieldNumber;
const int tasktrackertasktracker::kTrueIDFieldNumber;
#endif  // !_MSC_VER

tasktrackertasktracker::tasktrackertasktracker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tasktrackertasktracker::InitAsDefaultInstance() {
}

tasktrackertasktracker::tasktrackertasktracker(const tasktrackertasktracker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tasktrackertasktracker::SharedCtor() {
  _cached_size_ = 0;
  comid_ = 0;
  trueid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tasktrackertasktracker::~tasktrackertasktracker() {
  SharedDtor();
}

void tasktrackertasktracker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tasktrackertasktracker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tasktrackertasktracker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tasktrackertasktracker_descriptor_;
}

const tasktrackertasktracker& tasktrackertasktracker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tasktracker_2eproto();
  return *default_instance_;
}

tasktrackertasktracker* tasktrackertasktracker::default_instance_ = NULL;

tasktrackertasktracker* tasktrackertasktracker::New() const {
  return new tasktrackertasktracker;
}

void tasktrackertasktracker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    comid_ = 0;
    trueid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tasktrackertasktracker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 comID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comid_)));
          set_has_comid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trueID;
        break;
      }

      // optional int32 trueID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trueID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trueid_)));
          set_has_trueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tasktrackertasktracker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 comID = 1;
  if (has_comid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->comid(), output);
  }

  // optional int32 trueID = 2;
  if (has_trueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tasktrackertasktracker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 comID = 1;
  if (has_comid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->comid(), target);
  }

  // optional int32 trueID = 2;
  if (has_trueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tasktrackertasktracker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 comID = 1;
    if (has_comid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comid());
    }

    // optional int32 trueID = 2;
    if (has_trueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tasktrackertasktracker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tasktrackertasktracker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tasktrackertasktracker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tasktrackertasktracker::MergeFrom(const tasktrackertasktracker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comid()) {
      set_comid(from.comid());
    }
    if (from.has_trueid()) {
      set_trueid(from.trueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tasktrackertasktracker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tasktrackertasktracker::CopyFrom(const tasktrackertasktracker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tasktrackertasktracker::IsInitialized() const {

  return true;
}

void tasktrackertasktracker::Swap(tasktrackertasktracker* other) {
  if (other != this) {
    std::swap(comid_, other->comid_);
    std::swap(trueid_, other->trueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tasktrackertasktracker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tasktrackertasktracker_descriptor_;
  metadata.reflection = tasktrackertasktracker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_tasktrackertasktracker::kTasktrackertasktrackerListFieldNumber;
#endif  // !_MSC_VER

Sheet_tasktrackertasktracker::Sheet_tasktrackertasktracker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_tasktrackertasktracker::InitAsDefaultInstance() {
}

Sheet_tasktrackertasktracker::Sheet_tasktrackertasktracker(const Sheet_tasktrackertasktracker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_tasktrackertasktracker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_tasktrackertasktracker::~Sheet_tasktrackertasktracker() {
  SharedDtor();
}

void Sheet_tasktrackertasktracker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_tasktrackertasktracker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_tasktrackertasktracker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_tasktrackertasktracker_descriptor_;
}

const Sheet_tasktrackertasktracker& Sheet_tasktrackertasktracker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tasktracker_2eproto();
  return *default_instance_;
}

Sheet_tasktrackertasktracker* Sheet_tasktrackertasktracker::default_instance_ = NULL;

Sheet_tasktrackertasktracker* Sheet_tasktrackertasktracker::New() const {
  return new Sheet_tasktrackertasktracker;
}

void Sheet_tasktrackertasktracker::Clear() {
  tasktrackertasktracker_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_tasktrackertasktracker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.tasktrackertasktracker tasktrackertasktracker_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasktrackertasktracker_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasktrackertasktracker_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasktrackertasktracker_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_tasktrackertasktracker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.tasktrackertasktracker tasktrackertasktracker_List = 1;
  for (int i = 0; i < this->tasktrackertasktracker_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasktrackertasktracker_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_tasktrackertasktracker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.tasktrackertasktracker tasktrackertasktracker_List = 1;
  for (int i = 0; i < this->tasktrackertasktracker_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasktrackertasktracker_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_tasktrackertasktracker::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.tasktrackertasktracker tasktrackertasktracker_List = 1;
  total_size += 1 * this->tasktrackertasktracker_list_size();
  for (int i = 0; i < this->tasktrackertasktracker_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasktrackertasktracker_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_tasktrackertasktracker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_tasktrackertasktracker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_tasktrackertasktracker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_tasktrackertasktracker::MergeFrom(const Sheet_tasktrackertasktracker& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasktrackertasktracker_list_.MergeFrom(from.tasktrackertasktracker_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_tasktrackertasktracker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_tasktrackertasktracker::CopyFrom(const Sheet_tasktrackertasktracker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_tasktrackertasktracker::IsInitialized() const {

  return true;
}

void Sheet_tasktrackertasktracker::Swap(Sheet_tasktrackertasktracker* other) {
  if (other != this) {
    tasktrackertasktracker_list_.Swap(&other->tasktrackertasktracker_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_tasktrackertasktracker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_tasktrackertasktracker_descriptor_;
  metadata.reflection = Sheet_tasktrackertasktracker_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
