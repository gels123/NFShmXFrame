// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drop.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* dropdropitemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dropdropitemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* dropdropitemTeamDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dropdropitemTeamDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* dropdropequipDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dropdropequipDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* dropdrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dropdrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_dropdrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_dropdrop_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_drop_2eproto() {
  protobuf_AddDesc_drop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "drop.proto");
  GOOGLE_CHECK(file != NULL);
  dropdropitemDesc_descriptor_ = file->message_type(0);
  static const int dropdropitemDesc_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemDesc, bd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemDesc, rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemDesc, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemDesc, qz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemDesc, minnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemDesc, id_),
  };
  dropdropitemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dropdropitemDesc_descriptor_,
      dropdropitemDesc::default_instance_,
      dropdropitemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dropdropitemDesc));
  dropdropitemTeamDesc_descriptor_ = file->message_type(1);
  static const int dropdropitemTeamDesc_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemTeamDesc, bd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemTeamDesc, rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemTeamDesc, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemTeamDesc, qz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemTeamDesc, minnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemTeamDesc, id_),
  };
  dropdropitemTeamDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dropdropitemTeamDesc_descriptor_,
      dropdropitemTeamDesc::default_instance_,
      dropdropitemTeamDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemTeamDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropitemTeamDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dropdropitemTeamDesc));
  dropdropequipDesc_descriptor_ = file->message_type(2);
  static const int dropdropequipDesc_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropequipDesc, rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropequipDesc, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropequipDesc, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropequipDesc, minnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropequipDesc, isbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropequipDesc, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropequipDesc, id_),
  };
  dropdropequipDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dropdropequipDesc_descriptor_,
      dropdropequipDesc::default_instance_,
      dropdropequipDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropequipDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdropequipDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dropdropequipDesc));
  dropdrop_descriptor_ = file->message_type(3);
  static const int dropdrop_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdrop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdrop, goldlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdrop, goldup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdrop, gold_heapmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdrop, gold_heapmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdrop, gold_rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdrop, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdrop, itemteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdrop, equip_),
  };
  dropdrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dropdrop_descriptor_,
      dropdrop::default_instance_,
      dropdrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dropdrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dropdrop));
  Sheet_dropdrop_descriptor_ = file->message_type(4);
  static const int Sheet_dropdrop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dropdrop, dropdrop_list_),
  };
  Sheet_dropdrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_dropdrop_descriptor_,
      Sheet_dropdrop::default_instance_,
      Sheet_dropdrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dropdrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dropdrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_dropdrop));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_drop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dropdropitemDesc_descriptor_, &dropdropitemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dropdropitemTeamDesc_descriptor_, &dropdropitemTeamDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dropdropequipDesc_descriptor_, &dropdropequipDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dropdrop_descriptor_, &dropdrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_dropdrop_descriptor_, &Sheet_dropdrop::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_drop_2eproto() {
  delete dropdropitemDesc::default_instance_;
  delete dropdropitemDesc_reflection_;
  delete dropdropitemTeamDesc::default_instance_;
  delete dropdropitemTeamDesc_reflection_;
  delete dropdropequipDesc::default_instance_;
  delete dropdropequipDesc_reflection_;
  delete dropdrop::default_instance_;
  delete dropdrop_reflection_;
  delete Sheet_dropdrop::default_instance_;
  delete Sheet_dropdrop_reflection_;
}

void protobuf_AddDesc_drop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndrop.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\311\001\n\020dropdropitemDesc\022!\n\002bd\030\001 \001(\tB\025"
    "\302\377\024\014\346\230\257\345\220\246\347\273\221\345\256\232\220\301\024\254\002\022\030\n\004rand\030\002 \001(\005B\n\302\377\024"
    "\006\346\246\202\347\216\207\022 \n\006maxNum\030\003 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\346\225\260\351\207"
    "\217\022\033\n\002QZ\030\004 \001(\tB\017\302\377\024\006\346\235\203\351\207\215\220\301\024\254\002\022 \n\006minNum"
    "\030\005 \001(\005B\020\302\377\024\014\346\234\200\345\260\217\346\225\260\351\207\217\022\027\n\002id\030\006 \001(\tB\013\302\377"
    "\024\002id\220\301\024\274\005\"\332\001\n\024dropdropitemTeamDesc\022 \n\002bd"
    "\030\001 \001(\tB\024\302\377\024\014\346\230\257\345\220\246\347\273\221\345\256\232\220\301\024<\022!\n\004rand\030\002 \001"
    "(\005B\023\302\377\024\017\346\246\202\347\216\207\347\231\276\345\210\206\346\257\224\022 \n\006maxNum\030\003 \001(\005B"
    "\020\302\377\024\014\346\234\200\345\244\247\346\225\260\351\207\217\022 \n\002QZ\030\004 \001(\tB\024\302\377\024\014\346\216\211\350\220"
    "\275\346\235\203\351\207\215\220\301\024x\022 \n\006minNum\030\005 \001(\005B\020\302\377\024\014\346\234\200\345\260\217\346"
    "\225\260\351\207\217\022\027\n\002id\030\006 \001(\tB\013\302\377\024\002id\220\301\024\310\001\"\203\002\n\021dropd"
    "ropequipDesc\022!\n\004rand\030\001 \001(\005B\023\302\377\024\017\346\246\202\347\216\207\347\231"
    "\276\345\210\206\346\257\224\022 \n\006maxNum\030\002 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\346\225\260\351\207"
    "\217\022\036\n\006weight\030\003 \001(\tB\016\302\377\024\006\346\235\203\351\207\215\220\301\024P\022 \n\006min"
    "Num\030\004 \001(\005B\020\302\377\024\014\346\234\200\345\260\217\346\225\260\351\207\217\022$\n\006isbind\030\005 "
    "\001(\tB\024\302\377\024\014\347\273\221\345\256\232\346\246\202\347\216\207\220\301\024<\022\"\n\004prof\030\006 \001(\tB"
    "\024\302\377\024\014\350\201\214\344\270\232\351\231\220\345\210\266\220\301\024<\022\035\n\002id\030\007 \001(\tB\021\302\377\024\010\351"
    "\201\223\345\205\267ID\220\301\024\264\001\"\317\003\n\010dropdrop\022\033\n\002id\030\001 \001(\003B\017\302"
    "\377\024\013\346\216\211\350\220\275\345\214\205ID\022*\n\007goldlow\030\002 \001(\005B\031\302\377\024\025\346\200\273"
    "\351\207\221\345\270\201\346\225\260\351\207\217\344\270\213\351\231\220\022)\n\006goldup\030\003 \001(\005B\031\302\377\024\025"
    "\346\200\273\351\207\221\345\270\201\346\225\260\351\207\217\344\270\212\351\231\220\022,\n\014gold_heapMin\030\004 "
    "\001(\005B\026\302\377\024\022\351\207\221\345\270\201\346\216\211\350\220\275\345\240\206\346\225\260\022,\n\014gold_heap"
    "Max\030\005 \001(\005B\026\302\377\024\022\351\207\221\345\270\201\346\216\211\350\220\275\345\240\206\346\225\260\022)\n\tgol"
    "d_rand\030\006 \001(\005B\026\302\377\024\022\351\207\221\345\270\201\346\216\211\350\220\275\346\246\202\347\216\207\022>\n\004"
    "item\030\007 \003(\0132\032.proto_ff.dropdropitemDescB\024"
    "\302\377\024\014\346\231\256\351\200\232\346\216\211\350\220\275\210\301\024 \022F\n\010itemTeam\030\010 \003(\0132\036"
    ".proto_ff.dropdropitemTeamDescB\024\302\377\024\014\347\250\200\346"
    "\234\211\346\216\211\350\220\275\210\301\024\005\022@\n\005equip\030\t \003(\0132\033.proto_ff.d"
    "ropdropequipDescB\024\302\377\024\014\350\201\214\344\270\232\346\216\211\350\220\275\210\301\024\001\"B"
    "\n\016Sheet_dropdrop\0220\n\rdropdrop_List\030\001 \003(\0132"
    "\022.proto_ff.dropdropB\005\210\301\024\320\017", 1266);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drop.proto", &protobuf_RegisterTypes);
  dropdropitemDesc::default_instance_ = new dropdropitemDesc();
  dropdropitemTeamDesc::default_instance_ = new dropdropitemTeamDesc();
  dropdropequipDesc::default_instance_ = new dropdropequipDesc();
  dropdrop::default_instance_ = new dropdrop();
  Sheet_dropdrop::default_instance_ = new Sheet_dropdrop();
  dropdropitemDesc::default_instance_->InitAsDefaultInstance();
  dropdropitemTeamDesc::default_instance_->InitAsDefaultInstance();
  dropdropequipDesc::default_instance_->InitAsDefaultInstance();
  dropdrop::default_instance_->InitAsDefaultInstance();
  Sheet_dropdrop::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_drop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_drop_2eproto {
  StaticDescriptorInitializer_drop_2eproto() {
    protobuf_AddDesc_drop_2eproto();
  }
} static_descriptor_initializer_drop_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int dropdropitemDesc::kBdFieldNumber;
const int dropdropitemDesc::kRandFieldNumber;
const int dropdropitemDesc::kMaxNumFieldNumber;
const int dropdropitemDesc::kQZFieldNumber;
const int dropdropitemDesc::kMinNumFieldNumber;
const int dropdropitemDesc::kIdFieldNumber;
#endif  // !_MSC_VER

dropdropitemDesc::dropdropitemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dropdropitemDesc::InitAsDefaultInstance() {
}

dropdropitemDesc::dropdropitemDesc(const dropdropitemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dropdropitemDesc::SharedCtor() {
  _cached_size_ = 0;
  bd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rand_ = 0;
  maxnum_ = 0;
  qz_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minnum_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dropdropitemDesc::~dropdropitemDesc() {
  SharedDtor();
}

void dropdropitemDesc::SharedDtor() {
  if (bd_ != &::google::protobuf::internal::kEmptyString) {
    delete bd_;
  }
  if (qz_ != &::google::protobuf::internal::kEmptyString) {
    delete qz_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void dropdropitemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dropdropitemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dropdropitemDesc_descriptor_;
}

const dropdropitemDesc& dropdropitemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drop_2eproto();
  return *default_instance_;
}

dropdropitemDesc* dropdropitemDesc::default_instance_ = NULL;

dropdropitemDesc* dropdropitemDesc::New() const {
  return new dropdropitemDesc;
}

void dropdropitemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bd()) {
      if (bd_ != &::google::protobuf::internal::kEmptyString) {
        bd_->clear();
      }
    }
    rand_ = 0;
    maxnum_ = 0;
    if (has_qz()) {
      if (qz_ != &::google::protobuf::internal::kEmptyString) {
        qz_->clear();
      }
    }
    minnum_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dropdropitemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bd().data(), this->bd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rand;
        break;
      }

      // optional int32 rand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rand_)));
          set_has_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxNum;
        break;
      }

      // optional int32 maxNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_QZ;
        break;
      }

      // optional string QZ = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qz()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qz().data(), this->qz().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minNum;
        break;
      }

      // optional int32 minNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minnum_)));
          set_has_minnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_id;
        break;
      }

      // optional string id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dropdropitemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string bd = 1;
  if (has_bd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bd().data(), this->bd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bd(), output);
  }

  // optional int32 rand = 2;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rand(), output);
  }

  // optional int32 maxNum = 3;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxnum(), output);
  }

  // optional string QZ = 4;
  if (has_qz()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qz().data(), this->qz().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->qz(), output);
  }

  // optional int32 minNum = 5;
  if (has_minnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minnum(), output);
  }

  // optional string id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dropdropitemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string bd = 1;
  if (has_bd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bd().data(), this->bd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bd(), target);
  }

  // optional int32 rand = 2;
  if (has_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rand(), target);
  }

  // optional int32 maxNum = 3;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxnum(), target);
  }

  // optional string QZ = 4;
  if (has_qz()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qz().data(), this->qz().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->qz(), target);
  }

  // optional int32 minNum = 5;
  if (has_minnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minnum(), target);
  }

  // optional string id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dropdropitemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bd = 1;
    if (has_bd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bd());
    }

    // optional int32 rand = 2;
    if (has_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rand());
    }

    // optional int32 maxNum = 3;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnum());
    }

    // optional string QZ = 4;
    if (has_qz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qz());
    }

    // optional int32 minNum = 5;
    if (has_minnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minnum());
    }

    // optional string id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dropdropitemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dropdropitemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dropdropitemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dropdropitemDesc::MergeFrom(const dropdropitemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bd()) {
      set_bd(from.bd());
    }
    if (from.has_rand()) {
      set_rand(from.rand());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
    if (from.has_qz()) {
      set_qz(from.qz());
    }
    if (from.has_minnum()) {
      set_minnum(from.minnum());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dropdropitemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dropdropitemDesc::CopyFrom(const dropdropitemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dropdropitemDesc::IsInitialized() const {

  return true;
}

void dropdropitemDesc::Swap(dropdropitemDesc* other) {
  if (other != this) {
    std::swap(bd_, other->bd_);
    std::swap(rand_, other->rand_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(qz_, other->qz_);
    std::swap(minnum_, other->minnum_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dropdropitemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dropdropitemDesc_descriptor_;
  metadata.reflection = dropdropitemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dropdropitemTeamDesc::kBdFieldNumber;
const int dropdropitemTeamDesc::kRandFieldNumber;
const int dropdropitemTeamDesc::kMaxNumFieldNumber;
const int dropdropitemTeamDesc::kQZFieldNumber;
const int dropdropitemTeamDesc::kMinNumFieldNumber;
const int dropdropitemTeamDesc::kIdFieldNumber;
#endif  // !_MSC_VER

dropdropitemTeamDesc::dropdropitemTeamDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dropdropitemTeamDesc::InitAsDefaultInstance() {
}

dropdropitemTeamDesc::dropdropitemTeamDesc(const dropdropitemTeamDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dropdropitemTeamDesc::SharedCtor() {
  _cached_size_ = 0;
  bd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rand_ = 0;
  maxnum_ = 0;
  qz_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minnum_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dropdropitemTeamDesc::~dropdropitemTeamDesc() {
  SharedDtor();
}

void dropdropitemTeamDesc::SharedDtor() {
  if (bd_ != &::google::protobuf::internal::kEmptyString) {
    delete bd_;
  }
  if (qz_ != &::google::protobuf::internal::kEmptyString) {
    delete qz_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void dropdropitemTeamDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dropdropitemTeamDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dropdropitemTeamDesc_descriptor_;
}

const dropdropitemTeamDesc& dropdropitemTeamDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drop_2eproto();
  return *default_instance_;
}

dropdropitemTeamDesc* dropdropitemTeamDesc::default_instance_ = NULL;

dropdropitemTeamDesc* dropdropitemTeamDesc::New() const {
  return new dropdropitemTeamDesc;
}

void dropdropitemTeamDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bd()) {
      if (bd_ != &::google::protobuf::internal::kEmptyString) {
        bd_->clear();
      }
    }
    rand_ = 0;
    maxnum_ = 0;
    if (has_qz()) {
      if (qz_ != &::google::protobuf::internal::kEmptyString) {
        qz_->clear();
      }
    }
    minnum_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dropdropitemTeamDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bd().data(), this->bd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rand;
        break;
      }

      // optional int32 rand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rand_)));
          set_has_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxNum;
        break;
      }

      // optional int32 maxNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_QZ;
        break;
      }

      // optional string QZ = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qz()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qz().data(), this->qz().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minNum;
        break;
      }

      // optional int32 minNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minnum_)));
          set_has_minnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_id;
        break;
      }

      // optional string id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dropdropitemTeamDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string bd = 1;
  if (has_bd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bd().data(), this->bd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bd(), output);
  }

  // optional int32 rand = 2;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rand(), output);
  }

  // optional int32 maxNum = 3;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxnum(), output);
  }

  // optional string QZ = 4;
  if (has_qz()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qz().data(), this->qz().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->qz(), output);
  }

  // optional int32 minNum = 5;
  if (has_minnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minnum(), output);
  }

  // optional string id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dropdropitemTeamDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string bd = 1;
  if (has_bd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bd().data(), this->bd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bd(), target);
  }

  // optional int32 rand = 2;
  if (has_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rand(), target);
  }

  // optional int32 maxNum = 3;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxnum(), target);
  }

  // optional string QZ = 4;
  if (has_qz()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qz().data(), this->qz().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->qz(), target);
  }

  // optional int32 minNum = 5;
  if (has_minnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minnum(), target);
  }

  // optional string id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dropdropitemTeamDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bd = 1;
    if (has_bd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bd());
    }

    // optional int32 rand = 2;
    if (has_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rand());
    }

    // optional int32 maxNum = 3;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnum());
    }

    // optional string QZ = 4;
    if (has_qz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qz());
    }

    // optional int32 minNum = 5;
    if (has_minnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minnum());
    }

    // optional string id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dropdropitemTeamDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dropdropitemTeamDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dropdropitemTeamDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dropdropitemTeamDesc::MergeFrom(const dropdropitemTeamDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bd()) {
      set_bd(from.bd());
    }
    if (from.has_rand()) {
      set_rand(from.rand());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
    if (from.has_qz()) {
      set_qz(from.qz());
    }
    if (from.has_minnum()) {
      set_minnum(from.minnum());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dropdropitemTeamDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dropdropitemTeamDesc::CopyFrom(const dropdropitemTeamDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dropdropitemTeamDesc::IsInitialized() const {

  return true;
}

void dropdropitemTeamDesc::Swap(dropdropitemTeamDesc* other) {
  if (other != this) {
    std::swap(bd_, other->bd_);
    std::swap(rand_, other->rand_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(qz_, other->qz_);
    std::swap(minnum_, other->minnum_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dropdropitemTeamDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dropdropitemTeamDesc_descriptor_;
  metadata.reflection = dropdropitemTeamDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dropdropequipDesc::kRandFieldNumber;
const int dropdropequipDesc::kMaxNumFieldNumber;
const int dropdropequipDesc::kWeightFieldNumber;
const int dropdropequipDesc::kMinNumFieldNumber;
const int dropdropequipDesc::kIsbindFieldNumber;
const int dropdropequipDesc::kProfFieldNumber;
const int dropdropequipDesc::kIdFieldNumber;
#endif  // !_MSC_VER

dropdropequipDesc::dropdropequipDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dropdropequipDesc::InitAsDefaultInstance() {
}

dropdropequipDesc::dropdropequipDesc(const dropdropequipDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dropdropequipDesc::SharedCtor() {
  _cached_size_ = 0;
  rand_ = 0;
  maxnum_ = 0;
  weight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minnum_ = 0;
  isbind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dropdropequipDesc::~dropdropequipDesc() {
  SharedDtor();
}

void dropdropequipDesc::SharedDtor() {
  if (weight_ != &::google::protobuf::internal::kEmptyString) {
    delete weight_;
  }
  if (isbind_ != &::google::protobuf::internal::kEmptyString) {
    delete isbind_;
  }
  if (prof_ != &::google::protobuf::internal::kEmptyString) {
    delete prof_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void dropdropequipDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dropdropequipDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dropdropequipDesc_descriptor_;
}

const dropdropequipDesc& dropdropequipDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drop_2eproto();
  return *default_instance_;
}

dropdropequipDesc* dropdropequipDesc::default_instance_ = NULL;

dropdropequipDesc* dropdropequipDesc::New() const {
  return new dropdropequipDesc;
}

void dropdropequipDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rand_ = 0;
    maxnum_ = 0;
    if (has_weight()) {
      if (weight_ != &::google::protobuf::internal::kEmptyString) {
        weight_->clear();
      }
    }
    minnum_ = 0;
    if (has_isbind()) {
      if (isbind_ != &::google::protobuf::internal::kEmptyString) {
        isbind_->clear();
      }
    }
    if (has_prof()) {
      if (prof_ != &::google::protobuf::internal::kEmptyString) {
        prof_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dropdropequipDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rand_)));
          set_has_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxNum;
        break;
      }

      // optional int32 maxNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weight;
        break;
      }

      // optional string weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weight().data(), this->weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_minNum;
        break;
      }

      // optional int32 minNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minnum_)));
          set_has_minnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_isbind;
        break;
      }

      // optional string isbind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isbind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isbind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isbind().data(), this->isbind().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_prof;
        break;
      }

      // optional string prof = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prof:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prof()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prof().data(), this->prof().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_id;
        break;
      }

      // optional string id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dropdropequipDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rand = 1;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rand(), output);
  }

  // optional int32 maxNum = 2;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxnum(), output);
  }

  // optional string weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->weight(), output);
  }

  // optional int32 minNum = 4;
  if (has_minnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minnum(), output);
  }

  // optional string isbind = 5;
  if (has_isbind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isbind().data(), this->isbind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->isbind(), output);
  }

  // optional string prof = 6;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prof().data(), this->prof().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->prof(), output);
  }

  // optional string id = 7;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dropdropequipDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rand = 1;
  if (has_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rand(), target);
  }

  // optional int32 maxNum = 2;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxnum(), target);
  }

  // optional string weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weight(), target);
  }

  // optional int32 minNum = 4;
  if (has_minnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minnum(), target);
  }

  // optional string isbind = 5;
  if (has_isbind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isbind().data(), this->isbind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->isbind(), target);
  }

  // optional string prof = 6;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prof().data(), this->prof().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->prof(), target);
  }

  // optional string id = 7;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dropdropequipDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rand = 1;
    if (has_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rand());
    }

    // optional int32 maxNum = 2;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnum());
    }

    // optional string weight = 3;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weight());
    }

    // optional int32 minNum = 4;
    if (has_minnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minnum());
    }

    // optional string isbind = 5;
    if (has_isbind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isbind());
    }

    // optional string prof = 6;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prof());
    }

    // optional string id = 7;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dropdropequipDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dropdropequipDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dropdropequipDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dropdropequipDesc::MergeFrom(const dropdropequipDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rand()) {
      set_rand(from.rand());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_minnum()) {
      set_minnum(from.minnum());
    }
    if (from.has_isbind()) {
      set_isbind(from.isbind());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dropdropequipDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dropdropequipDesc::CopyFrom(const dropdropequipDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dropdropequipDesc::IsInitialized() const {

  return true;
}

void dropdropequipDesc::Swap(dropdropequipDesc* other) {
  if (other != this) {
    std::swap(rand_, other->rand_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(weight_, other->weight_);
    std::swap(minnum_, other->minnum_);
    std::swap(isbind_, other->isbind_);
    std::swap(prof_, other->prof_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dropdropequipDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dropdropequipDesc_descriptor_;
  metadata.reflection = dropdropequipDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dropdrop::kIdFieldNumber;
const int dropdrop::kGoldlowFieldNumber;
const int dropdrop::kGoldupFieldNumber;
const int dropdrop::kGoldHeapMinFieldNumber;
const int dropdrop::kGoldHeapMaxFieldNumber;
const int dropdrop::kGoldRandFieldNumber;
const int dropdrop::kItemFieldNumber;
const int dropdrop::kItemTeamFieldNumber;
const int dropdrop::kEquipFieldNumber;
#endif  // !_MSC_VER

dropdrop::dropdrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dropdrop::InitAsDefaultInstance() {
}

dropdrop::dropdrop(const dropdrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dropdrop::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  goldlow_ = 0;
  goldup_ = 0;
  gold_heapmin_ = 0;
  gold_heapmax_ = 0;
  gold_rand_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dropdrop::~dropdrop() {
  SharedDtor();
}

void dropdrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dropdrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dropdrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dropdrop_descriptor_;
}

const dropdrop& dropdrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drop_2eproto();
  return *default_instance_;
}

dropdrop* dropdrop::default_instance_ = NULL;

dropdrop* dropdrop::New() const {
  return new dropdrop;
}

void dropdrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    goldlow_ = 0;
    goldup_ = 0;
    gold_heapmin_ = 0;
    gold_heapmax_ = 0;
    gold_rand_ = 0;
  }
  item_.Clear();
  itemteam_.Clear();
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dropdrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goldlow;
        break;
      }

      // optional int32 goldlow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldlow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldlow_)));
          set_has_goldlow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goldup;
        break;
      }

      // optional int32 goldup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldup_)));
          set_has_goldup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold_heapMin;
        break;
      }

      // optional int32 gold_heapMin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_heapMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_heapmin_)));
          set_has_gold_heapmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gold_heapMax;
        break;
      }

      // optional int32 gold_heapMax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_heapMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_heapmax_)));
          set_has_gold_heapmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gold_rand;
        break;
      }

      // optional int32 gold_rand = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_rand_)));
          set_has_gold_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item;
        break;
      }

      // repeated .proto_ff.dropdropitemDesc item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item;
        if (input->ExpectTag(66)) goto parse_itemTeam;
        break;
      }

      // repeated .proto_ff.dropdropitemTeamDesc itemTeam = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemTeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemteam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_itemTeam;
        if (input->ExpectTag(74)) goto parse_equip;
        break;
      }

      // repeated .proto_ff.dropdropequipDesc equip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equip;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dropdrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 goldlow = 2;
  if (has_goldlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goldlow(), output);
  }

  // optional int32 goldup = 3;
  if (has_goldup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goldup(), output);
  }

  // optional int32 gold_heapMin = 4;
  if (has_gold_heapmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold_heapmin(), output);
  }

  // optional int32 gold_heapMax = 5;
  if (has_gold_heapmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold_heapmax(), output);
  }

  // optional int32 gold_rand = 6;
  if (has_gold_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gold_rand(), output);
  }

  // repeated .proto_ff.dropdropitemDesc item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item(i), output);
  }

  // repeated .proto_ff.dropdropitemTeamDesc itemTeam = 8;
  for (int i = 0; i < this->itemteam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->itemteam(i), output);
  }

  // repeated .proto_ff.dropdropequipDesc equip = 9;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->equip(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dropdrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 goldlow = 2;
  if (has_goldlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goldlow(), target);
  }

  // optional int32 goldup = 3;
  if (has_goldup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goldup(), target);
  }

  // optional int32 gold_heapMin = 4;
  if (has_gold_heapmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gold_heapmin(), target);
  }

  // optional int32 gold_heapMax = 5;
  if (has_gold_heapmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gold_heapmax(), target);
  }

  // optional int32 gold_rand = 6;
  if (has_gold_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gold_rand(), target);
  }

  // repeated .proto_ff.dropdropitemDesc item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item(i), target);
  }

  // repeated .proto_ff.dropdropitemTeamDesc itemTeam = 8;
  for (int i = 0; i < this->itemteam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->itemteam(i), target);
  }

  // repeated .proto_ff.dropdropequipDesc equip = 9;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->equip(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dropdrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 goldlow = 2;
    if (has_goldlow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldlow());
    }

    // optional int32 goldup = 3;
    if (has_goldup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldup());
    }

    // optional int32 gold_heapMin = 4;
    if (has_gold_heapmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_heapmin());
    }

    // optional int32 gold_heapMax = 5;
    if (has_gold_heapmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_heapmax());
    }

    // optional int32 gold_rand = 6;
    if (has_gold_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_rand());
    }

  }
  // repeated .proto_ff.dropdropitemDesc item = 7;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .proto_ff.dropdropitemTeamDesc itemTeam = 8;
  total_size += 1 * this->itemteam_size();
  for (int i = 0; i < this->itemteam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemteam(i));
  }

  // repeated .proto_ff.dropdropequipDesc equip = 9;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dropdrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dropdrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dropdrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dropdrop::MergeFrom(const dropdrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  itemteam_.MergeFrom(from.itemteam_);
  equip_.MergeFrom(from.equip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_goldlow()) {
      set_goldlow(from.goldlow());
    }
    if (from.has_goldup()) {
      set_goldup(from.goldup());
    }
    if (from.has_gold_heapmin()) {
      set_gold_heapmin(from.gold_heapmin());
    }
    if (from.has_gold_heapmax()) {
      set_gold_heapmax(from.gold_heapmax());
    }
    if (from.has_gold_rand()) {
      set_gold_rand(from.gold_rand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dropdrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dropdrop::CopyFrom(const dropdrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dropdrop::IsInitialized() const {

  return true;
}

void dropdrop::Swap(dropdrop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(goldlow_, other->goldlow_);
    std::swap(goldup_, other->goldup_);
    std::swap(gold_heapmin_, other->gold_heapmin_);
    std::swap(gold_heapmax_, other->gold_heapmax_);
    std::swap(gold_rand_, other->gold_rand_);
    item_.Swap(&other->item_);
    itemteam_.Swap(&other->itemteam_);
    equip_.Swap(&other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dropdrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dropdrop_descriptor_;
  metadata.reflection = dropdrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_dropdrop::kDropdropListFieldNumber;
#endif  // !_MSC_VER

Sheet_dropdrop::Sheet_dropdrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_dropdrop::InitAsDefaultInstance() {
}

Sheet_dropdrop::Sheet_dropdrop(const Sheet_dropdrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_dropdrop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_dropdrop::~Sheet_dropdrop() {
  SharedDtor();
}

void Sheet_dropdrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_dropdrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_dropdrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_dropdrop_descriptor_;
}

const Sheet_dropdrop& Sheet_dropdrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drop_2eproto();
  return *default_instance_;
}

Sheet_dropdrop* Sheet_dropdrop::default_instance_ = NULL;

Sheet_dropdrop* Sheet_dropdrop::New() const {
  return new Sheet_dropdrop;
}

void Sheet_dropdrop::Clear() {
  dropdrop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_dropdrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.dropdrop dropdrop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropdrop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dropdrop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dropdrop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_dropdrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.dropdrop dropdrop_List = 1;
  for (int i = 0; i < this->dropdrop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dropdrop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_dropdrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.dropdrop dropdrop_List = 1;
  for (int i = 0; i < this->dropdrop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dropdrop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_dropdrop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.dropdrop dropdrop_List = 1;
  total_size += 1 * this->dropdrop_list_size();
  for (int i = 0; i < this->dropdrop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dropdrop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_dropdrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_dropdrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_dropdrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_dropdrop::MergeFrom(const Sheet_dropdrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  dropdrop_list_.MergeFrom(from.dropdrop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_dropdrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_dropdrop::CopyFrom(const Sheet_dropdrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_dropdrop::IsInitialized() const {

  return true;
}

void Sheet_dropdrop::Swap(Sheet_dropdrop* other) {
  if (other != this) {
    dropdrop_list_.Swap(&other->dropdrop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_dropdrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_dropdrop_descriptor_;
  metadata.reflection = Sheet_dropdrop_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
