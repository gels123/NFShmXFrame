// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerToClient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerToClient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* PingRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerToClientQueue_RSP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerToClientQueue_RSP_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogoutGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogoutGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogoutGame_SwitchServerParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogoutGame_SwitchServerParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerToClient_2eproto() {
  protobuf_AddDesc_ServerToClient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerToClient.proto");
  GOOGLE_CHECK(file != NULL);
  PingRsp_descriptor_ = file->message_type(0);
  static const int PingRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRsp, currentmstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRsp, queuereducenum_),
  };
  PingRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingRsp_descriptor_,
      PingRsp::default_instance_,
      PingRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingRsp));
  ServerToClientQueue_RSP_descriptor_ = file->message_type(1);
  static const int ServerToClientQueue_RSP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientQueue_RSP, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientQueue_RSP, nnum_),
  };
  ServerToClientQueue_RSP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerToClientQueue_RSP_descriptor_,
      ServerToClientQueue_RSP::default_instance_,
      ServerToClientQueue_RSP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientQueue_RSP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientQueue_RSP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerToClientQueue_RSP));
  NotifyLogoutGame_descriptor_ = file->message_type(2);
  static const int NotifyLogoutGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame, switch_server_param_),
  };
  NotifyLogoutGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogoutGame_descriptor_,
      NotifyLogoutGame::default_instance_,
      NotifyLogoutGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogoutGame));
  NotifyLogoutGame_SwitchServerParam_descriptor_ = NotifyLogoutGame_descriptor_->nested_type(0);
  static const int NotifyLogoutGame_SwitchServerParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame_SwitchServerParam, logic_server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame_SwitchServerParam, logic_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame_SwitchServerParam, scene_template_id_),
  };
  NotifyLogoutGame_SwitchServerParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogoutGame_SwitchServerParam_descriptor_,
      NotifyLogoutGame_SwitchServerParam::default_instance_,
      NotifyLogoutGame_SwitchServerParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame_SwitchServerParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame_SwitchServerParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogoutGame_SwitchServerParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerToClient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingRsp_descriptor_, &PingRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerToClientQueue_RSP_descriptor_, &ServerToClientQueue_RSP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogoutGame_descriptor_, &NotifyLogoutGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogoutGame_SwitchServerParam_descriptor_, &NotifyLogoutGame_SwitchServerParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerToClient_2eproto() {
  delete PingRsp::default_instance_;
  delete PingRsp_reflection_;
  delete ServerToClientQueue_RSP::default_instance_;
  delete ServerToClientQueue_RSP_reflection_;
  delete NotifyLogoutGame::default_instance_;
  delete NotifyLogoutGame_reflection_;
  delete NotifyLogoutGame_SwitchServerParam::default_instance_;
  delete NotifyLogoutGame_SwitchServerParam_reflection_;
}

void protobuf_AddDesc_ServerToClient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5fmsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ServerToClient.proto\022\010proto_ff\032\025yd_fie"
    "ldoptions.proto\032\022common_logic.proto\032\020com"
    "mon_msg.proto\"8\n\007PingRsp\022\025\n\rcurrentmsTim"
    "e\030\001 \002(\004\022\026\n\016queuereducenum\030\002 \001(\r\"L\n\027Serve"
    "rToClientQueue_RSP\022#\n\007retCode\030\001 \002(\0162\022.pr"
    "oto_ff.ERetCode\022\014\n\004nNum\030\002 \001(\r\"\346\001\n\020Notify"
    "LogoutGame\022#\n\004flag\030\001 \002(\0162\025.proto_ff.LOGO"
    "UT_FLAG\022I\n\023switch_server_param\030\002 \001(\0132,.p"
    "roto_ff.NotifyLogoutGame.SwitchServerPar"
    "am\032b\n\021SwitchServerParam\022\027\n\017logic_server_"
    "ip\030\001 \002(\t\022\031\n\021logic_server_port\030\002 \002(\r\022\031\n\021s"
    "cene_template_id\030\003 \002(\r", 462);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerToClient.proto", &protobuf_RegisterTypes);
  PingRsp::default_instance_ = new PingRsp();
  ServerToClientQueue_RSP::default_instance_ = new ServerToClientQueue_RSP();
  NotifyLogoutGame::default_instance_ = new NotifyLogoutGame();
  NotifyLogoutGame_SwitchServerParam::default_instance_ = new NotifyLogoutGame_SwitchServerParam();
  PingRsp::default_instance_->InitAsDefaultInstance();
  ServerToClientQueue_RSP::default_instance_->InitAsDefaultInstance();
  NotifyLogoutGame::default_instance_->InitAsDefaultInstance();
  NotifyLogoutGame_SwitchServerParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerToClient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerToClient_2eproto {
  StaticDescriptorInitializer_ServerToClient_2eproto() {
    protobuf_AddDesc_ServerToClient_2eproto();
  }
} static_descriptor_initializer_ServerToClient_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PingRsp::kCurrentmsTimeFieldNumber;
const int PingRsp::kQueuereducenumFieldNumber;
#endif  // !_MSC_VER

PingRsp::PingRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PingRsp::InitAsDefaultInstance() {
}

PingRsp::PingRsp(const PingRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PingRsp::SharedCtor() {
  _cached_size_ = 0;
  currentmstime_ = GOOGLE_ULONGLONG(0);
  queuereducenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingRsp::~PingRsp() {
  SharedDtor();
}

void PingRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingRsp_descriptor_;
}

const PingRsp& PingRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerToClient_2eproto();
  return *default_instance_;
}

PingRsp* PingRsp::default_instance_ = NULL;

PingRsp* PingRsp::New() const {
  return new PingRsp;
}

void PingRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currentmstime_ = GOOGLE_ULONGLONG(0);
    queuereducenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 currentmsTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currentmstime_)));
          set_has_currentmstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_queuereducenum;
        break;
      }

      // optional uint32 queuereducenum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queuereducenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queuereducenum_)));
          set_has_queuereducenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 currentmsTime = 1;
  if (has_currentmstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->currentmstime(), output);
  }

  // optional uint32 queuereducenum = 2;
  if (has_queuereducenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->queuereducenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 currentmsTime = 1;
  if (has_currentmstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->currentmstime(), target);
  }

  // optional uint32 queuereducenum = 2;
  if (has_queuereducenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->queuereducenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 currentmsTime = 1;
    if (has_currentmstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currentmstime());
    }

    // optional uint32 queuereducenum = 2;
    if (has_queuereducenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queuereducenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingRsp::MergeFrom(const PingRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currentmstime()) {
      set_currentmstime(from.currentmstime());
    }
    if (from.has_queuereducenum()) {
      set_queuereducenum(from.queuereducenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRsp::CopyFrom(const PingRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PingRsp::Swap(PingRsp* other) {
  if (other != this) {
    std::swap(currentmstime_, other->currentmstime_);
    std::swap(queuereducenum_, other->queuereducenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingRsp_descriptor_;
  metadata.reflection = PingRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerToClientQueue_RSP::kRetCodeFieldNumber;
const int ServerToClientQueue_RSP::kNNumFieldNumber;
#endif  // !_MSC_VER

ServerToClientQueue_RSP::ServerToClientQueue_RSP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerToClientQueue_RSP::InitAsDefaultInstance() {
}

ServerToClientQueue_RSP::ServerToClientQueue_RSP(const ServerToClientQueue_RSP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerToClientQueue_RSP::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  nnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerToClientQueue_RSP::~ServerToClientQueue_RSP() {
  SharedDtor();
}

void ServerToClientQueue_RSP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerToClientQueue_RSP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerToClientQueue_RSP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClientQueue_RSP_descriptor_;
}

const ServerToClientQueue_RSP& ServerToClientQueue_RSP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerToClient_2eproto();
  return *default_instance_;
}

ServerToClientQueue_RSP* ServerToClientQueue_RSP::default_instance_ = NULL;

ServerToClientQueue_RSP* ServerToClientQueue_RSP::New() const {
  return new ServerToClientQueue_RSP;
}

void ServerToClientQueue_RSP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    nnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerToClientQueue_RSP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.ERetCode retCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::ERetCode_IsValid(value)) {
            set_retcode(static_cast< ::proto_ff::ERetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nNum;
        break;
      }

      // optional uint32 nNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nnum_)));
          set_has_nnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerToClientQueue_RSP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.ERetCode retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  // optional uint32 nNum = 2;
  if (has_nnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerToClientQueue_RSP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.ERetCode retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  // optional uint32 nNum = 2;
  if (has_nnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerToClientQueue_RSP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.ERetCode retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

    // optional uint32 nNum = 2;
    if (has_nnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerToClientQueue_RSP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerToClientQueue_RSP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerToClientQueue_RSP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerToClientQueue_RSP::MergeFrom(const ServerToClientQueue_RSP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_nnum()) {
      set_nnum(from.nnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerToClientQueue_RSP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClientQueue_RSP::CopyFrom(const ServerToClientQueue_RSP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClientQueue_RSP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerToClientQueue_RSP::Swap(ServerToClientQueue_RSP* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(nnum_, other->nnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerToClientQueue_RSP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerToClientQueue_RSP_descriptor_;
  metadata.reflection = ServerToClientQueue_RSP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogoutGame_SwitchServerParam::kLogicServerIpFieldNumber;
const int NotifyLogoutGame_SwitchServerParam::kLogicServerPortFieldNumber;
const int NotifyLogoutGame_SwitchServerParam::kSceneTemplateIdFieldNumber;
#endif  // !_MSC_VER

NotifyLogoutGame_SwitchServerParam::NotifyLogoutGame_SwitchServerParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogoutGame_SwitchServerParam::InitAsDefaultInstance() {
}

NotifyLogoutGame_SwitchServerParam::NotifyLogoutGame_SwitchServerParam(const NotifyLogoutGame_SwitchServerParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogoutGame_SwitchServerParam::SharedCtor() {
  _cached_size_ = 0;
  logic_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logic_server_port_ = 0u;
  scene_template_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogoutGame_SwitchServerParam::~NotifyLogoutGame_SwitchServerParam() {
  SharedDtor();
}

void NotifyLogoutGame_SwitchServerParam::SharedDtor() {
  if (logic_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete logic_server_ip_;
  }
  if (this != default_instance_) {
  }
}

void NotifyLogoutGame_SwitchServerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogoutGame_SwitchServerParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogoutGame_SwitchServerParam_descriptor_;
}

const NotifyLogoutGame_SwitchServerParam& NotifyLogoutGame_SwitchServerParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerToClient_2eproto();
  return *default_instance_;
}

NotifyLogoutGame_SwitchServerParam* NotifyLogoutGame_SwitchServerParam::default_instance_ = NULL;

NotifyLogoutGame_SwitchServerParam* NotifyLogoutGame_SwitchServerParam::New() const {
  return new NotifyLogoutGame_SwitchServerParam;
}

void NotifyLogoutGame_SwitchServerParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_logic_server_ip()) {
      if (logic_server_ip_ != &::google::protobuf::internal::kEmptyString) {
        logic_server_ip_->clear();
      }
    }
    logic_server_port_ = 0u;
    scene_template_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogoutGame_SwitchServerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string logic_server_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logic_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logic_server_ip().data(), this->logic_server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logic_server_port;
        break;
      }

      // required uint32 logic_server_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_server_port_)));
          set_has_logic_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_template_id;
        break;
      }

      // required uint32 scene_template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_template_id_)));
          set_has_scene_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogoutGame_SwitchServerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string logic_server_ip = 1;
  if (has_logic_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_server_ip().data(), this->logic_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->logic_server_ip(), output);
  }

  // required uint32 logic_server_port = 2;
  if (has_logic_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logic_server_port(), output);
  }

  // required uint32 scene_template_id = 3;
  if (has_scene_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogoutGame_SwitchServerParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string logic_server_ip = 1;
  if (has_logic_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_server_ip().data(), this->logic_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->logic_server_ip(), target);
  }

  // required uint32 logic_server_port = 2;
  if (has_logic_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logic_server_port(), target);
  }

  // required uint32 scene_template_id = 3;
  if (has_scene_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogoutGame_SwitchServerParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string logic_server_ip = 1;
    if (has_logic_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logic_server_ip());
    }

    // required uint32 logic_server_port = 2;
    if (has_logic_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_server_port());
    }

    // required uint32 scene_template_id = 3;
    if (has_scene_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogoutGame_SwitchServerParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogoutGame_SwitchServerParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogoutGame_SwitchServerParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogoutGame_SwitchServerParam::MergeFrom(const NotifyLogoutGame_SwitchServerParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logic_server_ip()) {
      set_logic_server_ip(from.logic_server_ip());
    }
    if (from.has_logic_server_port()) {
      set_logic_server_port(from.logic_server_port());
    }
    if (from.has_scene_template_id()) {
      set_scene_template_id(from.scene_template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogoutGame_SwitchServerParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogoutGame_SwitchServerParam::CopyFrom(const NotifyLogoutGame_SwitchServerParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogoutGame_SwitchServerParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NotifyLogoutGame_SwitchServerParam::Swap(NotifyLogoutGame_SwitchServerParam* other) {
  if (other != this) {
    std::swap(logic_server_ip_, other->logic_server_ip_);
    std::swap(logic_server_port_, other->logic_server_port_);
    std::swap(scene_template_id_, other->scene_template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogoutGame_SwitchServerParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogoutGame_SwitchServerParam_descriptor_;
  metadata.reflection = NotifyLogoutGame_SwitchServerParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyLogoutGame::kFlagFieldNumber;
const int NotifyLogoutGame::kSwitchServerParamFieldNumber;
#endif  // !_MSC_VER

NotifyLogoutGame::NotifyLogoutGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogoutGame::InitAsDefaultInstance() {
  switch_server_param_ = const_cast< ::proto_ff::NotifyLogoutGame_SwitchServerParam*>(&::proto_ff::NotifyLogoutGame_SwitchServerParam::default_instance());
}

NotifyLogoutGame::NotifyLogoutGame(const NotifyLogoutGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogoutGame::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  switch_server_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogoutGame::~NotifyLogoutGame() {
  SharedDtor();
}

void NotifyLogoutGame::SharedDtor() {
  if (this != default_instance_) {
    delete switch_server_param_;
  }
}

void NotifyLogoutGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogoutGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogoutGame_descriptor_;
}

const NotifyLogoutGame& NotifyLogoutGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerToClient_2eproto();
  return *default_instance_;
}

NotifyLogoutGame* NotifyLogoutGame::default_instance_ = NULL;

NotifyLogoutGame* NotifyLogoutGame::New() const {
  return new NotifyLogoutGame;
}

void NotifyLogoutGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
    if (has_switch_server_param()) {
      if (switch_server_param_ != NULL) switch_server_param_->::proto_ff::NotifyLogoutGame_SwitchServerParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogoutGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.LOGOUT_FLAG flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::LOGOUT_FLAG_IsValid(value)) {
            set_flag(static_cast< ::proto_ff::LOGOUT_FLAG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_switch_server_param;
        break;
      }

      // optional .proto_ff.NotifyLogoutGame.SwitchServerParam switch_server_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_switch_server_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_server_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogoutGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.LOGOUT_FLAG flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->flag(), output);
  }

  // optional .proto_ff.NotifyLogoutGame.SwitchServerParam switch_server_param = 2;
  if (has_switch_server_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->switch_server_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogoutGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.LOGOUT_FLAG flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->flag(), target);
  }

  // optional .proto_ff.NotifyLogoutGame.SwitchServerParam switch_server_param = 2;
  if (has_switch_server_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->switch_server_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogoutGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.LOGOUT_FLAG flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

    // optional .proto_ff.NotifyLogoutGame.SwitchServerParam switch_server_param = 2;
    if (has_switch_server_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_server_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogoutGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogoutGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogoutGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogoutGame::MergeFrom(const NotifyLogoutGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_switch_server_param()) {
      mutable_switch_server_param()->::proto_ff::NotifyLogoutGame_SwitchServerParam::MergeFrom(from.switch_server_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogoutGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogoutGame::CopyFrom(const NotifyLogoutGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogoutGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_switch_server_param()) {
    if (!this->switch_server_param().IsInitialized()) return false;
  }
  return true;
}

void NotifyLogoutGame::Swap(NotifyLogoutGame* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(switch_server_param_, other->switch_server_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogoutGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogoutGame_descriptor_;
  metadata.reflection = NotifyLogoutGame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
