// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mofa.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Mofa.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* CLMoFaGetInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMoFaGetInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCMoFaGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCMoFaGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMoFaDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMoFaDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCMoFaDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCMoFaDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMoFaUnDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMoFaUnDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCMoFaUnDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCMoFaUnDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMoFaSlotZuFuReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMoFaSlotZuFuReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCMoFaSlotZuFuRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCMoFaSlotZuFuRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMoFaSlotWakeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMoFaSlotWakeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCMoFaSlotWakeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCMoFaSlotWakeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMoFaEquipLvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMoFaEquipLvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCMoFaEquipLvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCMoFaEquipLvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMoFaEquipWakeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMoFaEquipWakeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCMoFaEquipWakeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCMoFaEquipWakeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMoFaEquipDecomposeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMoFaEquipDecomposeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCMoFaEquipDecomposeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCMoFaEquipDecomposeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMoFaExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMoFaExchangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCMoFaExchangeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCMoFaExchangeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMoFaSlotUnlockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMoFaSlotUnlockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMoFaSlotUnlockRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMoFaSlotUnlockRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Mofa_2eproto() {
  protobuf_AddDesc_Mofa_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Mofa.proto");
  GOOGLE_CHECK(file != NULL);
  CLMoFaGetInfoReq_descriptor_ = file->message_type(0);
  static const int CLMoFaGetInfoReq_offsets_[1] = {
  };
  CLMoFaGetInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLMoFaGetInfoReq_descriptor_,
      CLMoFaGetInfoReq::default_instance_,
      CLMoFaGetInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaGetInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaGetInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLMoFaGetInfoReq));
  LCMoFaGetInfoRsp_descriptor_ = file->message_type(1);
  static const int LCMoFaGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaGetInfoRsp, data_),
  };
  LCMoFaGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCMoFaGetInfoRsp_descriptor_,
      LCMoFaGetInfoRsp::default_instance_,
      LCMoFaGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCMoFaGetInfoRsp));
  CLMoFaDressReq_descriptor_ = file->message_type(2);
  static const int CLMoFaDressReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaDressReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaDressReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaDressReq, bag_pos_),
  };
  CLMoFaDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLMoFaDressReq_descriptor_,
      CLMoFaDressReq::default_instance_,
      CLMoFaDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLMoFaDressReq));
  LCMoFaDressRsp_descriptor_ = file->message_type(3);
  static const int LCMoFaDressRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaDressRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaDressRsp, data_),
  };
  LCMoFaDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCMoFaDressRsp_descriptor_,
      LCMoFaDressRsp::default_instance_,
      LCMoFaDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCMoFaDressRsp));
  CLMoFaUnDressReq_descriptor_ = file->message_type(4);
  static const int CLMoFaUnDressReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaUnDressReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaUnDressReq, equip_pos_),
  };
  CLMoFaUnDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLMoFaUnDressReq_descriptor_,
      CLMoFaUnDressReq::default_instance_,
      CLMoFaUnDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaUnDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaUnDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLMoFaUnDressReq));
  LCMoFaUnDressRsp_descriptor_ = file->message_type(5);
  static const int LCMoFaUnDressRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaUnDressRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaUnDressRsp, data_),
  };
  LCMoFaUnDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCMoFaUnDressRsp_descriptor_,
      LCMoFaUnDressRsp::default_instance_,
      LCMoFaUnDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaUnDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaUnDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCMoFaUnDressRsp));
  CLMoFaSlotZuFuReq_descriptor_ = file->message_type(6);
  static const int CLMoFaSlotZuFuReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotZuFuReq, slot_pos_),
  };
  CLMoFaSlotZuFuReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLMoFaSlotZuFuReq_descriptor_,
      CLMoFaSlotZuFuReq::default_instance_,
      CLMoFaSlotZuFuReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotZuFuReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotZuFuReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLMoFaSlotZuFuReq));
  LCMoFaSlotZuFuRsp_descriptor_ = file->message_type(7);
  static const int LCMoFaSlotZuFuRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaSlotZuFuRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaSlotZuFuRsp, data_),
  };
  LCMoFaSlotZuFuRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCMoFaSlotZuFuRsp_descriptor_,
      LCMoFaSlotZuFuRsp::default_instance_,
      LCMoFaSlotZuFuRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaSlotZuFuRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaSlotZuFuRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCMoFaSlotZuFuRsp));
  CLMoFaSlotWakeReq_descriptor_ = file->message_type(8);
  static const int CLMoFaSlotWakeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotWakeReq, slot_pos_),
  };
  CLMoFaSlotWakeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLMoFaSlotWakeReq_descriptor_,
      CLMoFaSlotWakeReq::default_instance_,
      CLMoFaSlotWakeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotWakeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotWakeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLMoFaSlotWakeReq));
  LCMoFaSlotWakeRsp_descriptor_ = file->message_type(9);
  static const int LCMoFaSlotWakeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaSlotWakeRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaSlotWakeRsp, data_),
  };
  LCMoFaSlotWakeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCMoFaSlotWakeRsp_descriptor_,
      LCMoFaSlotWakeRsp::default_instance_,
      LCMoFaSlotWakeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaSlotWakeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaSlotWakeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCMoFaSlotWakeRsp));
  CLMoFaEquipLvReq_descriptor_ = file->message_type(10);
  static const int CLMoFaEquipLvReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaEquipLvReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaEquipLvReq, equip_pos_),
  };
  CLMoFaEquipLvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLMoFaEquipLvReq_descriptor_,
      CLMoFaEquipLvReq::default_instance_,
      CLMoFaEquipLvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaEquipLvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaEquipLvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLMoFaEquipLvReq));
  LCMoFaEquipLvRsp_descriptor_ = file->message_type(11);
  static const int LCMoFaEquipLvRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaEquipLvRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaEquipLvRsp, data_),
  };
  LCMoFaEquipLvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCMoFaEquipLvRsp_descriptor_,
      LCMoFaEquipLvRsp::default_instance_,
      LCMoFaEquipLvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaEquipLvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaEquipLvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCMoFaEquipLvRsp));
  CLMoFaEquipWakeReq_descriptor_ = file->message_type(12);
  static const int CLMoFaEquipWakeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaEquipWakeReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaEquipWakeReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaEquipWakeReq, grid_list_),
  };
  CLMoFaEquipWakeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLMoFaEquipWakeReq_descriptor_,
      CLMoFaEquipWakeReq::default_instance_,
      CLMoFaEquipWakeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaEquipWakeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaEquipWakeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLMoFaEquipWakeReq));
  LCMoFaEquipWakeRsp_descriptor_ = file->message_type(13);
  static const int LCMoFaEquipWakeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaEquipWakeRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaEquipWakeRsp, data_),
  };
  LCMoFaEquipWakeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCMoFaEquipWakeRsp_descriptor_,
      LCMoFaEquipWakeRsp::default_instance_,
      LCMoFaEquipWakeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaEquipWakeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaEquipWakeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCMoFaEquipWakeRsp));
  CLMoFaEquipDecomposeReq_descriptor_ = file->message_type(14);
  static const int CLMoFaEquipDecomposeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaEquipDecomposeReq, grid_list_),
  };
  CLMoFaEquipDecomposeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLMoFaEquipDecomposeReq_descriptor_,
      CLMoFaEquipDecomposeReq::default_instance_,
      CLMoFaEquipDecomposeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaEquipDecomposeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaEquipDecomposeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLMoFaEquipDecomposeReq));
  LCMoFaEquipDecomposeRsp_descriptor_ = file->message_type(15);
  static const int LCMoFaEquipDecomposeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaEquipDecomposeRsp, ret_code_),
  };
  LCMoFaEquipDecomposeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCMoFaEquipDecomposeRsp_descriptor_,
      LCMoFaEquipDecomposeRsp::default_instance_,
      LCMoFaEquipDecomposeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaEquipDecomposeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaEquipDecomposeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCMoFaEquipDecomposeRsp));
  CLMoFaExchangeReq_descriptor_ = file->message_type(16);
  static const int CLMoFaExchangeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaExchangeReq, exchange_id_),
  };
  CLMoFaExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLMoFaExchangeReq_descriptor_,
      CLMoFaExchangeReq::default_instance_,
      CLMoFaExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLMoFaExchangeReq));
  LCMoFaExchangeRsp_descriptor_ = file->message_type(17);
  static const int LCMoFaExchangeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaExchangeRsp, ret_code_),
  };
  LCMoFaExchangeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCMoFaExchangeRsp_descriptor_,
      LCMoFaExchangeRsp::default_instance_,
      LCMoFaExchangeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaExchangeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCMoFaExchangeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCMoFaExchangeRsp));
  CLMoFaSlotUnlockReq_descriptor_ = file->message_type(18);
  static const int CLMoFaSlotUnlockReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotUnlockReq, slot_pos_),
  };
  CLMoFaSlotUnlockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLMoFaSlotUnlockReq_descriptor_,
      CLMoFaSlotUnlockReq::default_instance_,
      CLMoFaSlotUnlockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotUnlockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotUnlockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLMoFaSlotUnlockReq));
  CLMoFaSlotUnlockRsp_descriptor_ = file->message_type(19);
  static const int CLMoFaSlotUnlockRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotUnlockRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotUnlockRsp, data_),
  };
  CLMoFaSlotUnlockRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLMoFaSlotUnlockRsp_descriptor_,
      CLMoFaSlotUnlockRsp::default_instance_,
      CLMoFaSlotUnlockRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotUnlockRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMoFaSlotUnlockRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLMoFaSlotUnlockRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Mofa_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLMoFaGetInfoReq_descriptor_, &CLMoFaGetInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCMoFaGetInfoRsp_descriptor_, &LCMoFaGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLMoFaDressReq_descriptor_, &CLMoFaDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCMoFaDressRsp_descriptor_, &LCMoFaDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLMoFaUnDressReq_descriptor_, &CLMoFaUnDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCMoFaUnDressRsp_descriptor_, &LCMoFaUnDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLMoFaSlotZuFuReq_descriptor_, &CLMoFaSlotZuFuReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCMoFaSlotZuFuRsp_descriptor_, &LCMoFaSlotZuFuRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLMoFaSlotWakeReq_descriptor_, &CLMoFaSlotWakeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCMoFaSlotWakeRsp_descriptor_, &LCMoFaSlotWakeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLMoFaEquipLvReq_descriptor_, &CLMoFaEquipLvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCMoFaEquipLvRsp_descriptor_, &LCMoFaEquipLvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLMoFaEquipWakeReq_descriptor_, &CLMoFaEquipWakeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCMoFaEquipWakeRsp_descriptor_, &LCMoFaEquipWakeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLMoFaEquipDecomposeReq_descriptor_, &CLMoFaEquipDecomposeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCMoFaEquipDecomposeRsp_descriptor_, &LCMoFaEquipDecomposeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLMoFaExchangeReq_descriptor_, &CLMoFaExchangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCMoFaExchangeRsp_descriptor_, &LCMoFaExchangeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLMoFaSlotUnlockReq_descriptor_, &CLMoFaSlotUnlockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLMoFaSlotUnlockRsp_descriptor_, &CLMoFaSlotUnlockRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Mofa_2eproto() {
  delete CLMoFaGetInfoReq::default_instance_;
  delete CLMoFaGetInfoReq_reflection_;
  delete LCMoFaGetInfoRsp::default_instance_;
  delete LCMoFaGetInfoRsp_reflection_;
  delete CLMoFaDressReq::default_instance_;
  delete CLMoFaDressReq_reflection_;
  delete LCMoFaDressRsp::default_instance_;
  delete LCMoFaDressRsp_reflection_;
  delete CLMoFaUnDressReq::default_instance_;
  delete CLMoFaUnDressReq_reflection_;
  delete LCMoFaUnDressRsp::default_instance_;
  delete LCMoFaUnDressRsp_reflection_;
  delete CLMoFaSlotZuFuReq::default_instance_;
  delete CLMoFaSlotZuFuReq_reflection_;
  delete LCMoFaSlotZuFuRsp::default_instance_;
  delete LCMoFaSlotZuFuRsp_reflection_;
  delete CLMoFaSlotWakeReq::default_instance_;
  delete CLMoFaSlotWakeReq_reflection_;
  delete LCMoFaSlotWakeRsp::default_instance_;
  delete LCMoFaSlotWakeRsp_reflection_;
  delete CLMoFaEquipLvReq::default_instance_;
  delete CLMoFaEquipLvReq_reflection_;
  delete LCMoFaEquipLvRsp::default_instance_;
  delete LCMoFaEquipLvRsp_reflection_;
  delete CLMoFaEquipWakeReq::default_instance_;
  delete CLMoFaEquipWakeReq_reflection_;
  delete LCMoFaEquipWakeRsp::default_instance_;
  delete LCMoFaEquipWakeRsp_reflection_;
  delete CLMoFaEquipDecomposeReq::default_instance_;
  delete CLMoFaEquipDecomposeReq_reflection_;
  delete LCMoFaEquipDecomposeRsp::default_instance_;
  delete LCMoFaEquipDecomposeRsp_reflection_;
  delete CLMoFaExchangeReq::default_instance_;
  delete CLMoFaExchangeReq_reflection_;
  delete LCMoFaExchangeRsp::default_instance_;
  delete LCMoFaExchangeRsp_reflection_;
  delete CLMoFaSlotUnlockReq::default_instance_;
  delete CLMoFaSlotUnlockReq_reflection_;
  delete CLMoFaSlotUnlockRsp::default_instance_;
  delete CLMoFaSlotUnlockRsp_reflection_;
}

void protobuf_AddDesc_Mofa_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nMofa.proto\022\010proto_ff\032\tCom.proto\032\017ComDe"
    "fine.proto\"\022\n\020CLMoFaGetInfoReq\"9\n\020LCMoFa"
    "GetInfoRsp\022%\n\004data\030\001 \003(\0132\027.proto_ff.MoFa"
    "EquipInfo\"F\n\016CLMoFaDressReq\022\020\n\010slot_pos\030"
    "\001 \001(\r\022\021\n\tequip_pos\030\002 \001(\r\022\017\n\007bag_pos\030\003 \001("
    "\r\"I\n\016LCMoFaDressRsp\022\020\n\010ret_code\030\001 \001(\005\022%\n"
    "\004data\030\002 \001(\0132\027.proto_ff.MoFaEquipInfo\"7\n\020"
    "CLMoFaUnDressReq\022\020\n\010slot_pos\030\001 \001(\r\022\021\n\teq"
    "uip_pos\030\002 \001(\r\"K\n\020LCMoFaUnDressRsp\022\020\n\010ret"
    "_code\030\001 \001(\005\022%\n\004data\030\002 \001(\0132\027.proto_ff.MoF"
    "aEquipInfo\"%\n\021CLMoFaSlotZuFuReq\022\020\n\010slot_"
    "pos\030\001 \001(\r\"L\n\021LCMoFaSlotZuFuRsp\022\020\n\010ret_co"
    "de\030\001 \001(\005\022%\n\004data\030\002 \001(\0132\027.proto_ff.MoFaEq"
    "uipInfo\"%\n\021CLMoFaSlotWakeReq\022\020\n\010slot_pos"
    "\030\001 \001(\r\"L\n\021LCMoFaSlotWakeRsp\022\020\n\010ret_code\030"
    "\001 \001(\005\022%\n\004data\030\002 \001(\0132\027.proto_ff.MoFaEquip"
    "Info\"7\n\020CLMoFaEquipLvReq\022\020\n\010slot_pos\030\001 \001"
    "(\r\022\021\n\tequip_pos\030\002 \001(\r\"K\n\020LCMoFaEquipLvRs"
    "p\022\020\n\010ret_code\030\001 \001(\005\022%\n\004data\030\002 \001(\0132\027.prot"
    "o_ff.MoFaEquipInfo\"L\n\022CLMoFaEquipWakeReq"
    "\022\020\n\010slot_pos\030\001 \001(\r\022\021\n\tequip_pos\030\002 \001(\r\022\021\n"
    "\tgrid_list\030\003 \003(\r\"M\n\022LCMoFaEquipWakeRsp\022\020"
    "\n\010ret_code\030\001 \001(\005\022%\n\004data\030\002 \001(\0132\027.proto_f"
    "f.MoFaEquipInfo\",\n\027CLMoFaEquipDecomposeR"
    "eq\022\021\n\tgrid_list\030\001 \003(\005\"+\n\027LCMoFaEquipDeco"
    "mposeRsp\022\020\n\010ret_code\030\001 \001(\005\"(\n\021CLMoFaExch"
    "angeReq\022\023\n\013exchange_id\030\001 \001(\005\"%\n\021LCMoFaEx"
    "changeRsp\022\020\n\010ret_code\030\001 \001(\005\"\'\n\023CLMoFaSlo"
    "tUnlockReq\022\020\n\010slot_pos\030\001 \001(\r\"N\n\023CLMoFaSl"
    "otUnlockRsp\022\020\n\010ret_code\030\001 \001(\005\022%\n\004data\030\002 "
    "\001(\0132\027.proto_ff.MoFaEquipInfo", 1228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Mofa.proto", &protobuf_RegisterTypes);
  CLMoFaGetInfoReq::default_instance_ = new CLMoFaGetInfoReq();
  LCMoFaGetInfoRsp::default_instance_ = new LCMoFaGetInfoRsp();
  CLMoFaDressReq::default_instance_ = new CLMoFaDressReq();
  LCMoFaDressRsp::default_instance_ = new LCMoFaDressRsp();
  CLMoFaUnDressReq::default_instance_ = new CLMoFaUnDressReq();
  LCMoFaUnDressRsp::default_instance_ = new LCMoFaUnDressRsp();
  CLMoFaSlotZuFuReq::default_instance_ = new CLMoFaSlotZuFuReq();
  LCMoFaSlotZuFuRsp::default_instance_ = new LCMoFaSlotZuFuRsp();
  CLMoFaSlotWakeReq::default_instance_ = new CLMoFaSlotWakeReq();
  LCMoFaSlotWakeRsp::default_instance_ = new LCMoFaSlotWakeRsp();
  CLMoFaEquipLvReq::default_instance_ = new CLMoFaEquipLvReq();
  LCMoFaEquipLvRsp::default_instance_ = new LCMoFaEquipLvRsp();
  CLMoFaEquipWakeReq::default_instance_ = new CLMoFaEquipWakeReq();
  LCMoFaEquipWakeRsp::default_instance_ = new LCMoFaEquipWakeRsp();
  CLMoFaEquipDecomposeReq::default_instance_ = new CLMoFaEquipDecomposeReq();
  LCMoFaEquipDecomposeRsp::default_instance_ = new LCMoFaEquipDecomposeRsp();
  CLMoFaExchangeReq::default_instance_ = new CLMoFaExchangeReq();
  LCMoFaExchangeRsp::default_instance_ = new LCMoFaExchangeRsp();
  CLMoFaSlotUnlockReq::default_instance_ = new CLMoFaSlotUnlockReq();
  CLMoFaSlotUnlockRsp::default_instance_ = new CLMoFaSlotUnlockRsp();
  CLMoFaGetInfoReq::default_instance_->InitAsDefaultInstance();
  LCMoFaGetInfoRsp::default_instance_->InitAsDefaultInstance();
  CLMoFaDressReq::default_instance_->InitAsDefaultInstance();
  LCMoFaDressRsp::default_instance_->InitAsDefaultInstance();
  CLMoFaUnDressReq::default_instance_->InitAsDefaultInstance();
  LCMoFaUnDressRsp::default_instance_->InitAsDefaultInstance();
  CLMoFaSlotZuFuReq::default_instance_->InitAsDefaultInstance();
  LCMoFaSlotZuFuRsp::default_instance_->InitAsDefaultInstance();
  CLMoFaSlotWakeReq::default_instance_->InitAsDefaultInstance();
  LCMoFaSlotWakeRsp::default_instance_->InitAsDefaultInstance();
  CLMoFaEquipLvReq::default_instance_->InitAsDefaultInstance();
  LCMoFaEquipLvRsp::default_instance_->InitAsDefaultInstance();
  CLMoFaEquipWakeReq::default_instance_->InitAsDefaultInstance();
  LCMoFaEquipWakeRsp::default_instance_->InitAsDefaultInstance();
  CLMoFaEquipDecomposeReq::default_instance_->InitAsDefaultInstance();
  LCMoFaEquipDecomposeRsp::default_instance_->InitAsDefaultInstance();
  CLMoFaExchangeReq::default_instance_->InitAsDefaultInstance();
  LCMoFaExchangeRsp::default_instance_->InitAsDefaultInstance();
  CLMoFaSlotUnlockReq::default_instance_->InitAsDefaultInstance();
  CLMoFaSlotUnlockRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Mofa_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Mofa_2eproto {
  StaticDescriptorInitializer_Mofa_2eproto() {
    protobuf_AddDesc_Mofa_2eproto();
  }
} static_descriptor_initializer_Mofa_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CLMoFaGetInfoReq::CLMoFaGetInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLMoFaGetInfoReq::InitAsDefaultInstance() {
}

CLMoFaGetInfoReq::CLMoFaGetInfoReq(const CLMoFaGetInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLMoFaGetInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLMoFaGetInfoReq::~CLMoFaGetInfoReq() {
  SharedDtor();
}

void CLMoFaGetInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMoFaGetInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMoFaGetInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMoFaGetInfoReq_descriptor_;
}

const CLMoFaGetInfoReq& CLMoFaGetInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

CLMoFaGetInfoReq* CLMoFaGetInfoReq::default_instance_ = NULL;

CLMoFaGetInfoReq* CLMoFaGetInfoReq::New() const {
  return new CLMoFaGetInfoReq;
}

void CLMoFaGetInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLMoFaGetInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CLMoFaGetInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLMoFaGetInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLMoFaGetInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMoFaGetInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLMoFaGetInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLMoFaGetInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLMoFaGetInfoReq::MergeFrom(const CLMoFaGetInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLMoFaGetInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMoFaGetInfoReq::CopyFrom(const CLMoFaGetInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMoFaGetInfoReq::IsInitialized() const {

  return true;
}

void CLMoFaGetInfoReq::Swap(CLMoFaGetInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLMoFaGetInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMoFaGetInfoReq_descriptor_;
  metadata.reflection = CLMoFaGetInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCMoFaGetInfoRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCMoFaGetInfoRsp::LCMoFaGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCMoFaGetInfoRsp::InitAsDefaultInstance() {
}

LCMoFaGetInfoRsp::LCMoFaGetInfoRsp(const LCMoFaGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCMoFaGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCMoFaGetInfoRsp::~LCMoFaGetInfoRsp() {
  SharedDtor();
}

void LCMoFaGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCMoFaGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCMoFaGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCMoFaGetInfoRsp_descriptor_;
}

const LCMoFaGetInfoRsp& LCMoFaGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

LCMoFaGetInfoRsp* LCMoFaGetInfoRsp::default_instance_ = NULL;

LCMoFaGetInfoRsp* LCMoFaGetInfoRsp::New() const {
  return new LCMoFaGetInfoRsp;
}

void LCMoFaGetInfoRsp::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCMoFaGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.MoFaEquipInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCMoFaGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.MoFaEquipInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCMoFaGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.MoFaEquipInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCMoFaGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.MoFaEquipInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCMoFaGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCMoFaGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCMoFaGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCMoFaGetInfoRsp::MergeFrom(const LCMoFaGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCMoFaGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMoFaGetInfoRsp::CopyFrom(const LCMoFaGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMoFaGetInfoRsp::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void LCMoFaGetInfoRsp::Swap(LCMoFaGetInfoRsp* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCMoFaGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCMoFaGetInfoRsp_descriptor_;
  metadata.reflection = LCMoFaGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLMoFaDressReq::kSlotPosFieldNumber;
const int CLMoFaDressReq::kEquipPosFieldNumber;
const int CLMoFaDressReq::kBagPosFieldNumber;
#endif  // !_MSC_VER

CLMoFaDressReq::CLMoFaDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLMoFaDressReq::InitAsDefaultInstance() {
}

CLMoFaDressReq::CLMoFaDressReq(const CLMoFaDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLMoFaDressReq::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0u;
  equip_pos_ = 0u;
  bag_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLMoFaDressReq::~CLMoFaDressReq() {
  SharedDtor();
}

void CLMoFaDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMoFaDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMoFaDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMoFaDressReq_descriptor_;
}

const CLMoFaDressReq& CLMoFaDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

CLMoFaDressReq* CLMoFaDressReq::default_instance_ = NULL;

CLMoFaDressReq* CLMoFaDressReq::New() const {
  return new CLMoFaDressReq;
}

void CLMoFaDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0u;
    equip_pos_ = 0u;
    bag_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLMoFaDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional uint32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bag_pos;
        break;
      }

      // optional uint32 bag_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLMoFaDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_pos(), output);
  }

  // optional uint32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equip_pos(), output);
  }

  // optional uint32 bag_pos = 3;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bag_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLMoFaDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_pos(), target);
  }

  // optional uint32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equip_pos(), target);
  }

  // optional uint32 bag_pos = 3;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bag_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLMoFaDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_pos());
    }

    // optional uint32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_pos());
    }

    // optional uint32 bag_pos = 3;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bag_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMoFaDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLMoFaDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLMoFaDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLMoFaDressReq::MergeFrom(const CLMoFaDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLMoFaDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMoFaDressReq::CopyFrom(const CLMoFaDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMoFaDressReq::IsInitialized() const {

  return true;
}

void CLMoFaDressReq::Swap(CLMoFaDressReq* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLMoFaDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMoFaDressReq_descriptor_;
  metadata.reflection = CLMoFaDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCMoFaDressRsp::kRetCodeFieldNumber;
const int LCMoFaDressRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCMoFaDressRsp::LCMoFaDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCMoFaDressRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::MoFaEquipInfo*>(&::proto_ff::MoFaEquipInfo::default_instance());
}

LCMoFaDressRsp::LCMoFaDressRsp(const LCMoFaDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCMoFaDressRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCMoFaDressRsp::~LCMoFaDressRsp() {
  SharedDtor();
}

void LCMoFaDressRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCMoFaDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCMoFaDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCMoFaDressRsp_descriptor_;
}

const LCMoFaDressRsp& LCMoFaDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

LCMoFaDressRsp* LCMoFaDressRsp::default_instance_ = NULL;

LCMoFaDressRsp* LCMoFaDressRsp::New() const {
  return new LCMoFaDressRsp;
}

void LCMoFaDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::MoFaEquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCMoFaDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.MoFaEquipInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCMoFaDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCMoFaDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCMoFaDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.MoFaEquipInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCMoFaDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCMoFaDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCMoFaDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCMoFaDressRsp::MergeFrom(const LCMoFaDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::MoFaEquipInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCMoFaDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMoFaDressRsp::CopyFrom(const LCMoFaDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMoFaDressRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void LCMoFaDressRsp::Swap(LCMoFaDressRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCMoFaDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCMoFaDressRsp_descriptor_;
  metadata.reflection = LCMoFaDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLMoFaUnDressReq::kSlotPosFieldNumber;
const int CLMoFaUnDressReq::kEquipPosFieldNumber;
#endif  // !_MSC_VER

CLMoFaUnDressReq::CLMoFaUnDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLMoFaUnDressReq::InitAsDefaultInstance() {
}

CLMoFaUnDressReq::CLMoFaUnDressReq(const CLMoFaUnDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLMoFaUnDressReq::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0u;
  equip_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLMoFaUnDressReq::~CLMoFaUnDressReq() {
  SharedDtor();
}

void CLMoFaUnDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMoFaUnDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMoFaUnDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMoFaUnDressReq_descriptor_;
}

const CLMoFaUnDressReq& CLMoFaUnDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

CLMoFaUnDressReq* CLMoFaUnDressReq::default_instance_ = NULL;

CLMoFaUnDressReq* CLMoFaUnDressReq::New() const {
  return new CLMoFaUnDressReq;
}

void CLMoFaUnDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0u;
    equip_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLMoFaUnDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional uint32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLMoFaUnDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_pos(), output);
  }

  // optional uint32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equip_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLMoFaUnDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_pos(), target);
  }

  // optional uint32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equip_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLMoFaUnDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_pos());
    }

    // optional uint32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMoFaUnDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLMoFaUnDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLMoFaUnDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLMoFaUnDressReq::MergeFrom(const CLMoFaUnDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLMoFaUnDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMoFaUnDressReq::CopyFrom(const CLMoFaUnDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMoFaUnDressReq::IsInitialized() const {

  return true;
}

void CLMoFaUnDressReq::Swap(CLMoFaUnDressReq* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLMoFaUnDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMoFaUnDressReq_descriptor_;
  metadata.reflection = CLMoFaUnDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCMoFaUnDressRsp::kRetCodeFieldNumber;
const int LCMoFaUnDressRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCMoFaUnDressRsp::LCMoFaUnDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCMoFaUnDressRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::MoFaEquipInfo*>(&::proto_ff::MoFaEquipInfo::default_instance());
}

LCMoFaUnDressRsp::LCMoFaUnDressRsp(const LCMoFaUnDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCMoFaUnDressRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCMoFaUnDressRsp::~LCMoFaUnDressRsp() {
  SharedDtor();
}

void LCMoFaUnDressRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCMoFaUnDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCMoFaUnDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCMoFaUnDressRsp_descriptor_;
}

const LCMoFaUnDressRsp& LCMoFaUnDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

LCMoFaUnDressRsp* LCMoFaUnDressRsp::default_instance_ = NULL;

LCMoFaUnDressRsp* LCMoFaUnDressRsp::New() const {
  return new LCMoFaUnDressRsp;
}

void LCMoFaUnDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::MoFaEquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCMoFaUnDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.MoFaEquipInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCMoFaUnDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCMoFaUnDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCMoFaUnDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.MoFaEquipInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCMoFaUnDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCMoFaUnDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCMoFaUnDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCMoFaUnDressRsp::MergeFrom(const LCMoFaUnDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::MoFaEquipInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCMoFaUnDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMoFaUnDressRsp::CopyFrom(const LCMoFaUnDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMoFaUnDressRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void LCMoFaUnDressRsp::Swap(LCMoFaUnDressRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCMoFaUnDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCMoFaUnDressRsp_descriptor_;
  metadata.reflection = LCMoFaUnDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLMoFaSlotZuFuReq::kSlotPosFieldNumber;
#endif  // !_MSC_VER

CLMoFaSlotZuFuReq::CLMoFaSlotZuFuReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLMoFaSlotZuFuReq::InitAsDefaultInstance() {
}

CLMoFaSlotZuFuReq::CLMoFaSlotZuFuReq(const CLMoFaSlotZuFuReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLMoFaSlotZuFuReq::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLMoFaSlotZuFuReq::~CLMoFaSlotZuFuReq() {
  SharedDtor();
}

void CLMoFaSlotZuFuReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMoFaSlotZuFuReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMoFaSlotZuFuReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMoFaSlotZuFuReq_descriptor_;
}

const CLMoFaSlotZuFuReq& CLMoFaSlotZuFuReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

CLMoFaSlotZuFuReq* CLMoFaSlotZuFuReq::default_instance_ = NULL;

CLMoFaSlotZuFuReq* CLMoFaSlotZuFuReq::New() const {
  return new CLMoFaSlotZuFuReq;
}

void CLMoFaSlotZuFuReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLMoFaSlotZuFuReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLMoFaSlotZuFuReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLMoFaSlotZuFuReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLMoFaSlotZuFuReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMoFaSlotZuFuReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLMoFaSlotZuFuReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLMoFaSlotZuFuReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLMoFaSlotZuFuReq::MergeFrom(const CLMoFaSlotZuFuReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLMoFaSlotZuFuReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMoFaSlotZuFuReq::CopyFrom(const CLMoFaSlotZuFuReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMoFaSlotZuFuReq::IsInitialized() const {

  return true;
}

void CLMoFaSlotZuFuReq::Swap(CLMoFaSlotZuFuReq* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLMoFaSlotZuFuReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMoFaSlotZuFuReq_descriptor_;
  metadata.reflection = CLMoFaSlotZuFuReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCMoFaSlotZuFuRsp::kRetCodeFieldNumber;
const int LCMoFaSlotZuFuRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCMoFaSlotZuFuRsp::LCMoFaSlotZuFuRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCMoFaSlotZuFuRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::MoFaEquipInfo*>(&::proto_ff::MoFaEquipInfo::default_instance());
}

LCMoFaSlotZuFuRsp::LCMoFaSlotZuFuRsp(const LCMoFaSlotZuFuRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCMoFaSlotZuFuRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCMoFaSlotZuFuRsp::~LCMoFaSlotZuFuRsp() {
  SharedDtor();
}

void LCMoFaSlotZuFuRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCMoFaSlotZuFuRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCMoFaSlotZuFuRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCMoFaSlotZuFuRsp_descriptor_;
}

const LCMoFaSlotZuFuRsp& LCMoFaSlotZuFuRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

LCMoFaSlotZuFuRsp* LCMoFaSlotZuFuRsp::default_instance_ = NULL;

LCMoFaSlotZuFuRsp* LCMoFaSlotZuFuRsp::New() const {
  return new LCMoFaSlotZuFuRsp;
}

void LCMoFaSlotZuFuRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::MoFaEquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCMoFaSlotZuFuRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.MoFaEquipInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCMoFaSlotZuFuRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCMoFaSlotZuFuRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCMoFaSlotZuFuRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.MoFaEquipInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCMoFaSlotZuFuRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCMoFaSlotZuFuRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCMoFaSlotZuFuRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCMoFaSlotZuFuRsp::MergeFrom(const LCMoFaSlotZuFuRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::MoFaEquipInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCMoFaSlotZuFuRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMoFaSlotZuFuRsp::CopyFrom(const LCMoFaSlotZuFuRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMoFaSlotZuFuRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void LCMoFaSlotZuFuRsp::Swap(LCMoFaSlotZuFuRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCMoFaSlotZuFuRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCMoFaSlotZuFuRsp_descriptor_;
  metadata.reflection = LCMoFaSlotZuFuRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLMoFaSlotWakeReq::kSlotPosFieldNumber;
#endif  // !_MSC_VER

CLMoFaSlotWakeReq::CLMoFaSlotWakeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLMoFaSlotWakeReq::InitAsDefaultInstance() {
}

CLMoFaSlotWakeReq::CLMoFaSlotWakeReq(const CLMoFaSlotWakeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLMoFaSlotWakeReq::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLMoFaSlotWakeReq::~CLMoFaSlotWakeReq() {
  SharedDtor();
}

void CLMoFaSlotWakeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMoFaSlotWakeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMoFaSlotWakeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMoFaSlotWakeReq_descriptor_;
}

const CLMoFaSlotWakeReq& CLMoFaSlotWakeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

CLMoFaSlotWakeReq* CLMoFaSlotWakeReq::default_instance_ = NULL;

CLMoFaSlotWakeReq* CLMoFaSlotWakeReq::New() const {
  return new CLMoFaSlotWakeReq;
}

void CLMoFaSlotWakeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLMoFaSlotWakeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLMoFaSlotWakeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLMoFaSlotWakeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLMoFaSlotWakeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMoFaSlotWakeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLMoFaSlotWakeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLMoFaSlotWakeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLMoFaSlotWakeReq::MergeFrom(const CLMoFaSlotWakeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLMoFaSlotWakeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMoFaSlotWakeReq::CopyFrom(const CLMoFaSlotWakeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMoFaSlotWakeReq::IsInitialized() const {

  return true;
}

void CLMoFaSlotWakeReq::Swap(CLMoFaSlotWakeReq* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLMoFaSlotWakeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMoFaSlotWakeReq_descriptor_;
  metadata.reflection = CLMoFaSlotWakeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCMoFaSlotWakeRsp::kRetCodeFieldNumber;
const int LCMoFaSlotWakeRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCMoFaSlotWakeRsp::LCMoFaSlotWakeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCMoFaSlotWakeRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::MoFaEquipInfo*>(&::proto_ff::MoFaEquipInfo::default_instance());
}

LCMoFaSlotWakeRsp::LCMoFaSlotWakeRsp(const LCMoFaSlotWakeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCMoFaSlotWakeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCMoFaSlotWakeRsp::~LCMoFaSlotWakeRsp() {
  SharedDtor();
}

void LCMoFaSlotWakeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCMoFaSlotWakeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCMoFaSlotWakeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCMoFaSlotWakeRsp_descriptor_;
}

const LCMoFaSlotWakeRsp& LCMoFaSlotWakeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

LCMoFaSlotWakeRsp* LCMoFaSlotWakeRsp::default_instance_ = NULL;

LCMoFaSlotWakeRsp* LCMoFaSlotWakeRsp::New() const {
  return new LCMoFaSlotWakeRsp;
}

void LCMoFaSlotWakeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::MoFaEquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCMoFaSlotWakeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.MoFaEquipInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCMoFaSlotWakeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCMoFaSlotWakeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCMoFaSlotWakeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.MoFaEquipInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCMoFaSlotWakeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCMoFaSlotWakeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCMoFaSlotWakeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCMoFaSlotWakeRsp::MergeFrom(const LCMoFaSlotWakeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::MoFaEquipInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCMoFaSlotWakeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMoFaSlotWakeRsp::CopyFrom(const LCMoFaSlotWakeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMoFaSlotWakeRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void LCMoFaSlotWakeRsp::Swap(LCMoFaSlotWakeRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCMoFaSlotWakeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCMoFaSlotWakeRsp_descriptor_;
  metadata.reflection = LCMoFaSlotWakeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLMoFaEquipLvReq::kSlotPosFieldNumber;
const int CLMoFaEquipLvReq::kEquipPosFieldNumber;
#endif  // !_MSC_VER

CLMoFaEquipLvReq::CLMoFaEquipLvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLMoFaEquipLvReq::InitAsDefaultInstance() {
}

CLMoFaEquipLvReq::CLMoFaEquipLvReq(const CLMoFaEquipLvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLMoFaEquipLvReq::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0u;
  equip_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLMoFaEquipLvReq::~CLMoFaEquipLvReq() {
  SharedDtor();
}

void CLMoFaEquipLvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMoFaEquipLvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMoFaEquipLvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMoFaEquipLvReq_descriptor_;
}

const CLMoFaEquipLvReq& CLMoFaEquipLvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

CLMoFaEquipLvReq* CLMoFaEquipLvReq::default_instance_ = NULL;

CLMoFaEquipLvReq* CLMoFaEquipLvReq::New() const {
  return new CLMoFaEquipLvReq;
}

void CLMoFaEquipLvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0u;
    equip_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLMoFaEquipLvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional uint32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLMoFaEquipLvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_pos(), output);
  }

  // optional uint32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equip_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLMoFaEquipLvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_pos(), target);
  }

  // optional uint32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equip_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLMoFaEquipLvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_pos());
    }

    // optional uint32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMoFaEquipLvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLMoFaEquipLvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLMoFaEquipLvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLMoFaEquipLvReq::MergeFrom(const CLMoFaEquipLvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLMoFaEquipLvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMoFaEquipLvReq::CopyFrom(const CLMoFaEquipLvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMoFaEquipLvReq::IsInitialized() const {

  return true;
}

void CLMoFaEquipLvReq::Swap(CLMoFaEquipLvReq* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLMoFaEquipLvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMoFaEquipLvReq_descriptor_;
  metadata.reflection = CLMoFaEquipLvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCMoFaEquipLvRsp::kRetCodeFieldNumber;
const int LCMoFaEquipLvRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCMoFaEquipLvRsp::LCMoFaEquipLvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCMoFaEquipLvRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::MoFaEquipInfo*>(&::proto_ff::MoFaEquipInfo::default_instance());
}

LCMoFaEquipLvRsp::LCMoFaEquipLvRsp(const LCMoFaEquipLvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCMoFaEquipLvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCMoFaEquipLvRsp::~LCMoFaEquipLvRsp() {
  SharedDtor();
}

void LCMoFaEquipLvRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCMoFaEquipLvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCMoFaEquipLvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCMoFaEquipLvRsp_descriptor_;
}

const LCMoFaEquipLvRsp& LCMoFaEquipLvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

LCMoFaEquipLvRsp* LCMoFaEquipLvRsp::default_instance_ = NULL;

LCMoFaEquipLvRsp* LCMoFaEquipLvRsp::New() const {
  return new LCMoFaEquipLvRsp;
}

void LCMoFaEquipLvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::MoFaEquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCMoFaEquipLvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.MoFaEquipInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCMoFaEquipLvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCMoFaEquipLvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCMoFaEquipLvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.MoFaEquipInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCMoFaEquipLvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCMoFaEquipLvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCMoFaEquipLvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCMoFaEquipLvRsp::MergeFrom(const LCMoFaEquipLvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::MoFaEquipInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCMoFaEquipLvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMoFaEquipLvRsp::CopyFrom(const LCMoFaEquipLvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMoFaEquipLvRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void LCMoFaEquipLvRsp::Swap(LCMoFaEquipLvRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCMoFaEquipLvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCMoFaEquipLvRsp_descriptor_;
  metadata.reflection = LCMoFaEquipLvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLMoFaEquipWakeReq::kSlotPosFieldNumber;
const int CLMoFaEquipWakeReq::kEquipPosFieldNumber;
const int CLMoFaEquipWakeReq::kGridListFieldNumber;
#endif  // !_MSC_VER

CLMoFaEquipWakeReq::CLMoFaEquipWakeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLMoFaEquipWakeReq::InitAsDefaultInstance() {
}

CLMoFaEquipWakeReq::CLMoFaEquipWakeReq(const CLMoFaEquipWakeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLMoFaEquipWakeReq::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0u;
  equip_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLMoFaEquipWakeReq::~CLMoFaEquipWakeReq() {
  SharedDtor();
}

void CLMoFaEquipWakeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMoFaEquipWakeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMoFaEquipWakeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMoFaEquipWakeReq_descriptor_;
}

const CLMoFaEquipWakeReq& CLMoFaEquipWakeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

CLMoFaEquipWakeReq* CLMoFaEquipWakeReq::default_instance_ = NULL;

CLMoFaEquipWakeReq* CLMoFaEquipWakeReq::New() const {
  return new CLMoFaEquipWakeReq;
}

void CLMoFaEquipWakeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0u;
    equip_pos_ = 0u;
  }
  grid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLMoFaEquipWakeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional uint32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grid_list;
        break;
      }

      // repeated uint32 grid_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_grid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_grid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLMoFaEquipWakeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_pos(), output);
  }

  // optional uint32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equip_pos(), output);
  }

  // repeated uint32 grid_list = 3;
  for (int i = 0; i < this->grid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->grid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLMoFaEquipWakeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_pos(), target);
  }

  // optional uint32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equip_pos(), target);
  }

  // repeated uint32 grid_list = 3;
  for (int i = 0; i < this->grid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->grid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLMoFaEquipWakeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_pos());
    }

    // optional uint32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_pos());
    }

  }
  // repeated uint32 grid_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->grid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->grid_list(i));
    }
    total_size += 1 * this->grid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMoFaEquipWakeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLMoFaEquipWakeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLMoFaEquipWakeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLMoFaEquipWakeReq::MergeFrom(const CLMoFaEquipWakeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  grid_list_.MergeFrom(from.grid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLMoFaEquipWakeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMoFaEquipWakeReq::CopyFrom(const CLMoFaEquipWakeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMoFaEquipWakeReq::IsInitialized() const {

  return true;
}

void CLMoFaEquipWakeReq::Swap(CLMoFaEquipWakeReq* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(equip_pos_, other->equip_pos_);
    grid_list_.Swap(&other->grid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLMoFaEquipWakeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMoFaEquipWakeReq_descriptor_;
  metadata.reflection = CLMoFaEquipWakeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCMoFaEquipWakeRsp::kRetCodeFieldNumber;
const int LCMoFaEquipWakeRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCMoFaEquipWakeRsp::LCMoFaEquipWakeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCMoFaEquipWakeRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::MoFaEquipInfo*>(&::proto_ff::MoFaEquipInfo::default_instance());
}

LCMoFaEquipWakeRsp::LCMoFaEquipWakeRsp(const LCMoFaEquipWakeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCMoFaEquipWakeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCMoFaEquipWakeRsp::~LCMoFaEquipWakeRsp() {
  SharedDtor();
}

void LCMoFaEquipWakeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCMoFaEquipWakeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCMoFaEquipWakeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCMoFaEquipWakeRsp_descriptor_;
}

const LCMoFaEquipWakeRsp& LCMoFaEquipWakeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

LCMoFaEquipWakeRsp* LCMoFaEquipWakeRsp::default_instance_ = NULL;

LCMoFaEquipWakeRsp* LCMoFaEquipWakeRsp::New() const {
  return new LCMoFaEquipWakeRsp;
}

void LCMoFaEquipWakeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::MoFaEquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCMoFaEquipWakeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.MoFaEquipInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCMoFaEquipWakeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCMoFaEquipWakeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCMoFaEquipWakeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.MoFaEquipInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCMoFaEquipWakeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCMoFaEquipWakeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCMoFaEquipWakeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCMoFaEquipWakeRsp::MergeFrom(const LCMoFaEquipWakeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::MoFaEquipInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCMoFaEquipWakeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMoFaEquipWakeRsp::CopyFrom(const LCMoFaEquipWakeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMoFaEquipWakeRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void LCMoFaEquipWakeRsp::Swap(LCMoFaEquipWakeRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCMoFaEquipWakeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCMoFaEquipWakeRsp_descriptor_;
  metadata.reflection = LCMoFaEquipWakeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLMoFaEquipDecomposeReq::kGridListFieldNumber;
#endif  // !_MSC_VER

CLMoFaEquipDecomposeReq::CLMoFaEquipDecomposeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLMoFaEquipDecomposeReq::InitAsDefaultInstance() {
}

CLMoFaEquipDecomposeReq::CLMoFaEquipDecomposeReq(const CLMoFaEquipDecomposeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLMoFaEquipDecomposeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLMoFaEquipDecomposeReq::~CLMoFaEquipDecomposeReq() {
  SharedDtor();
}

void CLMoFaEquipDecomposeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMoFaEquipDecomposeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMoFaEquipDecomposeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMoFaEquipDecomposeReq_descriptor_;
}

const CLMoFaEquipDecomposeReq& CLMoFaEquipDecomposeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

CLMoFaEquipDecomposeReq* CLMoFaEquipDecomposeReq::default_instance_ = NULL;

CLMoFaEquipDecomposeReq* CLMoFaEquipDecomposeReq::New() const {
  return new CLMoFaEquipDecomposeReq;
}

void CLMoFaEquipDecomposeReq::Clear() {
  grid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLMoFaEquipDecomposeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 grid_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_grid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_grid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_grid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLMoFaEquipDecomposeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 grid_list = 1;
  for (int i = 0; i < this->grid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->grid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLMoFaEquipDecomposeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 grid_list = 1;
  for (int i = 0; i < this->grid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->grid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLMoFaEquipDecomposeReq::ByteSize() const {
  int total_size = 0;

  // repeated int32 grid_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->grid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->grid_list(i));
    }
    total_size += 1 * this->grid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMoFaEquipDecomposeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLMoFaEquipDecomposeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLMoFaEquipDecomposeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLMoFaEquipDecomposeReq::MergeFrom(const CLMoFaEquipDecomposeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  grid_list_.MergeFrom(from.grid_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLMoFaEquipDecomposeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMoFaEquipDecomposeReq::CopyFrom(const CLMoFaEquipDecomposeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMoFaEquipDecomposeReq::IsInitialized() const {

  return true;
}

void CLMoFaEquipDecomposeReq::Swap(CLMoFaEquipDecomposeReq* other) {
  if (other != this) {
    grid_list_.Swap(&other->grid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLMoFaEquipDecomposeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMoFaEquipDecomposeReq_descriptor_;
  metadata.reflection = CLMoFaEquipDecomposeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCMoFaEquipDecomposeRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

LCMoFaEquipDecomposeRsp::LCMoFaEquipDecomposeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCMoFaEquipDecomposeRsp::InitAsDefaultInstance() {
}

LCMoFaEquipDecomposeRsp::LCMoFaEquipDecomposeRsp(const LCMoFaEquipDecomposeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCMoFaEquipDecomposeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCMoFaEquipDecomposeRsp::~LCMoFaEquipDecomposeRsp() {
  SharedDtor();
}

void LCMoFaEquipDecomposeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCMoFaEquipDecomposeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCMoFaEquipDecomposeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCMoFaEquipDecomposeRsp_descriptor_;
}

const LCMoFaEquipDecomposeRsp& LCMoFaEquipDecomposeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

LCMoFaEquipDecomposeRsp* LCMoFaEquipDecomposeRsp::default_instance_ = NULL;

LCMoFaEquipDecomposeRsp* LCMoFaEquipDecomposeRsp::New() const {
  return new LCMoFaEquipDecomposeRsp;
}

void LCMoFaEquipDecomposeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCMoFaEquipDecomposeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCMoFaEquipDecomposeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCMoFaEquipDecomposeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCMoFaEquipDecomposeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCMoFaEquipDecomposeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCMoFaEquipDecomposeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCMoFaEquipDecomposeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCMoFaEquipDecomposeRsp::MergeFrom(const LCMoFaEquipDecomposeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCMoFaEquipDecomposeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMoFaEquipDecomposeRsp::CopyFrom(const LCMoFaEquipDecomposeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMoFaEquipDecomposeRsp::IsInitialized() const {

  return true;
}

void LCMoFaEquipDecomposeRsp::Swap(LCMoFaEquipDecomposeRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCMoFaEquipDecomposeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCMoFaEquipDecomposeRsp_descriptor_;
  metadata.reflection = LCMoFaEquipDecomposeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLMoFaExchangeReq::kExchangeIdFieldNumber;
#endif  // !_MSC_VER

CLMoFaExchangeReq::CLMoFaExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLMoFaExchangeReq::InitAsDefaultInstance() {
}

CLMoFaExchangeReq::CLMoFaExchangeReq(const CLMoFaExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLMoFaExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  exchange_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLMoFaExchangeReq::~CLMoFaExchangeReq() {
  SharedDtor();
}

void CLMoFaExchangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMoFaExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMoFaExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMoFaExchangeReq_descriptor_;
}

const CLMoFaExchangeReq& CLMoFaExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

CLMoFaExchangeReq* CLMoFaExchangeReq::default_instance_ = NULL;

CLMoFaExchangeReq* CLMoFaExchangeReq::New() const {
  return new CLMoFaExchangeReq;
}

void CLMoFaExchangeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchange_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLMoFaExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exchange_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_id_)));
          set_has_exchange_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLMoFaExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 exchange_id = 1;
  if (has_exchange_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exchange_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLMoFaExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 exchange_id = 1;
  if (has_exchange_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exchange_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLMoFaExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 exchange_id = 1;
    if (has_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMoFaExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLMoFaExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLMoFaExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLMoFaExchangeReq::MergeFrom(const CLMoFaExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange_id()) {
      set_exchange_id(from.exchange_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLMoFaExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMoFaExchangeReq::CopyFrom(const CLMoFaExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMoFaExchangeReq::IsInitialized() const {

  return true;
}

void CLMoFaExchangeReq::Swap(CLMoFaExchangeReq* other) {
  if (other != this) {
    std::swap(exchange_id_, other->exchange_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLMoFaExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMoFaExchangeReq_descriptor_;
  metadata.reflection = CLMoFaExchangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCMoFaExchangeRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

LCMoFaExchangeRsp::LCMoFaExchangeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCMoFaExchangeRsp::InitAsDefaultInstance() {
}

LCMoFaExchangeRsp::LCMoFaExchangeRsp(const LCMoFaExchangeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCMoFaExchangeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCMoFaExchangeRsp::~LCMoFaExchangeRsp() {
  SharedDtor();
}

void LCMoFaExchangeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCMoFaExchangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCMoFaExchangeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCMoFaExchangeRsp_descriptor_;
}

const LCMoFaExchangeRsp& LCMoFaExchangeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

LCMoFaExchangeRsp* LCMoFaExchangeRsp::default_instance_ = NULL;

LCMoFaExchangeRsp* LCMoFaExchangeRsp::New() const {
  return new LCMoFaExchangeRsp;
}

void LCMoFaExchangeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCMoFaExchangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCMoFaExchangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCMoFaExchangeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCMoFaExchangeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCMoFaExchangeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCMoFaExchangeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCMoFaExchangeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCMoFaExchangeRsp::MergeFrom(const LCMoFaExchangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCMoFaExchangeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCMoFaExchangeRsp::CopyFrom(const LCMoFaExchangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCMoFaExchangeRsp::IsInitialized() const {

  return true;
}

void LCMoFaExchangeRsp::Swap(LCMoFaExchangeRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCMoFaExchangeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCMoFaExchangeRsp_descriptor_;
  metadata.reflection = LCMoFaExchangeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLMoFaSlotUnlockReq::kSlotPosFieldNumber;
#endif  // !_MSC_VER

CLMoFaSlotUnlockReq::CLMoFaSlotUnlockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLMoFaSlotUnlockReq::InitAsDefaultInstance() {
}

CLMoFaSlotUnlockReq::CLMoFaSlotUnlockReq(const CLMoFaSlotUnlockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLMoFaSlotUnlockReq::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLMoFaSlotUnlockReq::~CLMoFaSlotUnlockReq() {
  SharedDtor();
}

void CLMoFaSlotUnlockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMoFaSlotUnlockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMoFaSlotUnlockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMoFaSlotUnlockReq_descriptor_;
}

const CLMoFaSlotUnlockReq& CLMoFaSlotUnlockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

CLMoFaSlotUnlockReq* CLMoFaSlotUnlockReq::default_instance_ = NULL;

CLMoFaSlotUnlockReq* CLMoFaSlotUnlockReq::New() const {
  return new CLMoFaSlotUnlockReq;
}

void CLMoFaSlotUnlockReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLMoFaSlotUnlockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLMoFaSlotUnlockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLMoFaSlotUnlockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLMoFaSlotUnlockReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMoFaSlotUnlockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLMoFaSlotUnlockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLMoFaSlotUnlockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLMoFaSlotUnlockReq::MergeFrom(const CLMoFaSlotUnlockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLMoFaSlotUnlockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMoFaSlotUnlockReq::CopyFrom(const CLMoFaSlotUnlockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMoFaSlotUnlockReq::IsInitialized() const {

  return true;
}

void CLMoFaSlotUnlockReq::Swap(CLMoFaSlotUnlockReq* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLMoFaSlotUnlockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMoFaSlotUnlockReq_descriptor_;
  metadata.reflection = CLMoFaSlotUnlockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLMoFaSlotUnlockRsp::kRetCodeFieldNumber;
const int CLMoFaSlotUnlockRsp::kDataFieldNumber;
#endif  // !_MSC_VER

CLMoFaSlotUnlockRsp::CLMoFaSlotUnlockRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLMoFaSlotUnlockRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::MoFaEquipInfo*>(&::proto_ff::MoFaEquipInfo::default_instance());
}

CLMoFaSlotUnlockRsp::CLMoFaSlotUnlockRsp(const CLMoFaSlotUnlockRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLMoFaSlotUnlockRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLMoFaSlotUnlockRsp::~CLMoFaSlotUnlockRsp() {
  SharedDtor();
}

void CLMoFaSlotUnlockRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CLMoFaSlotUnlockRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMoFaSlotUnlockRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMoFaSlotUnlockRsp_descriptor_;
}

const CLMoFaSlotUnlockRsp& CLMoFaSlotUnlockRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mofa_2eproto();
  return *default_instance_;
}

CLMoFaSlotUnlockRsp* CLMoFaSlotUnlockRsp::default_instance_ = NULL;

CLMoFaSlotUnlockRsp* CLMoFaSlotUnlockRsp::New() const {
  return new CLMoFaSlotUnlockRsp;
}

void CLMoFaSlotUnlockRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::MoFaEquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLMoFaSlotUnlockRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.MoFaEquipInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLMoFaSlotUnlockRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLMoFaSlotUnlockRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.MoFaEquipInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLMoFaSlotUnlockRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.MoFaEquipInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMoFaSlotUnlockRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLMoFaSlotUnlockRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLMoFaSlotUnlockRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLMoFaSlotUnlockRsp::MergeFrom(const CLMoFaSlotUnlockRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::MoFaEquipInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLMoFaSlotUnlockRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMoFaSlotUnlockRsp::CopyFrom(const CLMoFaSlotUnlockRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMoFaSlotUnlockRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void CLMoFaSlotUnlockRsp::Swap(CLMoFaSlotUnlockRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLMoFaSlotUnlockRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMoFaSlotUnlockRsp_descriptor_;
  metadata.reflection = CLMoFaSlotUnlockRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
