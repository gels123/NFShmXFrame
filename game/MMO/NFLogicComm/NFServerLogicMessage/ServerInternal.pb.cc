// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerInternal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerInternal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NotifyCloseServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCloseServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebToCenterMergeFlagRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebToCenterMergeFlagRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialRegisterCenterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialRegisterCenterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialRegisterCenterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialRegisterCenterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicRegisterGateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicRegisterGateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicRegisterGateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicRegisterGateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicRegisterCenterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicRegisterCenterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicRegisterCenterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicRegisterCenterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterRegisterGateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterRegisterGateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterRegisterGateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterRegisterGateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterRegisterDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterRegisterDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateNotifyDisconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateNotifyDisconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerLogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicDataUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicDataUpdate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyLogicDataUpdate_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QueryCenterInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCenterInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryCenterInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCenterInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyLogicState_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicEnterGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicEnterGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicEnterGameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicEnterGameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicLeaveGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicLeaveGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicLeaveGameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicLeaveGameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyCenterKickReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCenterKickReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGateEnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGateEnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGateChangeLogic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGateChangeLogic_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGateLeaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGateLeaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGateReconnectGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGateReconnectGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyCenterDisConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCenterDisConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicDisconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicDisconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicReconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicReconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyCenterReconnectSuccessRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCenterReconnectSuccessRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialRoleInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialRoleInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialRoleInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialRoleInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialRoleEventRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialRoleEventRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynAttrToCenterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynAttrToCenterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterToLogicVirForbidRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterToLogicVirForbidRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGateRetRoleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGateRetRoleList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerInternal_2eproto() {
  protobuf_AddDesc_ServerInternal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerInternal.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyCloseServer_descriptor_ = file->message_type(0);
  static const int NotifyCloseServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCloseServer, who_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCloseServer, reason_),
  };
  NotifyCloseServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCloseServer_descriptor_,
      NotifyCloseServer::default_instance_,
      NotifyCloseServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCloseServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCloseServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCloseServer));
  WebToCenterMergeFlagRsp_descriptor_ = file->message_type(1);
  static const int WebToCenterMergeFlagRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebToCenterMergeFlagRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebToCenterMergeFlagRsp, merge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebToCenterMergeFlagRsp, zidlst_),
  };
  WebToCenterMergeFlagRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebToCenterMergeFlagRsp_descriptor_,
      WebToCenterMergeFlagRsp::default_instance_,
      WebToCenterMergeFlagRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebToCenterMergeFlagRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebToCenterMergeFlagRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebToCenterMergeFlagRsp));
  SocialRegisterCenterReq_descriptor_ = file->message_type(2);
  static const int SocialRegisterCenterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRegisterCenterReq, crossid_),
  };
  SocialRegisterCenterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialRegisterCenterReq_descriptor_,
      SocialRegisterCenterReq::default_instance_,
      SocialRegisterCenterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRegisterCenterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRegisterCenterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialRegisterCenterReq));
  SocialRegisterCenterRsp_descriptor_ = file->message_type(3);
  static const int SocialRegisterCenterRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRegisterCenterRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRegisterCenterRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRegisterCenterRsp, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRegisterCenterRsp, logic_lst_),
  };
  SocialRegisterCenterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialRegisterCenterRsp_descriptor_,
      SocialRegisterCenterRsp::default_instance_,
      SocialRegisterCenterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRegisterCenterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRegisterCenterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialRegisterCenterRsp));
  LogicRegisterGateReq_descriptor_ = file->message_type(4);
  static const int LogicRegisterGateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterGateReq, logicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterGateReq, cmd_lst_),
  };
  LogicRegisterGateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicRegisterGateReq_descriptor_,
      LogicRegisterGateReq::default_instance_,
      LogicRegisterGateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterGateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterGateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicRegisterGateReq));
  LogicRegisterGateRsp_descriptor_ = file->message_type(5);
  static const int LogicRegisterGateRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterGateRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterGateRsp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterGateRsp, result_),
  };
  LogicRegisterGateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicRegisterGateRsp_descriptor_,
      LogicRegisterGateRsp::default_instance_,
      LogicRegisterGateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterGateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterGateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicRegisterGateRsp));
  LogicRegisterCenterReq_descriptor_ = file->message_type(6);
  static const int LogicRegisterCenterReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterCenterReq, logicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterCenterReq, mapid_list_),
  };
  LogicRegisterCenterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicRegisterCenterReq_descriptor_,
      LogicRegisterCenterReq::default_instance_,
      LogicRegisterCenterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterCenterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterCenterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicRegisterCenterReq));
  LogicRegisterCenterRsp_descriptor_ = file->message_type(7);
  static const int LogicRegisterCenterRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterCenterRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterCenterRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterCenterRsp, open_time_),
  };
  LogicRegisterCenterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicRegisterCenterRsp_descriptor_,
      LogicRegisterCenterRsp::default_instance_,
      LogicRegisterCenterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterCenterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicRegisterCenterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicRegisterCenterRsp));
  CenterRegisterGateReq_descriptor_ = file->message_type(8);
  static const int CenterRegisterGateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRegisterGateReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRegisterGateReq, cmd_lst_),
  };
  CenterRegisterGateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterRegisterGateReq_descriptor_,
      CenterRegisterGateReq::default_instance_,
      CenterRegisterGateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRegisterGateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRegisterGateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterRegisterGateReq));
  CenterRegisterGateRsp_descriptor_ = file->message_type(9);
  static const int CenterRegisterGateRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRegisterGateRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRegisterGateRsp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRegisterGateRsp, result_),
  };
  CenterRegisterGateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterRegisterGateRsp_descriptor_,
      CenterRegisterGateRsp::default_instance_,
      CenterRegisterGateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRegisterGateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRegisterGateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterRegisterGateRsp));
  CenterRegisterDBReq_descriptor_ = file->message_type(10);
  static const int CenterRegisterDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRegisterDBReq, zid_),
  };
  CenterRegisterDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterRegisterDBReq_descriptor_,
      CenterRegisterDBReq::default_instance_,
      CenterRegisterDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRegisterDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRegisterDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterRegisterDBReq));
  GateNotifyDisconnect_descriptor_ = file->message_type(11);
  static const int GateNotifyDisconnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateNotifyDisconnect, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateNotifyDisconnect, reason_),
  };
  GateNotifyDisconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateNotifyDisconnect_descriptor_,
      GateNotifyDisconnect::default_instance_,
      GateNotifyDisconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateNotifyDisconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateNotifyDisconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateNotifyDisconnect));
  InnerLogReq_descriptor_ = file->message_type(12);
  static const int InnerLogReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerLogReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerLogReq, content_),
  };
  InnerLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InnerLogReq_descriptor_,
      InnerLogReq::default_instance_,
      InnerLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InnerLogReq));
  NotifyLogicDataUpdate_descriptor_ = file->message_type(13);
  static const int NotifyLogicDataUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicDataUpdate, update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicDataUpdate, update_time_),
  };
  NotifyLogicDataUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicDataUpdate_descriptor_,
      NotifyLogicDataUpdate::default_instance_,
      NotifyLogicDataUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicDataUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicDataUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicDataUpdate));
  NotifyLogicDataUpdate_Type_descriptor_ = NotifyLogicDataUpdate_descriptor_->enum_type(0);
  QueryCenterInfoReq_descriptor_ = file->message_type(14);
  static const int QueryCenterInfoReq_offsets_[1] = {
  };
  QueryCenterInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCenterInfoReq_descriptor_,
      QueryCenterInfoReq::default_instance_,
      QueryCenterInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCenterInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCenterInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCenterInfoReq));
  QueryCenterInfoRsp_descriptor_ = file->message_type(15);
  static const int QueryCenterInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCenterInfoRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCenterInfoRsp, merge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCenterInfoRsp, loadfinish_),
  };
  QueryCenterInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCenterInfoRsp_descriptor_,
      QueryCenterInfoRsp::default_instance_,
      QueryCenterInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCenterInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCenterInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCenterInfoRsp));
  NotifyLogicState_descriptor_ = file->message_type(16);
  static const int NotifyLogicState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicState, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicState, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicState, logic_id_),
  };
  NotifyLogicState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicState_descriptor_,
      NotifyLogicState::default_instance_,
      NotifyLogicState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicState));
  NotifyLogicState_Type_descriptor_ = NotifyLogicState_descriptor_->enum_type(0);
  NotifyLogicEnterGameReq_descriptor_ = file->message_type(17);
  static const int NotifyLogicEnterGameReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameReq, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameReq, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameReq, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameReq, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameReq, sync_),
  };
  NotifyLogicEnterGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicEnterGameReq_descriptor_,
      NotifyLogicEnterGameReq::default_instance_,
      NotifyLogicEnterGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicEnterGameReq));
  NotifyLogicEnterGameRsp_descriptor_ = file->message_type(18);
  static const int NotifyLogicEnterGameRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameRsp, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameRsp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameRsp, proto_),
  };
  NotifyLogicEnterGameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicEnterGameRsp_descriptor_,
      NotifyLogicEnterGameRsp::default_instance_,
      NotifyLogicEnterGameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicEnterGameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicEnterGameRsp));
  NotifyLogicLeaveGameReq_descriptor_ = file->message_type(19);
  static const int NotifyLogicLeaveGameReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq, type_),
  };
  NotifyLogicLeaveGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicLeaveGameReq_descriptor_,
      NotifyLogicLeaveGameReq::default_instance_,
      NotifyLogicLeaveGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicLeaveGameReq));
  NotifyLogicLeaveGameRsp_descriptor_ = file->message_type(20);
  static const int NotifyLogicLeaveGameRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp, logout_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp, info_),
  };
  NotifyLogicLeaveGameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicLeaveGameRsp_descriptor_,
      NotifyLogicLeaveGameRsp::default_instance_,
      NotifyLogicLeaveGameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicLeaveGameRsp));
  NotifyCenterKickReq_descriptor_ = file->message_type(21);
  static const int NotifyCenterKickReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterKickReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterKickReq, uid_),
  };
  NotifyCenterKickReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCenterKickReq_descriptor_,
      NotifyCenterKickReq::default_instance_,
      NotifyCenterKickReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterKickReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterKickReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCenterKickReq));
  NotifyGateEnterGame_descriptor_ = file->message_type(22);
  static const int NotifyGateEnterGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateEnterGame, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateEnterGame, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateEnterGame, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateEnterGame, logicid_),
  };
  NotifyGateEnterGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGateEnterGame_descriptor_,
      NotifyGateEnterGame::default_instance_,
      NotifyGateEnterGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateEnterGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateEnterGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGateEnterGame));
  NotifyGateChangeLogic_descriptor_ = file->message_type(23);
  static const int NotifyGateChangeLogic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateChangeLogic, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateChangeLogic, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateChangeLogic, logicid_),
  };
  NotifyGateChangeLogic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGateChangeLogic_descriptor_,
      NotifyGateChangeLogic::default_instance_,
      NotifyGateChangeLogic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateChangeLogic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateChangeLogic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGateChangeLogic));
  NotifyGateLeaveGame_descriptor_ = file->message_type(24);
  static const int NotifyGateLeaveGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame, leave_flag_),
  };
  NotifyGateLeaveGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGateLeaveGame_descriptor_,
      NotifyGateLeaveGame::default_instance_,
      NotifyGateLeaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGateLeaveGame));
  NotifyGateReconnectGame_descriptor_ = file->message_type(25);
  static const int NotifyGateReconnectGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateReconnectGame, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateReconnectGame, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateReconnectGame, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateReconnectGame, logicid_),
  };
  NotifyGateReconnectGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGateReconnectGame_descriptor_,
      NotifyGateReconnectGame::default_instance_,
      NotifyGateReconnectGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateReconnectGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateReconnectGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGateReconnectGame));
  NotifyCenterDisConnect_descriptor_ = file->message_type(26);
  static const int NotifyCenterDisConnect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect, errflag_),
  };
  NotifyCenterDisConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCenterDisConnect_descriptor_,
      NotifyCenterDisConnect::default_instance_,
      NotifyCenterDisConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCenterDisConnect));
  NotifyLogicDisconnect_descriptor_ = file->message_type(27);
  static const int NotifyLogicDisconnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicDisconnect, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicDisconnect, cid_),
  };
  NotifyLogicDisconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicDisconnect_descriptor_,
      NotifyLogicDisconnect::default_instance_,
      NotifyLogicDisconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicDisconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicDisconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicDisconnect));
  NotifyLogicReconnect_descriptor_ = file->message_type(28);
  static const int NotifyLogicReconnect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicReconnect, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicReconnect, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicReconnect, gateid_),
  };
  NotifyLogicReconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicReconnect_descriptor_,
      NotifyLogicReconnect::default_instance_,
      NotifyLogicReconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicReconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicReconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicReconnect));
  NotifyCenterReconnectSuccessRsp_descriptor_ = file->message_type(29);
  static const int NotifyCenterReconnectSuccessRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterReconnectSuccessRsp, cid_),
  };
  NotifyCenterReconnectSuccessRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCenterReconnectSuccessRsp_descriptor_,
      NotifyCenterReconnectSuccessRsp::default_instance_,
      NotifyCenterReconnectSuccessRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterReconnectSuccessRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterReconnectSuccessRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCenterReconnectSuccessRsp));
  SocialRoleInfoReq_descriptor_ = file->message_type(30);
  static const int SocialRoleInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleInfoReq, cid_list_),
  };
  SocialRoleInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialRoleInfoReq_descriptor_,
      SocialRoleInfoReq::default_instance_,
      SocialRoleInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialRoleInfoReq));
  SocialRoleInfoRsp_descriptor_ = file->message_type(31);
  static const int SocialRoleInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleInfoRsp, info_list_),
  };
  SocialRoleInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialRoleInfoRsp_descriptor_,
      SocialRoleInfoRsp::default_instance_,
      SocialRoleInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialRoleInfoRsp));
  SocialRoleEventRsp_descriptor_ = file->message_type(32);
  static const int SocialRoleEventRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleEventRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleEventRsp, event_type_),
  };
  SocialRoleEventRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialRoleEventRsp_descriptor_,
      SocialRoleEventRsp::default_instance_,
      SocialRoleEventRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleEventRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleEventRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialRoleEventRsp));
  SynAttrToCenterRsp_descriptor_ = file->message_type(33);
  static const int SynAttrToCenterRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrToCenterRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrToCenterRsp, info_),
  };
  SynAttrToCenterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynAttrToCenterRsp_descriptor_,
      SynAttrToCenterRsp::default_instance_,
      SynAttrToCenterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrToCenterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrToCenterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynAttrToCenterRsp));
  CenterToLogicVirForbidRsp_descriptor_ = file->message_type(34);
  static const int CenterToLogicVirForbidRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogicVirForbidRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogicVirForbidRsp, vir_lst_),
  };
  CenterToLogicVirForbidRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterToLogicVirForbidRsp_descriptor_,
      CenterToLogicVirForbidRsp::default_instance_,
      CenterToLogicVirForbidRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogicVirForbidRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogicVirForbidRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterToLogicVirForbidRsp));
  NotifyGateRetRoleList_descriptor_ = file->message_type(35);
  static const int NotifyGateRetRoleList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateRetRoleList, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateRetRoleList, uid_),
  };
  NotifyGateRetRoleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGateRetRoleList_descriptor_,
      NotifyGateRetRoleList::default_instance_,
      NotifyGateRetRoleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateRetRoleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateRetRoleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGateRetRoleList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerInternal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCloseServer_descriptor_, &NotifyCloseServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebToCenterMergeFlagRsp_descriptor_, &WebToCenterMergeFlagRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialRegisterCenterReq_descriptor_, &SocialRegisterCenterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialRegisterCenterRsp_descriptor_, &SocialRegisterCenterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicRegisterGateReq_descriptor_, &LogicRegisterGateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicRegisterGateRsp_descriptor_, &LogicRegisterGateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicRegisterCenterReq_descriptor_, &LogicRegisterCenterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicRegisterCenterRsp_descriptor_, &LogicRegisterCenterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterRegisterGateReq_descriptor_, &CenterRegisterGateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterRegisterGateRsp_descriptor_, &CenterRegisterGateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterRegisterDBReq_descriptor_, &CenterRegisterDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateNotifyDisconnect_descriptor_, &GateNotifyDisconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InnerLogReq_descriptor_, &InnerLogReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicDataUpdate_descriptor_, &NotifyLogicDataUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCenterInfoReq_descriptor_, &QueryCenterInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCenterInfoRsp_descriptor_, &QueryCenterInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicState_descriptor_, &NotifyLogicState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicEnterGameReq_descriptor_, &NotifyLogicEnterGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicEnterGameRsp_descriptor_, &NotifyLogicEnterGameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicLeaveGameReq_descriptor_, &NotifyLogicLeaveGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicLeaveGameRsp_descriptor_, &NotifyLogicLeaveGameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCenterKickReq_descriptor_, &NotifyCenterKickReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGateEnterGame_descriptor_, &NotifyGateEnterGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGateChangeLogic_descriptor_, &NotifyGateChangeLogic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGateLeaveGame_descriptor_, &NotifyGateLeaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGateReconnectGame_descriptor_, &NotifyGateReconnectGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCenterDisConnect_descriptor_, &NotifyCenterDisConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicDisconnect_descriptor_, &NotifyLogicDisconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicReconnect_descriptor_, &NotifyLogicReconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCenterReconnectSuccessRsp_descriptor_, &NotifyCenterReconnectSuccessRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialRoleInfoReq_descriptor_, &SocialRoleInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialRoleInfoRsp_descriptor_, &SocialRoleInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialRoleEventRsp_descriptor_, &SocialRoleEventRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynAttrToCenterRsp_descriptor_, &SynAttrToCenterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterToLogicVirForbidRsp_descriptor_, &CenterToLogicVirForbidRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGateRetRoleList_descriptor_, &NotifyGateRetRoleList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerInternal_2eproto() {
  delete NotifyCloseServer::default_instance_;
  delete NotifyCloseServer_reflection_;
  delete WebToCenterMergeFlagRsp::default_instance_;
  delete WebToCenterMergeFlagRsp_reflection_;
  delete SocialRegisterCenterReq::default_instance_;
  delete SocialRegisterCenterReq_reflection_;
  delete SocialRegisterCenterRsp::default_instance_;
  delete SocialRegisterCenterRsp_reflection_;
  delete LogicRegisterGateReq::default_instance_;
  delete LogicRegisterGateReq_reflection_;
  delete LogicRegisterGateRsp::default_instance_;
  delete LogicRegisterGateRsp_reflection_;
  delete LogicRegisterCenterReq::default_instance_;
  delete LogicRegisterCenterReq_reflection_;
  delete LogicRegisterCenterRsp::default_instance_;
  delete LogicRegisterCenterRsp_reflection_;
  delete CenterRegisterGateReq::default_instance_;
  delete CenterRegisterGateReq_reflection_;
  delete CenterRegisterGateRsp::default_instance_;
  delete CenterRegisterGateRsp_reflection_;
  delete CenterRegisterDBReq::default_instance_;
  delete CenterRegisterDBReq_reflection_;
  delete GateNotifyDisconnect::default_instance_;
  delete GateNotifyDisconnect_reflection_;
  delete InnerLogReq::default_instance_;
  delete InnerLogReq_reflection_;
  delete NotifyLogicDataUpdate::default_instance_;
  delete NotifyLogicDataUpdate_reflection_;
  delete QueryCenterInfoReq::default_instance_;
  delete QueryCenterInfoReq_reflection_;
  delete QueryCenterInfoRsp::default_instance_;
  delete QueryCenterInfoRsp_reflection_;
  delete NotifyLogicState::default_instance_;
  delete NotifyLogicState_reflection_;
  delete NotifyLogicEnterGameReq::default_instance_;
  delete NotifyLogicEnterGameReq_reflection_;
  delete NotifyLogicEnterGameRsp::default_instance_;
  delete NotifyLogicEnterGameRsp_reflection_;
  delete NotifyLogicLeaveGameReq::default_instance_;
  delete NotifyLogicLeaveGameReq_reflection_;
  delete NotifyLogicLeaveGameRsp::default_instance_;
  delete NotifyLogicLeaveGameRsp_reflection_;
  delete NotifyCenterKickReq::default_instance_;
  delete NotifyCenterKickReq_reflection_;
  delete NotifyGateEnterGame::default_instance_;
  delete NotifyGateEnterGame_reflection_;
  delete NotifyGateChangeLogic::default_instance_;
  delete NotifyGateChangeLogic_reflection_;
  delete NotifyGateLeaveGame::default_instance_;
  delete NotifyGateLeaveGame_reflection_;
  delete NotifyGateReconnectGame::default_instance_;
  delete NotifyGateReconnectGame_reflection_;
  delete NotifyCenterDisConnect::default_instance_;
  delete NotifyCenterDisConnect_reflection_;
  delete NotifyLogicDisconnect::default_instance_;
  delete NotifyLogicDisconnect_reflection_;
  delete NotifyLogicReconnect::default_instance_;
  delete NotifyLogicReconnect_reflection_;
  delete NotifyCenterReconnectSuccessRsp::default_instance_;
  delete NotifyCenterReconnectSuccessRsp_reflection_;
  delete SocialRoleInfoReq::default_instance_;
  delete SocialRoleInfoReq_reflection_;
  delete SocialRoleInfoRsp::default_instance_;
  delete SocialRoleInfoRsp_reflection_;
  delete SocialRoleEventRsp::default_instance_;
  delete SocialRoleEventRsp_reflection_;
  delete SynAttrToCenterRsp::default_instance_;
  delete SynAttrToCenterRsp_reflection_;
  delete CenterToLogicVirForbidRsp::default_instance_;
  delete CenterToLogicVirForbidRsp_reflection_;
  delete NotifyGateRetRoleList::default_instance_;
  delete NotifyGateRetRoleList_reflection_;
}

void protobuf_AddDesc_ServerInternal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ServerInternal.proto\022\010proto_ff\032\025yd_fie"
    "ldoptions.proto\032\022common_logic.proto\032\tCom"
    ".proto\032\017ComDefine.proto\"0\n\021NotifyCloseSe"
    "rver\022\013\n\003who\030\001 \001(\t\022\016\n\006reason\030\002 \001(\t\"E\n\027Web"
    "ToCenterMergeFlagRsp\022\013\n\003zid\030\001 \002(\r\022\r\n\005mer"
    "ge\030\002 \002(\r\022\016\n\006zidLst\030\003 \003(\r\"*\n\027SocialRegist"
    "erCenterReq\022\017\n\007crossid\030\001 \002(\r\"[\n\027SocialRe"
    "gisterCenterRsp\022\013\n\003zid\030\001 \002(\r\022\016\n\006result\030\002"
    " \002(\005\022\020\n\010opentime\030\003 \002(\004\022\021\n\tlogic_lst\030\004 \003("
    "\r\"8\n\024LogicRegisterGateReq\022\017\n\007logicid\030\001 \002"
    "(\r\022\017\n\007cmd_lst\030\002 \003(\r\"C\n\024LogicRegisterGate"
    "Rsp\022\013\n\003zid\030\001 \002(\r\022\016\n\006gateid\030\002 \002(\r\022\016\n\006resu"
    "lt\030\003 \002(\005\"=\n\026LogicRegisterCenterReq\022\017\n\007lo"
    "gicid\030\001 \002(\r\022\022\n\nmapid_list\030\002 \003(\004\"H\n\026Logic"
    "RegisterCenterRsp\022\016\n\006result\030\001 \002(\005\022\013\n\003zid"
    "\030\002 \002(\r\022\021\n\topen_time\030\003 \001(\004\"5\n\025CenterRegis"
    "terGateReq\022\013\n\003zid\030\001 \002(\r\022\017\n\007cmd_lst\030\002 \003(\r"
    "\"D\n\025CenterRegisterGateRsp\022\013\n\003zid\030\001 \002(\r\022\016"
    "\n\006gateid\030\002 \002(\r\022\016\n\006result\030\003 \002(\005\"\"\n\023Center"
    "RegisterDBReq\022\013\n\003zid\030\001 \002(\r\"8\n\024GateNotify"
    "Disconnect\022\020\n\010clientid\030\001 \002(\r\022\016\n\006reason\030\002"
    " \002(\005\",\n\013InnerLogReq\022\014\n\004type\030\001 \002(\005\022\017\n\007con"
    "tent\030\002 \002(\t\"\243\001\n\025NotifyLogicDataUpdate\0229\n\013"
    "update_type\030\001 \002(\0162$.proto_ff.NotifyLogic"
    "DataUpdate.Type\022\023\n\013update_time\030\002 \002(\004\":\n\004"
    "Type\022\t\n\005daily\020\001\022\010\n\004week\020\002\022\016\n\ndaily_zero\020"
    "\003\022\r\n\tweek_zero\020\004\"\024\n\022QueryCenterInfoReq\"D"
    "\n\022QueryCenterInfoRsp\022\013\n\003zid\030\001 \002(\r\022\r\n\005mer"
    "ge\030\002 \002(\005\022\022\n\nloadfinish\030\003 \002(\005\"\200\001\n\020NotifyL"
    "ogicState\022\013\n\003zid\030\001 \002(\r\022.\n\005itype\030\002 \002(\0162\037."
    "proto_ff.NotifyLogicState.Type\022\020\n\010logic_"
    "id\030\003 \002(\r\"\035\n\004Type\022\n\n\006conect\020\001\022\t\n\005crash\020\002\""
    "\337\001\n\027NotifyLogicEnterGameReq\022\013\n\003uid\030\001 \002(\r"
    "\022\013\n\003cid\030\002 \002(\004\022\017\n\007sceneid\030\003 \002(\004\022\r\n\005mapid\030"
    "\004 \002(\004\022 \n\003pos\030\005 \002(\0132\023.proto_ff.Vector3PB\022"
    "\020\n\010clientId\030\006 \002(\r\022\016\n\006gateId\030\007 \002(\r\022\021\n\tcha"
    "nnelId\030\010 \002(\r\022\013\n\003zid\030\t \002(\r\022&\n\004sync\030\n \001(\0132"
    "\030.proto_ff.LoginSyncProto\"\177\n\027NotifyLogic"
    "EnterGameRsp\022\013\n\003uid\030\001 \002(\r\022\013\n\003cid\030\002 \002(\004\022\020"
    "\n\010clientId\030\003 \002(\r\022\016\n\006gateId\030\004 \002(\r\022(\n\005prot"
    "o\030\005 \002(\0132\031.proto_ff.CenterRoleProto\"j\n\027No"
    "tifyLogicLeaveGameReq\022\013\n\003cid\030\001 \002(\004\022\013\n\003ui"
    "d\030\002 \002(\r\022\020\n\010clientId\030\003 \002(\r\022#\n\004type\030\004 \001(\0162"
    "\025.proto_ff.LOGOUT_TYPE\"\203\001\n\027NotifyLogicLe"
    "aveGameRsp\022\013\n\003cid\030\001 \002(\004\022\013\n\003uid\030\002 \002(\r\022\020\n\010"
    "clientId\030\003 \002(\r\022\023\n\013logout_type\030\004 \001(\005\022\'\n\004i"
    "nfo\030\005 \001(\0132\031.proto_ff.RoleListDBProto\"/\n\023"
    "NotifyCenterKickReq\022\013\n\003cid\030\001 \002(\004\022\013\n\003uid\030"
    "\002 \002(\r\"R\n\023NotifyGateEnterGame\022\013\n\003cid\030\001 \002("
    "\004\022\013\n\003uid\030\002 \002(\r\022\020\n\010clientId\030\003 \002(\r\022\017\n\007logi"
    "cId\030\004 \002(\r\"G\n\025NotifyGateChangeLogic\022\013\n\003ci"
    "d\030\001 \002(\004\022\020\n\010clientId\030\002 \002(\r\022\017\n\007logicId\030\003 \002"
    "(\r\"R\n\023NotifyGateLeaveGame\022\020\n\010clientid\030\001 "
    "\002(\r\022)\n\nleave_flag\030\002 \002(\0162\025.proto_ff.LOGOU"
    "T_TYPE\"V\n\027NotifyGateReconnectGame\022\020\n\010cli"
    "entid\030\001 \002(\r\022\013\n\003cid\030\002 \002(\004\022\013\n\003uid\030\003 \002(\r\022\017\n"
    "\007logicid\030\004 \002(\r\"H\n\026NotifyCenterDisConnect"
    "\022\020\n\010clientId\030\001 \002(\r\022\013\n\003cid\030\002 \001(\004\022\017\n\007errfl"
    "ag\030\003 \001(\005\"6\n\025NotifyLogicDisconnect\022\020\n\010cli"
    "entId\030\001 \001(\r\022\013\n\003cid\030\002 \001(\004\"E\n\024NotifyLogicR"
    "econnect\022\013\n\003cid\030\001 \002(\004\022\020\n\010clientId\030\002 \002(\r\022"
    "\016\n\006gateId\030\003 \002(\r\".\n\037NotifyCenterReconnect"
    "SuccessRsp\022\013\n\003cid\030\001 \002(\004\"%\n\021SocialRoleInf"
    "oReq\022\020\n\010cid_list\030\001 \003(\004\"A\n\021SocialRoleInfo"
    "Rsp\022,\n\tinfo_list\030\001 \003(\0132\031.proto_ff.Social"
    "RoleProto\"5\n\022SocialRoleEventRsp\022\013\n\003cid\030\001"
    " \002(\004\022\022\n\nevent_type\030\002 \003(\r\"J\n\022SynAttrToCen"
    "terRsp\022\013\n\003cid\030\001 \002(\004\022\'\n\004info\030\002 \001(\0132\031.prot"
    "o_ff.CenterRoleProto\"9\n\031CenterToLogicVir"
    "ForbidRsp\022\013\n\003zid\030\001 \001(\r\022\017\n\007vir_lst\030\002 \003(\004\""
    "6\n\025NotifyGateRetRoleList\022\020\n\010clientid\030\001 \002"
    "(\r\022\013\n\003uid\030\002 \002(\r", 2855);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerInternal.proto", &protobuf_RegisterTypes);
  NotifyCloseServer::default_instance_ = new NotifyCloseServer();
  WebToCenterMergeFlagRsp::default_instance_ = new WebToCenterMergeFlagRsp();
  SocialRegisterCenterReq::default_instance_ = new SocialRegisterCenterReq();
  SocialRegisterCenterRsp::default_instance_ = new SocialRegisterCenterRsp();
  LogicRegisterGateReq::default_instance_ = new LogicRegisterGateReq();
  LogicRegisterGateRsp::default_instance_ = new LogicRegisterGateRsp();
  LogicRegisterCenterReq::default_instance_ = new LogicRegisterCenterReq();
  LogicRegisterCenterRsp::default_instance_ = new LogicRegisterCenterRsp();
  CenterRegisterGateReq::default_instance_ = new CenterRegisterGateReq();
  CenterRegisterGateRsp::default_instance_ = new CenterRegisterGateRsp();
  CenterRegisterDBReq::default_instance_ = new CenterRegisterDBReq();
  GateNotifyDisconnect::default_instance_ = new GateNotifyDisconnect();
  InnerLogReq::default_instance_ = new InnerLogReq();
  NotifyLogicDataUpdate::default_instance_ = new NotifyLogicDataUpdate();
  QueryCenterInfoReq::default_instance_ = new QueryCenterInfoReq();
  QueryCenterInfoRsp::default_instance_ = new QueryCenterInfoRsp();
  NotifyLogicState::default_instance_ = new NotifyLogicState();
  NotifyLogicEnterGameReq::default_instance_ = new NotifyLogicEnterGameReq();
  NotifyLogicEnterGameRsp::default_instance_ = new NotifyLogicEnterGameRsp();
  NotifyLogicLeaveGameReq::default_instance_ = new NotifyLogicLeaveGameReq();
  NotifyLogicLeaveGameRsp::default_instance_ = new NotifyLogicLeaveGameRsp();
  NotifyCenterKickReq::default_instance_ = new NotifyCenterKickReq();
  NotifyGateEnterGame::default_instance_ = new NotifyGateEnterGame();
  NotifyGateChangeLogic::default_instance_ = new NotifyGateChangeLogic();
  NotifyGateLeaveGame::default_instance_ = new NotifyGateLeaveGame();
  NotifyGateReconnectGame::default_instance_ = new NotifyGateReconnectGame();
  NotifyCenterDisConnect::default_instance_ = new NotifyCenterDisConnect();
  NotifyLogicDisconnect::default_instance_ = new NotifyLogicDisconnect();
  NotifyLogicReconnect::default_instance_ = new NotifyLogicReconnect();
  NotifyCenterReconnectSuccessRsp::default_instance_ = new NotifyCenterReconnectSuccessRsp();
  SocialRoleInfoReq::default_instance_ = new SocialRoleInfoReq();
  SocialRoleInfoRsp::default_instance_ = new SocialRoleInfoRsp();
  SocialRoleEventRsp::default_instance_ = new SocialRoleEventRsp();
  SynAttrToCenterRsp::default_instance_ = new SynAttrToCenterRsp();
  CenterToLogicVirForbidRsp::default_instance_ = new CenterToLogicVirForbidRsp();
  NotifyGateRetRoleList::default_instance_ = new NotifyGateRetRoleList();
  NotifyCloseServer::default_instance_->InitAsDefaultInstance();
  WebToCenterMergeFlagRsp::default_instance_->InitAsDefaultInstance();
  SocialRegisterCenterReq::default_instance_->InitAsDefaultInstance();
  SocialRegisterCenterRsp::default_instance_->InitAsDefaultInstance();
  LogicRegisterGateReq::default_instance_->InitAsDefaultInstance();
  LogicRegisterGateRsp::default_instance_->InitAsDefaultInstance();
  LogicRegisterCenterReq::default_instance_->InitAsDefaultInstance();
  LogicRegisterCenterRsp::default_instance_->InitAsDefaultInstance();
  CenterRegisterGateReq::default_instance_->InitAsDefaultInstance();
  CenterRegisterGateRsp::default_instance_->InitAsDefaultInstance();
  CenterRegisterDBReq::default_instance_->InitAsDefaultInstance();
  GateNotifyDisconnect::default_instance_->InitAsDefaultInstance();
  InnerLogReq::default_instance_->InitAsDefaultInstance();
  NotifyLogicDataUpdate::default_instance_->InitAsDefaultInstance();
  QueryCenterInfoReq::default_instance_->InitAsDefaultInstance();
  QueryCenterInfoRsp::default_instance_->InitAsDefaultInstance();
  NotifyLogicState::default_instance_->InitAsDefaultInstance();
  NotifyLogicEnterGameReq::default_instance_->InitAsDefaultInstance();
  NotifyLogicEnterGameRsp::default_instance_->InitAsDefaultInstance();
  NotifyLogicLeaveGameReq::default_instance_->InitAsDefaultInstance();
  NotifyLogicLeaveGameRsp::default_instance_->InitAsDefaultInstance();
  NotifyCenterKickReq::default_instance_->InitAsDefaultInstance();
  NotifyGateEnterGame::default_instance_->InitAsDefaultInstance();
  NotifyGateChangeLogic::default_instance_->InitAsDefaultInstance();
  NotifyGateLeaveGame::default_instance_->InitAsDefaultInstance();
  NotifyGateReconnectGame::default_instance_->InitAsDefaultInstance();
  NotifyCenterDisConnect::default_instance_->InitAsDefaultInstance();
  NotifyLogicDisconnect::default_instance_->InitAsDefaultInstance();
  NotifyLogicReconnect::default_instance_->InitAsDefaultInstance();
  NotifyCenterReconnectSuccessRsp::default_instance_->InitAsDefaultInstance();
  SocialRoleInfoReq::default_instance_->InitAsDefaultInstance();
  SocialRoleInfoRsp::default_instance_->InitAsDefaultInstance();
  SocialRoleEventRsp::default_instance_->InitAsDefaultInstance();
  SynAttrToCenterRsp::default_instance_->InitAsDefaultInstance();
  CenterToLogicVirForbidRsp::default_instance_->InitAsDefaultInstance();
  NotifyGateRetRoleList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerInternal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerInternal_2eproto {
  StaticDescriptorInitializer_ServerInternal_2eproto() {
    protobuf_AddDesc_ServerInternal_2eproto();
  }
} static_descriptor_initializer_ServerInternal_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifyCloseServer::kWhoFieldNumber;
const int NotifyCloseServer::kReasonFieldNumber;
#endif  // !_MSC_VER

NotifyCloseServer::NotifyCloseServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyCloseServer::InitAsDefaultInstance() {
}

NotifyCloseServer::NotifyCloseServer(const NotifyCloseServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyCloseServer::SharedCtor() {
  _cached_size_ = 0;
  who_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCloseServer::~NotifyCloseServer() {
  SharedDtor();
}

void NotifyCloseServer::SharedDtor() {
  if (who_ != &::google::protobuf::internal::kEmptyString) {
    delete who_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void NotifyCloseServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCloseServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCloseServer_descriptor_;
}

const NotifyCloseServer& NotifyCloseServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyCloseServer* NotifyCloseServer::default_instance_ = NULL;

NotifyCloseServer* NotifyCloseServer::New() const {
  return new NotifyCloseServer;
}

void NotifyCloseServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_who()) {
      if (who_ != &::google::protobuf::internal::kEmptyString) {
        who_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCloseServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string who = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_who()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->who().data(), this->who().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyCloseServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string who = 1;
  if (has_who()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->who().data(), this->who().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->who(), output);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyCloseServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string who = 1;
  if (has_who()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->who().data(), this->who().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->who(), target);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyCloseServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string who = 1;
    if (has_who()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->who());
    }

    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCloseServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCloseServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCloseServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCloseServer::MergeFrom(const NotifyCloseServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_who()) {
      set_who(from.who());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCloseServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCloseServer::CopyFrom(const NotifyCloseServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCloseServer::IsInitialized() const {

  return true;
}

void NotifyCloseServer::Swap(NotifyCloseServer* other) {
  if (other != this) {
    std::swap(who_, other->who_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCloseServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCloseServer_descriptor_;
  metadata.reflection = NotifyCloseServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebToCenterMergeFlagRsp::kZidFieldNumber;
const int WebToCenterMergeFlagRsp::kMergeFieldNumber;
const int WebToCenterMergeFlagRsp::kZidLstFieldNumber;
#endif  // !_MSC_VER

WebToCenterMergeFlagRsp::WebToCenterMergeFlagRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebToCenterMergeFlagRsp::InitAsDefaultInstance() {
}

WebToCenterMergeFlagRsp::WebToCenterMergeFlagRsp(const WebToCenterMergeFlagRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebToCenterMergeFlagRsp::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  merge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebToCenterMergeFlagRsp::~WebToCenterMergeFlagRsp() {
  SharedDtor();
}

void WebToCenterMergeFlagRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WebToCenterMergeFlagRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebToCenterMergeFlagRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebToCenterMergeFlagRsp_descriptor_;
}

const WebToCenterMergeFlagRsp& WebToCenterMergeFlagRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

WebToCenterMergeFlagRsp* WebToCenterMergeFlagRsp::default_instance_ = NULL;

WebToCenterMergeFlagRsp* WebToCenterMergeFlagRsp::New() const {
  return new WebToCenterMergeFlagRsp;
}

void WebToCenterMergeFlagRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
    merge_ = 0u;
  }
  zidlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebToCenterMergeFlagRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_merge;
        break;
      }

      // required uint32 merge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &merge_)));
          set_has_merge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zidLst;
        break;
      }

      // repeated uint32 zidLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zidLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_zidlst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_zidlst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zidLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebToCenterMergeFlagRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // required uint32 merge = 2;
  if (has_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->merge(), output);
  }

  // repeated uint32 zidLst = 3;
  for (int i = 0; i < this->zidlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->zidlst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebToCenterMergeFlagRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  // required uint32 merge = 2;
  if (has_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->merge(), target);
  }

  // repeated uint32 zidLst = 3;
  for (int i = 0; i < this->zidlst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->zidlst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebToCenterMergeFlagRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required uint32 merge = 2;
    if (has_merge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->merge());
    }

  }
  // repeated uint32 zidLst = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->zidlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->zidlst(i));
    }
    total_size += 1 * this->zidlst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebToCenterMergeFlagRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebToCenterMergeFlagRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebToCenterMergeFlagRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebToCenterMergeFlagRsp::MergeFrom(const WebToCenterMergeFlagRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  zidlst_.MergeFrom(from.zidlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_merge()) {
      set_merge(from.merge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebToCenterMergeFlagRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebToCenterMergeFlagRsp::CopyFrom(const WebToCenterMergeFlagRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebToCenterMergeFlagRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WebToCenterMergeFlagRsp::Swap(WebToCenterMergeFlagRsp* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    std::swap(merge_, other->merge_);
    zidlst_.Swap(&other->zidlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebToCenterMergeFlagRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebToCenterMergeFlagRsp_descriptor_;
  metadata.reflection = WebToCenterMergeFlagRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialRegisterCenterReq::kCrossidFieldNumber;
#endif  // !_MSC_VER

SocialRegisterCenterReq::SocialRegisterCenterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocialRegisterCenterReq::InitAsDefaultInstance() {
}

SocialRegisterCenterReq::SocialRegisterCenterReq(const SocialRegisterCenterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocialRegisterCenterReq::SharedCtor() {
  _cached_size_ = 0;
  crossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialRegisterCenterReq::~SocialRegisterCenterReq() {
  SharedDtor();
}

void SocialRegisterCenterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SocialRegisterCenterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialRegisterCenterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialRegisterCenterReq_descriptor_;
}

const SocialRegisterCenterReq& SocialRegisterCenterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

SocialRegisterCenterReq* SocialRegisterCenterReq::default_instance_ = NULL;

SocialRegisterCenterReq* SocialRegisterCenterReq::New() const {
  return new SocialRegisterCenterReq;
}

void SocialRegisterCenterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crossid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialRegisterCenterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 crossid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crossid_)));
          set_has_crossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SocialRegisterCenterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 crossid = 1;
  if (has_crossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->crossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocialRegisterCenterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 crossid = 1;
  if (has_crossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->crossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocialRegisterCenterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 crossid = 1;
    if (has_crossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialRegisterCenterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialRegisterCenterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialRegisterCenterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialRegisterCenterReq::MergeFrom(const SocialRegisterCenterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crossid()) {
      set_crossid(from.crossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialRegisterCenterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialRegisterCenterReq::CopyFrom(const SocialRegisterCenterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialRegisterCenterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SocialRegisterCenterReq::Swap(SocialRegisterCenterReq* other) {
  if (other != this) {
    std::swap(crossid_, other->crossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialRegisterCenterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialRegisterCenterReq_descriptor_;
  metadata.reflection = SocialRegisterCenterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialRegisterCenterRsp::kZidFieldNumber;
const int SocialRegisterCenterRsp::kResultFieldNumber;
const int SocialRegisterCenterRsp::kOpentimeFieldNumber;
const int SocialRegisterCenterRsp::kLogicLstFieldNumber;
#endif  // !_MSC_VER

SocialRegisterCenterRsp::SocialRegisterCenterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocialRegisterCenterRsp::InitAsDefaultInstance() {
}

SocialRegisterCenterRsp::SocialRegisterCenterRsp(const SocialRegisterCenterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocialRegisterCenterRsp::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  result_ = 0;
  opentime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialRegisterCenterRsp::~SocialRegisterCenterRsp() {
  SharedDtor();
}

void SocialRegisterCenterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SocialRegisterCenterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialRegisterCenterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialRegisterCenterRsp_descriptor_;
}

const SocialRegisterCenterRsp& SocialRegisterCenterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

SocialRegisterCenterRsp* SocialRegisterCenterRsp::default_instance_ = NULL;

SocialRegisterCenterRsp* SocialRegisterCenterRsp::New() const {
  return new SocialRegisterCenterRsp;
}

void SocialRegisterCenterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
    result_ = 0;
    opentime_ = GOOGLE_ULONGLONG(0);
  }
  logic_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialRegisterCenterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opentime;
        break;
      }

      // required uint64 opentime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logic_lst;
        break;
      }

      // repeated uint32 logic_lst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_logic_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_logic_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logic_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SocialRegisterCenterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required uint64 opentime = 3;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->opentime(), output);
  }

  // repeated uint32 logic_lst = 4;
  for (int i = 0; i < this->logic_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->logic_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocialRegisterCenterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required uint64 opentime = 3;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->opentime(), target);
  }

  // repeated uint32 logic_lst = 4;
  for (int i = 0; i < this->logic_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->logic_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocialRegisterCenterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 opentime = 3;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opentime());
    }

  }
  // repeated uint32 logic_lst = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->logic_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->logic_lst(i));
    }
    total_size += 1 * this->logic_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialRegisterCenterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialRegisterCenterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialRegisterCenterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialRegisterCenterRsp::MergeFrom(const SocialRegisterCenterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  logic_lst_.MergeFrom(from.logic_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialRegisterCenterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialRegisterCenterRsp::CopyFrom(const SocialRegisterCenterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialRegisterCenterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SocialRegisterCenterRsp::Swap(SocialRegisterCenterRsp* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    std::swap(result_, other->result_);
    std::swap(opentime_, other->opentime_);
    logic_lst_.Swap(&other->logic_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialRegisterCenterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialRegisterCenterRsp_descriptor_;
  metadata.reflection = SocialRegisterCenterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicRegisterGateReq::kLogicidFieldNumber;
const int LogicRegisterGateReq::kCmdLstFieldNumber;
#endif  // !_MSC_VER

LogicRegisterGateReq::LogicRegisterGateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicRegisterGateReq::InitAsDefaultInstance() {
}

LogicRegisterGateReq::LogicRegisterGateReq(const LogicRegisterGateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicRegisterGateReq::SharedCtor() {
  _cached_size_ = 0;
  logicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicRegisterGateReq::~LogicRegisterGateReq() {
  SharedDtor();
}

void LogicRegisterGateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicRegisterGateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicRegisterGateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicRegisterGateReq_descriptor_;
}

const LogicRegisterGateReq& LogicRegisterGateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

LogicRegisterGateReq* LogicRegisterGateReq::default_instance_ = NULL;

LogicRegisterGateReq* LogicRegisterGateReq::New() const {
  return new LogicRegisterGateReq;
}

void LogicRegisterGateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logicid_ = 0u;
  }
  cmd_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicRegisterGateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logicid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd_lst;
        break;
      }

      // repeated uint32 cmd_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_cmd_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cmd_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicRegisterGateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 logicid = 1;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logicid(), output);
  }

  // repeated uint32 cmd_lst = 2;
  for (int i = 0; i < this->cmd_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cmd_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicRegisterGateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 logicid = 1;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logicid(), target);
  }

  // repeated uint32 cmd_lst = 2;
  for (int i = 0; i < this->cmd_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->cmd_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicRegisterGateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 logicid = 1;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicid());
    }

  }
  // repeated uint32 cmd_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cmd_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cmd_lst(i));
    }
    total_size += 1 * this->cmd_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicRegisterGateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicRegisterGateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicRegisterGateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicRegisterGateReq::MergeFrom(const LogicRegisterGateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cmd_lst_.MergeFrom(from.cmd_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicRegisterGateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicRegisterGateReq::CopyFrom(const LogicRegisterGateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegisterGateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LogicRegisterGateReq::Swap(LogicRegisterGateReq* other) {
  if (other != this) {
    std::swap(logicid_, other->logicid_);
    cmd_lst_.Swap(&other->cmd_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicRegisterGateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicRegisterGateReq_descriptor_;
  metadata.reflection = LogicRegisterGateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicRegisterGateRsp::kZidFieldNumber;
const int LogicRegisterGateRsp::kGateidFieldNumber;
const int LogicRegisterGateRsp::kResultFieldNumber;
#endif  // !_MSC_VER

LogicRegisterGateRsp::LogicRegisterGateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicRegisterGateRsp::InitAsDefaultInstance() {
}

LogicRegisterGateRsp::LogicRegisterGateRsp(const LogicRegisterGateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicRegisterGateRsp::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  gateid_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicRegisterGateRsp::~LogicRegisterGateRsp() {
  SharedDtor();
}

void LogicRegisterGateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicRegisterGateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicRegisterGateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicRegisterGateRsp_descriptor_;
}

const LogicRegisterGateRsp& LogicRegisterGateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

LogicRegisterGateRsp* LogicRegisterGateRsp::default_instance_ = NULL;

LogicRegisterGateRsp* LogicRegisterGateRsp::New() const {
  return new LogicRegisterGateRsp;
}

void LogicRegisterGateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
    gateid_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicRegisterGateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicRegisterGateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // required uint32 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gateid(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicRegisterGateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  // required uint32 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gateid(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicRegisterGateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required uint32 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicRegisterGateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicRegisterGateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicRegisterGateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicRegisterGateRsp::MergeFrom(const LogicRegisterGateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicRegisterGateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicRegisterGateRsp::CopyFrom(const LogicRegisterGateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegisterGateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LogicRegisterGateRsp::Swap(LogicRegisterGateRsp* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    std::swap(gateid_, other->gateid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicRegisterGateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicRegisterGateRsp_descriptor_;
  metadata.reflection = LogicRegisterGateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicRegisterCenterReq::kLogicidFieldNumber;
const int LogicRegisterCenterReq::kMapidListFieldNumber;
#endif  // !_MSC_VER

LogicRegisterCenterReq::LogicRegisterCenterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicRegisterCenterReq::InitAsDefaultInstance() {
}

LogicRegisterCenterReq::LogicRegisterCenterReq(const LogicRegisterCenterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicRegisterCenterReq::SharedCtor() {
  _cached_size_ = 0;
  logicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicRegisterCenterReq::~LogicRegisterCenterReq() {
  SharedDtor();
}

void LogicRegisterCenterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicRegisterCenterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicRegisterCenterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicRegisterCenterReq_descriptor_;
}

const LogicRegisterCenterReq& LogicRegisterCenterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

LogicRegisterCenterReq* LogicRegisterCenterReq::default_instance_ = NULL;

LogicRegisterCenterReq* LogicRegisterCenterReq::New() const {
  return new LogicRegisterCenterReq;
}

void LogicRegisterCenterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logicid_ = 0u;
  }
  mapid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicRegisterCenterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logicid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid_list;
        break;
      }

      // repeated uint64 mapid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mapid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mapid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicRegisterCenterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 logicid = 1;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logicid(), output);
  }

  // repeated uint64 mapid_list = 2;
  for (int i = 0; i < this->mapid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mapid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicRegisterCenterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 logicid = 1;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logicid(), target);
  }

  // repeated uint64 mapid_list = 2;
  for (int i = 0; i < this->mapid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mapid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicRegisterCenterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 logicid = 1;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicid());
    }

  }
  // repeated uint64 mapid_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mapid_list(i));
    }
    total_size += 1 * this->mapid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicRegisterCenterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicRegisterCenterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicRegisterCenterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicRegisterCenterReq::MergeFrom(const LogicRegisterCenterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapid_list_.MergeFrom(from.mapid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicRegisterCenterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicRegisterCenterReq::CopyFrom(const LogicRegisterCenterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegisterCenterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LogicRegisterCenterReq::Swap(LogicRegisterCenterReq* other) {
  if (other != this) {
    std::swap(logicid_, other->logicid_);
    mapid_list_.Swap(&other->mapid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicRegisterCenterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicRegisterCenterReq_descriptor_;
  metadata.reflection = LogicRegisterCenterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicRegisterCenterRsp::kResultFieldNumber;
const int LogicRegisterCenterRsp::kZidFieldNumber;
const int LogicRegisterCenterRsp::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

LogicRegisterCenterRsp::LogicRegisterCenterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicRegisterCenterRsp::InitAsDefaultInstance() {
}

LogicRegisterCenterRsp::LogicRegisterCenterRsp(const LogicRegisterCenterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicRegisterCenterRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  zid_ = 0u;
  open_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicRegisterCenterRsp::~LogicRegisterCenterRsp() {
  SharedDtor();
}

void LogicRegisterCenterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicRegisterCenterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicRegisterCenterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicRegisterCenterRsp_descriptor_;
}

const LogicRegisterCenterRsp& LogicRegisterCenterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

LogicRegisterCenterRsp* LogicRegisterCenterRsp::default_instance_ = NULL;

LogicRegisterCenterRsp* LogicRegisterCenterRsp::New() const {
  return new LogicRegisterCenterRsp;
}

void LogicRegisterCenterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    zid_ = 0u;
    open_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicRegisterCenterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // required uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_open_time;
        break;
      }

      // optional uint64 open_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicRegisterCenterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional uint64 open_time = 3;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->open_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicRegisterCenterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // optional uint64 open_time = 3;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->open_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicRegisterCenterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint64 open_time = 3;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicRegisterCenterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicRegisterCenterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicRegisterCenterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicRegisterCenterRsp::MergeFrom(const LogicRegisterCenterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicRegisterCenterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicRegisterCenterRsp::CopyFrom(const LogicRegisterCenterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegisterCenterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LogicRegisterCenterRsp::Swap(LogicRegisterCenterRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(zid_, other->zid_);
    std::swap(open_time_, other->open_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicRegisterCenterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicRegisterCenterRsp_descriptor_;
  metadata.reflection = LogicRegisterCenterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterRegisterGateReq::kZidFieldNumber;
const int CenterRegisterGateReq::kCmdLstFieldNumber;
#endif  // !_MSC_VER

CenterRegisterGateReq::CenterRegisterGateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterRegisterGateReq::InitAsDefaultInstance() {
}

CenterRegisterGateReq::CenterRegisterGateReq(const CenterRegisterGateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterRegisterGateReq::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterRegisterGateReq::~CenterRegisterGateReq() {
  SharedDtor();
}

void CenterRegisterGateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterRegisterGateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterRegisterGateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterRegisterGateReq_descriptor_;
}

const CenterRegisterGateReq& CenterRegisterGateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

CenterRegisterGateReq* CenterRegisterGateReq::default_instance_ = NULL;

CenterRegisterGateReq* CenterRegisterGateReq::New() const {
  return new CenterRegisterGateReq;
}

void CenterRegisterGateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
  }
  cmd_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterRegisterGateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd_lst;
        break;
      }

      // repeated uint32 cmd_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_cmd_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cmd_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterRegisterGateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // repeated uint32 cmd_lst = 2;
  for (int i = 0; i < this->cmd_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cmd_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterRegisterGateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  // repeated uint32 cmd_lst = 2;
  for (int i = 0; i < this->cmd_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->cmd_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterRegisterGateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  // repeated uint32 cmd_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cmd_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cmd_lst(i));
    }
    total_size += 1 * this->cmd_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterRegisterGateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterRegisterGateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterRegisterGateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterRegisterGateReq::MergeFrom(const CenterRegisterGateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cmd_lst_.MergeFrom(from.cmd_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterRegisterGateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterRegisterGateReq::CopyFrom(const CenterRegisterGateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterRegisterGateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CenterRegisterGateReq::Swap(CenterRegisterGateReq* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    cmd_lst_.Swap(&other->cmd_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterRegisterGateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterRegisterGateReq_descriptor_;
  metadata.reflection = CenterRegisterGateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterRegisterGateRsp::kZidFieldNumber;
const int CenterRegisterGateRsp::kGateidFieldNumber;
const int CenterRegisterGateRsp::kResultFieldNumber;
#endif  // !_MSC_VER

CenterRegisterGateRsp::CenterRegisterGateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterRegisterGateRsp::InitAsDefaultInstance() {
}

CenterRegisterGateRsp::CenterRegisterGateRsp(const CenterRegisterGateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterRegisterGateRsp::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  gateid_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterRegisterGateRsp::~CenterRegisterGateRsp() {
  SharedDtor();
}

void CenterRegisterGateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterRegisterGateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterRegisterGateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterRegisterGateRsp_descriptor_;
}

const CenterRegisterGateRsp& CenterRegisterGateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

CenterRegisterGateRsp* CenterRegisterGateRsp::default_instance_ = NULL;

CenterRegisterGateRsp* CenterRegisterGateRsp::New() const {
  return new CenterRegisterGateRsp;
}

void CenterRegisterGateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
    gateid_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterRegisterGateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterRegisterGateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // required uint32 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gateid(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterRegisterGateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  // required uint32 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gateid(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterRegisterGateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required uint32 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterRegisterGateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterRegisterGateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterRegisterGateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterRegisterGateRsp::MergeFrom(const CenterRegisterGateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterRegisterGateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterRegisterGateRsp::CopyFrom(const CenterRegisterGateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterRegisterGateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CenterRegisterGateRsp::Swap(CenterRegisterGateRsp* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    std::swap(gateid_, other->gateid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterRegisterGateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterRegisterGateRsp_descriptor_;
  metadata.reflection = CenterRegisterGateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterRegisterDBReq::kZidFieldNumber;
#endif  // !_MSC_VER

CenterRegisterDBReq::CenterRegisterDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterRegisterDBReq::InitAsDefaultInstance() {
}

CenterRegisterDBReq::CenterRegisterDBReq(const CenterRegisterDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterRegisterDBReq::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterRegisterDBReq::~CenterRegisterDBReq() {
  SharedDtor();
}

void CenterRegisterDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterRegisterDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterRegisterDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterRegisterDBReq_descriptor_;
}

const CenterRegisterDBReq& CenterRegisterDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

CenterRegisterDBReq* CenterRegisterDBReq::default_instance_ = NULL;

CenterRegisterDBReq* CenterRegisterDBReq::New() const {
  return new CenterRegisterDBReq;
}

void CenterRegisterDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterRegisterDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterRegisterDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterRegisterDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterRegisterDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterRegisterDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterRegisterDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterRegisterDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterRegisterDBReq::MergeFrom(const CenterRegisterDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterRegisterDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterRegisterDBReq::CopyFrom(const CenterRegisterDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterRegisterDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CenterRegisterDBReq::Swap(CenterRegisterDBReq* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterRegisterDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterRegisterDBReq_descriptor_;
  metadata.reflection = CenterRegisterDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateNotifyDisconnect::kClientidFieldNumber;
const int GateNotifyDisconnect::kReasonFieldNumber;
#endif  // !_MSC_VER

GateNotifyDisconnect::GateNotifyDisconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateNotifyDisconnect::InitAsDefaultInstance() {
}

GateNotifyDisconnect::GateNotifyDisconnect(const GateNotifyDisconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateNotifyDisconnect::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateNotifyDisconnect::~GateNotifyDisconnect() {
  SharedDtor();
}

void GateNotifyDisconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateNotifyDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateNotifyDisconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateNotifyDisconnect_descriptor_;
}

const GateNotifyDisconnect& GateNotifyDisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

GateNotifyDisconnect* GateNotifyDisconnect::default_instance_ = NULL;

GateNotifyDisconnect* GateNotifyDisconnect::New() const {
  return new GateNotifyDisconnect;
}

void GateNotifyDisconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateNotifyDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // required int32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GateNotifyDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clientid = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // required int32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateNotifyDisconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clientid = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // required int32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateNotifyDisconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientid = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required int32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateNotifyDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateNotifyDisconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateNotifyDisconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateNotifyDisconnect::MergeFrom(const GateNotifyDisconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateNotifyDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateNotifyDisconnect::CopyFrom(const GateNotifyDisconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateNotifyDisconnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GateNotifyDisconnect::Swap(GateNotifyDisconnect* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateNotifyDisconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateNotifyDisconnect_descriptor_;
  metadata.reflection = GateNotifyDisconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InnerLogReq::kTypeFieldNumber;
const int InnerLogReq::kContentFieldNumber;
#endif  // !_MSC_VER

InnerLogReq::InnerLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InnerLogReq::InitAsDefaultInstance() {
}

InnerLogReq::InnerLogReq(const InnerLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InnerLogReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerLogReq::~InnerLogReq() {
  SharedDtor();
}

void InnerLogReq::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void InnerLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerLogReq_descriptor_;
}

const InnerLogReq& InnerLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

InnerLogReq* InnerLogReq::default_instance_ = NULL;

InnerLogReq* InnerLogReq::New() const {
  return new InnerLogReq;
}

void InnerLogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InnerLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InnerLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InnerLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InnerLogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InnerLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InnerLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InnerLogReq::MergeFrom(const InnerLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InnerLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerLogReq::CopyFrom(const InnerLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerLogReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InnerLogReq::Swap(InnerLogReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InnerLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerLogReq_descriptor_;
  metadata.reflection = InnerLogReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyLogicDataUpdate_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicDataUpdate_Type_descriptor_;
}
bool NotifyLogicDataUpdate_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyLogicDataUpdate_Type NotifyLogicDataUpdate::daily;
const NotifyLogicDataUpdate_Type NotifyLogicDataUpdate::week;
const NotifyLogicDataUpdate_Type NotifyLogicDataUpdate::daily_zero;
const NotifyLogicDataUpdate_Type NotifyLogicDataUpdate::week_zero;
const NotifyLogicDataUpdate_Type NotifyLogicDataUpdate::Type_MIN;
const NotifyLogicDataUpdate_Type NotifyLogicDataUpdate::Type_MAX;
const int NotifyLogicDataUpdate::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NotifyLogicDataUpdate::kUpdateTypeFieldNumber;
const int NotifyLogicDataUpdate::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

NotifyLogicDataUpdate::NotifyLogicDataUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicDataUpdate::InitAsDefaultInstance() {
}

NotifyLogicDataUpdate::NotifyLogicDataUpdate(const NotifyLogicDataUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicDataUpdate::SharedCtor() {
  _cached_size_ = 0;
  update_type_ = 1;
  update_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicDataUpdate::~NotifyLogicDataUpdate() {
  SharedDtor();
}

void NotifyLogicDataUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLogicDataUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicDataUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicDataUpdate_descriptor_;
}

const NotifyLogicDataUpdate& NotifyLogicDataUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyLogicDataUpdate* NotifyLogicDataUpdate::default_instance_ = NULL;

NotifyLogicDataUpdate* NotifyLogicDataUpdate::New() const {
  return new NotifyLogicDataUpdate;
}

void NotifyLogicDataUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_type_ = 1;
    update_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicDataUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.NotifyLogicDataUpdate.Type update_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::NotifyLogicDataUpdate_Type_IsValid(value)) {
            set_update_type(static_cast< ::proto_ff::NotifyLogicDataUpdate_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update_time;
        break;
      }

      // required uint64 update_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicDataUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.NotifyLogicDataUpdate.Type update_type = 1;
  if (has_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->update_type(), output);
  }

  // required uint64 update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicDataUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.NotifyLogicDataUpdate.Type update_type = 1;
  if (has_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->update_type(), target);
  }

  // required uint64 update_time = 2;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicDataUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.NotifyLogicDataUpdate.Type update_type = 1;
    if (has_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_type());
    }

    // required uint64 update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicDataUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicDataUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicDataUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicDataUpdate::MergeFrom(const NotifyLogicDataUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_type()) {
      set_update_type(from.update_type());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicDataUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicDataUpdate::CopyFrom(const NotifyLogicDataUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicDataUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NotifyLogicDataUpdate::Swap(NotifyLogicDataUpdate* other) {
  if (other != this) {
    std::swap(update_type_, other->update_type_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicDataUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicDataUpdate_descriptor_;
  metadata.reflection = NotifyLogicDataUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QueryCenterInfoReq::QueryCenterInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryCenterInfoReq::InitAsDefaultInstance() {
}

QueryCenterInfoReq::QueryCenterInfoReq(const QueryCenterInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryCenterInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCenterInfoReq::~QueryCenterInfoReq() {
  SharedDtor();
}

void QueryCenterInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryCenterInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCenterInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCenterInfoReq_descriptor_;
}

const QueryCenterInfoReq& QueryCenterInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

QueryCenterInfoReq* QueryCenterInfoReq::default_instance_ = NULL;

QueryCenterInfoReq* QueryCenterInfoReq::New() const {
  return new QueryCenterInfoReq;
}

void QueryCenterInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCenterInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QueryCenterInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryCenterInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryCenterInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCenterInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCenterInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCenterInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCenterInfoReq::MergeFrom(const QueryCenterInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCenterInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCenterInfoReq::CopyFrom(const QueryCenterInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCenterInfoReq::IsInitialized() const {

  return true;
}

void QueryCenterInfoReq::Swap(QueryCenterInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCenterInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCenterInfoReq_descriptor_;
  metadata.reflection = QueryCenterInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryCenterInfoRsp::kZidFieldNumber;
const int QueryCenterInfoRsp::kMergeFieldNumber;
const int QueryCenterInfoRsp::kLoadfinishFieldNumber;
#endif  // !_MSC_VER

QueryCenterInfoRsp::QueryCenterInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryCenterInfoRsp::InitAsDefaultInstance() {
}

QueryCenterInfoRsp::QueryCenterInfoRsp(const QueryCenterInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryCenterInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  merge_ = 0;
  loadfinish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCenterInfoRsp::~QueryCenterInfoRsp() {
  SharedDtor();
}

void QueryCenterInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryCenterInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCenterInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCenterInfoRsp_descriptor_;
}

const QueryCenterInfoRsp& QueryCenterInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

QueryCenterInfoRsp* QueryCenterInfoRsp::default_instance_ = NULL;

QueryCenterInfoRsp* QueryCenterInfoRsp::New() const {
  return new QueryCenterInfoRsp;
}

void QueryCenterInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
    merge_ = 0;
    loadfinish_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCenterInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_merge;
        break;
      }

      // required int32 merge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &merge_)));
          set_has_merge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loadfinish;
        break;
      }

      // required int32 loadfinish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loadfinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loadfinish_)));
          set_has_loadfinish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryCenterInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // required int32 merge = 2;
  if (has_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->merge(), output);
  }

  // required int32 loadfinish = 3;
  if (has_loadfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loadfinish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryCenterInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  // required int32 merge = 2;
  if (has_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->merge(), target);
  }

  // required int32 loadfinish = 3;
  if (has_loadfinish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loadfinish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryCenterInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required int32 merge = 2;
    if (has_merge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->merge());
    }

    // required int32 loadfinish = 3;
    if (has_loadfinish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loadfinish());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCenterInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCenterInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCenterInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCenterInfoRsp::MergeFrom(const QueryCenterInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_merge()) {
      set_merge(from.merge());
    }
    if (from.has_loadfinish()) {
      set_loadfinish(from.loadfinish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCenterInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCenterInfoRsp::CopyFrom(const QueryCenterInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCenterInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void QueryCenterInfoRsp::Swap(QueryCenterInfoRsp* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    std::swap(merge_, other->merge_);
    std::swap(loadfinish_, other->loadfinish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCenterInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCenterInfoRsp_descriptor_;
  metadata.reflection = QueryCenterInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyLogicState_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicState_Type_descriptor_;
}
bool NotifyLogicState_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyLogicState_Type NotifyLogicState::conect;
const NotifyLogicState_Type NotifyLogicState::crash;
const NotifyLogicState_Type NotifyLogicState::Type_MIN;
const NotifyLogicState_Type NotifyLogicState::Type_MAX;
const int NotifyLogicState::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NotifyLogicState::kZidFieldNumber;
const int NotifyLogicState::kItypeFieldNumber;
const int NotifyLogicState::kLogicIdFieldNumber;
#endif  // !_MSC_VER

NotifyLogicState::NotifyLogicState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicState::InitAsDefaultInstance() {
}

NotifyLogicState::NotifyLogicState(const NotifyLogicState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicState::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  itype_ = 1;
  logic_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicState::~NotifyLogicState() {
  SharedDtor();
}

void NotifyLogicState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLogicState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicState_descriptor_;
}

const NotifyLogicState& NotifyLogicState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyLogicState* NotifyLogicState::default_instance_ = NULL;

NotifyLogicState* NotifyLogicState::New() const {
  return new NotifyLogicState;
}

void NotifyLogicState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
    itype_ = 1;
    logic_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itype;
        break;
      }

      // required .proto_ff.NotifyLogicState.Type itype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::NotifyLogicState_Type_IsValid(value)) {
            set_itype(static_cast< ::proto_ff::NotifyLogicState_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logic_id;
        break;
      }

      // required uint32 logic_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_id_)));
          set_has_logic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // required .proto_ff.NotifyLogicState.Type itype = 2;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->itype(), output);
  }

  // required uint32 logic_id = 3;
  if (has_logic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->logic_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  // required .proto_ff.NotifyLogicState.Type itype = 2;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->itype(), target);
  }

  // required uint32 logic_id = 3;
  if (has_logic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->logic_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required .proto_ff.NotifyLogicState.Type itype = 2;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->itype());
    }

    // required uint32 logic_id = 3;
    if (has_logic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicState::MergeFrom(const NotifyLogicState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_logic_id()) {
      set_logic_id(from.logic_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicState::CopyFrom(const NotifyLogicState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NotifyLogicState::Swap(NotifyLogicState* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    std::swap(itype_, other->itype_);
    std::swap(logic_id_, other->logic_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicState_descriptor_;
  metadata.reflection = NotifyLogicState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicEnterGameReq::kUidFieldNumber;
const int NotifyLogicEnterGameReq::kCidFieldNumber;
const int NotifyLogicEnterGameReq::kSceneidFieldNumber;
const int NotifyLogicEnterGameReq::kMapidFieldNumber;
const int NotifyLogicEnterGameReq::kPosFieldNumber;
const int NotifyLogicEnterGameReq::kClientIdFieldNumber;
const int NotifyLogicEnterGameReq::kGateIdFieldNumber;
const int NotifyLogicEnterGameReq::kChannelIdFieldNumber;
const int NotifyLogicEnterGameReq::kZidFieldNumber;
const int NotifyLogicEnterGameReq::kSyncFieldNumber;
#endif  // !_MSC_VER

NotifyLogicEnterGameReq::NotifyLogicEnterGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicEnterGameReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  sync_ = const_cast< ::proto_ff::LoginSyncProto*>(&::proto_ff::LoginSyncProto::default_instance());
}

NotifyLogicEnterGameReq::NotifyLogicEnterGameReq(const NotifyLogicEnterGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicEnterGameReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  clientid_ = 0u;
  gateid_ = 0u;
  channelid_ = 0u;
  zid_ = 0u;
  sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicEnterGameReq::~NotifyLogicEnterGameReq() {
  SharedDtor();
}

void NotifyLogicEnterGameReq::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete sync_;
  }
}

void NotifyLogicEnterGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicEnterGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicEnterGameReq_descriptor_;
}

const NotifyLogicEnterGameReq& NotifyLogicEnterGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyLogicEnterGameReq* NotifyLogicEnterGameReq::default_instance_ = NULL;

NotifyLogicEnterGameReq* NotifyLogicEnterGameReq::New() const {
  return new NotifyLogicEnterGameReq;
}

void NotifyLogicEnterGameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = GOOGLE_ULONGLONG(0);
    mapid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    clientid_ = 0u;
    gateid_ = 0u;
    channelid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    zid_ = 0u;
    if (has_sync()) {
      if (sync_ != NULL) sync_->::proto_ff::LoginSyncProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicEnterGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // required uint64 sceneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // required uint64 mapid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // required .proto_ff.Vector3PB pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clientId;
        break;
      }

      // required uint32 clientId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gateId;
        break;
      }

      // required uint32 gateId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_channelId;
        break;
      }

      // required uint32 channelId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_zid;
        break;
      }

      // required uint32 zid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_sync;
        break;
      }

      // optional .proto_ff.LoginSyncProto sync = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicEnterGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // required uint64 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sceneid(), output);
  }

  // required uint64 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mapid(), output);
  }

  // required .proto_ff.Vector3PB pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  // required uint32 clientId = 6;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->clientid(), output);
  }

  // required uint32 gateId = 7;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gateid(), output);
  }

  // required uint32 channelId = 8;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->channelid(), output);
  }

  // required uint32 zid = 9;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->zid(), output);
  }

  // optional .proto_ff.LoginSyncProto sync = 10;
  if (has_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicEnterGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // required uint64 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sceneid(), target);
  }

  // required uint64 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mapid(), target);
  }

  // required .proto_ff.Vector3PB pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  // required uint32 clientId = 6;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->clientid(), target);
  }

  // required uint32 gateId = 7;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gateid(), target);
  }

  // required uint32 channelId = 8;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->channelid(), target);
  }

  // required uint32 zid = 9;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->zid(), target);
  }

  // optional .proto_ff.LoginSyncProto sync = 10;
  if (has_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicEnterGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint64 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // required uint64 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // required .proto_ff.Vector3PB pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required uint32 clientId = 6;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required uint32 gateId = 7;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 channelId = 8;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 zid = 9;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional .proto_ff.LoginSyncProto sync = 10;
    if (has_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicEnterGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicEnterGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicEnterGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicEnterGameReq::MergeFrom(const NotifyLogicEnterGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_sync()) {
      mutable_sync()->::proto_ff::LoginSyncProto::MergeFrom(from.sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicEnterGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicEnterGameReq::CopyFrom(const NotifyLogicEnterGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicEnterGameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void NotifyLogicEnterGameReq::Swap(NotifyLogicEnterGameReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cid_, other->cid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(pos_, other->pos_);
    std::swap(clientid_, other->clientid_);
    std::swap(gateid_, other->gateid_);
    std::swap(channelid_, other->channelid_);
    std::swap(zid_, other->zid_);
    std::swap(sync_, other->sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicEnterGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicEnterGameReq_descriptor_;
  metadata.reflection = NotifyLogicEnterGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicEnterGameRsp::kUidFieldNumber;
const int NotifyLogicEnterGameRsp::kCidFieldNumber;
const int NotifyLogicEnterGameRsp::kClientIdFieldNumber;
const int NotifyLogicEnterGameRsp::kGateIdFieldNumber;
const int NotifyLogicEnterGameRsp::kProtoFieldNumber;
#endif  // !_MSC_VER

NotifyLogicEnterGameRsp::NotifyLogicEnterGameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicEnterGameRsp::InitAsDefaultInstance() {
  proto_ = const_cast< ::proto_ff::CenterRoleProto*>(&::proto_ff::CenterRoleProto::default_instance());
}

NotifyLogicEnterGameRsp::NotifyLogicEnterGameRsp(const NotifyLogicEnterGameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicEnterGameRsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  clientid_ = 0u;
  gateid_ = 0u;
  proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicEnterGameRsp::~NotifyLogicEnterGameRsp() {
  SharedDtor();
}

void NotifyLogicEnterGameRsp::SharedDtor() {
  if (this != default_instance_) {
    delete proto_;
  }
}

void NotifyLogicEnterGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicEnterGameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicEnterGameRsp_descriptor_;
}

const NotifyLogicEnterGameRsp& NotifyLogicEnterGameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyLogicEnterGameRsp* NotifyLogicEnterGameRsp::default_instance_ = NULL;

NotifyLogicEnterGameRsp* NotifyLogicEnterGameRsp::New() const {
  return new NotifyLogicEnterGameRsp;
}

void NotifyLogicEnterGameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
    clientid_ = 0u;
    gateid_ = 0u;
    if (has_proto()) {
      if (proto_ != NULL) proto_->::proto_ff::CenterRoleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicEnterGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientId;
        break;
      }

      // required uint32 clientId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gateId;
        break;
      }

      // required uint32 gateId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_proto;
        break;
      }

      // required .proto_ff.CenterRoleProto proto = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicEnterGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // required uint32 clientId = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientid(), output);
  }

  // required uint32 gateId = 4;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gateid(), output);
  }

  // required .proto_ff.CenterRoleProto proto = 5;
  if (has_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->proto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicEnterGameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // required uint32 clientId = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientid(), target);
  }

  // required uint32 gateId = 4;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gateid(), target);
  }

  // required .proto_ff.CenterRoleProto proto = 5;
  if (has_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->proto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicEnterGameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 clientId = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required uint32 gateId = 4;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required .proto_ff.CenterRoleProto proto = 5;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicEnterGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicEnterGameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicEnterGameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicEnterGameRsp::MergeFrom(const NotifyLogicEnterGameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_proto()) {
      mutable_proto()->::proto_ff::CenterRoleProto::MergeFrom(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicEnterGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicEnterGameRsp::CopyFrom(const NotifyLogicEnterGameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicEnterGameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_proto()) {
    if (!this->proto().IsInitialized()) return false;
  }
  return true;
}

void NotifyLogicEnterGameRsp::Swap(NotifyLogicEnterGameRsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cid_, other->cid_);
    std::swap(clientid_, other->clientid_);
    std::swap(gateid_, other->gateid_);
    std::swap(proto_, other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicEnterGameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicEnterGameRsp_descriptor_;
  metadata.reflection = NotifyLogicEnterGameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicLeaveGameReq::kCidFieldNumber;
const int NotifyLogicLeaveGameReq::kUidFieldNumber;
const int NotifyLogicLeaveGameReq::kClientIdFieldNumber;
const int NotifyLogicLeaveGameReq::kTypeFieldNumber;
#endif  // !_MSC_VER

NotifyLogicLeaveGameReq::NotifyLogicLeaveGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicLeaveGameReq::InitAsDefaultInstance() {
}

NotifyLogicLeaveGameReq::NotifyLogicLeaveGameReq(const NotifyLogicLeaveGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicLeaveGameReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  clientid_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicLeaveGameReq::~NotifyLogicLeaveGameReq() {
  SharedDtor();
}

void NotifyLogicLeaveGameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLogicLeaveGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicLeaveGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicLeaveGameReq_descriptor_;
}

const NotifyLogicLeaveGameReq& NotifyLogicLeaveGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyLogicLeaveGameReq* NotifyLogicLeaveGameReq::default_instance_ = NULL;

NotifyLogicLeaveGameReq* NotifyLogicLeaveGameReq::New() const {
  return new NotifyLogicLeaveGameReq;
}

void NotifyLogicLeaveGameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    clientid_ = 0u;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicLeaveGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientId;
        break;
      }

      // required uint32 clientId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .proto_ff.LOGOUT_TYPE type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::LOGOUT_TYPE_IsValid(value)) {
            set_type(static_cast< ::proto_ff::LOGOUT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicLeaveGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 clientId = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientid(), output);
  }

  // optional .proto_ff.LOGOUT_TYPE type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicLeaveGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 clientId = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientid(), target);
  }

  // optional .proto_ff.LOGOUT_TYPE type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicLeaveGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 clientId = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional .proto_ff.LOGOUT_TYPE type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicLeaveGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicLeaveGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicLeaveGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicLeaveGameReq::MergeFrom(const NotifyLogicLeaveGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicLeaveGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicLeaveGameReq::CopyFrom(const NotifyLogicLeaveGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicLeaveGameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NotifyLogicLeaveGameReq::Swap(NotifyLogicLeaveGameReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(clientid_, other->clientid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicLeaveGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicLeaveGameReq_descriptor_;
  metadata.reflection = NotifyLogicLeaveGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicLeaveGameRsp::kCidFieldNumber;
const int NotifyLogicLeaveGameRsp::kUidFieldNumber;
const int NotifyLogicLeaveGameRsp::kClientIdFieldNumber;
const int NotifyLogicLeaveGameRsp::kLogoutTypeFieldNumber;
const int NotifyLogicLeaveGameRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

NotifyLogicLeaveGameRsp::NotifyLogicLeaveGameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicLeaveGameRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::RoleListDBProto*>(&::proto_ff::RoleListDBProto::default_instance());
}

NotifyLogicLeaveGameRsp::NotifyLogicLeaveGameRsp(const NotifyLogicLeaveGameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicLeaveGameRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  clientid_ = 0u;
  logout_type_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicLeaveGameRsp::~NotifyLogicLeaveGameRsp() {
  SharedDtor();
}

void NotifyLogicLeaveGameRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void NotifyLogicLeaveGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicLeaveGameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicLeaveGameRsp_descriptor_;
}

const NotifyLogicLeaveGameRsp& NotifyLogicLeaveGameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyLogicLeaveGameRsp* NotifyLogicLeaveGameRsp::default_instance_ = NULL;

NotifyLogicLeaveGameRsp* NotifyLogicLeaveGameRsp::New() const {
  return new NotifyLogicLeaveGameRsp;
}

void NotifyLogicLeaveGameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    clientid_ = 0u;
    logout_type_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::RoleListDBProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicLeaveGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientId;
        break;
      }

      // required uint32 clientId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logout_type;
        break;
      }

      // optional int32 logout_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logout_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logout_type_)));
          set_has_logout_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .proto_ff.RoleListDBProto info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicLeaveGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 clientId = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientid(), output);
  }

  // optional int32 logout_type = 4;
  if (has_logout_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->logout_type(), output);
  }

  // optional .proto_ff.RoleListDBProto info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicLeaveGameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 clientId = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientid(), target);
  }

  // optional int32 logout_type = 4;
  if (has_logout_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->logout_type(), target);
  }

  // optional .proto_ff.RoleListDBProto info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicLeaveGameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 clientId = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional int32 logout_type = 4;
    if (has_logout_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logout_type());
    }

    // optional .proto_ff.RoleListDBProto info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicLeaveGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicLeaveGameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicLeaveGameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicLeaveGameRsp::MergeFrom(const NotifyLogicLeaveGameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_logout_type()) {
      set_logout_type(from.logout_type());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::RoleListDBProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicLeaveGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicLeaveGameRsp::CopyFrom(const NotifyLogicLeaveGameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicLeaveGameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void NotifyLogicLeaveGameRsp::Swap(NotifyLogicLeaveGameRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(clientid_, other->clientid_);
    std::swap(logout_type_, other->logout_type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicLeaveGameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicLeaveGameRsp_descriptor_;
  metadata.reflection = NotifyLogicLeaveGameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyCenterKickReq::kCidFieldNumber;
const int NotifyCenterKickReq::kUidFieldNumber;
#endif  // !_MSC_VER

NotifyCenterKickReq::NotifyCenterKickReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyCenterKickReq::InitAsDefaultInstance() {
}

NotifyCenterKickReq::NotifyCenterKickReq(const NotifyCenterKickReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyCenterKickReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCenterKickReq::~NotifyCenterKickReq() {
  SharedDtor();
}

void NotifyCenterKickReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyCenterKickReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCenterKickReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCenterKickReq_descriptor_;
}

const NotifyCenterKickReq& NotifyCenterKickReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyCenterKickReq* NotifyCenterKickReq::default_instance_ = NULL;

NotifyCenterKickReq* NotifyCenterKickReq::New() const {
  return new NotifyCenterKickReq;
}

void NotifyCenterKickReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCenterKickReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyCenterKickReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyCenterKickReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyCenterKickReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCenterKickReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCenterKickReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCenterKickReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCenterKickReq::MergeFrom(const NotifyCenterKickReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCenterKickReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCenterKickReq::CopyFrom(const NotifyCenterKickReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCenterKickReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NotifyCenterKickReq::Swap(NotifyCenterKickReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCenterKickReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCenterKickReq_descriptor_;
  metadata.reflection = NotifyCenterKickReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGateEnterGame::kCidFieldNumber;
const int NotifyGateEnterGame::kUidFieldNumber;
const int NotifyGateEnterGame::kClientIdFieldNumber;
const int NotifyGateEnterGame::kLogicIdFieldNumber;
#endif  // !_MSC_VER

NotifyGateEnterGame::NotifyGateEnterGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGateEnterGame::InitAsDefaultInstance() {
}

NotifyGateEnterGame::NotifyGateEnterGame(const NotifyGateEnterGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGateEnterGame::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  clientid_ = 0u;
  logicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGateEnterGame::~NotifyGateEnterGame() {
  SharedDtor();
}

void NotifyGateEnterGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGateEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGateEnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGateEnterGame_descriptor_;
}

const NotifyGateEnterGame& NotifyGateEnterGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyGateEnterGame* NotifyGateEnterGame::default_instance_ = NULL;

NotifyGateEnterGame* NotifyGateEnterGame::New() const {
  return new NotifyGateEnterGame;
}

void NotifyGateEnterGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    clientid_ = 0u;
    logicid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGateEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientId;
        break;
      }

      // required uint32 clientId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logicId;
        break;
      }

      // required uint32 logicId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGateEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 clientId = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientid(), output);
  }

  // required uint32 logicId = 4;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->logicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGateEnterGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 clientId = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientid(), target);
  }

  // required uint32 logicId = 4;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->logicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGateEnterGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 clientId = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required uint32 logicId = 4;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGateEnterGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGateEnterGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGateEnterGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGateEnterGame::MergeFrom(const NotifyGateEnterGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGateEnterGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGateEnterGame::CopyFrom(const NotifyGateEnterGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGateEnterGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void NotifyGateEnterGame::Swap(NotifyGateEnterGame* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(clientid_, other->clientid_);
    std::swap(logicid_, other->logicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGateEnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGateEnterGame_descriptor_;
  metadata.reflection = NotifyGateEnterGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGateChangeLogic::kCidFieldNumber;
const int NotifyGateChangeLogic::kClientIdFieldNumber;
const int NotifyGateChangeLogic::kLogicIdFieldNumber;
#endif  // !_MSC_VER

NotifyGateChangeLogic::NotifyGateChangeLogic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGateChangeLogic::InitAsDefaultInstance() {
}

NotifyGateChangeLogic::NotifyGateChangeLogic(const NotifyGateChangeLogic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGateChangeLogic::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  clientid_ = 0u;
  logicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGateChangeLogic::~NotifyGateChangeLogic() {
  SharedDtor();
}

void NotifyGateChangeLogic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGateChangeLogic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGateChangeLogic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGateChangeLogic_descriptor_;
}

const NotifyGateChangeLogic& NotifyGateChangeLogic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyGateChangeLogic* NotifyGateChangeLogic::default_instance_ = NULL;

NotifyGateChangeLogic* NotifyGateChangeLogic::New() const {
  return new NotifyGateChangeLogic;
}

void NotifyGateChangeLogic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    clientid_ = 0u;
    logicid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGateChangeLogic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientId;
        break;
      }

      // required uint32 clientId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logicId;
        break;
      }

      // required uint32 logicId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGateChangeLogic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 clientId = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clientid(), output);
  }

  // required uint32 logicId = 3;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->logicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGateChangeLogic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 clientId = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clientid(), target);
  }

  // required uint32 logicId = 3;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->logicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGateChangeLogic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 clientId = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required uint32 logicId = 3;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGateChangeLogic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGateChangeLogic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGateChangeLogic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGateChangeLogic::MergeFrom(const NotifyGateChangeLogic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGateChangeLogic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGateChangeLogic::CopyFrom(const NotifyGateChangeLogic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGateChangeLogic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NotifyGateChangeLogic::Swap(NotifyGateChangeLogic* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(clientid_, other->clientid_);
    std::swap(logicid_, other->logicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGateChangeLogic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGateChangeLogic_descriptor_;
  metadata.reflection = NotifyGateChangeLogic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGateLeaveGame::kClientidFieldNumber;
const int NotifyGateLeaveGame::kLeaveFlagFieldNumber;
#endif  // !_MSC_VER

NotifyGateLeaveGame::NotifyGateLeaveGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGateLeaveGame::InitAsDefaultInstance() {
}

NotifyGateLeaveGame::NotifyGateLeaveGame(const NotifyGateLeaveGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGateLeaveGame::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  leave_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGateLeaveGame::~NotifyGateLeaveGame() {
  SharedDtor();
}

void NotifyGateLeaveGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGateLeaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGateLeaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGateLeaveGame_descriptor_;
}

const NotifyGateLeaveGame& NotifyGateLeaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyGateLeaveGame* NotifyGateLeaveGame::default_instance_ = NULL;

NotifyGateLeaveGame* NotifyGateLeaveGame::New() const {
  return new NotifyGateLeaveGame;
}

void NotifyGateLeaveGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    leave_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGateLeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leave_flag;
        break;
      }

      // required .proto_ff.LOGOUT_TYPE leave_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::LOGOUT_TYPE_IsValid(value)) {
            set_leave_flag(static_cast< ::proto_ff::LOGOUT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGateLeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clientid = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // required .proto_ff.LOGOUT_TYPE leave_flag = 2;
  if (has_leave_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->leave_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGateLeaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clientid = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // required .proto_ff.LOGOUT_TYPE leave_flag = 2;
  if (has_leave_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->leave_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGateLeaveGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientid = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required .proto_ff.LOGOUT_TYPE leave_flag = 2;
    if (has_leave_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leave_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGateLeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGateLeaveGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGateLeaveGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGateLeaveGame::MergeFrom(const NotifyGateLeaveGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_leave_flag()) {
      set_leave_flag(from.leave_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGateLeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGateLeaveGame::CopyFrom(const NotifyGateLeaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGateLeaveGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NotifyGateLeaveGame::Swap(NotifyGateLeaveGame* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(leave_flag_, other->leave_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGateLeaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGateLeaveGame_descriptor_;
  metadata.reflection = NotifyGateLeaveGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGateReconnectGame::kClientidFieldNumber;
const int NotifyGateReconnectGame::kCidFieldNumber;
const int NotifyGateReconnectGame::kUidFieldNumber;
const int NotifyGateReconnectGame::kLogicidFieldNumber;
#endif  // !_MSC_VER

NotifyGateReconnectGame::NotifyGateReconnectGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGateReconnectGame::InitAsDefaultInstance() {
}

NotifyGateReconnectGame::NotifyGateReconnectGame(const NotifyGateReconnectGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGateReconnectGame::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  logicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGateReconnectGame::~NotifyGateReconnectGame() {
  SharedDtor();
}

void NotifyGateReconnectGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGateReconnectGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGateReconnectGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGateReconnectGame_descriptor_;
}

const NotifyGateReconnectGame& NotifyGateReconnectGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyGateReconnectGame* NotifyGateReconnectGame::default_instance_ = NULL;

NotifyGateReconnectGame* NotifyGateReconnectGame::New() const {
  return new NotifyGateReconnectGame;
}

void NotifyGateReconnectGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    logicid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGateReconnectGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logicid;
        break;
      }

      // required uint32 logicid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGateReconnectGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clientid = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // required uint32 logicid = 4;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->logicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGateReconnectGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clientid = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // required uint32 logicid = 4;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->logicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGateReconnectGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientid = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 logicid = 4;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGateReconnectGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGateReconnectGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGateReconnectGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGateReconnectGame::MergeFrom(const NotifyGateReconnectGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGateReconnectGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGateReconnectGame::CopyFrom(const NotifyGateReconnectGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGateReconnectGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void NotifyGateReconnectGame::Swap(NotifyGateReconnectGame* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(logicid_, other->logicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGateReconnectGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGateReconnectGame_descriptor_;
  metadata.reflection = NotifyGateReconnectGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyCenterDisConnect::kClientIdFieldNumber;
const int NotifyCenterDisConnect::kCidFieldNumber;
const int NotifyCenterDisConnect::kErrflagFieldNumber;
#endif  // !_MSC_VER

NotifyCenterDisConnect::NotifyCenterDisConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyCenterDisConnect::InitAsDefaultInstance() {
}

NotifyCenterDisConnect::NotifyCenterDisConnect(const NotifyCenterDisConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyCenterDisConnect::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  errflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCenterDisConnect::~NotifyCenterDisConnect() {
  SharedDtor();
}

void NotifyCenterDisConnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyCenterDisConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCenterDisConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCenterDisConnect_descriptor_;
}

const NotifyCenterDisConnect& NotifyCenterDisConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyCenterDisConnect* NotifyCenterDisConnect::default_instance_ = NULL;

NotifyCenterDisConnect* NotifyCenterDisConnect::New() const {
  return new NotifyCenterDisConnect;
}

void NotifyCenterDisConnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
    errflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCenterDisConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errflag;
        break;
      }

      // optional int32 errflag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errflag_)));
          set_has_errflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyCenterDisConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional int32 errflag = 3;
  if (has_errflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyCenterDisConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional int32 errflag = 3;
  if (has_errflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyCenterDisConnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 errflag = 3;
    if (has_errflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCenterDisConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCenterDisConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCenterDisConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCenterDisConnect::MergeFrom(const NotifyCenterDisConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_errflag()) {
      set_errflag(from.errflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCenterDisConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCenterDisConnect::CopyFrom(const NotifyCenterDisConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCenterDisConnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NotifyCenterDisConnect::Swap(NotifyCenterDisConnect* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(cid_, other->cid_);
    std::swap(errflag_, other->errflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCenterDisConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCenterDisConnect_descriptor_;
  metadata.reflection = NotifyCenterDisConnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicDisconnect::kClientIdFieldNumber;
const int NotifyLogicDisconnect::kCidFieldNumber;
#endif  // !_MSC_VER

NotifyLogicDisconnect::NotifyLogicDisconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicDisconnect::InitAsDefaultInstance() {
}

NotifyLogicDisconnect::NotifyLogicDisconnect(const NotifyLogicDisconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicDisconnect::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicDisconnect::~NotifyLogicDisconnect() {
  SharedDtor();
}

void NotifyLogicDisconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLogicDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicDisconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicDisconnect_descriptor_;
}

const NotifyLogicDisconnect& NotifyLogicDisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyLogicDisconnect* NotifyLogicDisconnect::default_instance_ = NULL;

NotifyLogicDisconnect* NotifyLogicDisconnect::New() const {
  return new NotifyLogicDisconnect;
}

void NotifyLogicDisconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicDisconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicDisconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicDisconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicDisconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicDisconnect::MergeFrom(const NotifyLogicDisconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicDisconnect::CopyFrom(const NotifyLogicDisconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicDisconnect::IsInitialized() const {

  return true;
}

void NotifyLogicDisconnect::Swap(NotifyLogicDisconnect* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicDisconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicDisconnect_descriptor_;
  metadata.reflection = NotifyLogicDisconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicReconnect::kCidFieldNumber;
const int NotifyLogicReconnect::kClientIdFieldNumber;
const int NotifyLogicReconnect::kGateIdFieldNumber;
#endif  // !_MSC_VER

NotifyLogicReconnect::NotifyLogicReconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicReconnect::InitAsDefaultInstance() {
}

NotifyLogicReconnect::NotifyLogicReconnect(const NotifyLogicReconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicReconnect::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  clientid_ = 0u;
  gateid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicReconnect::~NotifyLogicReconnect() {
  SharedDtor();
}

void NotifyLogicReconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLogicReconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicReconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicReconnect_descriptor_;
}

const NotifyLogicReconnect& NotifyLogicReconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyLogicReconnect* NotifyLogicReconnect::default_instance_ = NULL;

NotifyLogicReconnect* NotifyLogicReconnect::New() const {
  return new NotifyLogicReconnect;
}

void NotifyLogicReconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    clientid_ = 0u;
    gateid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicReconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientId;
        break;
      }

      // required uint32 clientId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateId;
        break;
      }

      // required uint32 gateId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicReconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 clientId = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clientid(), output);
  }

  // required uint32 gateId = 3;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicReconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 clientId = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clientid(), target);
  }

  // required uint32 gateId = 3;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicReconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 clientId = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required uint32 gateId = 3;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicReconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicReconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicReconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicReconnect::MergeFrom(const NotifyLogicReconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicReconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicReconnect::CopyFrom(const NotifyLogicReconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicReconnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NotifyLogicReconnect::Swap(NotifyLogicReconnect* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(clientid_, other->clientid_);
    std::swap(gateid_, other->gateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicReconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicReconnect_descriptor_;
  metadata.reflection = NotifyLogicReconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyCenterReconnectSuccessRsp::kCidFieldNumber;
#endif  // !_MSC_VER

NotifyCenterReconnectSuccessRsp::NotifyCenterReconnectSuccessRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyCenterReconnectSuccessRsp::InitAsDefaultInstance() {
}

NotifyCenterReconnectSuccessRsp::NotifyCenterReconnectSuccessRsp(const NotifyCenterReconnectSuccessRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyCenterReconnectSuccessRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCenterReconnectSuccessRsp::~NotifyCenterReconnectSuccessRsp() {
  SharedDtor();
}

void NotifyCenterReconnectSuccessRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyCenterReconnectSuccessRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCenterReconnectSuccessRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCenterReconnectSuccessRsp_descriptor_;
}

const NotifyCenterReconnectSuccessRsp& NotifyCenterReconnectSuccessRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyCenterReconnectSuccessRsp* NotifyCenterReconnectSuccessRsp::default_instance_ = NULL;

NotifyCenterReconnectSuccessRsp* NotifyCenterReconnectSuccessRsp::New() const {
  return new NotifyCenterReconnectSuccessRsp;
}

void NotifyCenterReconnectSuccessRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCenterReconnectSuccessRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyCenterReconnectSuccessRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyCenterReconnectSuccessRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyCenterReconnectSuccessRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCenterReconnectSuccessRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCenterReconnectSuccessRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCenterReconnectSuccessRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCenterReconnectSuccessRsp::MergeFrom(const NotifyCenterReconnectSuccessRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCenterReconnectSuccessRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCenterReconnectSuccessRsp::CopyFrom(const NotifyCenterReconnectSuccessRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCenterReconnectSuccessRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NotifyCenterReconnectSuccessRsp::Swap(NotifyCenterReconnectSuccessRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCenterReconnectSuccessRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCenterReconnectSuccessRsp_descriptor_;
  metadata.reflection = NotifyCenterReconnectSuccessRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialRoleInfoReq::kCidListFieldNumber;
#endif  // !_MSC_VER

SocialRoleInfoReq::SocialRoleInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocialRoleInfoReq::InitAsDefaultInstance() {
}

SocialRoleInfoReq::SocialRoleInfoReq(const SocialRoleInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocialRoleInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialRoleInfoReq::~SocialRoleInfoReq() {
  SharedDtor();
}

void SocialRoleInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SocialRoleInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialRoleInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialRoleInfoReq_descriptor_;
}

const SocialRoleInfoReq& SocialRoleInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

SocialRoleInfoReq* SocialRoleInfoReq::default_instance_ = NULL;

SocialRoleInfoReq* SocialRoleInfoReq::New() const {
  return new SocialRoleInfoReq;
}

void SocialRoleInfoReq::Clear() {
  cid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialRoleInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 cid_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_cid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SocialRoleInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 cid_list = 1;
  for (int i = 0; i < this->cid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->cid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocialRoleInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 cid_list = 1;
  for (int i = 0; i < this->cid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->cid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocialRoleInfoReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 cid_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_list(i));
    }
    total_size += 1 * this->cid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialRoleInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialRoleInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialRoleInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialRoleInfoReq::MergeFrom(const SocialRoleInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_list_.MergeFrom(from.cid_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialRoleInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialRoleInfoReq::CopyFrom(const SocialRoleInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialRoleInfoReq::IsInitialized() const {

  return true;
}

void SocialRoleInfoReq::Swap(SocialRoleInfoReq* other) {
  if (other != this) {
    cid_list_.Swap(&other->cid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialRoleInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialRoleInfoReq_descriptor_;
  metadata.reflection = SocialRoleInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialRoleInfoRsp::kInfoListFieldNumber;
#endif  // !_MSC_VER

SocialRoleInfoRsp::SocialRoleInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocialRoleInfoRsp::InitAsDefaultInstance() {
}

SocialRoleInfoRsp::SocialRoleInfoRsp(const SocialRoleInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocialRoleInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialRoleInfoRsp::~SocialRoleInfoRsp() {
  SharedDtor();
}

void SocialRoleInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SocialRoleInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialRoleInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialRoleInfoRsp_descriptor_;
}

const SocialRoleInfoRsp& SocialRoleInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

SocialRoleInfoRsp* SocialRoleInfoRsp::default_instance_ = NULL;

SocialRoleInfoRsp* SocialRoleInfoRsp::New() const {
  return new SocialRoleInfoRsp;
}

void SocialRoleInfoRsp::Clear() {
  info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialRoleInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SocialRoleProto info_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SocialRoleInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SocialRoleProto info_list = 1;
  for (int i = 0; i < this->info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocialRoleInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SocialRoleProto info_list = 1;
  for (int i = 0; i < this->info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocialRoleInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.SocialRoleProto info_list = 1;
  total_size += 1 * this->info_list_size();
  for (int i = 0; i < this->info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialRoleInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialRoleInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialRoleInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialRoleInfoRsp::MergeFrom(const SocialRoleInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_list_.MergeFrom(from.info_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialRoleInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialRoleInfoRsp::CopyFrom(const SocialRoleInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialRoleInfoRsp::IsInitialized() const {

  for (int i = 0; i < info_list_size(); i++) {
    if (!this->info_list(i).IsInitialized()) return false;
  }
  return true;
}

void SocialRoleInfoRsp::Swap(SocialRoleInfoRsp* other) {
  if (other != this) {
    info_list_.Swap(&other->info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialRoleInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialRoleInfoRsp_descriptor_;
  metadata.reflection = SocialRoleInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialRoleEventRsp::kCidFieldNumber;
const int SocialRoleEventRsp::kEventTypeFieldNumber;
#endif  // !_MSC_VER

SocialRoleEventRsp::SocialRoleEventRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocialRoleEventRsp::InitAsDefaultInstance() {
}

SocialRoleEventRsp::SocialRoleEventRsp(const SocialRoleEventRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocialRoleEventRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialRoleEventRsp::~SocialRoleEventRsp() {
  SharedDtor();
}

void SocialRoleEventRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SocialRoleEventRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialRoleEventRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialRoleEventRsp_descriptor_;
}

const SocialRoleEventRsp& SocialRoleEventRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

SocialRoleEventRsp* SocialRoleEventRsp::default_instance_ = NULL;

SocialRoleEventRsp* SocialRoleEventRsp::New() const {
  return new SocialRoleEventRsp;
}

void SocialRoleEventRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  event_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialRoleEventRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        break;
      }

      // repeated uint32 event_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_event_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_event_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SocialRoleEventRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated uint32 event_type = 2;
  for (int i = 0; i < this->event_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->event_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocialRoleEventRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated uint32 event_type = 2;
  for (int i = 0; i < this->event_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->event_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocialRoleEventRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated uint32 event_type = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->event_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->event_type(i));
    }
    total_size += 1 * this->event_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialRoleEventRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialRoleEventRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialRoleEventRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialRoleEventRsp::MergeFrom(const SocialRoleEventRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_type_.MergeFrom(from.event_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialRoleEventRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialRoleEventRsp::CopyFrom(const SocialRoleEventRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialRoleEventRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SocialRoleEventRsp::Swap(SocialRoleEventRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    event_type_.Swap(&other->event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialRoleEventRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialRoleEventRsp_descriptor_;
  metadata.reflection = SocialRoleEventRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynAttrToCenterRsp::kCidFieldNumber;
const int SynAttrToCenterRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

SynAttrToCenterRsp::SynAttrToCenterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynAttrToCenterRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::CenterRoleProto*>(&::proto_ff::CenterRoleProto::default_instance());
}

SynAttrToCenterRsp::SynAttrToCenterRsp(const SynAttrToCenterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynAttrToCenterRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynAttrToCenterRsp::~SynAttrToCenterRsp() {
  SharedDtor();
}

void SynAttrToCenterRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SynAttrToCenterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynAttrToCenterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynAttrToCenterRsp_descriptor_;
}

const SynAttrToCenterRsp& SynAttrToCenterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

SynAttrToCenterRsp* SynAttrToCenterRsp::default_instance_ = NULL;

SynAttrToCenterRsp* SynAttrToCenterRsp::New() const {
  return new SynAttrToCenterRsp;
}

void SynAttrToCenterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::CenterRoleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynAttrToCenterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.CenterRoleProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynAttrToCenterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional .proto_ff.CenterRoleProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynAttrToCenterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional .proto_ff.CenterRoleProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynAttrToCenterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.CenterRoleProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynAttrToCenterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynAttrToCenterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynAttrToCenterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynAttrToCenterRsp::MergeFrom(const SynAttrToCenterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::CenterRoleProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynAttrToCenterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynAttrToCenterRsp::CopyFrom(const SynAttrToCenterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynAttrToCenterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SynAttrToCenterRsp::Swap(SynAttrToCenterRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynAttrToCenterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynAttrToCenterRsp_descriptor_;
  metadata.reflection = SynAttrToCenterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterToLogicVirForbidRsp::kZidFieldNumber;
const int CenterToLogicVirForbidRsp::kVirLstFieldNumber;
#endif  // !_MSC_VER

CenterToLogicVirForbidRsp::CenterToLogicVirForbidRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterToLogicVirForbidRsp::InitAsDefaultInstance() {
}

CenterToLogicVirForbidRsp::CenterToLogicVirForbidRsp(const CenterToLogicVirForbidRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterToLogicVirForbidRsp::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterToLogicVirForbidRsp::~CenterToLogicVirForbidRsp() {
  SharedDtor();
}

void CenterToLogicVirForbidRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterToLogicVirForbidRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterToLogicVirForbidRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterToLogicVirForbidRsp_descriptor_;
}

const CenterToLogicVirForbidRsp& CenterToLogicVirForbidRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

CenterToLogicVirForbidRsp* CenterToLogicVirForbidRsp::default_instance_ = NULL;

CenterToLogicVirForbidRsp* CenterToLogicVirForbidRsp::New() const {
  return new CenterToLogicVirForbidRsp;
}

void CenterToLogicVirForbidRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
  }
  vir_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterToLogicVirForbidRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vir_lst;
        break;
      }

      // repeated uint64 vir_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vir_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_vir_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_vir_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vir_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterToLogicVirForbidRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // repeated uint64 vir_lst = 2;
  for (int i = 0; i < this->vir_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->vir_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterToLogicVirForbidRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  // repeated uint64 vir_lst = 2;
  for (int i = 0; i < this->vir_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->vir_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterToLogicVirForbidRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  // repeated uint64 vir_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->vir_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->vir_lst(i));
    }
    total_size += 1 * this->vir_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterToLogicVirForbidRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterToLogicVirForbidRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterToLogicVirForbidRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterToLogicVirForbidRsp::MergeFrom(const CenterToLogicVirForbidRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  vir_lst_.MergeFrom(from.vir_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterToLogicVirForbidRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterToLogicVirForbidRsp::CopyFrom(const CenterToLogicVirForbidRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterToLogicVirForbidRsp::IsInitialized() const {

  return true;
}

void CenterToLogicVirForbidRsp::Swap(CenterToLogicVirForbidRsp* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    vir_lst_.Swap(&other->vir_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterToLogicVirForbidRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterToLogicVirForbidRsp_descriptor_;
  metadata.reflection = CenterToLogicVirForbidRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGateRetRoleList::kClientidFieldNumber;
const int NotifyGateRetRoleList::kUidFieldNumber;
#endif  // !_MSC_VER

NotifyGateRetRoleList::NotifyGateRetRoleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGateRetRoleList::InitAsDefaultInstance() {
}

NotifyGateRetRoleList::NotifyGateRetRoleList(const NotifyGateRetRoleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGateRetRoleList::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGateRetRoleList::~NotifyGateRetRoleList() {
  SharedDtor();
}

void NotifyGateRetRoleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGateRetRoleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGateRetRoleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGateRetRoleList_descriptor_;
}

const NotifyGateRetRoleList& NotifyGateRetRoleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyGateRetRoleList* NotifyGateRetRoleList::default_instance_ = NULL;

NotifyGateRetRoleList* NotifyGateRetRoleList::New() const {
  return new NotifyGateRetRoleList;
}

void NotifyGateRetRoleList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGateRetRoleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGateRetRoleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clientid = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGateRetRoleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clientid = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGateRetRoleList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientid = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGateRetRoleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGateRetRoleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGateRetRoleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGateRetRoleList::MergeFrom(const NotifyGateRetRoleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGateRetRoleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGateRetRoleList::CopyFrom(const NotifyGateRetRoleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGateRetRoleList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NotifyGateRetRoleList::Swap(NotifyGateRetRoleList* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGateRetRoleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGateRetRoleList_descriptor_;
  metadata.reflection = NotifyGateRetRoleList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
