// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worldmapboss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "worldmapboss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* worldmapbossworldbossbornDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldmapbossworldbossbornDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* worldmapbossworldboss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldmapbossworldboss_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_worldmapbossworldboss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_worldmapbossworldboss_reflection_ = NULL;
const ::google::protobuf::Descriptor* worldmapbossdroplist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldmapbossdroplist_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_worldmapbossdroplist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_worldmapbossdroplist_reflection_ = NULL;
const ::google::protobuf::Descriptor* worldmapbossfestival_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldmapbossfestival_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_worldmapbossfestival_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_worldmapbossfestival_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_worldmapboss_2eproto() {
  protobuf_AddDesc_worldmapboss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "worldmapboss.proto");
  GOOGLE_CHECK(file != NULL);
  worldmapbossworldbossbornDesc_descriptor_ = file->message_type(0);
  static const int worldmapbossworldbossbornDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldbossbornDesc, time_),
  };
  worldmapbossworldbossbornDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worldmapbossworldbossbornDesc_descriptor_,
      worldmapbossworldbossbornDesc::default_instance_,
      worldmapbossworldbossbornDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldbossbornDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldbossbornDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worldmapbossworldbossbornDesc));
  worldmapbossworldboss_descriptor_ = file->message_type(1);
  static const int worldmapbossworldboss_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldboss, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldboss, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldboss, minilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldboss, unlocklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldboss, levelcheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldboss, pathid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldboss, specnoticehp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldboss, bornspacetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldboss, born_),
  };
  worldmapbossworldboss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worldmapbossworldboss_descriptor_,
      worldmapbossworldboss::default_instance_,
      worldmapbossworldboss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldboss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossworldboss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worldmapbossworldboss));
  Sheet_worldmapbossworldboss_descriptor_ = file->message_type(2);
  static const int Sheet_worldmapbossworldboss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_worldmapbossworldboss, worldmapbossworldboss_list_),
  };
  Sheet_worldmapbossworldboss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_worldmapbossworldboss_descriptor_,
      Sheet_worldmapbossworldboss::default_instance_,
      Sheet_worldmapbossworldboss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_worldmapbossworldboss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_worldmapbossworldboss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_worldmapbossworldboss));
  worldmapbossdroplist_descriptor_ = file->message_type(3);
  static const int worldmapbossdroplist_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossdroplist, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossdroplist, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossdroplist, bosslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossdroplist, dropid_),
  };
  worldmapbossdroplist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worldmapbossdroplist_descriptor_,
      worldmapbossdroplist::default_instance_,
      worldmapbossdroplist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossdroplist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossdroplist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worldmapbossdroplist));
  Sheet_worldmapbossdroplist_descriptor_ = file->message_type(4);
  static const int Sheet_worldmapbossdroplist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_worldmapbossdroplist, worldmapbossdroplist_list_),
  };
  Sheet_worldmapbossdroplist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_worldmapbossdroplist_descriptor_,
      Sheet_worldmapbossdroplist::default_instance_,
      Sheet_worldmapbossdroplist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_worldmapbossdroplist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_worldmapbossdroplist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_worldmapbossdroplist));
  worldmapbossfestival_descriptor_ = file->message_type(5);
  static const int worldmapbossfestival_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossfestival, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossfestival, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossfestival, across_),
  };
  worldmapbossfestival_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      worldmapbossfestival_descriptor_,
      worldmapbossfestival::default_instance_,
      worldmapbossfestival_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossfestival, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldmapbossfestival, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(worldmapbossfestival));
  Sheet_worldmapbossfestival_descriptor_ = file->message_type(6);
  static const int Sheet_worldmapbossfestival_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_worldmapbossfestival, worldmapbossfestival_list_),
  };
  Sheet_worldmapbossfestival_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_worldmapbossfestival_descriptor_,
      Sheet_worldmapbossfestival::default_instance_,
      Sheet_worldmapbossfestival_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_worldmapbossfestival, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_worldmapbossfestival, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_worldmapbossfestival));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_worldmapboss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worldmapbossworldbossbornDesc_descriptor_, &worldmapbossworldbossbornDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worldmapbossworldboss_descriptor_, &worldmapbossworldboss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_worldmapbossworldboss_descriptor_, &Sheet_worldmapbossworldboss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worldmapbossdroplist_descriptor_, &worldmapbossdroplist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_worldmapbossdroplist_descriptor_, &Sheet_worldmapbossdroplist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    worldmapbossfestival_descriptor_, &worldmapbossfestival::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_worldmapbossfestival_descriptor_, &Sheet_worldmapbossfestival::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_worldmapboss_2eproto() {
  delete worldmapbossworldbossbornDesc::default_instance_;
  delete worldmapbossworldbossbornDesc_reflection_;
  delete worldmapbossworldboss::default_instance_;
  delete worldmapbossworldboss_reflection_;
  delete Sheet_worldmapbossworldboss::default_instance_;
  delete Sheet_worldmapbossworldboss_reflection_;
  delete worldmapbossdroplist::default_instance_;
  delete worldmapbossdroplist_reflection_;
  delete Sheet_worldmapbossdroplist::default_instance_;
  delete Sheet_worldmapbossdroplist_reflection_;
  delete worldmapbossfestival::default_instance_;
  delete worldmapbossfestival_reflection_;
  delete Sheet_worldmapbossfestival::default_instance_;
  delete Sheet_worldmapbossfestival_reflection_;
}

void protobuf_AddDesc_worldmapboss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022worldmapboss.proto\022\010proto_ff\032\025yd_field"
    "options.proto\"7\n\035worldmapbossworldbossbo"
    "rnDesc\022\026\n\004Time\030\001 \001(\tB\010\302\377\024\000\220\301\024<\"\255\003\n\025world"
    "mapbossworldboss\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002ID\022\032\n\006"
    "bossId\030\002 \001(\003B\n\302\377\024\006BOSSID\022)\n\tminiLevel\030\003 "
    "\001(\005B\026\302\377\024\022\345\210\267\346\226\260\345\210\235\345\247\213\347\255\211\347\272\247\022%\n\013unLockLev"
    "el\030\004 \001(\005B\020\302\377\024\014\350\247\243\351\224\201\347\255\211\347\272\247\022*\n\nlevelCheck"
    "\030\005 \001(\005B\026\302\377\024\022\345\212\250\346\200\201\347\255\211\347\272\247\346\240\241\346\255\243\022\'\n\006pathId"
    "\030\006 \001(\tB\027\302\377\024\017\345\210\267\346\226\260\345\234\260\347\202\271\345\272\223\220\301\024<\0225\n\014specN"
    "oticeHP\030\007 \001(\005B\037\302\377\024\033\347\211\271\346\256\212\350\267\221\351\251\254\347\201\257\350\247\246\345\217\221"
    "\350\241\200\351\207\217\0226\n\rbornSpaceTime\030\010 \001(\005B\037\302\377\024\033\346\255\273\344\272"
    "\241\351\207\215\347\224\237\351\227\264\351\232\224\357\274\210\347\247\222\357\274\211\022N\n\004born\030\t \003(\0132\'.p"
    "roto_ff.worldmapbossworldbossbornDescB\027\302"
    "\377\024\017\345\210\267\346\226\260\346\227\266\351\227\264\347\202\271\210\301\024\006\"i\n\033Sheet_worldmap"
    "bossworldboss\022J\n\032worldmapbossworldboss_L"
    "ist\030\001 \003(\0132\037.proto_ff.worldmapbossworldbo"
    "ssB\005\210\301\024\254\002\"\214\001\n\024worldmapbossdroplist\022\022\n\002id"
    "\030\001 \001(\005B\006\302\377\024\002ID\022\037\n\tmonsterId\030\002 \001(\003B\014\302\377\024\010\346"
    "\200\252\347\211\251ID\022!\n\tbossLevel\030\003 \001(\005B\016\302\377\024\nBOSS\347\255\211\347"
    "\272\247\022\034\n\006dropId\030\004 \001(\003B\014\302\377\024\010\346\216\211\350\220\275ID\"f\n\032Shee"
    "t_worldmapbossdroplist\022H\n\031worldmapbossdr"
    "oplist_List\030\001 \003(\0132\036.proto_ff.worldmapbos"
    "sdroplistB\005\210\301\024\240\037\"h\n\024worldmapbossfestival"
    "\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002ID\022\032\n\006bossId\030\002 \001(\003B\n\302\377"
    "\024\006BOSSID\022 \n\006across\030\003 \001(\005B\020\302\377\024\014\350\267\250\346\234\215\346\240\207\350"
    "\256\260\"f\n\032Sheet_worldmapbossfestival\022H\n\031worl"
    "dmapbossfestival_List\030\001 \003(\0132\036.proto_ff.w"
    "orldmapbossfestivalB\005\210\301\024\254\002", 1106);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "worldmapboss.proto", &protobuf_RegisterTypes);
  worldmapbossworldbossbornDesc::default_instance_ = new worldmapbossworldbossbornDesc();
  worldmapbossworldboss::default_instance_ = new worldmapbossworldboss();
  Sheet_worldmapbossworldboss::default_instance_ = new Sheet_worldmapbossworldboss();
  worldmapbossdroplist::default_instance_ = new worldmapbossdroplist();
  Sheet_worldmapbossdroplist::default_instance_ = new Sheet_worldmapbossdroplist();
  worldmapbossfestival::default_instance_ = new worldmapbossfestival();
  Sheet_worldmapbossfestival::default_instance_ = new Sheet_worldmapbossfestival();
  worldmapbossworldbossbornDesc::default_instance_->InitAsDefaultInstance();
  worldmapbossworldboss::default_instance_->InitAsDefaultInstance();
  Sheet_worldmapbossworldboss::default_instance_->InitAsDefaultInstance();
  worldmapbossdroplist::default_instance_->InitAsDefaultInstance();
  Sheet_worldmapbossdroplist::default_instance_->InitAsDefaultInstance();
  worldmapbossfestival::default_instance_->InitAsDefaultInstance();
  Sheet_worldmapbossfestival::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_worldmapboss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_worldmapboss_2eproto {
  StaticDescriptorInitializer_worldmapboss_2eproto() {
    protobuf_AddDesc_worldmapboss_2eproto();
  }
} static_descriptor_initializer_worldmapboss_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int worldmapbossworldbossbornDesc::kTimeFieldNumber;
#endif  // !_MSC_VER

worldmapbossworldbossbornDesc::worldmapbossworldbossbornDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void worldmapbossworldbossbornDesc::InitAsDefaultInstance() {
}

worldmapbossworldbossbornDesc::worldmapbossworldbossbornDesc(const worldmapbossworldbossbornDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void worldmapbossworldbossbornDesc::SharedCtor() {
  _cached_size_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worldmapbossworldbossbornDesc::~worldmapbossworldbossbornDesc() {
  SharedDtor();
}

void worldmapbossworldbossbornDesc::SharedDtor() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void worldmapbossworldbossbornDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldmapbossworldbossbornDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldmapbossworldbossbornDesc_descriptor_;
}

const worldmapbossworldbossbornDesc& worldmapbossworldbossbornDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldmapboss_2eproto();
  return *default_instance_;
}

worldmapbossworldbossbornDesc* worldmapbossworldbossbornDesc::default_instance_ = NULL;

worldmapbossworldbossbornDesc* worldmapbossworldbossbornDesc::New() const {
  return new worldmapbossworldbossbornDesc;
}

void worldmapbossworldbossbornDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worldmapbossworldbossbornDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void worldmapbossworldbossbornDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* worldmapbossworldbossbornDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int worldmapbossworldbossbornDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldmapbossworldbossbornDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worldmapbossworldbossbornDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worldmapbossworldbossbornDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worldmapbossworldbossbornDesc::MergeFrom(const worldmapbossworldbossbornDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worldmapbossworldbossbornDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldmapbossworldbossbornDesc::CopyFrom(const worldmapbossworldbossbornDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worldmapbossworldbossbornDesc::IsInitialized() const {

  return true;
}

void worldmapbossworldbossbornDesc::Swap(worldmapbossworldbossbornDesc* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worldmapbossworldbossbornDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldmapbossworldbossbornDesc_descriptor_;
  metadata.reflection = worldmapbossworldbossbornDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int worldmapbossworldboss::kIdFieldNumber;
const int worldmapbossworldboss::kBossIdFieldNumber;
const int worldmapbossworldboss::kMiniLevelFieldNumber;
const int worldmapbossworldboss::kUnLockLevelFieldNumber;
const int worldmapbossworldboss::kLevelCheckFieldNumber;
const int worldmapbossworldboss::kPathIdFieldNumber;
const int worldmapbossworldboss::kSpecNoticeHPFieldNumber;
const int worldmapbossworldboss::kBornSpaceTimeFieldNumber;
const int worldmapbossworldboss::kBornFieldNumber;
#endif  // !_MSC_VER

worldmapbossworldboss::worldmapbossworldboss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void worldmapbossworldboss::InitAsDefaultInstance() {
}

worldmapbossworldboss::worldmapbossworldboss(const worldmapbossworldboss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void worldmapbossworldboss::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  bossid_ = GOOGLE_LONGLONG(0);
  minilevel_ = 0;
  unlocklevel_ = 0;
  levelcheck_ = 0;
  pathid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  specnoticehp_ = 0;
  bornspacetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worldmapbossworldboss::~worldmapbossworldboss() {
  SharedDtor();
}

void worldmapbossworldboss::SharedDtor() {
  if (pathid_ != &::google::protobuf::internal::kEmptyString) {
    delete pathid_;
  }
  if (this != default_instance_) {
  }
}

void worldmapbossworldboss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldmapbossworldboss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldmapbossworldboss_descriptor_;
}

const worldmapbossworldboss& worldmapbossworldboss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldmapboss_2eproto();
  return *default_instance_;
}

worldmapbossworldboss* worldmapbossworldboss::default_instance_ = NULL;

worldmapbossworldboss* worldmapbossworldboss::New() const {
  return new worldmapbossworldboss;
}

void worldmapbossworldboss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    bossid_ = GOOGLE_LONGLONG(0);
    minilevel_ = 0;
    unlocklevel_ = 0;
    levelcheck_ = 0;
    if (has_pathid()) {
      if (pathid_ != &::google::protobuf::internal::kEmptyString) {
        pathid_->clear();
      }
    }
    specnoticehp_ = 0;
    bornspacetime_ = 0;
  }
  born_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worldmapbossworldboss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_miniLevel;
        break;
      }

      // optional int32 miniLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miniLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minilevel_)));
          set_has_minilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unLockLevel;
        break;
      }

      // optional int32 unLockLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unLockLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlocklevel_)));
          set_has_unlocklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_levelCheck;
        break;
      }

      // optional int32 levelCheck = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelCheck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelcheck_)));
          set_has_levelcheck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pathId;
        break;
      }

      // optional string pathId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pathId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pathid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pathid().data(), this->pathid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_specNoticeHP;
        break;
      }

      // optional int32 specNoticeHP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specNoticeHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specnoticehp_)));
          set_has_specnoticehp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bornSpaceTime;
        break;
      }

      // optional int32 bornSpaceTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornSpaceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bornspacetime_)));
          set_has_bornspacetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_born;
        break;
      }

      // repeated .proto_ff.worldmapbossworldbossbornDesc born = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_born:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_born()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_born;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void worldmapbossworldboss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  // optional int32 miniLevel = 3;
  if (has_minilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minilevel(), output);
  }

  // optional int32 unLockLevel = 4;
  if (has_unlocklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unlocklevel(), output);
  }

  // optional int32 levelCheck = 5;
  if (has_levelcheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->levelcheck(), output);
  }

  // optional string pathId = 6;
  if (has_pathid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pathid().data(), this->pathid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pathid(), output);
  }

  // optional int32 specNoticeHP = 7;
  if (has_specnoticehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->specnoticehp(), output);
  }

  // optional int32 bornSpaceTime = 8;
  if (has_bornspacetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bornspacetime(), output);
  }

  // repeated .proto_ff.worldmapbossworldbossbornDesc born = 9;
  for (int i = 0; i < this->born_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->born(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* worldmapbossworldboss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  // optional int32 miniLevel = 3;
  if (has_minilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minilevel(), target);
  }

  // optional int32 unLockLevel = 4;
  if (has_unlocklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unlocklevel(), target);
  }

  // optional int32 levelCheck = 5;
  if (has_levelcheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->levelcheck(), target);
  }

  // optional string pathId = 6;
  if (has_pathid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pathid().data(), this->pathid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pathid(), target);
  }

  // optional int32 specNoticeHP = 7;
  if (has_specnoticehp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->specnoticehp(), target);
  }

  // optional int32 bornSpaceTime = 8;
  if (has_bornspacetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bornspacetime(), target);
  }

  // repeated .proto_ff.worldmapbossworldbossbornDesc born = 9;
  for (int i = 0; i < this->born_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->born(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int worldmapbossworldboss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

    // optional int32 miniLevel = 3;
    if (has_minilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minilevel());
    }

    // optional int32 unLockLevel = 4;
    if (has_unlocklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlocklevel());
    }

    // optional int32 levelCheck = 5;
    if (has_levelcheck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelcheck());
    }

    // optional string pathId = 6;
    if (has_pathid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pathid());
    }

    // optional int32 specNoticeHP = 7;
    if (has_specnoticehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specnoticehp());
    }

    // optional int32 bornSpaceTime = 8;
    if (has_bornspacetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bornspacetime());
    }

  }
  // repeated .proto_ff.worldmapbossworldbossbornDesc born = 9;
  total_size += 1 * this->born_size();
  for (int i = 0; i < this->born_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->born(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldmapbossworldboss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worldmapbossworldboss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worldmapbossworldboss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worldmapbossworldboss::MergeFrom(const worldmapbossworldboss& from) {
  GOOGLE_CHECK_NE(&from, this);
  born_.MergeFrom(from.born_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_minilevel()) {
      set_minilevel(from.minilevel());
    }
    if (from.has_unlocklevel()) {
      set_unlocklevel(from.unlocklevel());
    }
    if (from.has_levelcheck()) {
      set_levelcheck(from.levelcheck());
    }
    if (from.has_pathid()) {
      set_pathid(from.pathid());
    }
    if (from.has_specnoticehp()) {
      set_specnoticehp(from.specnoticehp());
    }
    if (from.has_bornspacetime()) {
      set_bornspacetime(from.bornspacetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worldmapbossworldboss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldmapbossworldboss::CopyFrom(const worldmapbossworldboss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worldmapbossworldboss::IsInitialized() const {

  return true;
}

void worldmapbossworldboss::Swap(worldmapbossworldboss* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bossid_, other->bossid_);
    std::swap(minilevel_, other->minilevel_);
    std::swap(unlocklevel_, other->unlocklevel_);
    std::swap(levelcheck_, other->levelcheck_);
    std::swap(pathid_, other->pathid_);
    std::swap(specnoticehp_, other->specnoticehp_);
    std::swap(bornspacetime_, other->bornspacetime_);
    born_.Swap(&other->born_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worldmapbossworldboss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldmapbossworldboss_descriptor_;
  metadata.reflection = worldmapbossworldboss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_worldmapbossworldboss::kWorldmapbossworldbossListFieldNumber;
#endif  // !_MSC_VER

Sheet_worldmapbossworldboss::Sheet_worldmapbossworldboss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_worldmapbossworldboss::InitAsDefaultInstance() {
}

Sheet_worldmapbossworldboss::Sheet_worldmapbossworldboss(const Sheet_worldmapbossworldboss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_worldmapbossworldboss::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_worldmapbossworldboss::~Sheet_worldmapbossworldboss() {
  SharedDtor();
}

void Sheet_worldmapbossworldboss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_worldmapbossworldboss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_worldmapbossworldboss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_worldmapbossworldboss_descriptor_;
}

const Sheet_worldmapbossworldboss& Sheet_worldmapbossworldboss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldmapboss_2eproto();
  return *default_instance_;
}

Sheet_worldmapbossworldboss* Sheet_worldmapbossworldboss::default_instance_ = NULL;

Sheet_worldmapbossworldboss* Sheet_worldmapbossworldboss::New() const {
  return new Sheet_worldmapbossworldboss;
}

void Sheet_worldmapbossworldboss::Clear() {
  worldmapbossworldboss_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_worldmapbossworldboss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.worldmapbossworldboss worldmapbossworldboss_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldmapbossworldboss_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worldmapbossworldboss_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_worldmapbossworldboss_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_worldmapbossworldboss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.worldmapbossworldboss worldmapbossworldboss_List = 1;
  for (int i = 0; i < this->worldmapbossworldboss_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->worldmapbossworldboss_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_worldmapbossworldboss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.worldmapbossworldboss worldmapbossworldboss_List = 1;
  for (int i = 0; i < this->worldmapbossworldboss_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worldmapbossworldboss_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_worldmapbossworldboss::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.worldmapbossworldboss worldmapbossworldboss_List = 1;
  total_size += 1 * this->worldmapbossworldboss_list_size();
  for (int i = 0; i < this->worldmapbossworldboss_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldmapbossworldboss_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_worldmapbossworldboss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_worldmapbossworldboss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_worldmapbossworldboss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_worldmapbossworldboss::MergeFrom(const Sheet_worldmapbossworldboss& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldmapbossworldboss_list_.MergeFrom(from.worldmapbossworldboss_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_worldmapbossworldboss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_worldmapbossworldboss::CopyFrom(const Sheet_worldmapbossworldboss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_worldmapbossworldboss::IsInitialized() const {

  return true;
}

void Sheet_worldmapbossworldboss::Swap(Sheet_worldmapbossworldboss* other) {
  if (other != this) {
    worldmapbossworldboss_list_.Swap(&other->worldmapbossworldboss_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_worldmapbossworldboss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_worldmapbossworldboss_descriptor_;
  metadata.reflection = Sheet_worldmapbossworldboss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int worldmapbossdroplist::kIdFieldNumber;
const int worldmapbossdroplist::kMonsterIdFieldNumber;
const int worldmapbossdroplist::kBossLevelFieldNumber;
const int worldmapbossdroplist::kDropIdFieldNumber;
#endif  // !_MSC_VER

worldmapbossdroplist::worldmapbossdroplist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void worldmapbossdroplist::InitAsDefaultInstance() {
}

worldmapbossdroplist::worldmapbossdroplist(const worldmapbossdroplist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void worldmapbossdroplist::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  monsterid_ = GOOGLE_LONGLONG(0);
  bosslevel_ = 0;
  dropid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worldmapbossdroplist::~worldmapbossdroplist() {
  SharedDtor();
}

void worldmapbossdroplist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void worldmapbossdroplist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldmapbossdroplist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldmapbossdroplist_descriptor_;
}

const worldmapbossdroplist& worldmapbossdroplist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldmapboss_2eproto();
  return *default_instance_;
}

worldmapbossdroplist* worldmapbossdroplist::default_instance_ = NULL;

worldmapbossdroplist* worldmapbossdroplist::New() const {
  return new worldmapbossdroplist;
}

void worldmapbossdroplist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    monsterid_ = GOOGLE_LONGLONG(0);
    bosslevel_ = 0;
    dropid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worldmapbossdroplist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monsterId;
        break;
      }

      // optional int64 monsterId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bossLevel;
        break;
      }

      // optional int32 bossLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosslevel_)));
          set_has_bosslevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dropId;
        break;
      }

      // optional int64 dropId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dropid_)));
          set_has_dropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void worldmapbossdroplist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 monsterId = 2;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->monsterid(), output);
  }

  // optional int32 bossLevel = 3;
  if (has_bosslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bosslevel(), output);
  }

  // optional int64 dropId = 4;
  if (has_dropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dropid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* worldmapbossdroplist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 monsterId = 2;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->monsterid(), target);
  }

  // optional int32 bossLevel = 3;
  if (has_bosslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bosslevel(), target);
  }

  // optional int64 dropId = 4;
  if (has_dropid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->dropid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int worldmapbossdroplist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 monsterId = 2;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monsterid());
    }

    // optional int32 bossLevel = 3;
    if (has_bosslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosslevel());
    }

    // optional int64 dropId = 4;
    if (has_dropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dropid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldmapbossdroplist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worldmapbossdroplist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worldmapbossdroplist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worldmapbossdroplist::MergeFrom(const worldmapbossdroplist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_bosslevel()) {
      set_bosslevel(from.bosslevel());
    }
    if (from.has_dropid()) {
      set_dropid(from.dropid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worldmapbossdroplist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldmapbossdroplist::CopyFrom(const worldmapbossdroplist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worldmapbossdroplist::IsInitialized() const {

  return true;
}

void worldmapbossdroplist::Swap(worldmapbossdroplist* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(bosslevel_, other->bosslevel_);
    std::swap(dropid_, other->dropid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worldmapbossdroplist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldmapbossdroplist_descriptor_;
  metadata.reflection = worldmapbossdroplist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_worldmapbossdroplist::kWorldmapbossdroplistListFieldNumber;
#endif  // !_MSC_VER

Sheet_worldmapbossdroplist::Sheet_worldmapbossdroplist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_worldmapbossdroplist::InitAsDefaultInstance() {
}

Sheet_worldmapbossdroplist::Sheet_worldmapbossdroplist(const Sheet_worldmapbossdroplist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_worldmapbossdroplist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_worldmapbossdroplist::~Sheet_worldmapbossdroplist() {
  SharedDtor();
}

void Sheet_worldmapbossdroplist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_worldmapbossdroplist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_worldmapbossdroplist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_worldmapbossdroplist_descriptor_;
}

const Sheet_worldmapbossdroplist& Sheet_worldmapbossdroplist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldmapboss_2eproto();
  return *default_instance_;
}

Sheet_worldmapbossdroplist* Sheet_worldmapbossdroplist::default_instance_ = NULL;

Sheet_worldmapbossdroplist* Sheet_worldmapbossdroplist::New() const {
  return new Sheet_worldmapbossdroplist;
}

void Sheet_worldmapbossdroplist::Clear() {
  worldmapbossdroplist_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_worldmapbossdroplist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.worldmapbossdroplist worldmapbossdroplist_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldmapbossdroplist_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worldmapbossdroplist_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_worldmapbossdroplist_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_worldmapbossdroplist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.worldmapbossdroplist worldmapbossdroplist_List = 1;
  for (int i = 0; i < this->worldmapbossdroplist_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->worldmapbossdroplist_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_worldmapbossdroplist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.worldmapbossdroplist worldmapbossdroplist_List = 1;
  for (int i = 0; i < this->worldmapbossdroplist_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worldmapbossdroplist_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_worldmapbossdroplist::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.worldmapbossdroplist worldmapbossdroplist_List = 1;
  total_size += 1 * this->worldmapbossdroplist_list_size();
  for (int i = 0; i < this->worldmapbossdroplist_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldmapbossdroplist_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_worldmapbossdroplist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_worldmapbossdroplist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_worldmapbossdroplist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_worldmapbossdroplist::MergeFrom(const Sheet_worldmapbossdroplist& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldmapbossdroplist_list_.MergeFrom(from.worldmapbossdroplist_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_worldmapbossdroplist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_worldmapbossdroplist::CopyFrom(const Sheet_worldmapbossdroplist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_worldmapbossdroplist::IsInitialized() const {

  return true;
}

void Sheet_worldmapbossdroplist::Swap(Sheet_worldmapbossdroplist* other) {
  if (other != this) {
    worldmapbossdroplist_list_.Swap(&other->worldmapbossdroplist_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_worldmapbossdroplist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_worldmapbossdroplist_descriptor_;
  metadata.reflection = Sheet_worldmapbossdroplist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int worldmapbossfestival::kIdFieldNumber;
const int worldmapbossfestival::kBossIdFieldNumber;
const int worldmapbossfestival::kAcrossFieldNumber;
#endif  // !_MSC_VER

worldmapbossfestival::worldmapbossfestival()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void worldmapbossfestival::InitAsDefaultInstance() {
}

worldmapbossfestival::worldmapbossfestival(const worldmapbossfestival& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void worldmapbossfestival::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  bossid_ = GOOGLE_LONGLONG(0);
  across_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

worldmapbossfestival::~worldmapbossfestival() {
  SharedDtor();
}

void worldmapbossfestival::SharedDtor() {
  if (this != default_instance_) {
  }
}

void worldmapbossfestival::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldmapbossfestival::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldmapbossfestival_descriptor_;
}

const worldmapbossfestival& worldmapbossfestival::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldmapboss_2eproto();
  return *default_instance_;
}

worldmapbossfestival* worldmapbossfestival::default_instance_ = NULL;

worldmapbossfestival* worldmapbossfestival::New() const {
  return new worldmapbossfestival;
}

void worldmapbossfestival::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    bossid_ = GOOGLE_LONGLONG(0);
    across_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool worldmapbossfestival::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_across;
        break;
      }

      // optional int32 across = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_across:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &across_)));
          set_has_across();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void worldmapbossfestival::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  // optional int32 across = 3;
  if (has_across()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->across(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* worldmapbossfestival::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  // optional int32 across = 3;
  if (has_across()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->across(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int worldmapbossfestival::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

    // optional int32 across = 3;
    if (has_across()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->across());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldmapbossfestival::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const worldmapbossfestival* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const worldmapbossfestival*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void worldmapbossfestival::MergeFrom(const worldmapbossfestival& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_across()) {
      set_across(from.across());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void worldmapbossfestival::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldmapbossfestival::CopyFrom(const worldmapbossfestival& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool worldmapbossfestival::IsInitialized() const {

  return true;
}

void worldmapbossfestival::Swap(worldmapbossfestival* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bossid_, other->bossid_);
    std::swap(across_, other->across_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata worldmapbossfestival::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldmapbossfestival_descriptor_;
  metadata.reflection = worldmapbossfestival_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_worldmapbossfestival::kWorldmapbossfestivalListFieldNumber;
#endif  // !_MSC_VER

Sheet_worldmapbossfestival::Sheet_worldmapbossfestival()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_worldmapbossfestival::InitAsDefaultInstance() {
}

Sheet_worldmapbossfestival::Sheet_worldmapbossfestival(const Sheet_worldmapbossfestival& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_worldmapbossfestival::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_worldmapbossfestival::~Sheet_worldmapbossfestival() {
  SharedDtor();
}

void Sheet_worldmapbossfestival::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_worldmapbossfestival::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_worldmapbossfestival::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_worldmapbossfestival_descriptor_;
}

const Sheet_worldmapbossfestival& Sheet_worldmapbossfestival::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldmapboss_2eproto();
  return *default_instance_;
}

Sheet_worldmapbossfestival* Sheet_worldmapbossfestival::default_instance_ = NULL;

Sheet_worldmapbossfestival* Sheet_worldmapbossfestival::New() const {
  return new Sheet_worldmapbossfestival;
}

void Sheet_worldmapbossfestival::Clear() {
  worldmapbossfestival_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_worldmapbossfestival::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.worldmapbossfestival worldmapbossfestival_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldmapbossfestival_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worldmapbossfestival_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_worldmapbossfestival_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_worldmapbossfestival::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.worldmapbossfestival worldmapbossfestival_List = 1;
  for (int i = 0; i < this->worldmapbossfestival_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->worldmapbossfestival_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_worldmapbossfestival::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.worldmapbossfestival worldmapbossfestival_List = 1;
  for (int i = 0; i < this->worldmapbossfestival_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worldmapbossfestival_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_worldmapbossfestival::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.worldmapbossfestival worldmapbossfestival_List = 1;
  total_size += 1 * this->worldmapbossfestival_list_size();
  for (int i = 0; i < this->worldmapbossfestival_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldmapbossfestival_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_worldmapbossfestival::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_worldmapbossfestival* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_worldmapbossfestival*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_worldmapbossfestival::MergeFrom(const Sheet_worldmapbossfestival& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldmapbossfestival_list_.MergeFrom(from.worldmapbossfestival_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_worldmapbossfestival::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_worldmapbossfestival::CopyFrom(const Sheet_worldmapbossfestival& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_worldmapbossfestival::IsInitialized() const {

  return true;
}

void Sheet_worldmapbossfestival::Swap(Sheet_worldmapbossfestival* other) {
  if (other != this) {
    worldmapbossfestival_list_.Swap(&other->worldmapbossfestival_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_worldmapbossfestival::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_worldmapbossfestival_descriptor_;
  metadata.reflection = Sheet_worldmapbossfestival_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
