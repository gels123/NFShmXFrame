// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Nickgod.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Nickgod.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_NickgodConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_NickgodConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_NickgodConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_NickgodName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_NickgodName_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodStageMosDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodStageMosDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodStageBossDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodStageBossDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_NickgodStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_NickgodStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodRewardsRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodRewardsRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodRewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_NickgodRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_NickgodRewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodLattice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodLattice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_NickgodLattice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_NickgodLattice_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodTreasuryItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodTreasuryItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodTreasury_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodTreasury_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_NickgodTreasury_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_NickgodTreasury_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodPrivilegeRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodPrivilegeRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodPrivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodPrivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_NickgodPrivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_NickgodPrivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodSaleItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodSaleItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodSale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodSale_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_NickgodSale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_NickgodSale_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodChargeupRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodChargeupRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_NickgodChargeup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_NickgodChargeup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_NickgodChargeup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_NickgodChargeup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fNickgod_2eproto() {
  protobuf_AddDesc_E_5fNickgod_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Nickgod.proto");
  GOOGLE_CHECK(file != NULL);
  E_NickgodConstant_descriptor_ = file->message_type(0);
  static const int E_NickgodConstant_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_maxuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_floorsmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_lattice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_repairitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_repairnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_openitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_opennum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_logmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_readymap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_readypiont_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, m_actid_),
  };
  E_NickgodConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodConstant_descriptor_,
      E_NickgodConstant::default_instance_,
      E_NickgodConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodConstant));
  Sheet_NickgodConstant_descriptor_ = file->message_type(1);
  static const int Sheet_NickgodConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodConstant, e_nickgodconstant_list_),
  };
  Sheet_NickgodConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_NickgodConstant_descriptor_,
      Sheet_NickgodConstant::default_instance_,
      Sheet_NickgodConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_NickgodConstant));
  E_NickgodName_descriptor_ = file->message_type(2);
  static const int E_NickgodName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodName, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodName, m_name_),
  };
  E_NickgodName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodName_descriptor_,
      E_NickgodName::default_instance_,
      E_NickgodName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodName));
  Sheet_NickgodName_descriptor_ = file->message_type(3);
  static const int Sheet_NickgodName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodName, e_nickgodname_list_),
  };
  Sheet_NickgodName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_NickgodName_descriptor_,
      Sheet_NickgodName::default_instance_,
      Sheet_NickgodName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_NickgodName));
  E_NickgodStageMosDesc_descriptor_ = file->message_type(4);
  static const int E_NickgodStageMosDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStageMosDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStageMosDesc, m_point_),
  };
  E_NickgodStageMosDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodStageMosDesc_descriptor_,
      E_NickgodStageMosDesc::default_instance_,
      E_NickgodStageMosDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStageMosDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStageMosDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodStageMosDesc));
  E_NickgodStageBossDesc_descriptor_ = file->message_type(5);
  static const int E_NickgodStageBossDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStageBossDesc, m_droppreview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStageBossDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStageBossDesc, m_point_),
  };
  E_NickgodStageBossDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodStageBossDesc_descriptor_,
      E_NickgodStageBossDesc::default_instance_,
      E_NickgodStageBossDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStageBossDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStageBossDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodStageBossDesc));
  E_NickgodStage_descriptor_ = file->message_type(6);
  static const int E_NickgodStage_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_mosdierefresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_bossfirstrefresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_bossdierefresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_playerdiedrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_sceneintegraltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_sceneintegral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_killmosintegral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_killbossintegral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_killplayerintegral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_assistplayerintegral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_mos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, m_revivalpoint_),
  };
  E_NickgodStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodStage_descriptor_,
      E_NickgodStage::default_instance_,
      E_NickgodStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodStage));
  Sheet_NickgodStage_descriptor_ = file->message_type(7);
  static const int Sheet_NickgodStage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodStage, e_nickgodstage_list_),
  };
  Sheet_NickgodStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_NickgodStage_descriptor_,
      Sheet_NickgodStage::default_instance_,
      Sheet_NickgodStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_NickgodStage));
  E_NickgodRewardsRewardDesc_descriptor_ = file->message_type(8);
  static const int E_NickgodRewardsRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodRewardsRewardDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodRewardsRewardDesc, m_id_),
  };
  E_NickgodRewardsRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodRewardsRewardDesc_descriptor_,
      E_NickgodRewardsRewardDesc::default_instance_,
      E_NickgodRewardsRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodRewardsRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodRewardsRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodRewardsRewardDesc));
  E_NickgodRewards_descriptor_ = file->message_type(9);
  static const int E_NickgodRewards_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodRewards, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodRewards, m_rankingmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodRewards, m_rankingmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodRewards, m_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodRewards, m_reward_),
  };
  E_NickgodRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodRewards_descriptor_,
      E_NickgodRewards::default_instance_,
      E_NickgodRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodRewards));
  Sheet_NickgodRewards_descriptor_ = file->message_type(10);
  static const int Sheet_NickgodRewards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodRewards, e_nickgodrewards_list_),
  };
  Sheet_NickgodRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_NickgodRewards_descriptor_,
      Sheet_NickgodRewards::default_instance_,
      Sheet_NickgodRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_NickgodRewards));
  E_NickgodLattice_descriptor_ = file->message_type(11);
  static const int E_NickgodLattice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodLattice, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodLattice, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodLattice, m_itemnum_),
  };
  E_NickgodLattice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodLattice_descriptor_,
      E_NickgodLattice::default_instance_,
      E_NickgodLattice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodLattice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodLattice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodLattice));
  Sheet_NickgodLattice_descriptor_ = file->message_type(12);
  static const int Sheet_NickgodLattice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodLattice, e_nickgodlattice_list_),
  };
  Sheet_NickgodLattice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_NickgodLattice_descriptor_,
      Sheet_NickgodLattice::default_instance_,
      Sheet_NickgodLattice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodLattice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodLattice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_NickgodLattice));
  E_NickgodTreasuryItemDesc_descriptor_ = file->message_type(13);
  static const int E_NickgodTreasuryItemDesc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodTreasuryItemDesc, m_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodTreasuryItemDesc, m_rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodTreasuryItemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodTreasuryItemDesc, m_id_),
  };
  E_NickgodTreasuryItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodTreasuryItemDesc_descriptor_,
      E_NickgodTreasuryItemDesc::default_instance_,
      E_NickgodTreasuryItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodTreasuryItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodTreasuryItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodTreasuryItemDesc));
  E_NickgodTreasury_descriptor_ = file->message_type(14);
  static const int E_NickgodTreasury_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodTreasury, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodTreasury, m_item_),
  };
  E_NickgodTreasury_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodTreasury_descriptor_,
      E_NickgodTreasury::default_instance_,
      E_NickgodTreasury_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodTreasury, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodTreasury, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodTreasury));
  Sheet_NickgodTreasury_descriptor_ = file->message_type(15);
  static const int Sheet_NickgodTreasury_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodTreasury, e_nickgodtreasury_list_),
  };
  Sheet_NickgodTreasury_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_NickgodTreasury_descriptor_,
      Sheet_NickgodTreasury::default_instance_,
      Sheet_NickgodTreasury_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodTreasury, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodTreasury, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_NickgodTreasury));
  E_NickgodPrivilegeRewardDesc_descriptor_ = file->message_type(16);
  static const int E_NickgodPrivilegeRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodPrivilegeRewardDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodPrivilegeRewardDesc, m_id_),
  };
  E_NickgodPrivilegeRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodPrivilegeRewardDesc_descriptor_,
      E_NickgodPrivilegeRewardDesc::default_instance_,
      E_NickgodPrivilegeRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodPrivilegeRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodPrivilegeRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodPrivilegeRewardDesc));
  E_NickgodPrivilege_descriptor_ = file->message_type(17);
  static const int E_NickgodPrivilege_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodPrivilege, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodPrivilege, m_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodPrivilege, m_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodPrivilege, m_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodPrivilege, m_reward_),
  };
  E_NickgodPrivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodPrivilege_descriptor_,
      E_NickgodPrivilege::default_instance_,
      E_NickgodPrivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodPrivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodPrivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodPrivilege));
  Sheet_NickgodPrivilege_descriptor_ = file->message_type(18);
  static const int Sheet_NickgodPrivilege_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodPrivilege, e_nickgodprivilege_list_),
  };
  Sheet_NickgodPrivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_NickgodPrivilege_descriptor_,
      Sheet_NickgodPrivilege::default_instance_,
      Sheet_NickgodPrivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodPrivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodPrivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_NickgodPrivilege));
  E_NickgodSaleItemDesc_descriptor_ = file->message_type(19);
  static const int E_NickgodSaleItemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodSaleItemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodSaleItemDesc, m_id_),
  };
  E_NickgodSaleItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodSaleItemDesc_descriptor_,
      E_NickgodSaleItemDesc::default_instance_,
      E_NickgodSaleItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodSaleItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodSaleItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodSaleItemDesc));
  E_NickgodSale_descriptor_ = file->message_type(20);
  static const int E_NickgodSale_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodSale, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodSale, m_discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodSale, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodSale, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodSale, m_buylimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodSale, m_item_),
  };
  E_NickgodSale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodSale_descriptor_,
      E_NickgodSale::default_instance_,
      E_NickgodSale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodSale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodSale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodSale));
  Sheet_NickgodSale_descriptor_ = file->message_type(21);
  static const int Sheet_NickgodSale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodSale, e_nickgodsale_list_),
  };
  Sheet_NickgodSale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_NickgodSale_descriptor_,
      Sheet_NickgodSale::default_instance_,
      Sheet_NickgodSale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodSale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodSale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_NickgodSale));
  E_NickgodChargeupRewardDesc_descriptor_ = file->message_type(22);
  static const int E_NickgodChargeupRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodChargeupRewardDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodChargeupRewardDesc, m_id_),
  };
  E_NickgodChargeupRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodChargeupRewardDesc_descriptor_,
      E_NickgodChargeupRewardDesc::default_instance_,
      E_NickgodChargeupRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodChargeupRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodChargeupRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodChargeupRewardDesc));
  E_NickgodChargeup_descriptor_ = file->message_type(23);
  static const int E_NickgodChargeup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodChargeup, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodChargeup, m_pay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodChargeup, m_reward_),
  };
  E_NickgodChargeup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_NickgodChargeup_descriptor_,
      E_NickgodChargeup::default_instance_,
      E_NickgodChargeup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodChargeup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_NickgodChargeup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_NickgodChargeup));
  Sheet_NickgodChargeup_descriptor_ = file->message_type(24);
  static const int Sheet_NickgodChargeup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodChargeup, e_nickgodchargeup_list_),
  };
  Sheet_NickgodChargeup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_NickgodChargeup_descriptor_,
      Sheet_NickgodChargeup::default_instance_,
      Sheet_NickgodChargeup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodChargeup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NickgodChargeup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_NickgodChargeup));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fNickgod_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodConstant_descriptor_, &E_NickgodConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_NickgodConstant_descriptor_, &Sheet_NickgodConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodName_descriptor_, &E_NickgodName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_NickgodName_descriptor_, &Sheet_NickgodName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodStageMosDesc_descriptor_, &E_NickgodStageMosDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodStageBossDesc_descriptor_, &E_NickgodStageBossDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodStage_descriptor_, &E_NickgodStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_NickgodStage_descriptor_, &Sheet_NickgodStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodRewardsRewardDesc_descriptor_, &E_NickgodRewardsRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodRewards_descriptor_, &E_NickgodRewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_NickgodRewards_descriptor_, &Sheet_NickgodRewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodLattice_descriptor_, &E_NickgodLattice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_NickgodLattice_descriptor_, &Sheet_NickgodLattice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodTreasuryItemDesc_descriptor_, &E_NickgodTreasuryItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodTreasury_descriptor_, &E_NickgodTreasury::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_NickgodTreasury_descriptor_, &Sheet_NickgodTreasury::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodPrivilegeRewardDesc_descriptor_, &E_NickgodPrivilegeRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodPrivilege_descriptor_, &E_NickgodPrivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_NickgodPrivilege_descriptor_, &Sheet_NickgodPrivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodSaleItemDesc_descriptor_, &E_NickgodSaleItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodSale_descriptor_, &E_NickgodSale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_NickgodSale_descriptor_, &Sheet_NickgodSale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodChargeupRewardDesc_descriptor_, &E_NickgodChargeupRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_NickgodChargeup_descriptor_, &E_NickgodChargeup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_NickgodChargeup_descriptor_, &Sheet_NickgodChargeup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fNickgod_2eproto() {
  delete E_NickgodConstant::default_instance_;
  delete E_NickgodConstant_reflection_;
  delete Sheet_NickgodConstant::default_instance_;
  delete Sheet_NickgodConstant_reflection_;
  delete E_NickgodName::default_instance_;
  delete E_NickgodName_reflection_;
  delete Sheet_NickgodName::default_instance_;
  delete Sheet_NickgodName_reflection_;
  delete E_NickgodStageMosDesc::default_instance_;
  delete E_NickgodStageMosDesc_reflection_;
  delete E_NickgodStageBossDesc::default_instance_;
  delete E_NickgodStageBossDesc_reflection_;
  delete E_NickgodStage::default_instance_;
  delete E_NickgodStage_reflection_;
  delete Sheet_NickgodStage::default_instance_;
  delete Sheet_NickgodStage_reflection_;
  delete E_NickgodRewardsRewardDesc::default_instance_;
  delete E_NickgodRewardsRewardDesc_reflection_;
  delete E_NickgodRewards::default_instance_;
  delete E_NickgodRewards_reflection_;
  delete Sheet_NickgodRewards::default_instance_;
  delete Sheet_NickgodRewards_reflection_;
  delete E_NickgodLattice::default_instance_;
  delete E_NickgodLattice_reflection_;
  delete Sheet_NickgodLattice::default_instance_;
  delete Sheet_NickgodLattice_reflection_;
  delete E_NickgodTreasuryItemDesc::default_instance_;
  delete E_NickgodTreasuryItemDesc_reflection_;
  delete E_NickgodTreasury::default_instance_;
  delete E_NickgodTreasury_reflection_;
  delete Sheet_NickgodTreasury::default_instance_;
  delete Sheet_NickgodTreasury_reflection_;
  delete E_NickgodPrivilegeRewardDesc::default_instance_;
  delete E_NickgodPrivilegeRewardDesc_reflection_;
  delete E_NickgodPrivilege::default_instance_;
  delete E_NickgodPrivilege_reflection_;
  delete Sheet_NickgodPrivilege::default_instance_;
  delete Sheet_NickgodPrivilege_reflection_;
  delete E_NickgodSaleItemDesc::default_instance_;
  delete E_NickgodSaleItemDesc_reflection_;
  delete E_NickgodSale::default_instance_;
  delete E_NickgodSale_reflection_;
  delete Sheet_NickgodSale::default_instance_;
  delete Sheet_NickgodSale_reflection_;
  delete E_NickgodChargeupRewardDesc::default_instance_;
  delete E_NickgodChargeupRewardDesc_reflection_;
  delete E_NickgodChargeup::default_instance_;
  delete E_NickgodChargeup_reflection_;
  delete Sheet_NickgodChargeup::default_instance_;
  delete Sheet_NickgodChargeup_reflection_;
}

void protobuf_AddDesc_E_5fNickgod_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017E_Nickgod.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\"\326\005\n\021E_NickgodConstant\022\030\n\004m_id"
    "\030\001 \001(\003B\n\302\377\024\006\345\272\217\345\217\267\022!\n\007m_skill\030\002 \001(\005B\020\302\377\024"
    "\014\346\250\241\347\211\210\346\212\200\350\203\275\022&\n\006m_time\030\003 \001(\005B\026\302\377\024\022\345\244\207\346\210"
    "\230\346\227\266\351\227\264\344\270\212\351\231\220\022)\n\tm_maxUser\030\004 \001(\005B\026\302\377\024\022\345\244"
    "\207\346\210\230\344\272\272\346\225\260\344\270\212\351\231\220\022+\n\013m_floorsMax\030\005 \001(\005B\026\302"
    "\377\024\022\345\256\235\345\272\223\346\234\200\345\244\247\345\261\202\346\225\260\022&\n\tm_lattice\030\006 \001(\005"
    "B\023\302\377\024\017\346\257\217\345\261\202\346\240\274\345\255\220\346\225\260\022,\n\014m_repairItem\030\007 "
    "\001(\005B\026\302\377\024\022\351\201\223\345\205\267\350\241\245\350\266\263\350\264\247\345\270\201\022+\n\013m_repairN"
    "um\030\010 \001(\005B\026\302\377\024\022\351\201\223\345\205\267\350\241\245\350\266\263\346\225\260\351\207\217\022*\n\nm_op"
    "enItem\030\t \001(\005B\026\302\377\024\022\347\211\271\346\235\203\345\274\200\351\200\232\350\264\247\345\270\201\022)\n\t"
    "m_openNum\030\n \001(\005B\026\302\377\024\022\347\211\271\346\235\203\345\274\200\351\200\232\346\225\260\351\207\217\022"
    "-\n\006m_week\030\013 \001(\tB\035\302\377\024\025\347\211\271\346\235\203\347\211\271\346\203\240\345\274\200\345\220\257\345"
    "\221\250\220\301\024@\0220\n\nm_opentime\030\014 \001(\005B\034\302\377\024\030\347\211\271\346\235\203\347\211"
    "\271\346\203\240\345\274\200\345\220\257\346\227\266\351\227\264\022/\n\tm_endtime\030\r \001(\005B\034\302\377\024"
    "\030\347\211\271\346\235\203\347\211\271\346\203\240\347\273\223\346\235\237\346\227\266\351\227\264\022(\n\010m_logMax\030\016 "
    "\001(\005B\026\302\377\024\022\346\227\245\345\277\227\346\234\200\345\244\247\346\225\260\351\207\217\022$\n\nm_readyMa"
    "p\030\017 \001(\005B\020\302\377\024\014\345\244\207\346\210\230\345\234\260\345\233\276\022)\n\014m_readyPion"
    "t\030\020 \001(\005B\023\302\377\024\017\345\244\207\346\210\230\345\207\272\347\224\237\347\202\271\022\035\n\007m_actId\030"
    "\021 \001(\005B\014\302\377\024\010\346\264\273\345\212\250id\"Z\n\025Sheet_NickgodCons"
    "tant\022A\n\026E_NickgodConstant_List\030\001 \003(\0132\033.p"
    "roto_ff.E_NickgodConstantB\004\210\301\024\002\"E\n\rE_Nic"
    "kgodName\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\036\n\006m_name"
    "\030\002 \001(\tB\016\302\377\024\006\345\220\215\347\247\260\220\301\024@\"N\n\021Sheet_NickgodN"
    "ame\0229\n\022E_NickgodName_List\030\001 \003(\0132\027.proto_"
    "ff.E_NickgodNameB\004\210\301\024 \"M\n\025E_NickgodStage"
    "MosDesc\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\036\n\007m_point"
    "\030\002 \001(\005B\r\302\377\024\t\345\210\267\346\226\260\347\202\271\"{\n\026E_NickgodStageB"
    "ossDesc\022+\n\rm_dropPreview\030\001 \001(\tB\024\302\377\024\014\346\216\211\350"
    "\220\275\351\242\204\350\247\210\220\301\024@\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002id\022\036\n\007m_"
    "point\030\003 \001(\005B\r\302\377\024\t\345\210\267\346\226\260\347\202\271\"\301\006\n\016E_Nickgod"
    "Stage\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\351\230\266\346\256\265id\022!\n\005m_m"
    "ap\030\002 \001(\005B\022\302\377\024\016\351\230\266\346\256\265\345\234\260\345\233\276id\022*\n\nm_durati"
    "on\030\003 \001(\005B\026\302\377\024\022\351\230\266\346\256\265\346\214\201\347\273\255\346\227\266\351\227\264\0225\n\017m_mo"
    "sDieRefresh\030\004 \001(\005B\034\302\377\024\030\345\260\217\346\200\252\346\255\273\344\272\241\345\210\267\346\226"
    "\260\346\227\266\351\227\264\0226\n\022m_bossFirstRefresh\030\005 \001(\005B\032\302\377\024"
    "\026boss\345\210\235\345\247\213\345\210\267\346\226\260\346\227\266\351\227\264\0224\n\020m_bossDieRefr"
    "esh\030\006 \001(\005B\032\302\377\024\026boss\346\255\273\344\272\241\345\210\267\346\226\260\346\227\266\351\227\264\022;\n"
    "\017m_playerDieDrop\030\007 \001(\005B\"\302\377\024\036\347\216\251\345\256\266\346\255\273\344\272\241"
    "\346\216\211\350\220\275\350\243\205\345\244\207\346\246\202\347\216\207\0229\n\023m_sceneIntegralTim"
    "e\030\010 \001(\005B\034\302\377\024\030\345\234\272\346\231\257\347\247\257\345\210\206\351\227\264\351\232\224\346\227\266\351\227\264\022)\n"
    "\017m_sceneIntegral\030\t \001(\005B\020\302\377\024\014\345\234\272\346\231\257\347\247\257\345\210\206"
    "\0221\n\021m_killmosIntegral\030\n \001(\005B\026\302\377\024\022\345\207\273\346\235\200\345"
    "\260\217\346\200\252\347\247\257\345\210\206\0220\n\022m_killbossIntegral\030\013 \001(\005B"
    "\024\302\377\024\020\345\207\273\346\235\200boss\347\247\257\345\210\206\0224\n\024m_killplayerInt"
    "egral\030\014 \001(\005B\026\302\377\024\022\345\207\273\346\235\200\347\216\251\345\256\266\347\247\257\345\210\206\0226\n\026m"
    "_assistplayerIntegral\030\r \001(\005B\026\302\377\024\022\345\212\251\346\224\273\347"
    "\216\251\345\256\266\347\247\257\345\210\206\022>\n\005m_mos\030\016 \003(\0132\037.proto_ff.E_"
    "NickgodStageMosDescB\016\302\377\024\006\345\260\217\346\200\252\210\301\024\n\022>\n\006m"
    "_boss\030\017 \003(\0132 .proto_ff.E_NickgodStageBos"
    "sDescB\014\302\377\024\004boss\210\301\024\004\022)\n\016m_revivalPoint\030\020 "
    "\003(\005B\021\302\377\024\t\345\244\215\346\264\273\347\202\271\210\301\024\010\"Q\n\022Sheet_NickgodS"
    "tage\022;\n\023E_NickgodStage_List\030\001 \003(\0132\030.prot"
    "o_ff.E_NickgodStageB\004\210\301\024\004\"M\n\032E_NickgodRe"
    "wardsRewardDesc\022\031\n\005m_Num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351"
    "\207\217\022\024\n\004m_ID\030\002 \001(\003B\006\302\377\024\002ID\"\355\001\n\020E_NickgodRe"
    "wards\022\030\n\004m_id\030\001 \001(\005B\n\302\377\024\006\345\272\217\345\217\267\022)\n\014m_ran"
    "kingMin\030\002 \001(\005B\023\302\377\024\017\345\220\215\346\254\241\346\234\200\345\260\217\345\200\274\022)\n\014m_"
    "rankingMax\030\003 \001(\005B\023\302\377\024\017\345\220\215\346\254\241\346\234\200\345\244\247\345\200\274\022!\n"
    "\007m_score\030\004 \001(\005B\020\302\377\024\014\347\247\257\345\210\206\346\225\260\351\207\217\022F\n\010m_re"
    "ward\030\005 \003(\0132$.proto_ff.E_NickgodRewardsRe"
    "wardDescB\016\302\377\024\006\345\245\226\345\212\261\210\301\024\005\"W\n\024Sheet_Nickgo"
    "dRewards\022\?\n\025E_NickgodRewards_List\030\001 \003(\0132"
    "\032.proto_ff.E_NickgodRewardsB\004\210\301\024\020\"w\n\020E_N"
    "ickgodLattice\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\350\277\233\345\272\246i"
    "d\022\"\n\010m_itemId\030\002 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\351\201\223\345\205\267\022#\n"
    "\tm_itemNum\030\003 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\346\225\260\351\207\217\"W\n\024Sh"
    "eet_NickgodLattice\022\?\n\025E_NickgodLattice_L"
    "ist\030\001 \003(\0132\032.proto_ff.E_NickgodLatticeB\004\210"
    "\301\024@\"\204\001\n\031E_NickgodTreasuryItemDesc\022\032\n\006m_s"
    "how\030\001 \001(\005B\n\302\377\024\006\345\261\225\347\244\272\022\032\n\006m_rand\030\002 \001(\005B\n\302"
    "\377\024\006\346\235\203\351\207\215\022\031\n\005m_num\030\003 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004"
    "m_id\030\004 \001(\005B\006\302\377\024\002id\"r\n\021E_NickgodTreasury\022"
    "\030\n\004m_id\030\001 \001(\005B\n\302\377\024\006\345\261\202\346\225\260\022C\n\006m_item\030\002 \003("
    "\0132#.proto_ff.E_NickgodTreasuryItemDescB\016"
    "\302\377\024\006\345\245\226\345\212\261\210\301\024%\"Z\n\025Sheet_NickgodTreasury\022"
    "A\n\026E_NickgodTreasury_List\030\001 \003(\0132\033.proto_"
    "ff.E_NickgodTreasuryB\004\210\301\024\020\"O\n\034E_NickgodP"
    "rivilegeRewardDesc\022\031\n\005m_Num\030\001 \001(\005B\n\302\377\024\006\346"
    "\225\260\351\207\217\022\024\n\004m_ID\030\002 \001(\003B\006\302\377\024\002ID\"\354\001\n\022E_Nickgo"
    "dPrivilege\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\345\245\226\345\212\261id\022%"
    "\n\013m_condition\030\002 \001(\005B\020\302\377\024\014\351\242\206\345\217\226\346\235\241\344\273\266\022\033\n"
    "\007m_param\030\003 \001(\005B\n\302\377\024\006\345\217\202\346\225\260\022,\n\006m_open\030\004 \001"
    "(\005B\034\302\377\024\030\346\230\257\345\220\246\351\234\200\350\246\201\345\274\200\351\200\232\347\211\271\346\235\203\022H\n\010m_re"
    "ward\030\005 \003(\0132&.proto_ff.E_NickgodPrivilege"
    "RewardDescB\016\302\377\024\006\345\245\226\345\212\261\210\301\024\005\"]\n\026Sheet_Nick"
    "godPrivilege\022C\n\027E_NickgodPrivilege_List\030"
    "\001 \003(\0132\034.proto_ff.E_NickgodPrivilegeB\004\210\301\024"
    "\020\"H\n\025E_NickgodSaleItemDesc\022\031\n\005m_Num\030\001 \001("
    "\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_ID\030\002 \001(\003B\006\302\377\024\002ID\"\374\001\n\r"
    "E_NickgodSale\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\347\244\274\345\214\205i"
    "d\022\"\n\nm_discount\030\002 \001(\tB\016\302\377\024\006\346\212\230\346\211\243\220\301\024@\022!\n"
    "\007m_money\030\003 \001(\005B\020\302\377\024\014\350\264\255\344\271\260\350\264\247\345\270\201\022!\n\007m_pr"
    "ice\030\004 \001(\005B\020\302\377\024\014\350\264\255\344\271\260\344\273\267\346\240\274\022$\n\nm_buyLimi"
    "t\030\005 \001(\005B\020\302\377\024\014\351\231\220\350\264\255\346\254\241\346\225\260\022\?\n\006m_item\030\006 \003("
    "\0132\037.proto_ff.E_NickgodSaleItemDescB\016\302\377\024\006"
    "\347\211\251\345\223\201\210\301\024\004\"N\n\021Sheet_NickgodSale\0229\n\022E_Nic"
    "kgodSale_List\030\001 \003(\0132\027.proto_ff.E_Nickgod"
    "SaleB\004\210\301\024\010\"N\n\033E_NickgodChargeupRewardDes"
    "c\022\031\n\005m_Num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_ID\030\002 \001"
    "(\003B\006\302\377\024\002ID\"\231\001\n\021E_NickgodChargeup\022\032\n\004m_id"
    "\030\001 \001(\005B\014\302\377\024\010\347\264\257\345\205\205id\022\037\n\005m_pay\030\002 \001(\005B\020\302\377\024"
    "\014\345\205\205\345\200\274\351\207\221\351\242\235\022G\n\010m_reward\030\003 \003(\0132%.proto_"
    "ff.E_NickgodChargeupRewardDescB\016\302\377\024\006\345\245\226\345"
    "\212\261\210\301\024\005\"Z\n\025Sheet_NickgodChargeup\022A\n\026E_Nic"
    "kgodChargeup_List\030\001 \003(\0132\033.proto_ff.E_Nic"
    "kgodChargeupB\004\210\301\024\010", 4258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Nickgod.proto", &protobuf_RegisterTypes);
  E_NickgodConstant::default_instance_ = new E_NickgodConstant();
  Sheet_NickgodConstant::default_instance_ = new Sheet_NickgodConstant();
  E_NickgodName::default_instance_ = new E_NickgodName();
  Sheet_NickgodName::default_instance_ = new Sheet_NickgodName();
  E_NickgodStageMosDesc::default_instance_ = new E_NickgodStageMosDesc();
  E_NickgodStageBossDesc::default_instance_ = new E_NickgodStageBossDesc();
  E_NickgodStage::default_instance_ = new E_NickgodStage();
  Sheet_NickgodStage::default_instance_ = new Sheet_NickgodStage();
  E_NickgodRewardsRewardDesc::default_instance_ = new E_NickgodRewardsRewardDesc();
  E_NickgodRewards::default_instance_ = new E_NickgodRewards();
  Sheet_NickgodRewards::default_instance_ = new Sheet_NickgodRewards();
  E_NickgodLattice::default_instance_ = new E_NickgodLattice();
  Sheet_NickgodLattice::default_instance_ = new Sheet_NickgodLattice();
  E_NickgodTreasuryItemDesc::default_instance_ = new E_NickgodTreasuryItemDesc();
  E_NickgodTreasury::default_instance_ = new E_NickgodTreasury();
  Sheet_NickgodTreasury::default_instance_ = new Sheet_NickgodTreasury();
  E_NickgodPrivilegeRewardDesc::default_instance_ = new E_NickgodPrivilegeRewardDesc();
  E_NickgodPrivilege::default_instance_ = new E_NickgodPrivilege();
  Sheet_NickgodPrivilege::default_instance_ = new Sheet_NickgodPrivilege();
  E_NickgodSaleItemDesc::default_instance_ = new E_NickgodSaleItemDesc();
  E_NickgodSale::default_instance_ = new E_NickgodSale();
  Sheet_NickgodSale::default_instance_ = new Sheet_NickgodSale();
  E_NickgodChargeupRewardDesc::default_instance_ = new E_NickgodChargeupRewardDesc();
  E_NickgodChargeup::default_instance_ = new E_NickgodChargeup();
  Sheet_NickgodChargeup::default_instance_ = new Sheet_NickgodChargeup();
  E_NickgodConstant::default_instance_->InitAsDefaultInstance();
  Sheet_NickgodConstant::default_instance_->InitAsDefaultInstance();
  E_NickgodName::default_instance_->InitAsDefaultInstance();
  Sheet_NickgodName::default_instance_->InitAsDefaultInstance();
  E_NickgodStageMosDesc::default_instance_->InitAsDefaultInstance();
  E_NickgodStageBossDesc::default_instance_->InitAsDefaultInstance();
  E_NickgodStage::default_instance_->InitAsDefaultInstance();
  Sheet_NickgodStage::default_instance_->InitAsDefaultInstance();
  E_NickgodRewardsRewardDesc::default_instance_->InitAsDefaultInstance();
  E_NickgodRewards::default_instance_->InitAsDefaultInstance();
  Sheet_NickgodRewards::default_instance_->InitAsDefaultInstance();
  E_NickgodLattice::default_instance_->InitAsDefaultInstance();
  Sheet_NickgodLattice::default_instance_->InitAsDefaultInstance();
  E_NickgodTreasuryItemDesc::default_instance_->InitAsDefaultInstance();
  E_NickgodTreasury::default_instance_->InitAsDefaultInstance();
  Sheet_NickgodTreasury::default_instance_->InitAsDefaultInstance();
  E_NickgodPrivilegeRewardDesc::default_instance_->InitAsDefaultInstance();
  E_NickgodPrivilege::default_instance_->InitAsDefaultInstance();
  Sheet_NickgodPrivilege::default_instance_->InitAsDefaultInstance();
  E_NickgodSaleItemDesc::default_instance_->InitAsDefaultInstance();
  E_NickgodSale::default_instance_->InitAsDefaultInstance();
  Sheet_NickgodSale::default_instance_->InitAsDefaultInstance();
  E_NickgodChargeupRewardDesc::default_instance_->InitAsDefaultInstance();
  E_NickgodChargeup::default_instance_->InitAsDefaultInstance();
  Sheet_NickgodChargeup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fNickgod_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fNickgod_2eproto {
  StaticDescriptorInitializer_E_5fNickgod_2eproto() {
    protobuf_AddDesc_E_5fNickgod_2eproto();
  }
} static_descriptor_initializer_E_5fNickgod_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_NickgodConstant::kMIdFieldNumber;
const int E_NickgodConstant::kMSkillFieldNumber;
const int E_NickgodConstant::kMTimeFieldNumber;
const int E_NickgodConstant::kMMaxUserFieldNumber;
const int E_NickgodConstant::kMFloorsMaxFieldNumber;
const int E_NickgodConstant::kMLatticeFieldNumber;
const int E_NickgodConstant::kMRepairItemFieldNumber;
const int E_NickgodConstant::kMRepairNumFieldNumber;
const int E_NickgodConstant::kMOpenItemFieldNumber;
const int E_NickgodConstant::kMOpenNumFieldNumber;
const int E_NickgodConstant::kMWeekFieldNumber;
const int E_NickgodConstant::kMOpentimeFieldNumber;
const int E_NickgodConstant::kMEndtimeFieldNumber;
const int E_NickgodConstant::kMLogMaxFieldNumber;
const int E_NickgodConstant::kMReadyMapFieldNumber;
const int E_NickgodConstant::kMReadyPiontFieldNumber;
const int E_NickgodConstant::kMActIdFieldNumber;
#endif  // !_MSC_VER

E_NickgodConstant::E_NickgodConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodConstant::InitAsDefaultInstance() {
}

E_NickgodConstant::E_NickgodConstant(const E_NickgodConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodConstant::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_skill_ = 0;
  m_time_ = 0;
  m_maxuser_ = 0;
  m_floorsmax_ = 0;
  m_lattice_ = 0;
  m_repairitem_ = 0;
  m_repairnum_ = 0;
  m_openitem_ = 0;
  m_opennum_ = 0;
  m_week_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_opentime_ = 0;
  m_endtime_ = 0;
  m_logmax_ = 0;
  m_readymap_ = 0;
  m_readypiont_ = 0;
  m_actid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodConstant::~E_NickgodConstant() {
  SharedDtor();
}

void E_NickgodConstant::SharedDtor() {
  if (m_week_ != &::google::protobuf::internal::kEmptyString) {
    delete m_week_;
  }
  if (this != default_instance_) {
  }
}

void E_NickgodConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodConstant_descriptor_;
}

const E_NickgodConstant& E_NickgodConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodConstant* E_NickgodConstant::default_instance_ = NULL;

E_NickgodConstant* E_NickgodConstant::New() const {
  return new E_NickgodConstant;
}

void E_NickgodConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_skill_ = 0;
    m_time_ = 0;
    m_maxuser_ = 0;
    m_floorsmax_ = 0;
    m_lattice_ = 0;
    m_repairitem_ = 0;
    m_repairnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_openitem_ = 0;
    m_opennum_ = 0;
    if (has_m_week()) {
      if (m_week_ != &::google::protobuf::internal::kEmptyString) {
        m_week_->clear();
      }
    }
    m_opentime_ = 0;
    m_endtime_ = 0;
    m_logmax_ = 0;
    m_readymap_ = 0;
    m_readypiont_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_actid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_skill;
        break;
      }

      // optional int32 m_skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skill_)));
          set_has_m_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_maxUser;
        break;
      }

      // optional int32 m_maxUser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxuser_)));
          set_has_m_maxuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_floorsMax;
        break;
      }

      // optional int32 m_floorsMax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_floorsMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_floorsmax_)));
          set_has_m_floorsmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lattice;
        break;
      }

      // optional int32 m_lattice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lattice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lattice_)));
          set_has_m_lattice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_repairItem;
        break;
      }

      // optional int32 m_repairItem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_repairItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_repairitem_)));
          set_has_m_repairitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_repairNum;
        break;
      }

      // optional int32 m_repairNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_repairNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_repairnum_)));
          set_has_m_repairnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_openItem;
        break;
      }

      // optional int32 m_openItem = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openitem_)));
          set_has_m_openitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_openNum;
        break;
      }

      // optional int32 m_openNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_opennum_)));
          set_has_m_opennum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_week;
        break;
      }

      // optional string m_week = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_week:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_week()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_week().data(), this->m_week().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_opentime;
        break;
      }

      // optional int32 m_opentime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_opentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_opentime_)));
          set_has_m_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_endtime;
        break;
      }

      // optional int32 m_endtime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_endtime_)));
          set_has_m_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_logMax;
        break;
      }

      // optional int32 m_logMax = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_logMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_logmax_)));
          set_has_m_logmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_readyMap;
        break;
      }

      // optional int32 m_readyMap = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_readyMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_readymap_)));
          set_has_m_readymap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_readyPiont;
        break;
      }

      // optional int32 m_readyPiont = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_readyPiont:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_readypiont_)));
          set_has_m_readypiont();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_actId;
        break;
      }

      // optional int32 m_actId = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_actId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_actid_)));
          set_has_m_actid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_skill = 2;
  if (has_m_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_skill(), output);
  }

  // optional int32 m_time = 3;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_time(), output);
  }

  // optional int32 m_maxUser = 4;
  if (has_m_maxuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_maxuser(), output);
  }

  // optional int32 m_floorsMax = 5;
  if (has_m_floorsmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_floorsmax(), output);
  }

  // optional int32 m_lattice = 6;
  if (has_m_lattice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lattice(), output);
  }

  // optional int32 m_repairItem = 7;
  if (has_m_repairitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_repairitem(), output);
  }

  // optional int32 m_repairNum = 8;
  if (has_m_repairnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_repairnum(), output);
  }

  // optional int32 m_openItem = 9;
  if (has_m_openitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_openitem(), output);
  }

  // optional int32 m_openNum = 10;
  if (has_m_opennum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_opennum(), output);
  }

  // optional string m_week = 11;
  if (has_m_week()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_week().data(), this->m_week().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->m_week(), output);
  }

  // optional int32 m_opentime = 12;
  if (has_m_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_opentime(), output);
  }

  // optional int32 m_endtime = 13;
  if (has_m_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_endtime(), output);
  }

  // optional int32 m_logMax = 14;
  if (has_m_logmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_logmax(), output);
  }

  // optional int32 m_readyMap = 15;
  if (has_m_readymap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_readymap(), output);
  }

  // optional int32 m_readyPiont = 16;
  if (has_m_readypiont()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_readypiont(), output);
  }

  // optional int32 m_actId = 17;
  if (has_m_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_actid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_skill = 2;
  if (has_m_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_skill(), target);
  }

  // optional int32 m_time = 3;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_time(), target);
  }

  // optional int32 m_maxUser = 4;
  if (has_m_maxuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_maxuser(), target);
  }

  // optional int32 m_floorsMax = 5;
  if (has_m_floorsmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_floorsmax(), target);
  }

  // optional int32 m_lattice = 6;
  if (has_m_lattice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_lattice(), target);
  }

  // optional int32 m_repairItem = 7;
  if (has_m_repairitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_repairitem(), target);
  }

  // optional int32 m_repairNum = 8;
  if (has_m_repairnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_repairnum(), target);
  }

  // optional int32 m_openItem = 9;
  if (has_m_openitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_openitem(), target);
  }

  // optional int32 m_openNum = 10;
  if (has_m_opennum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_opennum(), target);
  }

  // optional string m_week = 11;
  if (has_m_week()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_week().data(), this->m_week().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->m_week(), target);
  }

  // optional int32 m_opentime = 12;
  if (has_m_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_opentime(), target);
  }

  // optional int32 m_endtime = 13;
  if (has_m_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_endtime(), target);
  }

  // optional int32 m_logMax = 14;
  if (has_m_logmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_logmax(), target);
  }

  // optional int32 m_readyMap = 15;
  if (has_m_readymap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_readymap(), target);
  }

  // optional int32 m_readyPiont = 16;
  if (has_m_readypiont()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_readypiont(), target);
  }

  // optional int32 m_actId = 17;
  if (has_m_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_actid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_skill = 2;
    if (has_m_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skill());
    }

    // optional int32 m_time = 3;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

    // optional int32 m_maxUser = 4;
    if (has_m_maxuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxuser());
    }

    // optional int32 m_floorsMax = 5;
    if (has_m_floorsmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_floorsmax());
    }

    // optional int32 m_lattice = 6;
    if (has_m_lattice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lattice());
    }

    // optional int32 m_repairItem = 7;
    if (has_m_repairitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_repairitem());
    }

    // optional int32 m_repairNum = 8;
    if (has_m_repairnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_repairnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_openItem = 9;
    if (has_m_openitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openitem());
    }

    // optional int32 m_openNum = 10;
    if (has_m_opennum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_opennum());
    }

    // optional string m_week = 11;
    if (has_m_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_week());
    }

    // optional int32 m_opentime = 12;
    if (has_m_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_opentime());
    }

    // optional int32 m_endtime = 13;
    if (has_m_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_endtime());
    }

    // optional int32 m_logMax = 14;
    if (has_m_logmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_logmax());
    }

    // optional int32 m_readyMap = 15;
    if (has_m_readymap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_readymap());
    }

    // optional int32 m_readyPiont = 16;
    if (has_m_readypiont()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_readypiont());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_actId = 17;
    if (has_m_actid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_actid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodConstant::MergeFrom(const E_NickgodConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_skill()) {
      set_m_skill(from.m_skill());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
    if (from.has_m_maxuser()) {
      set_m_maxuser(from.m_maxuser());
    }
    if (from.has_m_floorsmax()) {
      set_m_floorsmax(from.m_floorsmax());
    }
    if (from.has_m_lattice()) {
      set_m_lattice(from.m_lattice());
    }
    if (from.has_m_repairitem()) {
      set_m_repairitem(from.m_repairitem());
    }
    if (from.has_m_repairnum()) {
      set_m_repairnum(from.m_repairnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_openitem()) {
      set_m_openitem(from.m_openitem());
    }
    if (from.has_m_opennum()) {
      set_m_opennum(from.m_opennum());
    }
    if (from.has_m_week()) {
      set_m_week(from.m_week());
    }
    if (from.has_m_opentime()) {
      set_m_opentime(from.m_opentime());
    }
    if (from.has_m_endtime()) {
      set_m_endtime(from.m_endtime());
    }
    if (from.has_m_logmax()) {
      set_m_logmax(from.m_logmax());
    }
    if (from.has_m_readymap()) {
      set_m_readymap(from.m_readymap());
    }
    if (from.has_m_readypiont()) {
      set_m_readypiont(from.m_readypiont());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_actid()) {
      set_m_actid(from.m_actid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodConstant::CopyFrom(const E_NickgodConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodConstant::IsInitialized() const {

  return true;
}

void E_NickgodConstant::Swap(E_NickgodConstant* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_skill_, other->m_skill_);
    std::swap(m_time_, other->m_time_);
    std::swap(m_maxuser_, other->m_maxuser_);
    std::swap(m_floorsmax_, other->m_floorsmax_);
    std::swap(m_lattice_, other->m_lattice_);
    std::swap(m_repairitem_, other->m_repairitem_);
    std::swap(m_repairnum_, other->m_repairnum_);
    std::swap(m_openitem_, other->m_openitem_);
    std::swap(m_opennum_, other->m_opennum_);
    std::swap(m_week_, other->m_week_);
    std::swap(m_opentime_, other->m_opentime_);
    std::swap(m_endtime_, other->m_endtime_);
    std::swap(m_logmax_, other->m_logmax_);
    std::swap(m_readymap_, other->m_readymap_);
    std::swap(m_readypiont_, other->m_readypiont_);
    std::swap(m_actid_, other->m_actid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodConstant_descriptor_;
  metadata.reflection = E_NickgodConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_NickgodConstant::kENickgodConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_NickgodConstant::Sheet_NickgodConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_NickgodConstant::InitAsDefaultInstance() {
}

Sheet_NickgodConstant::Sheet_NickgodConstant(const Sheet_NickgodConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_NickgodConstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_NickgodConstant::~Sheet_NickgodConstant() {
  SharedDtor();
}

void Sheet_NickgodConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_NickgodConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_NickgodConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_NickgodConstant_descriptor_;
}

const Sheet_NickgodConstant& Sheet_NickgodConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

Sheet_NickgodConstant* Sheet_NickgodConstant::default_instance_ = NULL;

Sheet_NickgodConstant* Sheet_NickgodConstant::New() const {
  return new Sheet_NickgodConstant;
}

void Sheet_NickgodConstant::Clear() {
  e_nickgodconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_NickgodConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_NickgodConstant E_NickgodConstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_NickgodConstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_nickgodconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_NickgodConstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_NickgodConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_NickgodConstant E_NickgodConstant_List = 1;
  for (int i = 0; i < this->e_nickgodconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_nickgodconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_NickgodConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_NickgodConstant E_NickgodConstant_List = 1;
  for (int i = 0; i < this->e_nickgodconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_nickgodconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_NickgodConstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_NickgodConstant E_NickgodConstant_List = 1;
  total_size += 1 * this->e_nickgodconstant_list_size();
  for (int i = 0; i < this->e_nickgodconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_nickgodconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_NickgodConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_NickgodConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_NickgodConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_NickgodConstant::MergeFrom(const Sheet_NickgodConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_nickgodconstant_list_.MergeFrom(from.e_nickgodconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_NickgodConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_NickgodConstant::CopyFrom(const Sheet_NickgodConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_NickgodConstant::IsInitialized() const {

  return true;
}

void Sheet_NickgodConstant::Swap(Sheet_NickgodConstant* other) {
  if (other != this) {
    e_nickgodconstant_list_.Swap(&other->e_nickgodconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_NickgodConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_NickgodConstant_descriptor_;
  metadata.reflection = Sheet_NickgodConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodName::kMIdFieldNumber;
const int E_NickgodName::kMNameFieldNumber;
#endif  // !_MSC_VER

E_NickgodName::E_NickgodName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodName::InitAsDefaultInstance() {
}

E_NickgodName::E_NickgodName(const E_NickgodName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodName::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodName::~E_NickgodName() {
  SharedDtor();
}

void E_NickgodName::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_NickgodName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodName_descriptor_;
}

const E_NickgodName& E_NickgodName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodName* E_NickgodName::default_instance_ = NULL;

E_NickgodName* E_NickgodName::New() const {
  return new E_NickgodName;
}

void E_NickgodName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodName::MergeFrom(const E_NickgodName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodName::CopyFrom(const E_NickgodName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodName::IsInitialized() const {

  return true;
}

void E_NickgodName::Swap(E_NickgodName* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodName_descriptor_;
  metadata.reflection = E_NickgodName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_NickgodName::kENickgodNameListFieldNumber;
#endif  // !_MSC_VER

Sheet_NickgodName::Sheet_NickgodName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_NickgodName::InitAsDefaultInstance() {
}

Sheet_NickgodName::Sheet_NickgodName(const Sheet_NickgodName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_NickgodName::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_NickgodName::~Sheet_NickgodName() {
  SharedDtor();
}

void Sheet_NickgodName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_NickgodName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_NickgodName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_NickgodName_descriptor_;
}

const Sheet_NickgodName& Sheet_NickgodName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

Sheet_NickgodName* Sheet_NickgodName::default_instance_ = NULL;

Sheet_NickgodName* Sheet_NickgodName::New() const {
  return new Sheet_NickgodName;
}

void Sheet_NickgodName::Clear() {
  e_nickgodname_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_NickgodName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_NickgodName E_NickgodName_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_NickgodName_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_nickgodname_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_NickgodName_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_NickgodName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_NickgodName E_NickgodName_List = 1;
  for (int i = 0; i < this->e_nickgodname_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_nickgodname_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_NickgodName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_NickgodName E_NickgodName_List = 1;
  for (int i = 0; i < this->e_nickgodname_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_nickgodname_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_NickgodName::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_NickgodName E_NickgodName_List = 1;
  total_size += 1 * this->e_nickgodname_list_size();
  for (int i = 0; i < this->e_nickgodname_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_nickgodname_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_NickgodName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_NickgodName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_NickgodName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_NickgodName::MergeFrom(const Sheet_NickgodName& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_nickgodname_list_.MergeFrom(from.e_nickgodname_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_NickgodName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_NickgodName::CopyFrom(const Sheet_NickgodName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_NickgodName::IsInitialized() const {

  return true;
}

void Sheet_NickgodName::Swap(Sheet_NickgodName* other) {
  if (other != this) {
    e_nickgodname_list_.Swap(&other->e_nickgodname_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_NickgodName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_NickgodName_descriptor_;
  metadata.reflection = Sheet_NickgodName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodStageMosDesc::kMIdFieldNumber;
const int E_NickgodStageMosDesc::kMPointFieldNumber;
#endif  // !_MSC_VER

E_NickgodStageMosDesc::E_NickgodStageMosDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodStageMosDesc::InitAsDefaultInstance() {
}

E_NickgodStageMosDesc::E_NickgodStageMosDesc(const E_NickgodStageMosDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodStageMosDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodStageMosDesc::~E_NickgodStageMosDesc() {
  SharedDtor();
}

void E_NickgodStageMosDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_NickgodStageMosDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodStageMosDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodStageMosDesc_descriptor_;
}

const E_NickgodStageMosDesc& E_NickgodStageMosDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodStageMosDesc* E_NickgodStageMosDesc::default_instance_ = NULL;

E_NickgodStageMosDesc* E_NickgodStageMosDesc::New() const {
  return new E_NickgodStageMosDesc;
}

void E_NickgodStageMosDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodStageMosDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_point;
        break;
      }

      // optional int32 m_point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_point_)));
          set_has_m_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodStageMosDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_point = 2;
  if (has_m_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodStageMosDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_point = 2;
  if (has_m_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodStageMosDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_point = 2;
    if (has_m_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodStageMosDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodStageMosDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodStageMosDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodStageMosDesc::MergeFrom(const E_NickgodStageMosDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_point()) {
      set_m_point(from.m_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodStageMosDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodStageMosDesc::CopyFrom(const E_NickgodStageMosDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodStageMosDesc::IsInitialized() const {

  return true;
}

void E_NickgodStageMosDesc::Swap(E_NickgodStageMosDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_point_, other->m_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodStageMosDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodStageMosDesc_descriptor_;
  metadata.reflection = E_NickgodStageMosDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodStageBossDesc::kMDropPreviewFieldNumber;
const int E_NickgodStageBossDesc::kMIdFieldNumber;
const int E_NickgodStageBossDesc::kMPointFieldNumber;
#endif  // !_MSC_VER

E_NickgodStageBossDesc::E_NickgodStageBossDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodStageBossDesc::InitAsDefaultInstance() {
}

E_NickgodStageBossDesc::E_NickgodStageBossDesc(const E_NickgodStageBossDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodStageBossDesc::SharedCtor() {
  _cached_size_ = 0;
  m_droppreview_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_id_ = 0;
  m_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodStageBossDesc::~E_NickgodStageBossDesc() {
  SharedDtor();
}

void E_NickgodStageBossDesc::SharedDtor() {
  if (m_droppreview_ != &::google::protobuf::internal::kEmptyString) {
    delete m_droppreview_;
  }
  if (this != default_instance_) {
  }
}

void E_NickgodStageBossDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodStageBossDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodStageBossDesc_descriptor_;
}

const E_NickgodStageBossDesc& E_NickgodStageBossDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodStageBossDesc* E_NickgodStageBossDesc::default_instance_ = NULL;

E_NickgodStageBossDesc* E_NickgodStageBossDesc::New() const {
  return new E_NickgodStageBossDesc;
}

void E_NickgodStageBossDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_droppreview()) {
      if (m_droppreview_ != &::google::protobuf::internal::kEmptyString) {
        m_droppreview_->clear();
      }
    }
    m_id_ = 0;
    m_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodStageBossDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_dropPreview = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_droppreview()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_droppreview().data(), this->m_droppreview().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_point;
        break;
      }

      // optional int32 m_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_point_)));
          set_has_m_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodStageBossDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_dropPreview = 1;
  if (has_m_droppreview()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_droppreview().data(), this->m_droppreview().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_droppreview(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  // optional int32 m_point = 3;
  if (has_m_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodStageBossDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_dropPreview = 1;
  if (has_m_droppreview()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_droppreview().data(), this->m_droppreview().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_droppreview(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  // optional int32 m_point = 3;
  if (has_m_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodStageBossDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_dropPreview = 1;
    if (has_m_droppreview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_droppreview());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_point = 3;
    if (has_m_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodStageBossDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodStageBossDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodStageBossDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodStageBossDesc::MergeFrom(const E_NickgodStageBossDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_droppreview()) {
      set_m_droppreview(from.m_droppreview());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_point()) {
      set_m_point(from.m_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodStageBossDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodStageBossDesc::CopyFrom(const E_NickgodStageBossDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodStageBossDesc::IsInitialized() const {

  return true;
}

void E_NickgodStageBossDesc::Swap(E_NickgodStageBossDesc* other) {
  if (other != this) {
    std::swap(m_droppreview_, other->m_droppreview_);
    std::swap(m_id_, other->m_id_);
    std::swap(m_point_, other->m_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodStageBossDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodStageBossDesc_descriptor_;
  metadata.reflection = E_NickgodStageBossDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodStage::kMIdFieldNumber;
const int E_NickgodStage::kMMapFieldNumber;
const int E_NickgodStage::kMDurationFieldNumber;
const int E_NickgodStage::kMMosDieRefreshFieldNumber;
const int E_NickgodStage::kMBossFirstRefreshFieldNumber;
const int E_NickgodStage::kMBossDieRefreshFieldNumber;
const int E_NickgodStage::kMPlayerDieDropFieldNumber;
const int E_NickgodStage::kMSceneIntegralTimeFieldNumber;
const int E_NickgodStage::kMSceneIntegralFieldNumber;
const int E_NickgodStage::kMKillmosIntegralFieldNumber;
const int E_NickgodStage::kMKillbossIntegralFieldNumber;
const int E_NickgodStage::kMKillplayerIntegralFieldNumber;
const int E_NickgodStage::kMAssistplayerIntegralFieldNumber;
const int E_NickgodStage::kMMosFieldNumber;
const int E_NickgodStage::kMBossFieldNumber;
const int E_NickgodStage::kMRevivalPointFieldNumber;
#endif  // !_MSC_VER

E_NickgodStage::E_NickgodStage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodStage::InitAsDefaultInstance() {
}

E_NickgodStage::E_NickgodStage(const E_NickgodStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodStage::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_map_ = 0;
  m_duration_ = 0;
  m_mosdierefresh_ = 0;
  m_bossfirstrefresh_ = 0;
  m_bossdierefresh_ = 0;
  m_playerdiedrop_ = 0;
  m_sceneintegraltime_ = 0;
  m_sceneintegral_ = 0;
  m_killmosintegral_ = 0;
  m_killbossintegral_ = 0;
  m_killplayerintegral_ = 0;
  m_assistplayerintegral_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodStage::~E_NickgodStage() {
  SharedDtor();
}

void E_NickgodStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_NickgodStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodStage_descriptor_;
}

const E_NickgodStage& E_NickgodStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodStage* E_NickgodStage::default_instance_ = NULL;

E_NickgodStage* E_NickgodStage::New() const {
  return new E_NickgodStage;
}

void E_NickgodStage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_map_ = 0;
    m_duration_ = 0;
    m_mosdierefresh_ = 0;
    m_bossfirstrefresh_ = 0;
    m_bossdierefresh_ = 0;
    m_playerdiedrop_ = 0;
    m_sceneintegraltime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_sceneintegral_ = 0;
    m_killmosintegral_ = 0;
    m_killbossintegral_ = 0;
    m_killplayerintegral_ = 0;
    m_assistplayerintegral_ = 0;
  }
  m_mos_.Clear();
  m_boss_.Clear();
  m_revivalpoint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_map;
        break;
      }

      // optional int32 m_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_map_)));
          set_has_m_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_duration;
        break;
      }

      // optional int32 m_duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_duration_)));
          set_has_m_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_mosDieRefresh;
        break;
      }

      // optional int32 m_mosDieRefresh = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mosDieRefresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mosdierefresh_)));
          set_has_m_mosdierefresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_bossFirstRefresh;
        break;
      }

      // optional int32 m_bossFirstRefresh = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bossFirstRefresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bossfirstrefresh_)));
          set_has_m_bossfirstrefresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_bossDieRefresh;
        break;
      }

      // optional int32 m_bossDieRefresh = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bossDieRefresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bossdierefresh_)));
          set_has_m_bossdierefresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_playerDieDrop;
        break;
      }

      // optional int32 m_playerDieDrop = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerDieDrop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerdiedrop_)));
          set_has_m_playerdiedrop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_sceneIntegralTime;
        break;
      }

      // optional int32 m_sceneIntegralTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sceneIntegralTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sceneintegraltime_)));
          set_has_m_sceneintegraltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_sceneIntegral;
        break;
      }

      // optional int32 m_sceneIntegral = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sceneIntegral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sceneintegral_)));
          set_has_m_sceneintegral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_killmosIntegral;
        break;
      }

      // optional int32 m_killmosIntegral = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killmosIntegral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killmosintegral_)));
          set_has_m_killmosintegral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_killbossIntegral;
        break;
      }

      // optional int32 m_killbossIntegral = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killbossIntegral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killbossintegral_)));
          set_has_m_killbossintegral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_killplayerIntegral;
        break;
      }

      // optional int32 m_killplayerIntegral = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killplayerIntegral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killplayerintegral_)));
          set_has_m_killplayerintegral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_assistplayerIntegral;
        break;
      }

      // optional int32 m_assistplayerIntegral = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_assistplayerIntegral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_assistplayerintegral_)));
          set_has_m_assistplayerintegral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_mos;
        break;
      }

      // repeated .proto_ff.E_NickgodStageMosDesc m_mos = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_mos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_mos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_mos;
        if (input->ExpectTag(122)) goto parse_m_boss;
        break;
      }

      // repeated .proto_ff.E_NickgodStageBossDesc m_boss = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_boss;
        if (input->ExpectTag(128)) goto parse_m_revivalPoint;
        break;
      }

      // repeated int32 m_revivalPoint = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_revivalPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_m_revivalpoint())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_revivalpoint())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_revivalPoint;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_map = 2;
  if (has_m_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_map(), output);
  }

  // optional int32 m_duration = 3;
  if (has_m_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_duration(), output);
  }

  // optional int32 m_mosDieRefresh = 4;
  if (has_m_mosdierefresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_mosdierefresh(), output);
  }

  // optional int32 m_bossFirstRefresh = 5;
  if (has_m_bossfirstrefresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_bossfirstrefresh(), output);
  }

  // optional int32 m_bossDieRefresh = 6;
  if (has_m_bossdierefresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_bossdierefresh(), output);
  }

  // optional int32 m_playerDieDrop = 7;
  if (has_m_playerdiedrop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_playerdiedrop(), output);
  }

  // optional int32 m_sceneIntegralTime = 8;
  if (has_m_sceneintegraltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_sceneintegraltime(), output);
  }

  // optional int32 m_sceneIntegral = 9;
  if (has_m_sceneintegral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_sceneintegral(), output);
  }

  // optional int32 m_killmosIntegral = 10;
  if (has_m_killmosintegral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_killmosintegral(), output);
  }

  // optional int32 m_killbossIntegral = 11;
  if (has_m_killbossintegral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_killbossintegral(), output);
  }

  // optional int32 m_killplayerIntegral = 12;
  if (has_m_killplayerintegral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_killplayerintegral(), output);
  }

  // optional int32 m_assistplayerIntegral = 13;
  if (has_m_assistplayerintegral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_assistplayerintegral(), output);
  }

  // repeated .proto_ff.E_NickgodStageMosDesc m_mos = 14;
  for (int i = 0; i < this->m_mos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->m_mos(i), output);
  }

  // repeated .proto_ff.E_NickgodStageBossDesc m_boss = 15;
  for (int i = 0; i < this->m_boss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->m_boss(i), output);
  }

  // repeated int32 m_revivalPoint = 16;
  for (int i = 0; i < this->m_revivalpoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->m_revivalpoint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_map = 2;
  if (has_m_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_map(), target);
  }

  // optional int32 m_duration = 3;
  if (has_m_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_duration(), target);
  }

  // optional int32 m_mosDieRefresh = 4;
  if (has_m_mosdierefresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_mosdierefresh(), target);
  }

  // optional int32 m_bossFirstRefresh = 5;
  if (has_m_bossfirstrefresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_bossfirstrefresh(), target);
  }

  // optional int32 m_bossDieRefresh = 6;
  if (has_m_bossdierefresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_bossdierefresh(), target);
  }

  // optional int32 m_playerDieDrop = 7;
  if (has_m_playerdiedrop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_playerdiedrop(), target);
  }

  // optional int32 m_sceneIntegralTime = 8;
  if (has_m_sceneintegraltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_sceneintegraltime(), target);
  }

  // optional int32 m_sceneIntegral = 9;
  if (has_m_sceneintegral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_sceneintegral(), target);
  }

  // optional int32 m_killmosIntegral = 10;
  if (has_m_killmosintegral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_killmosintegral(), target);
  }

  // optional int32 m_killbossIntegral = 11;
  if (has_m_killbossintegral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_killbossintegral(), target);
  }

  // optional int32 m_killplayerIntegral = 12;
  if (has_m_killplayerintegral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_killplayerintegral(), target);
  }

  // optional int32 m_assistplayerIntegral = 13;
  if (has_m_assistplayerintegral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_assistplayerintegral(), target);
  }

  // repeated .proto_ff.E_NickgodStageMosDesc m_mos = 14;
  for (int i = 0; i < this->m_mos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->m_mos(i), target);
  }

  // repeated .proto_ff.E_NickgodStageBossDesc m_boss = 15;
  for (int i = 0; i < this->m_boss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->m_boss(i), target);
  }

  // repeated int32 m_revivalPoint = 16;
  for (int i = 0; i < this->m_revivalpoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->m_revivalpoint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_map = 2;
    if (has_m_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_map());
    }

    // optional int32 m_duration = 3;
    if (has_m_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_duration());
    }

    // optional int32 m_mosDieRefresh = 4;
    if (has_m_mosdierefresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mosdierefresh());
    }

    // optional int32 m_bossFirstRefresh = 5;
    if (has_m_bossfirstrefresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bossfirstrefresh());
    }

    // optional int32 m_bossDieRefresh = 6;
    if (has_m_bossdierefresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bossdierefresh());
    }

    // optional int32 m_playerDieDrop = 7;
    if (has_m_playerdiedrop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerdiedrop());
    }

    // optional int32 m_sceneIntegralTime = 8;
    if (has_m_sceneintegraltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sceneintegraltime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_sceneIntegral = 9;
    if (has_m_sceneintegral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sceneintegral());
    }

    // optional int32 m_killmosIntegral = 10;
    if (has_m_killmosintegral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killmosintegral());
    }

    // optional int32 m_killbossIntegral = 11;
    if (has_m_killbossintegral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killbossintegral());
    }

    // optional int32 m_killplayerIntegral = 12;
    if (has_m_killplayerintegral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killplayerintegral());
    }

    // optional int32 m_assistplayerIntegral = 13;
    if (has_m_assistplayerintegral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_assistplayerintegral());
    }

  }
  // repeated .proto_ff.E_NickgodStageMosDesc m_mos = 14;
  total_size += 1 * this->m_mos_size();
  for (int i = 0; i < this->m_mos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_mos(i));
  }

  // repeated .proto_ff.E_NickgodStageBossDesc m_boss = 15;
  total_size += 1 * this->m_boss_size();
  for (int i = 0; i < this->m_boss_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_boss(i));
  }

  // repeated int32 m_revivalPoint = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_revivalpoint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_revivalpoint(i));
    }
    total_size += 2 * this->m_revivalpoint_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodStage::MergeFrom(const E_NickgodStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_mos_.MergeFrom(from.m_mos_);
  m_boss_.MergeFrom(from.m_boss_);
  m_revivalpoint_.MergeFrom(from.m_revivalpoint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_map()) {
      set_m_map(from.m_map());
    }
    if (from.has_m_duration()) {
      set_m_duration(from.m_duration());
    }
    if (from.has_m_mosdierefresh()) {
      set_m_mosdierefresh(from.m_mosdierefresh());
    }
    if (from.has_m_bossfirstrefresh()) {
      set_m_bossfirstrefresh(from.m_bossfirstrefresh());
    }
    if (from.has_m_bossdierefresh()) {
      set_m_bossdierefresh(from.m_bossdierefresh());
    }
    if (from.has_m_playerdiedrop()) {
      set_m_playerdiedrop(from.m_playerdiedrop());
    }
    if (from.has_m_sceneintegraltime()) {
      set_m_sceneintegraltime(from.m_sceneintegraltime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_sceneintegral()) {
      set_m_sceneintegral(from.m_sceneintegral());
    }
    if (from.has_m_killmosintegral()) {
      set_m_killmosintegral(from.m_killmosintegral());
    }
    if (from.has_m_killbossintegral()) {
      set_m_killbossintegral(from.m_killbossintegral());
    }
    if (from.has_m_killplayerintegral()) {
      set_m_killplayerintegral(from.m_killplayerintegral());
    }
    if (from.has_m_assistplayerintegral()) {
      set_m_assistplayerintegral(from.m_assistplayerintegral());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodStage::CopyFrom(const E_NickgodStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodStage::IsInitialized() const {

  return true;
}

void E_NickgodStage::Swap(E_NickgodStage* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_map_, other->m_map_);
    std::swap(m_duration_, other->m_duration_);
    std::swap(m_mosdierefresh_, other->m_mosdierefresh_);
    std::swap(m_bossfirstrefresh_, other->m_bossfirstrefresh_);
    std::swap(m_bossdierefresh_, other->m_bossdierefresh_);
    std::swap(m_playerdiedrop_, other->m_playerdiedrop_);
    std::swap(m_sceneintegraltime_, other->m_sceneintegraltime_);
    std::swap(m_sceneintegral_, other->m_sceneintegral_);
    std::swap(m_killmosintegral_, other->m_killmosintegral_);
    std::swap(m_killbossintegral_, other->m_killbossintegral_);
    std::swap(m_killplayerintegral_, other->m_killplayerintegral_);
    std::swap(m_assistplayerintegral_, other->m_assistplayerintegral_);
    m_mos_.Swap(&other->m_mos_);
    m_boss_.Swap(&other->m_boss_);
    m_revivalpoint_.Swap(&other->m_revivalpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodStage_descriptor_;
  metadata.reflection = E_NickgodStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_NickgodStage::kENickgodStageListFieldNumber;
#endif  // !_MSC_VER

Sheet_NickgodStage::Sheet_NickgodStage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_NickgodStage::InitAsDefaultInstance() {
}

Sheet_NickgodStage::Sheet_NickgodStage(const Sheet_NickgodStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_NickgodStage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_NickgodStage::~Sheet_NickgodStage() {
  SharedDtor();
}

void Sheet_NickgodStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_NickgodStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_NickgodStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_NickgodStage_descriptor_;
}

const Sheet_NickgodStage& Sheet_NickgodStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

Sheet_NickgodStage* Sheet_NickgodStage::default_instance_ = NULL;

Sheet_NickgodStage* Sheet_NickgodStage::New() const {
  return new Sheet_NickgodStage;
}

void Sheet_NickgodStage::Clear() {
  e_nickgodstage_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_NickgodStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_NickgodStage E_NickgodStage_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_NickgodStage_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_nickgodstage_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_NickgodStage_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_NickgodStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_NickgodStage E_NickgodStage_List = 1;
  for (int i = 0; i < this->e_nickgodstage_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_nickgodstage_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_NickgodStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_NickgodStage E_NickgodStage_List = 1;
  for (int i = 0; i < this->e_nickgodstage_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_nickgodstage_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_NickgodStage::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_NickgodStage E_NickgodStage_List = 1;
  total_size += 1 * this->e_nickgodstage_list_size();
  for (int i = 0; i < this->e_nickgodstage_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_nickgodstage_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_NickgodStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_NickgodStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_NickgodStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_NickgodStage::MergeFrom(const Sheet_NickgodStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_nickgodstage_list_.MergeFrom(from.e_nickgodstage_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_NickgodStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_NickgodStage::CopyFrom(const Sheet_NickgodStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_NickgodStage::IsInitialized() const {

  return true;
}

void Sheet_NickgodStage::Swap(Sheet_NickgodStage* other) {
  if (other != this) {
    e_nickgodstage_list_.Swap(&other->e_nickgodstage_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_NickgodStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_NickgodStage_descriptor_;
  metadata.reflection = Sheet_NickgodStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodRewardsRewardDesc::kMNumFieldNumber;
const int E_NickgodRewardsRewardDesc::kMIDFieldNumber;
#endif  // !_MSC_VER

E_NickgodRewardsRewardDesc::E_NickgodRewardsRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodRewardsRewardDesc::InitAsDefaultInstance() {
}

E_NickgodRewardsRewardDesc::E_NickgodRewardsRewardDesc(const E_NickgodRewardsRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodRewardsRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodRewardsRewardDesc::~E_NickgodRewardsRewardDesc() {
  SharedDtor();
}

void E_NickgodRewardsRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_NickgodRewardsRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodRewardsRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodRewardsRewardDesc_descriptor_;
}

const E_NickgodRewardsRewardDesc& E_NickgodRewardsRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodRewardsRewardDesc* E_NickgodRewardsRewardDesc::default_instance_ = NULL;

E_NickgodRewardsRewardDesc* E_NickgodRewardsRewardDesc::New() const {
  return new E_NickgodRewardsRewardDesc;
}

void E_NickgodRewardsRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodRewardsRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_ID;
        break;
      }

      // optional int64 m_ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodRewardsRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_Num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int64 m_ID = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodRewardsRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_Num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int64 m_ID = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodRewardsRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_Num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int64 m_ID = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodRewardsRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodRewardsRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodRewardsRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodRewardsRewardDesc::MergeFrom(const E_NickgodRewardsRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodRewardsRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodRewardsRewardDesc::CopyFrom(const E_NickgodRewardsRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodRewardsRewardDesc::IsInitialized() const {

  return true;
}

void E_NickgodRewardsRewardDesc::Swap(E_NickgodRewardsRewardDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodRewardsRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodRewardsRewardDesc_descriptor_;
  metadata.reflection = E_NickgodRewardsRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodRewards::kMIdFieldNumber;
const int E_NickgodRewards::kMRankingMinFieldNumber;
const int E_NickgodRewards::kMRankingMaxFieldNumber;
const int E_NickgodRewards::kMScoreFieldNumber;
const int E_NickgodRewards::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_NickgodRewards::E_NickgodRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodRewards::InitAsDefaultInstance() {
}

E_NickgodRewards::E_NickgodRewards(const E_NickgodRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodRewards::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_rankingmin_ = 0;
  m_rankingmax_ = 0;
  m_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodRewards::~E_NickgodRewards() {
  SharedDtor();
}

void E_NickgodRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_NickgodRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodRewards_descriptor_;
}

const E_NickgodRewards& E_NickgodRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodRewards* E_NickgodRewards::default_instance_ = NULL;

E_NickgodRewards* E_NickgodRewards::New() const {
  return new E_NickgodRewards;
}

void E_NickgodRewards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_rankingmin_ = 0;
    m_rankingmax_ = 0;
    m_score_ = 0;
  }
  m_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_rankingMin;
        break;
      }

      // optional int32 m_rankingMin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rankingMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rankingmin_)));
          set_has_m_rankingmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rankingMax;
        break;
      }

      // optional int32 m_rankingMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rankingMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rankingmax_)));
          set_has_m_rankingmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_score;
        break;
      }

      // optional int32 m_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_score_)));
          set_has_m_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_reward;
        break;
      }

      // repeated .proto_ff.E_NickgodRewardsRewardDesc m_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_rankingMin = 2;
  if (has_m_rankingmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rankingmin(), output);
  }

  // optional int32 m_rankingMax = 3;
  if (has_m_rankingmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rankingmax(), output);
  }

  // optional int32 m_score = 4;
  if (has_m_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_score(), output);
  }

  // repeated .proto_ff.E_NickgodRewardsRewardDesc m_reward = 5;
  for (int i = 0; i < this->m_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_rankingMin = 2;
  if (has_m_rankingmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rankingmin(), target);
  }

  // optional int32 m_rankingMax = 3;
  if (has_m_rankingmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rankingmax(), target);
  }

  // optional int32 m_score = 4;
  if (has_m_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_score(), target);
  }

  // repeated .proto_ff.E_NickgodRewardsRewardDesc m_reward = 5;
  for (int i = 0; i < this->m_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodRewards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_rankingMin = 2;
    if (has_m_rankingmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rankingmin());
    }

    // optional int32 m_rankingMax = 3;
    if (has_m_rankingmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rankingmax());
    }

    // optional int32 m_score = 4;
    if (has_m_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_score());
    }

  }
  // repeated .proto_ff.E_NickgodRewardsRewardDesc m_reward = 5;
  total_size += 1 * this->m_reward_size();
  for (int i = 0; i < this->m_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodRewards::MergeFrom(const E_NickgodRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_reward_.MergeFrom(from.m_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_rankingmin()) {
      set_m_rankingmin(from.m_rankingmin());
    }
    if (from.has_m_rankingmax()) {
      set_m_rankingmax(from.m_rankingmax());
    }
    if (from.has_m_score()) {
      set_m_score(from.m_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodRewards::CopyFrom(const E_NickgodRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodRewards::IsInitialized() const {

  return true;
}

void E_NickgodRewards::Swap(E_NickgodRewards* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_rankingmin_, other->m_rankingmin_);
    std::swap(m_rankingmax_, other->m_rankingmax_);
    std::swap(m_score_, other->m_score_);
    m_reward_.Swap(&other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodRewards_descriptor_;
  metadata.reflection = E_NickgodRewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_NickgodRewards::kENickgodRewardsListFieldNumber;
#endif  // !_MSC_VER

Sheet_NickgodRewards::Sheet_NickgodRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_NickgodRewards::InitAsDefaultInstance() {
}

Sheet_NickgodRewards::Sheet_NickgodRewards(const Sheet_NickgodRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_NickgodRewards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_NickgodRewards::~Sheet_NickgodRewards() {
  SharedDtor();
}

void Sheet_NickgodRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_NickgodRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_NickgodRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_NickgodRewards_descriptor_;
}

const Sheet_NickgodRewards& Sheet_NickgodRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

Sheet_NickgodRewards* Sheet_NickgodRewards::default_instance_ = NULL;

Sheet_NickgodRewards* Sheet_NickgodRewards::New() const {
  return new Sheet_NickgodRewards;
}

void Sheet_NickgodRewards::Clear() {
  e_nickgodrewards_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_NickgodRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_NickgodRewards E_NickgodRewards_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_NickgodRewards_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_nickgodrewards_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_NickgodRewards_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_NickgodRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_NickgodRewards E_NickgodRewards_List = 1;
  for (int i = 0; i < this->e_nickgodrewards_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_nickgodrewards_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_NickgodRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_NickgodRewards E_NickgodRewards_List = 1;
  for (int i = 0; i < this->e_nickgodrewards_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_nickgodrewards_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_NickgodRewards::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_NickgodRewards E_NickgodRewards_List = 1;
  total_size += 1 * this->e_nickgodrewards_list_size();
  for (int i = 0; i < this->e_nickgodrewards_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_nickgodrewards_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_NickgodRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_NickgodRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_NickgodRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_NickgodRewards::MergeFrom(const Sheet_NickgodRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_nickgodrewards_list_.MergeFrom(from.e_nickgodrewards_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_NickgodRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_NickgodRewards::CopyFrom(const Sheet_NickgodRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_NickgodRewards::IsInitialized() const {

  return true;
}

void Sheet_NickgodRewards::Swap(Sheet_NickgodRewards* other) {
  if (other != this) {
    e_nickgodrewards_list_.Swap(&other->e_nickgodrewards_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_NickgodRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_NickgodRewards_descriptor_;
  metadata.reflection = Sheet_NickgodRewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodLattice::kMIdFieldNumber;
const int E_NickgodLattice::kMItemIdFieldNumber;
const int E_NickgodLattice::kMItemNumFieldNumber;
#endif  // !_MSC_VER

E_NickgodLattice::E_NickgodLattice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodLattice::InitAsDefaultInstance() {
}

E_NickgodLattice::E_NickgodLattice(const E_NickgodLattice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodLattice::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_itemid_ = 0;
  m_itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodLattice::~E_NickgodLattice() {
  SharedDtor();
}

void E_NickgodLattice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_NickgodLattice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodLattice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodLattice_descriptor_;
}

const E_NickgodLattice& E_NickgodLattice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodLattice* E_NickgodLattice::default_instance_ = NULL;

E_NickgodLattice* E_NickgodLattice::New() const {
  return new E_NickgodLattice;
}

void E_NickgodLattice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_itemid_ = 0;
    m_itemnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodLattice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_itemId;
        break;
      }

      // optional int32 m_itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_itemNum;
        break;
      }

      // optional int32 m_itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodLattice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_itemId = 2;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_itemid(), output);
  }

  // optional int32 m_itemNum = 3;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodLattice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_itemId = 2;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_itemid(), target);
  }

  // optional int32 m_itemNum = 3;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodLattice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_itemId = 2;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_itemNum = 3;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodLattice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodLattice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodLattice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodLattice::MergeFrom(const E_NickgodLattice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodLattice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodLattice::CopyFrom(const E_NickgodLattice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodLattice::IsInitialized() const {

  return true;
}

void E_NickgodLattice::Swap(E_NickgodLattice* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_itemnum_, other->m_itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodLattice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodLattice_descriptor_;
  metadata.reflection = E_NickgodLattice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_NickgodLattice::kENickgodLatticeListFieldNumber;
#endif  // !_MSC_VER

Sheet_NickgodLattice::Sheet_NickgodLattice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_NickgodLattice::InitAsDefaultInstance() {
}

Sheet_NickgodLattice::Sheet_NickgodLattice(const Sheet_NickgodLattice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_NickgodLattice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_NickgodLattice::~Sheet_NickgodLattice() {
  SharedDtor();
}

void Sheet_NickgodLattice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_NickgodLattice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_NickgodLattice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_NickgodLattice_descriptor_;
}

const Sheet_NickgodLattice& Sheet_NickgodLattice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

Sheet_NickgodLattice* Sheet_NickgodLattice::default_instance_ = NULL;

Sheet_NickgodLattice* Sheet_NickgodLattice::New() const {
  return new Sheet_NickgodLattice;
}

void Sheet_NickgodLattice::Clear() {
  e_nickgodlattice_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_NickgodLattice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_NickgodLattice E_NickgodLattice_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_NickgodLattice_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_nickgodlattice_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_NickgodLattice_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_NickgodLattice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_NickgodLattice E_NickgodLattice_List = 1;
  for (int i = 0; i < this->e_nickgodlattice_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_nickgodlattice_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_NickgodLattice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_NickgodLattice E_NickgodLattice_List = 1;
  for (int i = 0; i < this->e_nickgodlattice_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_nickgodlattice_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_NickgodLattice::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_NickgodLattice E_NickgodLattice_List = 1;
  total_size += 1 * this->e_nickgodlattice_list_size();
  for (int i = 0; i < this->e_nickgodlattice_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_nickgodlattice_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_NickgodLattice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_NickgodLattice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_NickgodLattice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_NickgodLattice::MergeFrom(const Sheet_NickgodLattice& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_nickgodlattice_list_.MergeFrom(from.e_nickgodlattice_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_NickgodLattice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_NickgodLattice::CopyFrom(const Sheet_NickgodLattice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_NickgodLattice::IsInitialized() const {

  return true;
}

void Sheet_NickgodLattice::Swap(Sheet_NickgodLattice* other) {
  if (other != this) {
    e_nickgodlattice_list_.Swap(&other->e_nickgodlattice_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_NickgodLattice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_NickgodLattice_descriptor_;
  metadata.reflection = Sheet_NickgodLattice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodTreasuryItemDesc::kMShowFieldNumber;
const int E_NickgodTreasuryItemDesc::kMRandFieldNumber;
const int E_NickgodTreasuryItemDesc::kMNumFieldNumber;
const int E_NickgodTreasuryItemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_NickgodTreasuryItemDesc::E_NickgodTreasuryItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodTreasuryItemDesc::InitAsDefaultInstance() {
}

E_NickgodTreasuryItemDesc::E_NickgodTreasuryItemDesc(const E_NickgodTreasuryItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodTreasuryItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_show_ = 0;
  m_rand_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodTreasuryItemDesc::~E_NickgodTreasuryItemDesc() {
  SharedDtor();
}

void E_NickgodTreasuryItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_NickgodTreasuryItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodTreasuryItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodTreasuryItemDesc_descriptor_;
}

const E_NickgodTreasuryItemDesc& E_NickgodTreasuryItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodTreasuryItemDesc* E_NickgodTreasuryItemDesc::default_instance_ = NULL;

E_NickgodTreasuryItemDesc* E_NickgodTreasuryItemDesc::New() const {
  return new E_NickgodTreasuryItemDesc;
}

void E_NickgodTreasuryItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_show_ = 0;
    m_rand_ = 0;
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodTreasuryItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_show = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_show_)));
          set_has_m_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_rand;
        break;
      }

      // optional int32 m_rand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rand_)));
          set_has_m_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodTreasuryItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_show = 1;
  if (has_m_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_show(), output);
  }

  // optional int32 m_rand = 2;
  if (has_m_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rand(), output);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_num(), output);
  }

  // optional int32 m_id = 4;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodTreasuryItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_show = 1;
  if (has_m_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_show(), target);
  }

  // optional int32 m_rand = 2;
  if (has_m_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rand(), target);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_num(), target);
  }

  // optional int32 m_id = 4;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodTreasuryItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_show = 1;
    if (has_m_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_show());
    }

    // optional int32 m_rand = 2;
    if (has_m_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rand());
    }

    // optional int32 m_num = 3;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 4;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodTreasuryItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodTreasuryItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodTreasuryItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodTreasuryItemDesc::MergeFrom(const E_NickgodTreasuryItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_show()) {
      set_m_show(from.m_show());
    }
    if (from.has_m_rand()) {
      set_m_rand(from.m_rand());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodTreasuryItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodTreasuryItemDesc::CopyFrom(const E_NickgodTreasuryItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodTreasuryItemDesc::IsInitialized() const {

  return true;
}

void E_NickgodTreasuryItemDesc::Swap(E_NickgodTreasuryItemDesc* other) {
  if (other != this) {
    std::swap(m_show_, other->m_show_);
    std::swap(m_rand_, other->m_rand_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodTreasuryItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodTreasuryItemDesc_descriptor_;
  metadata.reflection = E_NickgodTreasuryItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodTreasury::kMIdFieldNumber;
const int E_NickgodTreasury::kMItemFieldNumber;
#endif  // !_MSC_VER

E_NickgodTreasury::E_NickgodTreasury()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodTreasury::InitAsDefaultInstance() {
}

E_NickgodTreasury::E_NickgodTreasury(const E_NickgodTreasury& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodTreasury::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodTreasury::~E_NickgodTreasury() {
  SharedDtor();
}

void E_NickgodTreasury::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_NickgodTreasury::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodTreasury::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodTreasury_descriptor_;
}

const E_NickgodTreasury& E_NickgodTreasury::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodTreasury* E_NickgodTreasury::default_instance_ = NULL;

E_NickgodTreasury* E_NickgodTreasury::New() const {
  return new E_NickgodTreasury;
}

void E_NickgodTreasury::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
  }
  m_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodTreasury::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_NickgodTreasuryItemDesc m_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodTreasury::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // repeated .proto_ff.E_NickgodTreasuryItemDesc m_item = 2;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodTreasury::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // repeated .proto_ff.E_NickgodTreasuryItemDesc m_item = 2;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodTreasury::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  // repeated .proto_ff.E_NickgodTreasuryItemDesc m_item = 2;
  total_size += 1 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodTreasury::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodTreasury* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodTreasury*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodTreasury::MergeFrom(const E_NickgodTreasury& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_item_.MergeFrom(from.m_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodTreasury::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodTreasury::CopyFrom(const E_NickgodTreasury& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodTreasury::IsInitialized() const {

  return true;
}

void E_NickgodTreasury::Swap(E_NickgodTreasury* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    m_item_.Swap(&other->m_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodTreasury::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodTreasury_descriptor_;
  metadata.reflection = E_NickgodTreasury_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_NickgodTreasury::kENickgodTreasuryListFieldNumber;
#endif  // !_MSC_VER

Sheet_NickgodTreasury::Sheet_NickgodTreasury()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_NickgodTreasury::InitAsDefaultInstance() {
}

Sheet_NickgodTreasury::Sheet_NickgodTreasury(const Sheet_NickgodTreasury& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_NickgodTreasury::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_NickgodTreasury::~Sheet_NickgodTreasury() {
  SharedDtor();
}

void Sheet_NickgodTreasury::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_NickgodTreasury::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_NickgodTreasury::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_NickgodTreasury_descriptor_;
}

const Sheet_NickgodTreasury& Sheet_NickgodTreasury::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

Sheet_NickgodTreasury* Sheet_NickgodTreasury::default_instance_ = NULL;

Sheet_NickgodTreasury* Sheet_NickgodTreasury::New() const {
  return new Sheet_NickgodTreasury;
}

void Sheet_NickgodTreasury::Clear() {
  e_nickgodtreasury_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_NickgodTreasury::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_NickgodTreasury E_NickgodTreasury_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_NickgodTreasury_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_nickgodtreasury_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_NickgodTreasury_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_NickgodTreasury::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_NickgodTreasury E_NickgodTreasury_List = 1;
  for (int i = 0; i < this->e_nickgodtreasury_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_nickgodtreasury_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_NickgodTreasury::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_NickgodTreasury E_NickgodTreasury_List = 1;
  for (int i = 0; i < this->e_nickgodtreasury_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_nickgodtreasury_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_NickgodTreasury::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_NickgodTreasury E_NickgodTreasury_List = 1;
  total_size += 1 * this->e_nickgodtreasury_list_size();
  for (int i = 0; i < this->e_nickgodtreasury_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_nickgodtreasury_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_NickgodTreasury::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_NickgodTreasury* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_NickgodTreasury*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_NickgodTreasury::MergeFrom(const Sheet_NickgodTreasury& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_nickgodtreasury_list_.MergeFrom(from.e_nickgodtreasury_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_NickgodTreasury::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_NickgodTreasury::CopyFrom(const Sheet_NickgodTreasury& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_NickgodTreasury::IsInitialized() const {

  return true;
}

void Sheet_NickgodTreasury::Swap(Sheet_NickgodTreasury* other) {
  if (other != this) {
    e_nickgodtreasury_list_.Swap(&other->e_nickgodtreasury_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_NickgodTreasury::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_NickgodTreasury_descriptor_;
  metadata.reflection = Sheet_NickgodTreasury_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodPrivilegeRewardDesc::kMNumFieldNumber;
const int E_NickgodPrivilegeRewardDesc::kMIDFieldNumber;
#endif  // !_MSC_VER

E_NickgodPrivilegeRewardDesc::E_NickgodPrivilegeRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodPrivilegeRewardDesc::InitAsDefaultInstance() {
}

E_NickgodPrivilegeRewardDesc::E_NickgodPrivilegeRewardDesc(const E_NickgodPrivilegeRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodPrivilegeRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodPrivilegeRewardDesc::~E_NickgodPrivilegeRewardDesc() {
  SharedDtor();
}

void E_NickgodPrivilegeRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_NickgodPrivilegeRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodPrivilegeRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodPrivilegeRewardDesc_descriptor_;
}

const E_NickgodPrivilegeRewardDesc& E_NickgodPrivilegeRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodPrivilegeRewardDesc* E_NickgodPrivilegeRewardDesc::default_instance_ = NULL;

E_NickgodPrivilegeRewardDesc* E_NickgodPrivilegeRewardDesc::New() const {
  return new E_NickgodPrivilegeRewardDesc;
}

void E_NickgodPrivilegeRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodPrivilegeRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_ID;
        break;
      }

      // optional int64 m_ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodPrivilegeRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_Num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int64 m_ID = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodPrivilegeRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_Num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int64 m_ID = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodPrivilegeRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_Num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int64 m_ID = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodPrivilegeRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodPrivilegeRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodPrivilegeRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodPrivilegeRewardDesc::MergeFrom(const E_NickgodPrivilegeRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodPrivilegeRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodPrivilegeRewardDesc::CopyFrom(const E_NickgodPrivilegeRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodPrivilegeRewardDesc::IsInitialized() const {

  return true;
}

void E_NickgodPrivilegeRewardDesc::Swap(E_NickgodPrivilegeRewardDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodPrivilegeRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodPrivilegeRewardDesc_descriptor_;
  metadata.reflection = E_NickgodPrivilegeRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodPrivilege::kMIdFieldNumber;
const int E_NickgodPrivilege::kMConditionFieldNumber;
const int E_NickgodPrivilege::kMParamFieldNumber;
const int E_NickgodPrivilege::kMOpenFieldNumber;
const int E_NickgodPrivilege::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_NickgodPrivilege::E_NickgodPrivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodPrivilege::InitAsDefaultInstance() {
}

E_NickgodPrivilege::E_NickgodPrivilege(const E_NickgodPrivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodPrivilege::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_condition_ = 0;
  m_param_ = 0;
  m_open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodPrivilege::~E_NickgodPrivilege() {
  SharedDtor();
}

void E_NickgodPrivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_NickgodPrivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodPrivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodPrivilege_descriptor_;
}

const E_NickgodPrivilege& E_NickgodPrivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodPrivilege* E_NickgodPrivilege::default_instance_ = NULL;

E_NickgodPrivilege* E_NickgodPrivilege::New() const {
  return new E_NickgodPrivilege;
}

void E_NickgodPrivilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_condition_ = 0;
    m_param_ = 0;
    m_open_ = 0;
  }
  m_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodPrivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_condition;
        break;
      }

      // optional int32 m_condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_condition_)));
          set_has_m_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_param;
        break;
      }

      // optional int32 m_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_param_)));
          set_has_m_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_open;
        break;
      }

      // optional int32 m_open = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_open_)));
          set_has_m_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_reward;
        break;
      }

      // repeated .proto_ff.E_NickgodPrivilegeRewardDesc m_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodPrivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_condition = 2;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_condition(), output);
  }

  // optional int32 m_param = 3;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_param(), output);
  }

  // optional int32 m_open = 4;
  if (has_m_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_open(), output);
  }

  // repeated .proto_ff.E_NickgodPrivilegeRewardDesc m_reward = 5;
  for (int i = 0; i < this->m_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodPrivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_condition = 2;
  if (has_m_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_condition(), target);
  }

  // optional int32 m_param = 3;
  if (has_m_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_param(), target);
  }

  // optional int32 m_open = 4;
  if (has_m_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_open(), target);
  }

  // repeated .proto_ff.E_NickgodPrivilegeRewardDesc m_reward = 5;
  for (int i = 0; i < this->m_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodPrivilege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_condition = 2;
    if (has_m_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_condition());
    }

    // optional int32 m_param = 3;
    if (has_m_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_param());
    }

    // optional int32 m_open = 4;
    if (has_m_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_open());
    }

  }
  // repeated .proto_ff.E_NickgodPrivilegeRewardDesc m_reward = 5;
  total_size += 1 * this->m_reward_size();
  for (int i = 0; i < this->m_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodPrivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodPrivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodPrivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodPrivilege::MergeFrom(const E_NickgodPrivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_reward_.MergeFrom(from.m_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_condition()) {
      set_m_condition(from.m_condition());
    }
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
    if (from.has_m_open()) {
      set_m_open(from.m_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodPrivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodPrivilege::CopyFrom(const E_NickgodPrivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodPrivilege::IsInitialized() const {

  return true;
}

void E_NickgodPrivilege::Swap(E_NickgodPrivilege* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_condition_, other->m_condition_);
    std::swap(m_param_, other->m_param_);
    std::swap(m_open_, other->m_open_);
    m_reward_.Swap(&other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodPrivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodPrivilege_descriptor_;
  metadata.reflection = E_NickgodPrivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_NickgodPrivilege::kENickgodPrivilegeListFieldNumber;
#endif  // !_MSC_VER

Sheet_NickgodPrivilege::Sheet_NickgodPrivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_NickgodPrivilege::InitAsDefaultInstance() {
}

Sheet_NickgodPrivilege::Sheet_NickgodPrivilege(const Sheet_NickgodPrivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_NickgodPrivilege::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_NickgodPrivilege::~Sheet_NickgodPrivilege() {
  SharedDtor();
}

void Sheet_NickgodPrivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_NickgodPrivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_NickgodPrivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_NickgodPrivilege_descriptor_;
}

const Sheet_NickgodPrivilege& Sheet_NickgodPrivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

Sheet_NickgodPrivilege* Sheet_NickgodPrivilege::default_instance_ = NULL;

Sheet_NickgodPrivilege* Sheet_NickgodPrivilege::New() const {
  return new Sheet_NickgodPrivilege;
}

void Sheet_NickgodPrivilege::Clear() {
  e_nickgodprivilege_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_NickgodPrivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_NickgodPrivilege E_NickgodPrivilege_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_NickgodPrivilege_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_nickgodprivilege_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_NickgodPrivilege_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_NickgodPrivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_NickgodPrivilege E_NickgodPrivilege_List = 1;
  for (int i = 0; i < this->e_nickgodprivilege_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_nickgodprivilege_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_NickgodPrivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_NickgodPrivilege E_NickgodPrivilege_List = 1;
  for (int i = 0; i < this->e_nickgodprivilege_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_nickgodprivilege_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_NickgodPrivilege::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_NickgodPrivilege E_NickgodPrivilege_List = 1;
  total_size += 1 * this->e_nickgodprivilege_list_size();
  for (int i = 0; i < this->e_nickgodprivilege_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_nickgodprivilege_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_NickgodPrivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_NickgodPrivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_NickgodPrivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_NickgodPrivilege::MergeFrom(const Sheet_NickgodPrivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_nickgodprivilege_list_.MergeFrom(from.e_nickgodprivilege_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_NickgodPrivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_NickgodPrivilege::CopyFrom(const Sheet_NickgodPrivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_NickgodPrivilege::IsInitialized() const {

  return true;
}

void Sheet_NickgodPrivilege::Swap(Sheet_NickgodPrivilege* other) {
  if (other != this) {
    e_nickgodprivilege_list_.Swap(&other->e_nickgodprivilege_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_NickgodPrivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_NickgodPrivilege_descriptor_;
  metadata.reflection = Sheet_NickgodPrivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodSaleItemDesc::kMNumFieldNumber;
const int E_NickgodSaleItemDesc::kMIDFieldNumber;
#endif  // !_MSC_VER

E_NickgodSaleItemDesc::E_NickgodSaleItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodSaleItemDesc::InitAsDefaultInstance() {
}

E_NickgodSaleItemDesc::E_NickgodSaleItemDesc(const E_NickgodSaleItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodSaleItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodSaleItemDesc::~E_NickgodSaleItemDesc() {
  SharedDtor();
}

void E_NickgodSaleItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_NickgodSaleItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodSaleItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodSaleItemDesc_descriptor_;
}

const E_NickgodSaleItemDesc& E_NickgodSaleItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodSaleItemDesc* E_NickgodSaleItemDesc::default_instance_ = NULL;

E_NickgodSaleItemDesc* E_NickgodSaleItemDesc::New() const {
  return new E_NickgodSaleItemDesc;
}

void E_NickgodSaleItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodSaleItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_ID;
        break;
      }

      // optional int64 m_ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodSaleItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_Num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int64 m_ID = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodSaleItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_Num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int64 m_ID = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodSaleItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_Num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int64 m_ID = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodSaleItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodSaleItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodSaleItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodSaleItemDesc::MergeFrom(const E_NickgodSaleItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodSaleItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodSaleItemDesc::CopyFrom(const E_NickgodSaleItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodSaleItemDesc::IsInitialized() const {

  return true;
}

void E_NickgodSaleItemDesc::Swap(E_NickgodSaleItemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodSaleItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodSaleItemDesc_descriptor_;
  metadata.reflection = E_NickgodSaleItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodSale::kMIdFieldNumber;
const int E_NickgodSale::kMDiscountFieldNumber;
const int E_NickgodSale::kMMoneyFieldNumber;
const int E_NickgodSale::kMPriceFieldNumber;
const int E_NickgodSale::kMBuyLimitFieldNumber;
const int E_NickgodSale::kMItemFieldNumber;
#endif  // !_MSC_VER

E_NickgodSale::E_NickgodSale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodSale::InitAsDefaultInstance() {
}

E_NickgodSale::E_NickgodSale(const E_NickgodSale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodSale::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_discount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_money_ = 0;
  m_price_ = 0;
  m_buylimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodSale::~E_NickgodSale() {
  SharedDtor();
}

void E_NickgodSale::SharedDtor() {
  if (m_discount_ != &::google::protobuf::internal::kEmptyString) {
    delete m_discount_;
  }
  if (this != default_instance_) {
  }
}

void E_NickgodSale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodSale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodSale_descriptor_;
}

const E_NickgodSale& E_NickgodSale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodSale* E_NickgodSale::default_instance_ = NULL;

E_NickgodSale* E_NickgodSale::New() const {
  return new E_NickgodSale;
}

void E_NickgodSale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_discount()) {
      if (m_discount_ != &::google::protobuf::internal::kEmptyString) {
        m_discount_->clear();
      }
    }
    m_money_ = 0;
    m_price_ = 0;
    m_buylimit_ = 0;
  }
  m_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodSale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_discount;
        break;
      }

      // optional string m_discount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_discount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_discount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_discount().data(), this->m_discount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_money;
        break;
      }

      // optional int32 m_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_money_)));
          set_has_m_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_buyLimit;
        break;
      }

      // optional int32 m_buyLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buyLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buylimit_)));
          set_has_m_buylimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_NickgodSaleItemDesc m_item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodSale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_discount = 2;
  if (has_m_discount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_discount().data(), this->m_discount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_discount(), output);
  }

  // optional int32 m_money = 3;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_money(), output);
  }

  // optional int32 m_price = 4;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_price(), output);
  }

  // optional int32 m_buyLimit = 5;
  if (has_m_buylimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_buylimit(), output);
  }

  // repeated .proto_ff.E_NickgodSaleItemDesc m_item = 6;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodSale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_discount = 2;
  if (has_m_discount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_discount().data(), this->m_discount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_discount(), target);
  }

  // optional int32 m_money = 3;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_money(), target);
  }

  // optional int32 m_price = 4;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_price(), target);
  }

  // optional int32 m_buyLimit = 5;
  if (has_m_buylimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_buylimit(), target);
  }

  // repeated .proto_ff.E_NickgodSaleItemDesc m_item = 6;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodSale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_discount = 2;
    if (has_m_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_discount());
    }

    // optional int32 m_money = 3;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_money());
    }

    // optional int32 m_price = 4;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int32 m_buyLimit = 5;
    if (has_m_buylimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buylimit());
    }

  }
  // repeated .proto_ff.E_NickgodSaleItemDesc m_item = 6;
  total_size += 1 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodSale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodSale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodSale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodSale::MergeFrom(const E_NickgodSale& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_item_.MergeFrom(from.m_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_discount()) {
      set_m_discount(from.m_discount());
    }
    if (from.has_m_money()) {
      set_m_money(from.m_money());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_buylimit()) {
      set_m_buylimit(from.m_buylimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodSale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodSale::CopyFrom(const E_NickgodSale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodSale::IsInitialized() const {

  return true;
}

void E_NickgodSale::Swap(E_NickgodSale* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_discount_, other->m_discount_);
    std::swap(m_money_, other->m_money_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_buylimit_, other->m_buylimit_);
    m_item_.Swap(&other->m_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodSale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodSale_descriptor_;
  metadata.reflection = E_NickgodSale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_NickgodSale::kENickgodSaleListFieldNumber;
#endif  // !_MSC_VER

Sheet_NickgodSale::Sheet_NickgodSale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_NickgodSale::InitAsDefaultInstance() {
}

Sheet_NickgodSale::Sheet_NickgodSale(const Sheet_NickgodSale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_NickgodSale::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_NickgodSale::~Sheet_NickgodSale() {
  SharedDtor();
}

void Sheet_NickgodSale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_NickgodSale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_NickgodSale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_NickgodSale_descriptor_;
}

const Sheet_NickgodSale& Sheet_NickgodSale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

Sheet_NickgodSale* Sheet_NickgodSale::default_instance_ = NULL;

Sheet_NickgodSale* Sheet_NickgodSale::New() const {
  return new Sheet_NickgodSale;
}

void Sheet_NickgodSale::Clear() {
  e_nickgodsale_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_NickgodSale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_NickgodSale E_NickgodSale_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_NickgodSale_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_nickgodsale_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_NickgodSale_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_NickgodSale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_NickgodSale E_NickgodSale_List = 1;
  for (int i = 0; i < this->e_nickgodsale_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_nickgodsale_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_NickgodSale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_NickgodSale E_NickgodSale_List = 1;
  for (int i = 0; i < this->e_nickgodsale_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_nickgodsale_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_NickgodSale::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_NickgodSale E_NickgodSale_List = 1;
  total_size += 1 * this->e_nickgodsale_list_size();
  for (int i = 0; i < this->e_nickgodsale_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_nickgodsale_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_NickgodSale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_NickgodSale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_NickgodSale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_NickgodSale::MergeFrom(const Sheet_NickgodSale& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_nickgodsale_list_.MergeFrom(from.e_nickgodsale_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_NickgodSale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_NickgodSale::CopyFrom(const Sheet_NickgodSale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_NickgodSale::IsInitialized() const {

  return true;
}

void Sheet_NickgodSale::Swap(Sheet_NickgodSale* other) {
  if (other != this) {
    e_nickgodsale_list_.Swap(&other->e_nickgodsale_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_NickgodSale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_NickgodSale_descriptor_;
  metadata.reflection = Sheet_NickgodSale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodChargeupRewardDesc::kMNumFieldNumber;
const int E_NickgodChargeupRewardDesc::kMIDFieldNumber;
#endif  // !_MSC_VER

E_NickgodChargeupRewardDesc::E_NickgodChargeupRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodChargeupRewardDesc::InitAsDefaultInstance() {
}

E_NickgodChargeupRewardDesc::E_NickgodChargeupRewardDesc(const E_NickgodChargeupRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodChargeupRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodChargeupRewardDesc::~E_NickgodChargeupRewardDesc() {
  SharedDtor();
}

void E_NickgodChargeupRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_NickgodChargeupRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodChargeupRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodChargeupRewardDesc_descriptor_;
}

const E_NickgodChargeupRewardDesc& E_NickgodChargeupRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodChargeupRewardDesc* E_NickgodChargeupRewardDesc::default_instance_ = NULL;

E_NickgodChargeupRewardDesc* E_NickgodChargeupRewardDesc::New() const {
  return new E_NickgodChargeupRewardDesc;
}

void E_NickgodChargeupRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodChargeupRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_ID;
        break;
      }

      // optional int64 m_ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodChargeupRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_Num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int64 m_ID = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodChargeupRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_Num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int64 m_ID = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodChargeupRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_Num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int64 m_ID = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodChargeupRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodChargeupRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodChargeupRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodChargeupRewardDesc::MergeFrom(const E_NickgodChargeupRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodChargeupRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodChargeupRewardDesc::CopyFrom(const E_NickgodChargeupRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodChargeupRewardDesc::IsInitialized() const {

  return true;
}

void E_NickgodChargeupRewardDesc::Swap(E_NickgodChargeupRewardDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodChargeupRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodChargeupRewardDesc_descriptor_;
  metadata.reflection = E_NickgodChargeupRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_NickgodChargeup::kMIdFieldNumber;
const int E_NickgodChargeup::kMPayFieldNumber;
const int E_NickgodChargeup::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_NickgodChargeup::E_NickgodChargeup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_NickgodChargeup::InitAsDefaultInstance() {
}

E_NickgodChargeup::E_NickgodChargeup(const E_NickgodChargeup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_NickgodChargeup::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_pay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_NickgodChargeup::~E_NickgodChargeup() {
  SharedDtor();
}

void E_NickgodChargeup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_NickgodChargeup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_NickgodChargeup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_NickgodChargeup_descriptor_;
}

const E_NickgodChargeup& E_NickgodChargeup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

E_NickgodChargeup* E_NickgodChargeup::default_instance_ = NULL;

E_NickgodChargeup* E_NickgodChargeup::New() const {
  return new E_NickgodChargeup;
}

void E_NickgodChargeup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_pay_ = 0;
  }
  m_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_NickgodChargeup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_pay;
        break;
      }

      // optional int32 m_pay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pay_)));
          set_has_m_pay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_reward;
        break;
      }

      // repeated .proto_ff.E_NickgodChargeupRewardDesc m_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_NickgodChargeup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_pay = 2;
  if (has_m_pay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_pay(), output);
  }

  // repeated .proto_ff.E_NickgodChargeupRewardDesc m_reward = 3;
  for (int i = 0; i < this->m_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_NickgodChargeup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_pay = 2;
  if (has_m_pay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_pay(), target);
  }

  // repeated .proto_ff.E_NickgodChargeupRewardDesc m_reward = 3;
  for (int i = 0; i < this->m_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_NickgodChargeup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_pay = 2;
    if (has_m_pay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pay());
    }

  }
  // repeated .proto_ff.E_NickgodChargeupRewardDesc m_reward = 3;
  total_size += 1 * this->m_reward_size();
  for (int i = 0; i < this->m_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_NickgodChargeup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_NickgodChargeup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_NickgodChargeup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_NickgodChargeup::MergeFrom(const E_NickgodChargeup& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_reward_.MergeFrom(from.m_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_pay()) {
      set_m_pay(from.m_pay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_NickgodChargeup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_NickgodChargeup::CopyFrom(const E_NickgodChargeup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_NickgodChargeup::IsInitialized() const {

  return true;
}

void E_NickgodChargeup::Swap(E_NickgodChargeup* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_pay_, other->m_pay_);
    m_reward_.Swap(&other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_NickgodChargeup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_NickgodChargeup_descriptor_;
  metadata.reflection = E_NickgodChargeup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_NickgodChargeup::kENickgodChargeupListFieldNumber;
#endif  // !_MSC_VER

Sheet_NickgodChargeup::Sheet_NickgodChargeup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_NickgodChargeup::InitAsDefaultInstance() {
}

Sheet_NickgodChargeup::Sheet_NickgodChargeup(const Sheet_NickgodChargeup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_NickgodChargeup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_NickgodChargeup::~Sheet_NickgodChargeup() {
  SharedDtor();
}

void Sheet_NickgodChargeup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_NickgodChargeup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_NickgodChargeup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_NickgodChargeup_descriptor_;
}

const Sheet_NickgodChargeup& Sheet_NickgodChargeup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fNickgod_2eproto();
  return *default_instance_;
}

Sheet_NickgodChargeup* Sheet_NickgodChargeup::default_instance_ = NULL;

Sheet_NickgodChargeup* Sheet_NickgodChargeup::New() const {
  return new Sheet_NickgodChargeup;
}

void Sheet_NickgodChargeup::Clear() {
  e_nickgodchargeup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_NickgodChargeup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_NickgodChargeup E_NickgodChargeup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_NickgodChargeup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_nickgodchargeup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_NickgodChargeup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_NickgodChargeup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_NickgodChargeup E_NickgodChargeup_List = 1;
  for (int i = 0; i < this->e_nickgodchargeup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_nickgodchargeup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_NickgodChargeup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_NickgodChargeup E_NickgodChargeup_List = 1;
  for (int i = 0; i < this->e_nickgodchargeup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_nickgodchargeup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_NickgodChargeup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_NickgodChargeup E_NickgodChargeup_List = 1;
  total_size += 1 * this->e_nickgodchargeup_list_size();
  for (int i = 0; i < this->e_nickgodchargeup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_nickgodchargeup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_NickgodChargeup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_NickgodChargeup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_NickgodChargeup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_NickgodChargeup::MergeFrom(const Sheet_NickgodChargeup& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_nickgodchargeup_list_.MergeFrom(from.e_nickgodchargeup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_NickgodChargeup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_NickgodChargeup::CopyFrom(const Sheet_NickgodChargeup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_NickgodChargeup::IsInitialized() const {

  return true;
}

void Sheet_NickgodChargeup::Swap(Sheet_NickgodChargeup* other) {
  if (other != this) {
    e_nickgodchargeup_list_.Swap(&other->e_nickgodchargeup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_NickgodChargeup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_NickgodChargeup_descriptor_;
  metadata.reflection = Sheet_NickgodChargeup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
