// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerInternalCmd.proto

#ifndef PROTOBUF_ServerInternalCmd_2eproto__INCLUDED
#define PROTOBUF_ServerInternalCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include "yd_fieldoptions.pb.h"
#include "common_logic.pb.h"
#include "Com.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServerInternalCmd_2eproto();
void protobuf_AssignDesc_ServerInternalCmd_2eproto();
void protobuf_ShutdownFile_ServerInternalCmd_2eproto();


enum ServerInternalCmd {
  SYS_PING = 1,
  SYS_CLOSE_SERVER = 2,
  SYS_REDIRECT_CLIENT_BY_GATE = 10,
  SYS_REDIRECT_CLIENT_BY_CENTER = 11,
  SYS_REDIRECT_SOCIAL_BY_CENTER = 12,
  SYS_REDIRECT_LOGIC_BY_CENTER = 13,
  SYS_REDIRECT_LOGIC_ID_BY_CENTER = 14,
  SYS_REDIRECT_SERVER_BY_GATE = 15,
  LOGIC_REGISTER_CENTER = 16,
  LOGIC_REGISTER_CENTER_RSP = 17,
  LOGIC_REGISTER_GATE = 18,
  LOGIC_REGISTER_GATE_RSP = 19,
  CENTER_REGISTER_GATE = 20,
  CENTER_REGISTER_GATE_RSP = 21,
  CENTER_REGISTER_DB = 22,
  SOCIAL_REGISTER_CENTER = 23,
  SOCIAL_REGISTER_CENTER_RSP = 24,
  SOCIAL_QUERY_CENTER_INFO = 25,
  SOCIAL_QUERY_CENTER_INFO_RSP = 26,
  NOTIFY_LOGIC_STATE = 27,
  INNER_LOG_REQ = 31,
  NOTIFY_LOGIC_DATA_UPDATE = 32,
  DB_ROLE_LIST_REQ = 301,
  DB_ROLE_LIST_RSP = 302,
  DB_CREATE_ROLE_REQ = 303,
  DB_CREATE_ROLE_RSP = 304,
  DB_ROLE_INFO_REQ = 305,
  DB_ROLE_INFO_RSP = 306,
  DB_ROLE_INFO_UPDATE_REQ = 307,
  NOTIFY_LOGIC_ENTER_GAME_REQ = 308,
  NOTIFY_LOGIC_ENTER_GAME_RSP = 309,
  NOTIFY_LOGIC_LEAVE_GAME_REQ = 310,
  NOTIFY_LOGIC_LEAVE_GAME_RSP = 311,
  NOTIFY_CENTER_KICK_REQ = 312,
  NOTIFY_GATE_ENTER_GAME = 313,
  NOTIFY_GATE_CHANGE_LOGIC = 314,
  NOTIFY_GATE_LEAVE_GAME = 315,
  NOTIFY_GATE_RECONNECT_GAME = 316,
  NOTIFY_CENTER_DISCONNECT = 317,
  NOTIFY_LOGIC_DISCONNECT = 318,
  NOTIFY_LOGIC_RECONNECT = 319,
  DB_ROLE_SIMPLE_LIST_REQ = 320,
  DB_ROLE_SIMPLE_LIST_RSP = 321,
  SOCIAL_ROLE_INFO_REQ = 322,
  SOCIAL_ROLE_INFO_RSP = 323,
  SOCIAL_ROLE_INFO_EVENT = 324,
  SYN_ATTR_TO_CENTER_RSP = 325,
  DB_ROLE_CHG_NAME_REQ = 326,
  DB_ROLE_CHG_NAME_RSP = 327,
  CENTER_CREATE_SCENE_REQ_LOGIC = 401,
  CENTER_CREATE_SCENE_RSP_LOGIC = 402,
  SOCIAL_TO_CENTER_ADD_NEW_SCENE = 403,
  SOCIAL_TO_CENTER_DEL_SCENE = 404,
  LOGIC_NOTIFY_DESTORY_SCENE_CENTER = 405,
  LOGIC_CREATURE_TRANS_SCENE_REQ_CENTER = 406,
  CENTER_CREATURE_TRANS_SCENE_RSP_LOGIC_RESULT = 407,
  CENTER_CREATURE_TRANS_SCENE_RSP_LOGIC_SUCCESS = 408,
  DB_CREATURE_TRANS_SCENE_REQ = 409,
  DB_CREATURE_TRANS_SCENE_RSP = 410,
  NOTIFY_ROLE_ENTER_SCENE = 411,
  NOTIFY_ROLE_CHANGE_LOGIC = 412,
  DBPROXY_PROTOCOL_MAIL_BEGIN = 450,
  DBPROXY_PROTOCOL_CHARACTER_MAIL_DATA_REQ = 451,
  DBPROXY_PROTOCOL_CHARACTER_MAIL_DATA_RSP = 452,
  DBPROXY_PROTOCOL_MAX_MAIL_ID_REQ = 453,
  DBPROXY_PROTOCOL_MAX_MAIL_ID_RSP = 454,
  DBPROXY_PROTOCOL_CHARACTER_DELETE_MAIL_REQ = 455,
  DBPROXY_PROTOCOL_ALL_ZONE_MAIL_SAVE_REQ = 456,
  DBPROXY_PROTOCOL_ALL_ZONE_MAIL_SAVE_RSP = 457,
  DBPROXY_PROTOCOL_ZONE_MAIL_TRANS_REQ = 458,
  DBPROXY_PROTOCOL_ZONE_MAIL_TRANS_RSP = 459,
  DBPROXY_PROTOCOL_MAIL_SAVE_REQ = 460,
  DBPROXY_PROTOCOL_MAIL_SAVE_RSP = 461,
  DBPROXY_PROTOCOL_WEB_MAIL_DATA_REQ = 462,
  DBPROXY_PROTOCOL_WEB_MAIL_DATA_RSP = 463,
  CENTER_SERVER_PROTOCOL_SEND_MAIL_REQ = 464,
  CENTER_SERVER_PROTOCOL_SEND_MAIL_RSP = 465,
  CENTER_SERVER_PROTOCOL_GET_MAIL_ATTACHMENT_TO_LOGIC = 466,
  CENTER_SERVER_PROTOCOL_UPDATE_MAIL_NOTIFY = 467,
  CENTER_SERVER_PROTOCOL_GET_ALL_MAIL_ATTACHMENT_TO_LOGIC = 468,
  CENTER_SERVER_PROTOCOL_SEND_SYSTEM_MAIL = 469,
  CENTER_SERVER_PROTOCOL_SEND_MAIL_TO_LOGIC = 470,
  DBPROXY_PROTOCOL_MAIL_END = 479,
  SERVER_INTERNAL_CHAT_BEGIN = 480,
  CENTER_SERVER_PROTOCOL_CHAT_REQ = 481,
  CENTER_SERVER_PROTOCOL_GWSYSCHATMSGNOTIFY = 482,
  SERVER_TO_SERVER_CROSS_CHAT = 483,
  CENTER_TO_LOGCI_VIR_FORBID_RSP = 484,
  SERVER_INTERNAL_CHAT_END = 489,
  NOTIFY_SERVER_GM_RSP = 500,
  SERVER_INTERNAL_FRIEND_BEGIN = 551,
  LOGIC_TO_CENTER_ADD_HATE = 552,
  LOGIC_TO_CENTER_KILL_SOMEONE = 553,
  CENTER_TO_LOGIC_ADD_FRIEND = 554,
  LOGIC_TO_CENTER_GIVING_GIFT = 555,
  CENTER_TO_LOGIC_GIVING_GIFT_ERROR = 556,
  DBPROXY_PROTOCOL_ALL_FRIEND_DATA_REQ = 560,
  DBPROXY_PROTOCOL_SAVE_FRIEND_DATA_REQ = 561,
  DBPROXY_PROTOCOL_ALL_FRIEND_DATA_RSP = 562,
  DBPROXY_PROTOCOL_SAVE_FRIEND_DATA_RSP = 563,
  DBPROXY_PROTOCOL_DELETE_FRIEND_DATA_NOTIFY = 564,
  DBPROXY_PROTOCOL_FRIEND_DATA_REQ = 565,
  DBPROXY_PROTOCOL_FRIEND_DATA_RSP = 566,
  SERVER_INTERNAL_FRIEND_END = 570,
  L2C_ENTER_DUP_REQ = 600,
  L2C_CREATE_DUP_RSP = 601,
  L2C_DUP_STATE_CHG_NOTIFY = 602,
  C2L_PULL_ROLE_ENTER_DUP_NOTIFY = 603,
  L2C_DUP_ROLE_ACTION_NOTIFY = 604,
  S2C_ENTER_DUP_REQ = 605,
  C2S_ENTER_DUP_RSP = 606,
  L2C_TOWER_RECV_RECORD_REQ = 607,
  DB_GET_GLOBAL_REQ = 650,
  DB_GET_GLOBAL_RSP = 651,
  DB_SET_GLOBAL_REQ = 652,
  L2C_UPDATE_BOSS_REQ = 660,
  L2C_SYN_ATTENT_REQ = 661,
  L2C_KILL_BOSS_REQ = 662,
  DB_ACT_GET_DATA_REQ = 700,
  DB_ACT_GET_DATA_RSP = 701,
  DB_ACT_SAVE_DATA_REQ = 702,
  ACT_LS_INIT_DATA_REQ = 703,
  ACT_LS_INIT_DATA_RSP = 704,
  ACT_CS_INIT_DATA_REQ = 705,
  ACT_CS_INIT_DATA_RSP = 706,
  ACT_LS_PRE_FINISH_REQ = 707,
  ACT_CL_INIT_DATA_REQ = 708,
  SERVER_INTER_MAX_CMD = 5000
};
bool ServerInternalCmd_IsValid(int value);
const ServerInternalCmd ServerInternalCmd_MIN = SYS_PING;
const ServerInternalCmd ServerInternalCmd_MAX = SERVER_INTER_MAX_CMD;
const int ServerInternalCmd_ARRAYSIZE = ServerInternalCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerInternalCmd_descriptor();
inline const ::std::string& ServerInternalCmd_Name(ServerInternalCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerInternalCmd_descriptor(), value);
}
inline bool ServerInternalCmd_Parse(
    const ::std::string& name, ServerInternalCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerInternalCmd>(
    ServerInternalCmd_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::ServerInternalCmd>() {
  return ::proto_ff::ServerInternalCmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerInternalCmd_2eproto__INCLUDED
