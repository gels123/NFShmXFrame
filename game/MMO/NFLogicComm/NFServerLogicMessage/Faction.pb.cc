// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Faction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Faction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* FactionListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMemProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMemListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMemListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionApplyProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionApplyProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionApplyListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionApplyListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMemSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMemSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMemSimpleListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMemSimpleListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionRecordProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionRecordProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionRecordListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionRecordListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionSalaryProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionSalaryProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionSalaryListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionSalaryListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDinnerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDinnerProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionInviteProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionInviteProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionSkillProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionSkillProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionSkillListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionSkillListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionAnswerRankProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionAnswerRankProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionAnswerRankListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionAnswerRankListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionAnswerFinalProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionAnswerFinalProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionBeastRankProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionBeastRankProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionBeastRankListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionBeastRankListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SyncLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SyncLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SyncInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SyncInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_InfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_InfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_InfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_InfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_InfoListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_InfoListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_InfoListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_InfoListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SimpleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SimpleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SimpleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SimpleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_MemListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_MemListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_MemListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_MemListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_CreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_CreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_CreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_CreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ApplyListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ApplyListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ApplyListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ApplyListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ApplyJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ApplyJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ApplyJoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ApplyJoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ApplyOperateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ApplyOperateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ApplyOperateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ApplyOperateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_KickReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_KickReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_KickRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_KickRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_QuitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_QuitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_QuitRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_QuitRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_AppointReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_AppointReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_AppointRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_AppointRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ChgNoticeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ChgNoticeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ChgNoticeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ChgNoticeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SetApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SetApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SetApplyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SetApplyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_OneKeyApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_OneKeyApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_OneKeyApplyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_OneKeyApplyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ChgNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ChgNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ChgNameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ChgNameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_NewApplyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_NewApplyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_InviteJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_InviteJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_InviteJoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_InviteJoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_IviteJoinNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_IviteJoinNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_RecordListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_RecordListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_RecordListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_RecordListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_DonateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_DonateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_DonateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_DonateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_DonateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_DonateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SalaryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SalaryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SalaryRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SalaryRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SalaryNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SalaryNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SalaryFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SalaryFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SalaryFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SalaryFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_DinnerUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_DinnerUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_TransInviteListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_TransInviteListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_TransInviteListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_TransInviteListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_TransAcceptListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_TransAcceptListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_TransInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_TransInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_TransInviteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_TransInviteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_TransInviteNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_TransInviteNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_TransDelAcceptNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_TransDelAcceptNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_TransAgreeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_TransAgreeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_TransAgreeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_TransAgreeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SkillInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SkillInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SkillInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SkillInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SkillUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SkillUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SkillUpgradeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SkillUpgradeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SkillUpgradeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SkillUpgradeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_AnswerRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_AnswerRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_AnswerRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_AnswerRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_AnswerCurRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_AnswerCurRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_AnswerStageRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_AnswerStageRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_AnswerResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_AnswerResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_AnswerFinalRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_AnswerFinalRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_BeastInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_BeastInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_BeastInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_BeastInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_BeastOpenInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_BeastOpenInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_BeastOpenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_BeastOpenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_BeastOpenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_BeastOpenRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_BeastCurHarmRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_BeastCurHarmRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_BeastFinishRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_BeastFinishRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CL_FactionRoleUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CL_FactionRoleUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LC_FactionCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LC_FactionCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CL_FactionCreateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CL_FactionCreateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* LC_FactionChgName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LC_FactionChgName_reflection_ = NULL;
const ::google::protobuf::Descriptor* CL_FactionChgNameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CL_FactionChgNameResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CL_FactionDismissNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CL_FactionDismissNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LC_FactionAddAttrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LC_FactionAddAttrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LS_FactionAnswerCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LS_FactionAnswerCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* SL_FactionAnswerRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SL_FactionAnswerRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SL_FactionAnswerCurRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SL_FactionAnswerCurRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FactionAnswerRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FactionAnswerRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LS_FactionAnswerEndRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LS_FactionAnswerEndRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LC_FactionBeastFinishRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LC_FactionBeastFinishRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionGuardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionGuardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_GuardSceneInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_GuardSceneInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_GuardSceneInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_GuardSceneInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionGuardRankProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionGuardRankProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionGuardRankListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionGuardRankListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_GuardPersonRankInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_GuardPersonRankInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_GuardPersonRankInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_GuardPersonRankInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionGuardSocialRankProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionGuardSocialRankProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionGuardSocialRankListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionGuardSocialRankListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_GuardSocialRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_GuardSocialRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_GuardSocialRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_GuardSocialRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuardMonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuardMonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_GuardMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_GuardMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_GuardMonsterInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_GuardMonsterInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_GuardWaveReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_GuardWaveReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_GuardFinishRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_GuardFinishRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_GuardEncouragementReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_GuardEncouragementReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_GuardEncouragementRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_GuardEncouragementRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LS_FactionGuardCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LS_FactionGuardCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* SL_FactionGuardRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SL_FactionGuardRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SL_FactionGuardCurRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SL_FactionGuardCurRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FactionGuardRankResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FactionGuardRankResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LS_FactionGuardEndRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LS_FactionGuardEndRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LC_FactionGuardEndRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LC_FactionGuardEndRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuardPlayerHarm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuardPlayerHarm_reflection_ = NULL;
const ::google::protobuf::Descriptor* LC_FactionGuardPlayerHarm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LC_FactionGuardPlayerHarm_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FactionAnswerFinalRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FactionAnswerFinalRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CL_FactionAnswerQuestionRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CL_FactionAnswerQuestionRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMoyuRankEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMoyuRankEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMoyuRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMoyuRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtFactionMoyuRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtFactionMoyuRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMoyuRecvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMoyuRecvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMoyuRecvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMoyuRecvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyFactionMoyuDup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyFactionMoyuDup_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMoyuTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMoyuTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMoyuEndRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMoyuEndRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMoyuReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMoyuReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtFactionMoyuHarm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtFactionMoyuHarm_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtFactionMoyuDupKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtFactionMoyuDupKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtFactionMoyu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtFactionMoyu_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMoyuRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMoyuRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMoyuUpdateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMoyuUpdateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMoyuAddHarmReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMoyuAddHarmReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionSynMoyuReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionSynMoyuReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMoyuPassReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMoyuPassReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCFactionMoyuRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCFactionMoyuRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLFactionMoyuRecvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLFactionMoyuRecvReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Faction_2eproto() {
  protobuf_AddDesc_Faction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Faction.proto");
  GOOGLE_CHECK(file != NULL);
  FactionListProto_descriptor_ = file->message_type(0);
  static const int FactionListProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, leader_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, mem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, already_apply_),
  };
  FactionListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionListProto_descriptor_,
      FactionListProto::default_instance_,
      FactionListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionListProto));
  FactionProto_descriptor_ = file->message_type(1);
  static const int FactionProto_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, mem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, leader_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, apply_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, apply_minlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, apply_fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, online_num_),
  };
  FactionProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionProto_descriptor_,
      FactionProto::default_instance_,
      FactionProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionProto));
  FactionMemProto_descriptor_ = file->message_type(2);
  static const int FactionMemProto_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, total_contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, clan3_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, clan5_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, head_),
  };
  FactionMemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMemProto_descriptor_,
      FactionMemProto::default_instance_,
      FactionMemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMemProto));
  FactionMemListProto_descriptor_ = file->message_type(3);
  static const int FactionMemListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemListProto, mem_lst_),
  };
  FactionMemListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMemListProto_descriptor_,
      FactionMemListProto::default_instance_,
      FactionMemListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMemListProto));
  FactionApplyProto_descriptor_ = file->message_type(4);
  static const int FactionApplyProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyProto, fight_),
  };
  FactionApplyProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionApplyProto_descriptor_,
      FactionApplyProto::default_instance_,
      FactionApplyProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionApplyProto));
  FactionApplyListProto_descriptor_ = file->message_type(5);
  static const int FactionApplyListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyListProto, apply_lst_),
  };
  FactionApplyListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionApplyListProto_descriptor_,
      FactionApplyListProto::default_instance_,
      FactionApplyListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionApplyListProto));
  FactionMemSimpleProto_descriptor_ = file->message_type(6);
  static const int FactionMemSimpleProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, fight_),
  };
  FactionMemSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMemSimpleProto_descriptor_,
      FactionMemSimpleProto::default_instance_,
      FactionMemSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMemSimpleProto));
  FactionMemSimpleListProto_descriptor_ = file->message_type(7);
  static const int FactionMemSimpleListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleListProto, simple_lst_),
  };
  FactionMemSimpleListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMemSimpleListProto_descriptor_,
      FactionMemSimpleListProto::default_instance_,
      FactionMemSimpleListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMemSimpleListProto));
  FactionSimpleProto_descriptor_ = file->message_type(8);
  static const int FactionSimpleProto_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, leader_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, mem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, apply_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, apply_minlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, apply_fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, mem_),
  };
  FactionSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionSimpleProto_descriptor_,
      FactionSimpleProto::default_instance_,
      FactionSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionSimpleProto));
  FactionRecordProto_descriptor_ = file->message_type(9);
  static const int FactionRecordProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordProto, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordProto, param1_),
  };
  FactionRecordProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionRecordProto_descriptor_,
      FactionRecordProto::default_instance_,
      FactionRecordProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionRecordProto));
  FactionRecordListProto_descriptor_ = file->message_type(10);
  static const int FactionRecordListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordListProto, record_lst_),
  };
  FactionRecordListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionRecordListProto_descriptor_,
      FactionRecordListProto::default_instance_,
      FactionRecordListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionRecordListProto));
  FactionSalaryProto_descriptor_ = file->message_type(11);
  static const int FactionSalaryProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSalaryProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSalaryProto, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSalaryProto, fetch_),
  };
  FactionSalaryProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionSalaryProto_descriptor_,
      FactionSalaryProto::default_instance_,
      FactionSalaryProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSalaryProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSalaryProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionSalaryProto));
  FactionSalaryListProto_descriptor_ = file->message_type(12);
  static const int FactionSalaryListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSalaryListProto, info_),
  };
  FactionSalaryListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionSalaryListProto_descriptor_,
      FactionSalaryListProto::default_instance_,
      FactionSalaryListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSalaryListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSalaryListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionSalaryListProto));
  FactionDinnerProto_descriptor_ = file->message_type(13);
  static const int FactionDinnerProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDinnerProto, trans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDinnerProto, meat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDinnerProto, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDinnerProto, contri_),
  };
  FactionDinnerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDinnerProto_descriptor_,
      FactionDinnerProto::default_instance_,
      FactionDinnerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDinnerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDinnerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDinnerProto));
  FactionInviteProto_descriptor_ = file->message_type(14);
  static const int FactionInviteProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionInviteProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionInviteProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionInviteProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionInviteProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionInviteProto, head_),
  };
  FactionInviteProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionInviteProto_descriptor_,
      FactionInviteProto::default_instance_,
      FactionInviteProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionInviteProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionInviteProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionInviteProto));
  FactionSkillProto_descriptor_ = file->message_type(15);
  static const int FactionSkillProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSkillProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSkillProto, level_),
  };
  FactionSkillProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionSkillProto_descriptor_,
      FactionSkillProto::default_instance_,
      FactionSkillProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSkillProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSkillProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionSkillProto));
  FactionSkillListProto_descriptor_ = file->message_type(16);
  static const int FactionSkillListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSkillListProto, info_),
  };
  FactionSkillListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionSkillListProto_descriptor_,
      FactionSkillListProto::default_instance_,
      FactionSkillListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSkillListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSkillListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionSkillListProto));
  FactionAnswerRankProto_descriptor_ = file->message_type(17);
  static const int FactionAnswerRankProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerRankProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerRankProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerRankProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerRankProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerRankProto, count_),
  };
  FactionAnswerRankProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionAnswerRankProto_descriptor_,
      FactionAnswerRankProto::default_instance_,
      FactionAnswerRankProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerRankProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerRankProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionAnswerRankProto));
  FactionAnswerRankListProto_descriptor_ = file->message_type(18);
  static const int FactionAnswerRankListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerRankListProto, lst_),
  };
  FactionAnswerRankListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionAnswerRankListProto_descriptor_,
      FactionAnswerRankListProto::default_instance_,
      FactionAnswerRankListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerRankListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerRankListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionAnswerRankListProto));
  FactionAnswerFinalProto_descriptor_ = file->message_type(19);
  static const int FactionAnswerFinalProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerFinalProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerFinalProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerFinalProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerFinalProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerFinalProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerFinalProto, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerFinalProto, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerFinalProto, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerFinalProto, faction_count_),
  };
  FactionAnswerFinalProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionAnswerFinalProto_descriptor_,
      FactionAnswerFinalProto::default_instance_,
      FactionAnswerFinalProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerFinalProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAnswerFinalProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionAnswerFinalProto));
  FactionBeastRankProto_descriptor_ = file->message_type(20);
  static const int FactionBeastRankProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastRankProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastRankProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastRankProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastRankProto, harm_),
  };
  FactionBeastRankProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionBeastRankProto_descriptor_,
      FactionBeastRankProto::default_instance_,
      FactionBeastRankProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastRankProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastRankProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionBeastRankProto));
  FactionBeastRankListProto_descriptor_ = file->message_type(21);
  static const int FactionBeastRankListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastRankListProto, lst_),
  };
  FactionBeastRankListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionBeastRankListProto_descriptor_,
      FactionBeastRankListProto::default_instance_,
      FactionBeastRankListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastRankListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastRankListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionBeastRankListProto));
  Faction_SyncLoginRsp_descriptor_ = file->message_type(22);
  static const int Faction_SyncLoginRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncLoginRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncLoginRsp, duty_),
  };
  Faction_SyncLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SyncLoginRsp_descriptor_,
      Faction_SyncLoginRsp::default_instance_,
      Faction_SyncLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SyncLoginRsp));
  Faction_SyncInfoRsp_descriptor_ = file->message_type(23);
  static const int Faction_SyncInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncInfoRsp, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncInfoRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncInfoRsp, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncInfoRsp, level_),
  };
  Faction_SyncInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SyncInfoRsp_descriptor_,
      Faction_SyncInfoRsp::default_instance_,
      Faction_SyncInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SyncInfoRsp));
  Faction_InfoReq_descriptor_ = file->message_type(24);
  static const int Faction_InfoReq_offsets_[1] = {
  };
  Faction_InfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_InfoReq_descriptor_,
      Faction_InfoReq::default_instance_,
      Faction_InfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_InfoReq));
  Faction_InfoRsp_descriptor_ = file->message_type(25);
  static const int Faction_InfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoRsp, info_),
  };
  Faction_InfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_InfoRsp_descriptor_,
      Faction_InfoRsp::default_instance_,
      Faction_InfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_InfoRsp));
  Faction_InfoListReq_descriptor_ = file->message_type(26);
  static const int Faction_InfoListReq_offsets_[1] = {
  };
  Faction_InfoListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_InfoListReq_descriptor_,
      Faction_InfoListReq::default_instance_,
      Faction_InfoListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_InfoListReq));
  Faction_InfoListRsp_descriptor_ = file->message_type(27);
  static const int Faction_InfoListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoListRsp, info_lst_),
  };
  Faction_InfoListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_InfoListRsp_descriptor_,
      Faction_InfoListRsp::default_instance_,
      Faction_InfoListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_InfoListRsp));
  Faction_SimpleReq_descriptor_ = file->message_type(28);
  static const int Faction_SimpleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleReq, faction_id_),
  };
  Faction_SimpleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SimpleReq_descriptor_,
      Faction_SimpleReq::default_instance_,
      Faction_SimpleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SimpleReq));
  Faction_SimpleRsp_descriptor_ = file->message_type(29);
  static const int Faction_SimpleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleRsp, simple_),
  };
  Faction_SimpleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SimpleRsp_descriptor_,
      Faction_SimpleRsp::default_instance_,
      Faction_SimpleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SimpleRsp));
  Faction_MemListReq_descriptor_ = file->message_type(30);
  static const int Faction_MemListReq_offsets_[1] = {
  };
  Faction_MemListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_MemListReq_descriptor_,
      Faction_MemListReq::default_instance_,
      Faction_MemListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_MemListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_MemListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_MemListReq));
  Faction_MemListRsp_descriptor_ = file->message_type(31);
  static const int Faction_MemListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_MemListRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_MemListRsp, mem_lst_),
  };
  Faction_MemListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_MemListRsp_descriptor_,
      Faction_MemListRsp::default_instance_,
      Faction_MemListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_MemListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_MemListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_MemListRsp));
  Faction_CreateReq_descriptor_ = file->message_type(32);
  static const int Faction_CreateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateReq, notice_),
  };
  Faction_CreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_CreateReq_descriptor_,
      Faction_CreateReq::default_instance_,
      Faction_CreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_CreateReq));
  Faction_CreateRsp_descriptor_ = file->message_type(33);
  static const int Faction_CreateRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateRsp, info_),
  };
  Faction_CreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_CreateRsp_descriptor_,
      Faction_CreateRsp::default_instance_,
      Faction_CreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_CreateRsp));
  Faction_ApplyListReq_descriptor_ = file->message_type(34);
  static const int Faction_ApplyListReq_offsets_[1] = {
  };
  Faction_ApplyListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ApplyListReq_descriptor_,
      Faction_ApplyListReq::default_instance_,
      Faction_ApplyListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ApplyListReq));
  Faction_ApplyListRsp_descriptor_ = file->message_type(35);
  static const int Faction_ApplyListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyListRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyListRsp, info_),
  };
  Faction_ApplyListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ApplyListRsp_descriptor_,
      Faction_ApplyListRsp::default_instance_,
      Faction_ApplyListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ApplyListRsp));
  Faction_ApplyJoinReq_descriptor_ = file->message_type(36);
  static const int Faction_ApplyJoinReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinReq, faction_id_),
  };
  Faction_ApplyJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ApplyJoinReq_descriptor_,
      Faction_ApplyJoinReq::default_instance_,
      Faction_ApplyJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ApplyJoinReq));
  Faction_ApplyJoinRsp_descriptor_ = file->message_type(37);
  static const int Faction_ApplyJoinRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinRsp, faction_id_),
  };
  Faction_ApplyJoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ApplyJoinRsp_descriptor_,
      Faction_ApplyJoinRsp::default_instance_,
      Faction_ApplyJoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ApplyJoinRsp));
  Faction_ApplyOperateReq_descriptor_ = file->message_type(38);
  static const int Faction_ApplyOperateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateReq, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateReq, cid_),
  };
  Faction_ApplyOperateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ApplyOperateReq_descriptor_,
      Faction_ApplyOperateReq::default_instance_,
      Faction_ApplyOperateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ApplyOperateReq));
  Faction_ApplyOperateRsp_descriptor_ = file->message_type(39);
  static const int Faction_ApplyOperateRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateRsp, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateRsp, mem_lst_),
  };
  Faction_ApplyOperateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ApplyOperateRsp_descriptor_,
      Faction_ApplyOperateRsp::default_instance_,
      Faction_ApplyOperateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ApplyOperateRsp));
  Faction_KickReq_descriptor_ = file->message_type(40);
  static const int Faction_KickReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickReq, cid_lst_),
  };
  Faction_KickReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_KickReq_descriptor_,
      Faction_KickReq::default_instance_,
      Faction_KickReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_KickReq));
  Faction_KickRsp_descriptor_ = file->message_type(41);
  static const int Faction_KickRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickRsp, cid_lst_),
  };
  Faction_KickRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_KickRsp_descriptor_,
      Faction_KickRsp::default_instance_,
      Faction_KickRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_KickRsp));
  Faction_QuitReq_descriptor_ = file->message_type(42);
  static const int Faction_QuitReq_offsets_[1] = {
  };
  Faction_QuitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_QuitReq_descriptor_,
      Faction_QuitReq::default_instance_,
      Faction_QuitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_QuitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_QuitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_QuitReq));
  Faction_QuitRsp_descriptor_ = file->message_type(43);
  static const int Faction_QuitRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_QuitRsp, ret_),
  };
  Faction_QuitRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_QuitRsp_descriptor_,
      Faction_QuitRsp::default_instance_,
      Faction_QuitRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_QuitRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_QuitRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_QuitRsp));
  Faction_AppointReq_descriptor_ = file->message_type(44);
  static const int Faction_AppointReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointReq, duty_),
  };
  Faction_AppointReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_AppointReq_descriptor_,
      Faction_AppointReq::default_instance_,
      Faction_AppointReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_AppointReq));
  Faction_AppointRsp_descriptor_ = file->message_type(45);
  static const int Faction_AppointRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointRsp, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointRsp, self_duty_),
  };
  Faction_AppointRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_AppointRsp_descriptor_,
      Faction_AppointRsp::default_instance_,
      Faction_AppointRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_AppointRsp));
  Faction_ChgNoticeReq_descriptor_ = file->message_type(46);
  static const int Faction_ChgNoticeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeReq, notice_),
  };
  Faction_ChgNoticeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ChgNoticeReq_descriptor_,
      Faction_ChgNoticeReq::default_instance_,
      Faction_ChgNoticeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ChgNoticeReq));
  Faction_ChgNoticeRsp_descriptor_ = file->message_type(47);
  static const int Faction_ChgNoticeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeRsp, notice_),
  };
  Faction_ChgNoticeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ChgNoticeRsp_descriptor_,
      Faction_ChgNoticeRsp::default_instance_,
      Faction_ChgNoticeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ChgNoticeRsp));
  Faction_SetApplyReq_descriptor_ = file->message_type(48);
  static const int Faction_SetApplyReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyReq, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyReq, fight_),
  };
  Faction_SetApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SetApplyReq_descriptor_,
      Faction_SetApplyReq::default_instance_,
      Faction_SetApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SetApplyReq));
  Faction_SetApplyRsp_descriptor_ = file->message_type(49);
  static const int Faction_SetApplyRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyRsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyRsp, fight_),
  };
  Faction_SetApplyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SetApplyRsp_descriptor_,
      Faction_SetApplyRsp::default_instance_,
      Faction_SetApplyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SetApplyRsp));
  Faction_OneKeyApplyReq_descriptor_ = file->message_type(50);
  static const int Faction_OneKeyApplyReq_offsets_[1] = {
  };
  Faction_OneKeyApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_OneKeyApplyReq_descriptor_,
      Faction_OneKeyApplyReq::default_instance_,
      Faction_OneKeyApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_OneKeyApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_OneKeyApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_OneKeyApplyReq));
  Faction_OneKeyApplyRsp_descriptor_ = file->message_type(51);
  static const int Faction_OneKeyApplyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_OneKeyApplyRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_OneKeyApplyRsp, id_lst_),
  };
  Faction_OneKeyApplyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_OneKeyApplyRsp_descriptor_,
      Faction_OneKeyApplyRsp::default_instance_,
      Faction_OneKeyApplyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_OneKeyApplyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_OneKeyApplyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_OneKeyApplyRsp));
  Faction_ChgNameReq_descriptor_ = file->message_type(52);
  static const int Faction_ChgNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameReq, name_),
  };
  Faction_ChgNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ChgNameReq_descriptor_,
      Faction_ChgNameReq::default_instance_,
      Faction_ChgNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ChgNameReq));
  Faction_ChgNameRsp_descriptor_ = file->message_type(53);
  static const int Faction_ChgNameRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameRsp, name_),
  };
  Faction_ChgNameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ChgNameRsp_descriptor_,
      Faction_ChgNameRsp::default_instance_,
      Faction_ChgNameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ChgNameRsp));
  Faction_NewApplyNotify_descriptor_ = file->message_type(54);
  static const int Faction_NewApplyNotify_offsets_[1] = {
  };
  Faction_NewApplyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_NewApplyNotify_descriptor_,
      Faction_NewApplyNotify::default_instance_,
      Faction_NewApplyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_NewApplyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_NewApplyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_NewApplyNotify));
  Faction_InviteJoinReq_descriptor_ = file->message_type(55);
  static const int Faction_InviteJoinReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InviteJoinReq, cid_),
  };
  Faction_InviteJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_InviteJoinReq_descriptor_,
      Faction_InviteJoinReq::default_instance_,
      Faction_InviteJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InviteJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InviteJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_InviteJoinReq));
  Faction_InviteJoinRsp_descriptor_ = file->message_type(56);
  static const int Faction_InviteJoinRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InviteJoinRsp, ret_),
  };
  Faction_InviteJoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_InviteJoinRsp_descriptor_,
      Faction_InviteJoinRsp::default_instance_,
      Faction_InviteJoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InviteJoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InviteJoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_InviteJoinRsp));
  Faction_IviteJoinNotify_descriptor_ = file->message_type(57);
  static const int Faction_IviteJoinNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_IviteJoinNotify, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_IviteJoinNotify, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_IviteJoinNotify, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_IviteJoinNotify, faction_name_),
  };
  Faction_IviteJoinNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_IviteJoinNotify_descriptor_,
      Faction_IviteJoinNotify::default_instance_,
      Faction_IviteJoinNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_IviteJoinNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_IviteJoinNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_IviteJoinNotify));
  Faction_RecordListReq_descriptor_ = file->message_type(58);
  static const int Faction_RecordListReq_offsets_[1] = {
  };
  Faction_RecordListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_RecordListReq_descriptor_,
      Faction_RecordListReq::default_instance_,
      Faction_RecordListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_RecordListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_RecordListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_RecordListReq));
  Faction_RecordListRsp_descriptor_ = file->message_type(59);
  static const int Faction_RecordListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_RecordListRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_RecordListRsp, lst_),
  };
  Faction_RecordListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_RecordListRsp_descriptor_,
      Faction_RecordListRsp::default_instance_,
      Faction_RecordListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_RecordListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_RecordListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_RecordListRsp));
  Faction_DonateReq_descriptor_ = file->message_type(60);
  static const int Faction_DonateReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_DonateReq, id_),
  };
  Faction_DonateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_DonateReq_descriptor_,
      Faction_DonateReq::default_instance_,
      Faction_DonateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_DonateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_DonateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_DonateReq));
  Faction_DonateRsp_descriptor_ = file->message_type(61);
  static const int Faction_DonateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_DonateRsp, ret_),
  };
  Faction_DonateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_DonateRsp_descriptor_,
      Faction_DonateRsp::default_instance_,
      Faction_DonateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_DonateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_DonateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_DonateRsp));
  Faction_DonateNotify_descriptor_ = file->message_type(62);
  static const int Faction_DonateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_DonateNotify, donate_),
  };
  Faction_DonateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_DonateNotify_descriptor_,
      Faction_DonateNotify::default_instance_,
      Faction_DonateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_DonateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_DonateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_DonateNotify));
  Faction_SalaryReq_descriptor_ = file->message_type(63);
  static const int Faction_SalaryReq_offsets_[1] = {
  };
  Faction_SalaryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SalaryReq_descriptor_,
      Faction_SalaryReq::default_instance_,
      Faction_SalaryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SalaryReq));
  Faction_SalaryRsp_descriptor_ = file->message_type(64);
  static const int Faction_SalaryRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryRsp, salary_),
  };
  Faction_SalaryRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SalaryRsp_descriptor_,
      Faction_SalaryRsp::default_instance_,
      Faction_SalaryRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SalaryRsp));
  Faction_SalaryNotify_descriptor_ = file->message_type(65);
  static const int Faction_SalaryNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryNotify, salary_),
  };
  Faction_SalaryNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SalaryNotify_descriptor_,
      Faction_SalaryNotify::default_instance_,
      Faction_SalaryNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SalaryNotify));
  Faction_SalaryFetchReq_descriptor_ = file->message_type(66);
  static const int Faction_SalaryFetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryFetchReq, id_),
  };
  Faction_SalaryFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SalaryFetchReq_descriptor_,
      Faction_SalaryFetchReq::default_instance_,
      Faction_SalaryFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SalaryFetchReq));
  Faction_SalaryFetchRsp_descriptor_ = file->message_type(67);
  static const int Faction_SalaryFetchRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryFetchRsp, ret_),
  };
  Faction_SalaryFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SalaryFetchRsp_descriptor_,
      Faction_SalaryFetchRsp::default_instance_,
      Faction_SalaryFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SalaryFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SalaryFetchRsp));
  Faction_DinnerUpdateRsp_descriptor_ = file->message_type(68);
  static const int Faction_DinnerUpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_DinnerUpdateRsp, info_),
  };
  Faction_DinnerUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_DinnerUpdateRsp_descriptor_,
      Faction_DinnerUpdateRsp::default_instance_,
      Faction_DinnerUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_DinnerUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_DinnerUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_DinnerUpdateRsp));
  Faction_TransInviteListReq_descriptor_ = file->message_type(69);
  static const int Faction_TransInviteListReq_offsets_[1] = {
  };
  Faction_TransInviteListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_TransInviteListReq_descriptor_,
      Faction_TransInviteListReq::default_instance_,
      Faction_TransInviteListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_TransInviteListReq));
  Faction_TransInviteListRsp_descriptor_ = file->message_type(70);
  static const int Faction_TransInviteListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteListRsp, invite_),
  };
  Faction_TransInviteListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_TransInviteListRsp_descriptor_,
      Faction_TransInviteListRsp::default_instance_,
      Faction_TransInviteListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_TransInviteListRsp));
  Faction_TransAcceptListRsp_descriptor_ = file->message_type(71);
  static const int Faction_TransAcceptListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransAcceptListRsp, accept_),
  };
  Faction_TransAcceptListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_TransAcceptListRsp_descriptor_,
      Faction_TransAcceptListRsp::default_instance_,
      Faction_TransAcceptListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransAcceptListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransAcceptListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_TransAcceptListRsp));
  Faction_TransInviteReq_descriptor_ = file->message_type(72);
  static const int Faction_TransInviteReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteReq, invite_cid_),
  };
  Faction_TransInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_TransInviteReq_descriptor_,
      Faction_TransInviteReq::default_instance_,
      Faction_TransInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_TransInviteReq));
  Faction_TransInviteRsp_descriptor_ = file->message_type(73);
  static const int Faction_TransInviteRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteRsp, invite_cid_),
  };
  Faction_TransInviteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_TransInviteRsp_descriptor_,
      Faction_TransInviteRsp::default_instance_,
      Faction_TransInviteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_TransInviteRsp));
  Faction_TransInviteNotify_descriptor_ = file->message_type(74);
  static const int Faction_TransInviteNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteNotify, info_),
  };
  Faction_TransInviteNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_TransInviteNotify_descriptor_,
      Faction_TransInviteNotify::default_instance_,
      Faction_TransInviteNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransInviteNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_TransInviteNotify));
  Faction_TransDelAcceptNotify_descriptor_ = file->message_type(75);
  static const int Faction_TransDelAcceptNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransDelAcceptNotify, del_cid_),
  };
  Faction_TransDelAcceptNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_TransDelAcceptNotify_descriptor_,
      Faction_TransDelAcceptNotify::default_instance_,
      Faction_TransDelAcceptNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransDelAcceptNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransDelAcceptNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_TransDelAcceptNotify));
  Faction_TransAgreeReq_descriptor_ = file->message_type(76);
  static const int Faction_TransAgreeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransAgreeReq, cid_),
  };
  Faction_TransAgreeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_TransAgreeReq_descriptor_,
      Faction_TransAgreeReq::default_instance_,
      Faction_TransAgreeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransAgreeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransAgreeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_TransAgreeReq));
  Faction_TransAgreeRsp_descriptor_ = file->message_type(77);
  static const int Faction_TransAgreeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransAgreeRsp, ret_),
  };
  Faction_TransAgreeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_TransAgreeRsp_descriptor_,
      Faction_TransAgreeRsp::default_instance_,
      Faction_TransAgreeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransAgreeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_TransAgreeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_TransAgreeRsp));
  Faction_SkillInfoReq_descriptor_ = file->message_type(78);
  static const int Faction_SkillInfoReq_offsets_[1] = {
  };
  Faction_SkillInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SkillInfoReq_descriptor_,
      Faction_SkillInfoReq::default_instance_,
      Faction_SkillInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SkillInfoReq));
  Faction_SkillInfoRsp_descriptor_ = file->message_type(79);
  static const int Faction_SkillInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillInfoRsp, skill_),
  };
  Faction_SkillInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SkillInfoRsp_descriptor_,
      Faction_SkillInfoRsp::default_instance_,
      Faction_SkillInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SkillInfoRsp));
  Faction_SkillUpdateRsp_descriptor_ = file->message_type(80);
  static const int Faction_SkillUpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillUpdateRsp, skill_),
  };
  Faction_SkillUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SkillUpdateRsp_descriptor_,
      Faction_SkillUpdateRsp::default_instance_,
      Faction_SkillUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SkillUpdateRsp));
  Faction_SkillUpgradeReq_descriptor_ = file->message_type(81);
  static const int Faction_SkillUpgradeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillUpgradeReq, id_),
  };
  Faction_SkillUpgradeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SkillUpgradeReq_descriptor_,
      Faction_SkillUpgradeReq::default_instance_,
      Faction_SkillUpgradeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillUpgradeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillUpgradeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SkillUpgradeReq));
  Faction_SkillUpgradeRsp_descriptor_ = file->message_type(82);
  static const int Faction_SkillUpgradeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillUpgradeRsp, ret_),
  };
  Faction_SkillUpgradeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SkillUpgradeRsp_descriptor_,
      Faction_SkillUpgradeRsp::default_instance_,
      Faction_SkillUpgradeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillUpgradeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SkillUpgradeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SkillUpgradeRsp));
  Faction_AnswerRankListReq_descriptor_ = file->message_type(83);
  static const int Faction_AnswerRankListReq_offsets_[1] = {
  };
  Faction_AnswerRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_AnswerRankListReq_descriptor_,
      Faction_AnswerRankListReq::default_instance_,
      Faction_AnswerRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_AnswerRankListReq));
  Faction_AnswerRankListRsp_descriptor_ = file->message_type(84);
  static const int Faction_AnswerRankListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerRankListRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerRankListRsp, count_),
  };
  Faction_AnswerRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_AnswerRankListRsp_descriptor_,
      Faction_AnswerRankListRsp::default_instance_,
      Faction_AnswerRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_AnswerRankListRsp));
  Faction_AnswerCurRankRsp_descriptor_ = file->message_type(85);
  static const int Faction_AnswerCurRankRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerCurRankRsp, rank_),
  };
  Faction_AnswerCurRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_AnswerCurRankRsp_descriptor_,
      Faction_AnswerCurRankRsp::default_instance_,
      Faction_AnswerCurRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerCurRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerCurRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_AnswerCurRankRsp));
  Faction_AnswerStageRsp_descriptor_ = file->message_type(86);
  static const int Faction_AnswerStageRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerStageRsp, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerStageRsp, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerStageRsp, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerStageRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerStageRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerStageRsp, cid_),
  };
  Faction_AnswerStageRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_AnswerStageRsp_descriptor_,
      Faction_AnswerStageRsp::default_instance_,
      Faction_AnswerStageRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerStageRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerStageRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_AnswerStageRsp));
  Faction_AnswerResultRsp_descriptor_ = file->message_type(87);
  static const int Faction_AnswerResultRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerResultRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerResultRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerResultRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerResultRsp, count_),
  };
  Faction_AnswerResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_AnswerResultRsp_descriptor_,
      Faction_AnswerResultRsp::default_instance_,
      Faction_AnswerResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_AnswerResultRsp));
  Faction_AnswerFinalRsp_descriptor_ = file->message_type(88);
  static const int Faction_AnswerFinalRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerFinalRsp, final_),
  };
  Faction_AnswerFinalRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_AnswerFinalRsp_descriptor_,
      Faction_AnswerFinalRsp::default_instance_,
      Faction_AnswerFinalRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerFinalRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AnswerFinalRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_AnswerFinalRsp));
  Faction_BeastInfoReq_descriptor_ = file->message_type(89);
  static const int Faction_BeastInfoReq_offsets_[1] = {
  };
  Faction_BeastInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_BeastInfoReq_descriptor_,
      Faction_BeastInfoReq::default_instance_,
      Faction_BeastInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_BeastInfoReq));
  Faction_BeastInfoRsp_descriptor_ = file->message_type(90);
  static const int Faction_BeastInfoRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoRsp, myharm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoRsp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoRsp, is_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoRsp, today_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoRsp, week_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoRsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoRsp, tribute_),
  };
  Faction_BeastInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_BeastInfoRsp_descriptor_,
      Faction_BeastInfoRsp::default_instance_,
      Faction_BeastInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_BeastInfoRsp));
  Faction_BeastOpenInfoNotify_descriptor_ = file->message_type(91);
  static const int Faction_BeastOpenInfoNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastOpenInfoNotify, is_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastOpenInfoNotify, today_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastOpenInfoNotify, week_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastOpenInfoNotify, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastOpenInfoNotify, tribute_),
  };
  Faction_BeastOpenInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_BeastOpenInfoNotify_descriptor_,
      Faction_BeastOpenInfoNotify::default_instance_,
      Faction_BeastOpenInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastOpenInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastOpenInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_BeastOpenInfoNotify));
  Faction_BeastOpenReq_descriptor_ = file->message_type(92);
  static const int Faction_BeastOpenReq_offsets_[1] = {
  };
  Faction_BeastOpenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_BeastOpenReq_descriptor_,
      Faction_BeastOpenReq::default_instance_,
      Faction_BeastOpenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastOpenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastOpenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_BeastOpenReq));
  Faction_BeastOpenRsp_descriptor_ = file->message_type(93);
  static const int Faction_BeastOpenRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastOpenRsp, ret_),
  };
  Faction_BeastOpenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_BeastOpenRsp_descriptor_,
      Faction_BeastOpenRsp::default_instance_,
      Faction_BeastOpenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastOpenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastOpenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_BeastOpenRsp));
  Faction_BeastCurHarmRankRsp_descriptor_ = file->message_type(94);
  static const int Faction_BeastCurHarmRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastCurHarmRankRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastCurHarmRankRsp, myharm_),
  };
  Faction_BeastCurHarmRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_BeastCurHarmRankRsp_descriptor_,
      Faction_BeastCurHarmRankRsp::default_instance_,
      Faction_BeastCurHarmRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastCurHarmRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastCurHarmRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_BeastCurHarmRankRsp));
  Faction_BeastFinishRsp_descriptor_ = file->message_type(95);
  static const int Faction_BeastFinishRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastFinishRsp, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastFinishRsp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastFinishRsp, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastFinishRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastFinishRsp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastFinishRsp, faction_reward_),
  };
  Faction_BeastFinishRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_BeastFinishRsp_descriptor_,
      Faction_BeastFinishRsp::default_instance_,
      Faction_BeastFinishRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastFinishRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_BeastFinishRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_BeastFinishRsp));
  CL_FactionRoleUpdateRsp_descriptor_ = file->message_type(96);
  static const int CL_FactionRoleUpdateRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, leader_),
  };
  CL_FactionRoleUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CL_FactionRoleUpdateRsp_descriptor_,
      CL_FactionRoleUpdateRsp::default_instance_,
      CL_FactionRoleUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CL_FactionRoleUpdateRsp));
  LC_FactionCreate_descriptor_ = file->message_type(97);
  static const int LC_FactionCreate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionCreate, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionCreate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionCreate, notice_),
  };
  LC_FactionCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LC_FactionCreate_descriptor_,
      LC_FactionCreate::default_instance_,
      LC_FactionCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LC_FactionCreate));
  CL_FactionCreateResult_descriptor_ = file->message_type(98);
  static const int CL_FactionCreateResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionCreateResult, cid_),
  };
  CL_FactionCreateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CL_FactionCreateResult_descriptor_,
      CL_FactionCreateResult::default_instance_,
      CL_FactionCreateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionCreateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionCreateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CL_FactionCreateResult));
  LC_FactionChgName_descriptor_ = file->message_type(99);
  static const int LC_FactionChgName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionChgName, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionChgName, name_),
  };
  LC_FactionChgName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LC_FactionChgName_descriptor_,
      LC_FactionChgName::default_instance_,
      LC_FactionChgName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionChgName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionChgName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LC_FactionChgName));
  CL_FactionChgNameResult_descriptor_ = file->message_type(100);
  static const int CL_FactionChgNameResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionChgNameResult, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionChgNameResult, cid_),
  };
  CL_FactionChgNameResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CL_FactionChgNameResult_descriptor_,
      CL_FactionChgNameResult::default_instance_,
      CL_FactionChgNameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionChgNameResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionChgNameResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CL_FactionChgNameResult));
  CL_FactionDismissNotify_descriptor_ = file->message_type(101);
  static const int CL_FactionDismissNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionDismissNotify, faction_id_),
  };
  CL_FactionDismissNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CL_FactionDismissNotify_descriptor_,
      CL_FactionDismissNotify::default_instance_,
      CL_FactionDismissNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionDismissNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionDismissNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CL_FactionDismissNotify));
  LC_FactionAddAttrReq_descriptor_ = file->message_type(102);
  static const int LC_FactionAddAttrReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionAddAttrReq, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionAddAttrReq, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionAddAttrReq, tribute_),
  };
  LC_FactionAddAttrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LC_FactionAddAttrReq_descriptor_,
      LC_FactionAddAttrReq::default_instance_,
      LC_FactionAddAttrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionAddAttrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionAddAttrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LC_FactionAddAttrReq));
  LS_FactionAnswerCount_descriptor_ = file->message_type(103);
  static const int LS_FactionAnswerCount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerCount, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerCount, faction_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerCount, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerCount, zid_),
  };
  LS_FactionAnswerCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LS_FactionAnswerCount_descriptor_,
      LS_FactionAnswerCount::default_instance_,
      LS_FactionAnswerCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LS_FactionAnswerCount));
  SL_FactionAnswerRank_descriptor_ = file->message_type(104);
  static const int SL_FactionAnswerRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL_FactionAnswerRank, rank_),
  };
  SL_FactionAnswerRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SL_FactionAnswerRank_descriptor_,
      SL_FactionAnswerRank::default_instance_,
      SL_FactionAnswerRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL_FactionAnswerRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL_FactionAnswerRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SL_FactionAnswerRank));
  SL_FactionAnswerCurRankReq_descriptor_ = file->message_type(105);
  static const int SL_FactionAnswerCurRankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL_FactionAnswerCurRankReq, cid_),
  };
  SL_FactionAnswerCurRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SL_FactionAnswerCurRankReq_descriptor_,
      SL_FactionAnswerCurRankReq::default_instance_,
      SL_FactionAnswerCurRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL_FactionAnswerCurRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL_FactionAnswerCurRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SL_FactionAnswerCurRankReq));
  SC_FactionAnswerRankRsp_descriptor_ = file->message_type(106);
  static const int SC_FactionAnswerRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FactionAnswerRankRsp, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FactionAnswerRankRsp, rank_),
  };
  SC_FactionAnswerRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FactionAnswerRankRsp_descriptor_,
      SC_FactionAnswerRankRsp::default_instance_,
      SC_FactionAnswerRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FactionAnswerRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FactionAnswerRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FactionAnswerRankRsp));
  LS_FactionAnswerEndRsp_descriptor_ = file->message_type(107);
  static const int LS_FactionAnswerEndRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerEndRsp, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerEndRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerEndRsp, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerEndRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerEndRsp, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerEndRsp, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerEndRsp, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerEndRsp, faction_count_),
  };
  LS_FactionAnswerEndRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LS_FactionAnswerEndRsp_descriptor_,
      LS_FactionAnswerEndRsp::default_instance_,
      LS_FactionAnswerEndRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerEndRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionAnswerEndRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LS_FactionAnswerEndRsp));
  LC_FactionBeastFinishRsp_descriptor_ = file->message_type(108);
  static const int LC_FactionBeastFinishRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionBeastFinishRsp, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionBeastFinishRsp, cid_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionBeastFinishRsp, harm_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionBeastFinishRsp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionBeastFinishRsp, reward_),
  };
  LC_FactionBeastFinishRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LC_FactionBeastFinishRsp_descriptor_,
      LC_FactionBeastFinishRsp::default_instance_,
      LC_FactionBeastFinishRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionBeastFinishRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionBeastFinishRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LC_FactionBeastFinishRsp));
  FactionGuardData_descriptor_ = file->message_type(109);
  static const int FactionGuardData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardData, acc_person_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardData, acc_faction_contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardData, cur_encouragement_gold_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardData, cur_encouragement_diamond_count_),
  };
  FactionGuardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionGuardData_descriptor_,
      FactionGuardData::default_instance_,
      FactionGuardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionGuardData));
  Faction_GuardSceneInfoReq_descriptor_ = file->message_type(110);
  static const int Faction_GuardSceneInfoReq_offsets_[1] = {
  };
  Faction_GuardSceneInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_GuardSceneInfoReq_descriptor_,
      Faction_GuardSceneInfoReq::default_instance_,
      Faction_GuardSceneInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSceneInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSceneInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_GuardSceneInfoReq));
  Faction_GuardSceneInfoRsp_descriptor_ = file->message_type(111);
  static const int Faction_GuardSceneInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSceneInfoRsp, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSceneInfoRsp, cur_guard_encouragement_gold_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSceneInfoRsp, cur_guard_encouragement_diamond_count_),
  };
  Faction_GuardSceneInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_GuardSceneInfoRsp_descriptor_,
      Faction_GuardSceneInfoRsp::default_instance_,
      Faction_GuardSceneInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSceneInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSceneInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_GuardSceneInfoRsp));
  FactionGuardRankProto_descriptor_ = file->message_type(112);
  static const int FactionGuardRankProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardRankProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardRankProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardRankProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardRankProto, harm_),
  };
  FactionGuardRankProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionGuardRankProto_descriptor_,
      FactionGuardRankProto::default_instance_,
      FactionGuardRankProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardRankProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardRankProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionGuardRankProto));
  FactionGuardRankListProto_descriptor_ = file->message_type(113);
  static const int FactionGuardRankListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardRankListProto, lst_),
  };
  FactionGuardRankListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionGuardRankListProto_descriptor_,
      FactionGuardRankListProto::default_instance_,
      FactionGuardRankListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardRankListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardRankListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionGuardRankListProto));
  Faction_GuardPersonRankInfoReq_descriptor_ = file->message_type(114);
  static const int Faction_GuardPersonRankInfoReq_offsets_[1] = {
  };
  Faction_GuardPersonRankInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_GuardPersonRankInfoReq_descriptor_,
      Faction_GuardPersonRankInfoReq::default_instance_,
      Faction_GuardPersonRankInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardPersonRankInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardPersonRankInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_GuardPersonRankInfoReq));
  Faction_GuardPersonRankInfoRsp_descriptor_ = file->message_type(115);
  static const int Faction_GuardPersonRankInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardPersonRankInfoRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardPersonRankInfoRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardPersonRankInfoRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardPersonRankInfoRsp, myharm_),
  };
  Faction_GuardPersonRankInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_GuardPersonRankInfoRsp_descriptor_,
      Faction_GuardPersonRankInfoRsp::default_instance_,
      Faction_GuardPersonRankInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardPersonRankInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardPersonRankInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_GuardPersonRankInfoRsp));
  FactionGuardSocialRankProto_descriptor_ = file->message_type(116);
  static const int FactionGuardSocialRankProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardSocialRankProto, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardSocialRankProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardSocialRankProto, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardSocialRankProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardSocialRankProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardSocialRankProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardSocialRankProto, harm_),
  };
  FactionGuardSocialRankProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionGuardSocialRankProto_descriptor_,
      FactionGuardSocialRankProto::default_instance_,
      FactionGuardSocialRankProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardSocialRankProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardSocialRankProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionGuardSocialRankProto));
  FactionGuardSocialRankListProto_descriptor_ = file->message_type(117);
  static const int FactionGuardSocialRankListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardSocialRankListProto, lst_),
  };
  FactionGuardSocialRankListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionGuardSocialRankListProto_descriptor_,
      FactionGuardSocialRankListProto::default_instance_,
      FactionGuardSocialRankListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardSocialRankListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardSocialRankListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionGuardSocialRankListProto));
  Faction_GuardSocialRankListReq_descriptor_ = file->message_type(118);
  static const int Faction_GuardSocialRankListReq_offsets_[1] = {
  };
  Faction_GuardSocialRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_GuardSocialRankListReq_descriptor_,
      Faction_GuardSocialRankListReq::default_instance_,
      Faction_GuardSocialRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSocialRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSocialRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_GuardSocialRankListReq));
  Faction_GuardSocialRankListRsp_descriptor_ = file->message_type(119);
  static const int Faction_GuardSocialRankListRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSocialRankListRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSocialRankListRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSocialRankListRsp, count_),
  };
  Faction_GuardSocialRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_GuardSocialRankListRsp_descriptor_,
      Faction_GuardSocialRankListRsp::default_instance_,
      Faction_GuardSocialRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSocialRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardSocialRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_GuardSocialRankListRsp));
  GuardMonInfo_descriptor_ = file->message_type(120);
  static const int GuardMonInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardMonInfo, mon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardMonInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardMonInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardMonInfo, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardMonInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardMonInfo, is_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardMonInfo, is_battle_),
  };
  GuardMonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuardMonInfo_descriptor_,
      GuardMonInfo::default_instance_,
      GuardMonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardMonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardMonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuardMonInfo));
  Faction_GuardMonsterInfo_descriptor_ = file->message_type(121);
  static const int Faction_GuardMonsterInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardMonsterInfo, mons_),
  };
  Faction_GuardMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_GuardMonsterInfo_descriptor_,
      Faction_GuardMonsterInfo::default_instance_,
      Faction_GuardMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_GuardMonsterInfo));
  Faction_GuardMonsterInfoNotify_descriptor_ = file->message_type(122);
  static const int Faction_GuardMonsterInfoNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardMonsterInfoNotify, mons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardMonsterInfoNotify, type_),
  };
  Faction_GuardMonsterInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_GuardMonsterInfoNotify_descriptor_,
      Faction_GuardMonsterInfoNotify::default_instance_,
      Faction_GuardMonsterInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardMonsterInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardMonsterInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_GuardMonsterInfoNotify));
  Faction_GuardWaveReward_descriptor_ = file->message_type(123);
  static const int Faction_GuardWaveReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardWaveReward, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardWaveReward, reward_),
  };
  Faction_GuardWaveReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_GuardWaveReward_descriptor_,
      Faction_GuardWaveReward::default_instance_,
      Faction_GuardWaveReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardWaveReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardWaveReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_GuardWaveReward));
  Faction_GuardFinishRsp_descriptor_ = file->message_type(124);
  static const int Faction_GuardFinishRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardFinishRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardFinishRsp, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardFinishRsp, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardFinishRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardFinishRsp, fation_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardFinishRsp, fation_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardFinishRsp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardFinishRsp, faction_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardFinishRsp, wave_reward_),
  };
  Faction_GuardFinishRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_GuardFinishRsp_descriptor_,
      Faction_GuardFinishRsp::default_instance_,
      Faction_GuardFinishRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardFinishRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardFinishRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_GuardFinishRsp));
  Faction_GuardEncouragementReq_descriptor_ = file->message_type(125);
  static const int Faction_GuardEncouragementReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardEncouragementReq, type_),
  };
  Faction_GuardEncouragementReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_GuardEncouragementReq_descriptor_,
      Faction_GuardEncouragementReq::default_instance_,
      Faction_GuardEncouragementReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardEncouragementReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardEncouragementReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_GuardEncouragementReq));
  Faction_GuardEncouragementRsp_descriptor_ = file->message_type(126);
  static const int Faction_GuardEncouragementRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardEncouragementRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardEncouragementRsp, type_),
  };
  Faction_GuardEncouragementRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_GuardEncouragementRsp_descriptor_,
      Faction_GuardEncouragementRsp::default_instance_,
      Faction_GuardEncouragementRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardEncouragementRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_GuardEncouragementRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_GuardEncouragementRsp));
  LS_FactionGuardCount_descriptor_ = file->message_type(127);
  static const int LS_FactionGuardCount_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardCount, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardCount, faction_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardCount, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardCount, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardCount, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardCount, time_),
  };
  LS_FactionGuardCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LS_FactionGuardCount_descriptor_,
      LS_FactionGuardCount::default_instance_,
      LS_FactionGuardCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LS_FactionGuardCount));
  SL_FactionGuardRank_descriptor_ = file->message_type(128);
  static const int SL_FactionGuardRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL_FactionGuardRank, rank_),
  };
  SL_FactionGuardRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SL_FactionGuardRank_descriptor_,
      SL_FactionGuardRank::default_instance_,
      SL_FactionGuardRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL_FactionGuardRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL_FactionGuardRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SL_FactionGuardRank));
  SL_FactionGuardCurRankReq_descriptor_ = file->message_type(129);
  static const int SL_FactionGuardCurRankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL_FactionGuardCurRankReq, cid_),
  };
  SL_FactionGuardCurRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SL_FactionGuardCurRankReq_descriptor_,
      SL_FactionGuardCurRankReq::default_instance_,
      SL_FactionGuardCurRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL_FactionGuardCurRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL_FactionGuardCurRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SL_FactionGuardCurRankReq));
  SC_FactionGuardRankResultNotify_descriptor_ = file->message_type(130);
  static const int SC_FactionGuardRankResultNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FactionGuardRankResultNotify, rank_),
  };
  SC_FactionGuardRankResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FactionGuardRankResultNotify_descriptor_,
      SC_FactionGuardRankResultNotify::default_instance_,
      SC_FactionGuardRankResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FactionGuardRankResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FactionGuardRankResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FactionGuardRankResultNotify));
  LS_FactionGuardEndRsp_descriptor_ = file->message_type(131);
  static const int LS_FactionGuardEndRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardEndRsp, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardEndRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardEndRsp, endtime_),
  };
  LS_FactionGuardEndRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LS_FactionGuardEndRsp_descriptor_,
      LS_FactionGuardEndRsp::default_instance_,
      LS_FactionGuardEndRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardEndRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LS_FactionGuardEndRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LS_FactionGuardEndRsp));
  LC_FactionGuardEndRsp_descriptor_ = file->message_type(132);
  static const int LC_FactionGuardEndRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionGuardEndRsp, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionGuardEndRsp, cid_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionGuardEndRsp, reward_),
  };
  LC_FactionGuardEndRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LC_FactionGuardEndRsp_descriptor_,
      LC_FactionGuardEndRsp::default_instance_,
      LC_FactionGuardEndRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionGuardEndRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionGuardEndRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LC_FactionGuardEndRsp));
  GuardPlayerHarm_descriptor_ = file->message_type(133);
  static const int GuardPlayerHarm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardPlayerHarm, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardPlayerHarm, harm_),
  };
  GuardPlayerHarm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuardPlayerHarm_descriptor_,
      GuardPlayerHarm::default_instance_,
      GuardPlayerHarm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardPlayerHarm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardPlayerHarm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuardPlayerHarm));
  LC_FactionGuardPlayerHarm_descriptor_ = file->message_type(134);
  static const int LC_FactionGuardPlayerHarm_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionGuardPlayerHarm, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionGuardPlayerHarm, logicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionGuardPlayerHarm, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionGuardPlayerHarm, scene_id_),
  };
  LC_FactionGuardPlayerHarm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LC_FactionGuardPlayerHarm_descriptor_,
      LC_FactionGuardPlayerHarm::default_instance_,
      LC_FactionGuardPlayerHarm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionGuardPlayerHarm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionGuardPlayerHarm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LC_FactionGuardPlayerHarm));
  SC_FactionAnswerFinalRsp_descriptor_ = file->message_type(135);
  static const int SC_FactionAnswerFinalRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FactionAnswerFinalRsp, final_),
  };
  SC_FactionAnswerFinalRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FactionAnswerFinalRsp_descriptor_,
      SC_FactionAnswerFinalRsp::default_instance_,
      SC_FactionAnswerFinalRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FactionAnswerFinalRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FactionAnswerFinalRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FactionAnswerFinalRsp));
  CL_FactionAnswerQuestionRsp_descriptor_ = file->message_type(136);
  static const int CL_FactionAnswerQuestionRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionAnswerQuestionRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionAnswerQuestionRsp, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionAnswerQuestionRsp, curnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionAnswerQuestionRsp, content_),
  };
  CL_FactionAnswerQuestionRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CL_FactionAnswerQuestionRsp_descriptor_,
      CL_FactionAnswerQuestionRsp::default_instance_,
      CL_FactionAnswerQuestionRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionAnswerQuestionRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionAnswerQuestionRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CL_FactionAnswerQuestionRsp));
  FactionMoyuRankEntry_descriptor_ = file->message_type(137);
  static const int FactionMoyuRankEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRankEntry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRankEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRankEntry, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRankEntry, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRankEntry, rank_),
  };
  FactionMoyuRankEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMoyuRankEntry_descriptor_,
      FactionMoyuRankEntry::default_instance_,
      FactionMoyuRankEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRankEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRankEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMoyuRankEntry));
  FactionMoyuRankReq_descriptor_ = file->message_type(138);
  static const int FactionMoyuRankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRankReq, type_),
  };
  FactionMoyuRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMoyuRankReq_descriptor_,
      FactionMoyuRankReq::default_instance_,
      FactionMoyuRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMoyuRankReq));
  NtFactionMoyuRank_descriptor_ = file->message_type(139);
  static const int NtFactionMoyuRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyuRank, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyuRank, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyuRank, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyuRank, rank_),
  };
  NtFactionMoyuRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtFactionMoyuRank_descriptor_,
      NtFactionMoyuRank::default_instance_,
      NtFactionMoyuRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyuRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyuRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtFactionMoyuRank));
  FactionMoyuRecvReq_descriptor_ = file->message_type(140);
  static const int FactionMoyuRecvReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRecvReq, layerid_),
  };
  FactionMoyuRecvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMoyuRecvReq_descriptor_,
      FactionMoyuRecvReq::default_instance_,
      FactionMoyuRecvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRecvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRecvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMoyuRecvReq));
  FactionMoyuRecvRsp_descriptor_ = file->message_type(141);
  static const int FactionMoyuRecvRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRecvRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRecvRsp, layerid_),
  };
  FactionMoyuRecvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMoyuRecvRsp_descriptor_,
      FactionMoyuRecvRsp::default_instance_,
      FactionMoyuRecvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRecvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRecvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMoyuRecvRsp));
  NotifyFactionMoyuDup_descriptor_ = file->message_type(142);
  static const int NotifyFactionMoyuDup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFactionMoyuDup, target_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFactionMoyuDup, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFactionMoyuDup, cur_hp_),
  };
  NotifyFactionMoyuDup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyFactionMoyuDup_descriptor_,
      NotifyFactionMoyuDup::default_instance_,
      NotifyFactionMoyuDup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFactionMoyuDup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyFactionMoyuDup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyFactionMoyuDup));
  FactionMoyuTeam_descriptor_ = file->message_type(143);
  static const int FactionMoyuTeam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuTeam, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuTeam, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuTeam, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuTeam, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuTeam, rewaditem_),
  };
  FactionMoyuTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMoyuTeam_descriptor_,
      FactionMoyuTeam::default_instance_,
      FactionMoyuTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMoyuTeam));
  FactionMoyuEndRsp_descriptor_ = file->message_type(144);
  static const int FactionMoyuEndRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuEndRsp, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuEndRsp, mem_),
  };
  FactionMoyuEndRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMoyuEndRsp_descriptor_,
      FactionMoyuEndRsp::default_instance_,
      FactionMoyuEndRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuEndRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuEndRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMoyuEndRsp));
  FactionMoyuReq_descriptor_ = file->message_type(145);
  static const int FactionMoyuReq_offsets_[1] = {
  };
  FactionMoyuReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMoyuReq_descriptor_,
      FactionMoyuReq::default_instance_,
      FactionMoyuReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMoyuReq));
  NtFactionMoyuHarm_descriptor_ = file->message_type(146);
  static const int NtFactionMoyuHarm_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyuHarm, mem_),
  };
  NtFactionMoyuHarm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtFactionMoyuHarm_descriptor_,
      NtFactionMoyuHarm::default_instance_,
      NtFactionMoyuHarm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyuHarm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyuHarm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtFactionMoyuHarm));
  NtFactionMoyuDupKill_descriptor_ = file->message_type(147);
  static const int NtFactionMoyuDupKill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyuDupKill, endtime_),
  };
  NtFactionMoyuDupKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtFactionMoyuDupKill_descriptor_,
      NtFactionMoyuDupKill::default_instance_,
      NtFactionMoyuDupKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyuDupKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyuDupKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtFactionMoyuDupKill));
  NtFactionMoyu_descriptor_ = file->message_type(148);
  static const int NtFactionMoyu_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyu, cur_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyu, cur_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyu, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyu, pass_layer_),
  };
  NtFactionMoyu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtFactionMoyu_descriptor_,
      NtFactionMoyu::default_instance_,
      NtFactionMoyu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtFactionMoyu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtFactionMoyu));
  FactionMoyuRewardReq_descriptor_ = file->message_type(149);
  static const int FactionMoyuRewardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRewardReq, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRewardReq, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRewardReq, rank_),
  };
  FactionMoyuRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMoyuRewardReq_descriptor_,
      FactionMoyuRewardReq::default_instance_,
      FactionMoyuRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMoyuRewardReq));
  FactionMoyuUpdateReq_descriptor_ = file->message_type(150);
  static const int FactionMoyuUpdateReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuUpdateReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuUpdateReq, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuUpdateReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuUpdateReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuUpdateReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuUpdateReq, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuUpdateReq, harm_time_),
  };
  FactionMoyuUpdateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMoyuUpdateReq_descriptor_,
      FactionMoyuUpdateReq::default_instance_,
      FactionMoyuUpdateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuUpdateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuUpdateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMoyuUpdateReq));
  FactionMoyuAddHarmReq_descriptor_ = file->message_type(151);
  static const int FactionMoyuAddHarmReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuAddHarmReq, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuAddHarmReq, add_harm_),
  };
  FactionMoyuAddHarmReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMoyuAddHarmReq_descriptor_,
      FactionMoyuAddHarmReq::default_instance_,
      FactionMoyuAddHarmReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuAddHarmReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuAddHarmReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMoyuAddHarmReq));
  FactionSynMoyuReq_descriptor_ = file->message_type(152);
  static const int FactionSynMoyuReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSynMoyuReq, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSynMoyuReq, cur_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSynMoyuReq, cur_hp_),
  };
  FactionSynMoyuReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionSynMoyuReq_descriptor_,
      FactionSynMoyuReq::default_instance_,
      FactionSynMoyuReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSynMoyuReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSynMoyuReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionSynMoyuReq));
  FactionMoyuPassReq_descriptor_ = file->message_type(153);
  static const int FactionMoyuPassReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuPassReq, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuPassReq, layerid_),
  };
  FactionMoyuPassReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMoyuPassReq_descriptor_,
      FactionMoyuPassReq::default_instance_,
      FactionMoyuPassReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuPassReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyuPassReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMoyuPassReq));
  LCFactionMoyuRankReq_descriptor_ = file->message_type(154);
  static const int LCFactionMoyuRankReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFactionMoyuRankReq, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFactionMoyuRankReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFactionMoyuRankReq, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFactionMoyuRankReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFactionMoyuRankReq, zid_),
  };
  LCFactionMoyuRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCFactionMoyuRankReq_descriptor_,
      LCFactionMoyuRankReq::default_instance_,
      LCFactionMoyuRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFactionMoyuRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCFactionMoyuRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCFactionMoyuRankReq));
  CLFactionMoyuRecvReq_descriptor_ = file->message_type(155);
  static const int CLFactionMoyuRecvReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFactionMoyuRecvReq, layerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFactionMoyuRecvReq, cid_),
  };
  CLFactionMoyuRecvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLFactionMoyuRecvReq_descriptor_,
      CLFactionMoyuRecvReq::default_instance_,
      CLFactionMoyuRecvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFactionMoyuRecvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLFactionMoyuRecvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLFactionMoyuRecvReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Faction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionListProto_descriptor_, &FactionListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionProto_descriptor_, &FactionProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMemProto_descriptor_, &FactionMemProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMemListProto_descriptor_, &FactionMemListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionApplyProto_descriptor_, &FactionApplyProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionApplyListProto_descriptor_, &FactionApplyListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMemSimpleProto_descriptor_, &FactionMemSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMemSimpleListProto_descriptor_, &FactionMemSimpleListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionSimpleProto_descriptor_, &FactionSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionRecordProto_descriptor_, &FactionRecordProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionRecordListProto_descriptor_, &FactionRecordListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionSalaryProto_descriptor_, &FactionSalaryProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionSalaryListProto_descriptor_, &FactionSalaryListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDinnerProto_descriptor_, &FactionDinnerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionInviteProto_descriptor_, &FactionInviteProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionSkillProto_descriptor_, &FactionSkillProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionSkillListProto_descriptor_, &FactionSkillListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionAnswerRankProto_descriptor_, &FactionAnswerRankProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionAnswerRankListProto_descriptor_, &FactionAnswerRankListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionAnswerFinalProto_descriptor_, &FactionAnswerFinalProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionBeastRankProto_descriptor_, &FactionBeastRankProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionBeastRankListProto_descriptor_, &FactionBeastRankListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SyncLoginRsp_descriptor_, &Faction_SyncLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SyncInfoRsp_descriptor_, &Faction_SyncInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_InfoReq_descriptor_, &Faction_InfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_InfoRsp_descriptor_, &Faction_InfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_InfoListReq_descriptor_, &Faction_InfoListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_InfoListRsp_descriptor_, &Faction_InfoListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SimpleReq_descriptor_, &Faction_SimpleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SimpleRsp_descriptor_, &Faction_SimpleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_MemListReq_descriptor_, &Faction_MemListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_MemListRsp_descriptor_, &Faction_MemListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_CreateReq_descriptor_, &Faction_CreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_CreateRsp_descriptor_, &Faction_CreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ApplyListReq_descriptor_, &Faction_ApplyListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ApplyListRsp_descriptor_, &Faction_ApplyListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ApplyJoinReq_descriptor_, &Faction_ApplyJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ApplyJoinRsp_descriptor_, &Faction_ApplyJoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ApplyOperateReq_descriptor_, &Faction_ApplyOperateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ApplyOperateRsp_descriptor_, &Faction_ApplyOperateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_KickReq_descriptor_, &Faction_KickReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_KickRsp_descriptor_, &Faction_KickRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_QuitReq_descriptor_, &Faction_QuitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_QuitRsp_descriptor_, &Faction_QuitRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_AppointReq_descriptor_, &Faction_AppointReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_AppointRsp_descriptor_, &Faction_AppointRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ChgNoticeReq_descriptor_, &Faction_ChgNoticeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ChgNoticeRsp_descriptor_, &Faction_ChgNoticeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SetApplyReq_descriptor_, &Faction_SetApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SetApplyRsp_descriptor_, &Faction_SetApplyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_OneKeyApplyReq_descriptor_, &Faction_OneKeyApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_OneKeyApplyRsp_descriptor_, &Faction_OneKeyApplyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ChgNameReq_descriptor_, &Faction_ChgNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ChgNameRsp_descriptor_, &Faction_ChgNameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_NewApplyNotify_descriptor_, &Faction_NewApplyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_InviteJoinReq_descriptor_, &Faction_InviteJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_InviteJoinRsp_descriptor_, &Faction_InviteJoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_IviteJoinNotify_descriptor_, &Faction_IviteJoinNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_RecordListReq_descriptor_, &Faction_RecordListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_RecordListRsp_descriptor_, &Faction_RecordListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_DonateReq_descriptor_, &Faction_DonateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_DonateRsp_descriptor_, &Faction_DonateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_DonateNotify_descriptor_, &Faction_DonateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SalaryReq_descriptor_, &Faction_SalaryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SalaryRsp_descriptor_, &Faction_SalaryRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SalaryNotify_descriptor_, &Faction_SalaryNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SalaryFetchReq_descriptor_, &Faction_SalaryFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SalaryFetchRsp_descriptor_, &Faction_SalaryFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_DinnerUpdateRsp_descriptor_, &Faction_DinnerUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_TransInviteListReq_descriptor_, &Faction_TransInviteListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_TransInviteListRsp_descriptor_, &Faction_TransInviteListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_TransAcceptListRsp_descriptor_, &Faction_TransAcceptListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_TransInviteReq_descriptor_, &Faction_TransInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_TransInviteRsp_descriptor_, &Faction_TransInviteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_TransInviteNotify_descriptor_, &Faction_TransInviteNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_TransDelAcceptNotify_descriptor_, &Faction_TransDelAcceptNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_TransAgreeReq_descriptor_, &Faction_TransAgreeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_TransAgreeRsp_descriptor_, &Faction_TransAgreeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SkillInfoReq_descriptor_, &Faction_SkillInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SkillInfoRsp_descriptor_, &Faction_SkillInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SkillUpdateRsp_descriptor_, &Faction_SkillUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SkillUpgradeReq_descriptor_, &Faction_SkillUpgradeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SkillUpgradeRsp_descriptor_, &Faction_SkillUpgradeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_AnswerRankListReq_descriptor_, &Faction_AnswerRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_AnswerRankListRsp_descriptor_, &Faction_AnswerRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_AnswerCurRankRsp_descriptor_, &Faction_AnswerCurRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_AnswerStageRsp_descriptor_, &Faction_AnswerStageRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_AnswerResultRsp_descriptor_, &Faction_AnswerResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_AnswerFinalRsp_descriptor_, &Faction_AnswerFinalRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_BeastInfoReq_descriptor_, &Faction_BeastInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_BeastInfoRsp_descriptor_, &Faction_BeastInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_BeastOpenInfoNotify_descriptor_, &Faction_BeastOpenInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_BeastOpenReq_descriptor_, &Faction_BeastOpenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_BeastOpenRsp_descriptor_, &Faction_BeastOpenRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_BeastCurHarmRankRsp_descriptor_, &Faction_BeastCurHarmRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_BeastFinishRsp_descriptor_, &Faction_BeastFinishRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CL_FactionRoleUpdateRsp_descriptor_, &CL_FactionRoleUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LC_FactionCreate_descriptor_, &LC_FactionCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CL_FactionCreateResult_descriptor_, &CL_FactionCreateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LC_FactionChgName_descriptor_, &LC_FactionChgName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CL_FactionChgNameResult_descriptor_, &CL_FactionChgNameResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CL_FactionDismissNotify_descriptor_, &CL_FactionDismissNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LC_FactionAddAttrReq_descriptor_, &LC_FactionAddAttrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LS_FactionAnswerCount_descriptor_, &LS_FactionAnswerCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SL_FactionAnswerRank_descriptor_, &SL_FactionAnswerRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SL_FactionAnswerCurRankReq_descriptor_, &SL_FactionAnswerCurRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FactionAnswerRankRsp_descriptor_, &SC_FactionAnswerRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LS_FactionAnswerEndRsp_descriptor_, &LS_FactionAnswerEndRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LC_FactionBeastFinishRsp_descriptor_, &LC_FactionBeastFinishRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionGuardData_descriptor_, &FactionGuardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_GuardSceneInfoReq_descriptor_, &Faction_GuardSceneInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_GuardSceneInfoRsp_descriptor_, &Faction_GuardSceneInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionGuardRankProto_descriptor_, &FactionGuardRankProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionGuardRankListProto_descriptor_, &FactionGuardRankListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_GuardPersonRankInfoReq_descriptor_, &Faction_GuardPersonRankInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_GuardPersonRankInfoRsp_descriptor_, &Faction_GuardPersonRankInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionGuardSocialRankProto_descriptor_, &FactionGuardSocialRankProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionGuardSocialRankListProto_descriptor_, &FactionGuardSocialRankListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_GuardSocialRankListReq_descriptor_, &Faction_GuardSocialRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_GuardSocialRankListRsp_descriptor_, &Faction_GuardSocialRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuardMonInfo_descriptor_, &GuardMonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_GuardMonsterInfo_descriptor_, &Faction_GuardMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_GuardMonsterInfoNotify_descriptor_, &Faction_GuardMonsterInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_GuardWaveReward_descriptor_, &Faction_GuardWaveReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_GuardFinishRsp_descriptor_, &Faction_GuardFinishRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_GuardEncouragementReq_descriptor_, &Faction_GuardEncouragementReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_GuardEncouragementRsp_descriptor_, &Faction_GuardEncouragementRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LS_FactionGuardCount_descriptor_, &LS_FactionGuardCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SL_FactionGuardRank_descriptor_, &SL_FactionGuardRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SL_FactionGuardCurRankReq_descriptor_, &SL_FactionGuardCurRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FactionGuardRankResultNotify_descriptor_, &SC_FactionGuardRankResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LS_FactionGuardEndRsp_descriptor_, &LS_FactionGuardEndRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LC_FactionGuardEndRsp_descriptor_, &LC_FactionGuardEndRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuardPlayerHarm_descriptor_, &GuardPlayerHarm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LC_FactionGuardPlayerHarm_descriptor_, &LC_FactionGuardPlayerHarm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FactionAnswerFinalRsp_descriptor_, &SC_FactionAnswerFinalRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CL_FactionAnswerQuestionRsp_descriptor_, &CL_FactionAnswerQuestionRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMoyuRankEntry_descriptor_, &FactionMoyuRankEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMoyuRankReq_descriptor_, &FactionMoyuRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtFactionMoyuRank_descriptor_, &NtFactionMoyuRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMoyuRecvReq_descriptor_, &FactionMoyuRecvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMoyuRecvRsp_descriptor_, &FactionMoyuRecvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyFactionMoyuDup_descriptor_, &NotifyFactionMoyuDup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMoyuTeam_descriptor_, &FactionMoyuTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMoyuEndRsp_descriptor_, &FactionMoyuEndRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMoyuReq_descriptor_, &FactionMoyuReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtFactionMoyuHarm_descriptor_, &NtFactionMoyuHarm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtFactionMoyuDupKill_descriptor_, &NtFactionMoyuDupKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtFactionMoyu_descriptor_, &NtFactionMoyu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMoyuRewardReq_descriptor_, &FactionMoyuRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMoyuUpdateReq_descriptor_, &FactionMoyuUpdateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMoyuAddHarmReq_descriptor_, &FactionMoyuAddHarmReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionSynMoyuReq_descriptor_, &FactionSynMoyuReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMoyuPassReq_descriptor_, &FactionMoyuPassReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCFactionMoyuRankReq_descriptor_, &LCFactionMoyuRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLFactionMoyuRecvReq_descriptor_, &CLFactionMoyuRecvReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Faction_2eproto() {
  delete FactionListProto::default_instance_;
  delete FactionListProto_reflection_;
  delete FactionProto::default_instance_;
  delete FactionProto_reflection_;
  delete FactionMemProto::default_instance_;
  delete FactionMemProto_reflection_;
  delete FactionMemListProto::default_instance_;
  delete FactionMemListProto_reflection_;
  delete FactionApplyProto::default_instance_;
  delete FactionApplyProto_reflection_;
  delete FactionApplyListProto::default_instance_;
  delete FactionApplyListProto_reflection_;
  delete FactionMemSimpleProto::default_instance_;
  delete FactionMemSimpleProto_reflection_;
  delete FactionMemSimpleListProto::default_instance_;
  delete FactionMemSimpleListProto_reflection_;
  delete FactionSimpleProto::default_instance_;
  delete FactionSimpleProto_reflection_;
  delete FactionRecordProto::default_instance_;
  delete FactionRecordProto_reflection_;
  delete FactionRecordListProto::default_instance_;
  delete FactionRecordListProto_reflection_;
  delete FactionSalaryProto::default_instance_;
  delete FactionSalaryProto_reflection_;
  delete FactionSalaryListProto::default_instance_;
  delete FactionSalaryListProto_reflection_;
  delete FactionDinnerProto::default_instance_;
  delete FactionDinnerProto_reflection_;
  delete FactionInviteProto::default_instance_;
  delete FactionInviteProto_reflection_;
  delete FactionSkillProto::default_instance_;
  delete FactionSkillProto_reflection_;
  delete FactionSkillListProto::default_instance_;
  delete FactionSkillListProto_reflection_;
  delete FactionAnswerRankProto::default_instance_;
  delete FactionAnswerRankProto_reflection_;
  delete FactionAnswerRankListProto::default_instance_;
  delete FactionAnswerRankListProto_reflection_;
  delete FactionAnswerFinalProto::default_instance_;
  delete FactionAnswerFinalProto_reflection_;
  delete FactionBeastRankProto::default_instance_;
  delete FactionBeastRankProto_reflection_;
  delete FactionBeastRankListProto::default_instance_;
  delete FactionBeastRankListProto_reflection_;
  delete Faction_SyncLoginRsp::default_instance_;
  delete Faction_SyncLoginRsp_reflection_;
  delete Faction_SyncInfoRsp::default_instance_;
  delete Faction_SyncInfoRsp_reflection_;
  delete Faction_InfoReq::default_instance_;
  delete Faction_InfoReq_reflection_;
  delete Faction_InfoRsp::default_instance_;
  delete Faction_InfoRsp_reflection_;
  delete Faction_InfoListReq::default_instance_;
  delete Faction_InfoListReq_reflection_;
  delete Faction_InfoListRsp::default_instance_;
  delete Faction_InfoListRsp_reflection_;
  delete Faction_SimpleReq::default_instance_;
  delete Faction_SimpleReq_reflection_;
  delete Faction_SimpleRsp::default_instance_;
  delete Faction_SimpleRsp_reflection_;
  delete Faction_MemListReq::default_instance_;
  delete Faction_MemListReq_reflection_;
  delete Faction_MemListRsp::default_instance_;
  delete Faction_MemListRsp_reflection_;
  delete Faction_CreateReq::default_instance_;
  delete Faction_CreateReq_reflection_;
  delete Faction_CreateRsp::default_instance_;
  delete Faction_CreateRsp_reflection_;
  delete Faction_ApplyListReq::default_instance_;
  delete Faction_ApplyListReq_reflection_;
  delete Faction_ApplyListRsp::default_instance_;
  delete Faction_ApplyListRsp_reflection_;
  delete Faction_ApplyJoinReq::default_instance_;
  delete Faction_ApplyJoinReq_reflection_;
  delete Faction_ApplyJoinRsp::default_instance_;
  delete Faction_ApplyJoinRsp_reflection_;
  delete Faction_ApplyOperateReq::default_instance_;
  delete Faction_ApplyOperateReq_reflection_;
  delete Faction_ApplyOperateRsp::default_instance_;
  delete Faction_ApplyOperateRsp_reflection_;
  delete Faction_KickReq::default_instance_;
  delete Faction_KickReq_reflection_;
  delete Faction_KickRsp::default_instance_;
  delete Faction_KickRsp_reflection_;
  delete Faction_QuitReq::default_instance_;
  delete Faction_QuitReq_reflection_;
  delete Faction_QuitRsp::default_instance_;
  delete Faction_QuitRsp_reflection_;
  delete Faction_AppointReq::default_instance_;
  delete Faction_AppointReq_reflection_;
  delete Faction_AppointRsp::default_instance_;
  delete Faction_AppointRsp_reflection_;
  delete Faction_ChgNoticeReq::default_instance_;
  delete Faction_ChgNoticeReq_reflection_;
  delete Faction_ChgNoticeRsp::default_instance_;
  delete Faction_ChgNoticeRsp_reflection_;
  delete Faction_SetApplyReq::default_instance_;
  delete Faction_SetApplyReq_reflection_;
  delete Faction_SetApplyRsp::default_instance_;
  delete Faction_SetApplyRsp_reflection_;
  delete Faction_OneKeyApplyReq::default_instance_;
  delete Faction_OneKeyApplyReq_reflection_;
  delete Faction_OneKeyApplyRsp::default_instance_;
  delete Faction_OneKeyApplyRsp_reflection_;
  delete Faction_ChgNameReq::default_instance_;
  delete Faction_ChgNameReq_reflection_;
  delete Faction_ChgNameRsp::default_instance_;
  delete Faction_ChgNameRsp_reflection_;
  delete Faction_NewApplyNotify::default_instance_;
  delete Faction_NewApplyNotify_reflection_;
  delete Faction_InviteJoinReq::default_instance_;
  delete Faction_InviteJoinReq_reflection_;
  delete Faction_InviteJoinRsp::default_instance_;
  delete Faction_InviteJoinRsp_reflection_;
  delete Faction_IviteJoinNotify::default_instance_;
  delete Faction_IviteJoinNotify_reflection_;
  delete Faction_RecordListReq::default_instance_;
  delete Faction_RecordListReq_reflection_;
  delete Faction_RecordListRsp::default_instance_;
  delete Faction_RecordListRsp_reflection_;
  delete Faction_DonateReq::default_instance_;
  delete Faction_DonateReq_reflection_;
  delete Faction_DonateRsp::default_instance_;
  delete Faction_DonateRsp_reflection_;
  delete Faction_DonateNotify::default_instance_;
  delete Faction_DonateNotify_reflection_;
  delete Faction_SalaryReq::default_instance_;
  delete Faction_SalaryReq_reflection_;
  delete Faction_SalaryRsp::default_instance_;
  delete Faction_SalaryRsp_reflection_;
  delete Faction_SalaryNotify::default_instance_;
  delete Faction_SalaryNotify_reflection_;
  delete Faction_SalaryFetchReq::default_instance_;
  delete Faction_SalaryFetchReq_reflection_;
  delete Faction_SalaryFetchRsp::default_instance_;
  delete Faction_SalaryFetchRsp_reflection_;
  delete Faction_DinnerUpdateRsp::default_instance_;
  delete Faction_DinnerUpdateRsp_reflection_;
  delete Faction_TransInviteListReq::default_instance_;
  delete Faction_TransInviteListReq_reflection_;
  delete Faction_TransInviteListRsp::default_instance_;
  delete Faction_TransInviteListRsp_reflection_;
  delete Faction_TransAcceptListRsp::default_instance_;
  delete Faction_TransAcceptListRsp_reflection_;
  delete Faction_TransInviteReq::default_instance_;
  delete Faction_TransInviteReq_reflection_;
  delete Faction_TransInviteRsp::default_instance_;
  delete Faction_TransInviteRsp_reflection_;
  delete Faction_TransInviteNotify::default_instance_;
  delete Faction_TransInviteNotify_reflection_;
  delete Faction_TransDelAcceptNotify::default_instance_;
  delete Faction_TransDelAcceptNotify_reflection_;
  delete Faction_TransAgreeReq::default_instance_;
  delete Faction_TransAgreeReq_reflection_;
  delete Faction_TransAgreeRsp::default_instance_;
  delete Faction_TransAgreeRsp_reflection_;
  delete Faction_SkillInfoReq::default_instance_;
  delete Faction_SkillInfoReq_reflection_;
  delete Faction_SkillInfoRsp::default_instance_;
  delete Faction_SkillInfoRsp_reflection_;
  delete Faction_SkillUpdateRsp::default_instance_;
  delete Faction_SkillUpdateRsp_reflection_;
  delete Faction_SkillUpgradeReq::default_instance_;
  delete Faction_SkillUpgradeReq_reflection_;
  delete Faction_SkillUpgradeRsp::default_instance_;
  delete Faction_SkillUpgradeRsp_reflection_;
  delete Faction_AnswerRankListReq::default_instance_;
  delete Faction_AnswerRankListReq_reflection_;
  delete Faction_AnswerRankListRsp::default_instance_;
  delete Faction_AnswerRankListRsp_reflection_;
  delete Faction_AnswerCurRankRsp::default_instance_;
  delete Faction_AnswerCurRankRsp_reflection_;
  delete Faction_AnswerStageRsp::default_instance_;
  delete Faction_AnswerStageRsp_reflection_;
  delete Faction_AnswerResultRsp::default_instance_;
  delete Faction_AnswerResultRsp_reflection_;
  delete Faction_AnswerFinalRsp::default_instance_;
  delete Faction_AnswerFinalRsp_reflection_;
  delete Faction_BeastInfoReq::default_instance_;
  delete Faction_BeastInfoReq_reflection_;
  delete Faction_BeastInfoRsp::default_instance_;
  delete Faction_BeastInfoRsp_reflection_;
  delete Faction_BeastOpenInfoNotify::default_instance_;
  delete Faction_BeastOpenInfoNotify_reflection_;
  delete Faction_BeastOpenReq::default_instance_;
  delete Faction_BeastOpenReq_reflection_;
  delete Faction_BeastOpenRsp::default_instance_;
  delete Faction_BeastOpenRsp_reflection_;
  delete Faction_BeastCurHarmRankRsp::default_instance_;
  delete Faction_BeastCurHarmRankRsp_reflection_;
  delete Faction_BeastFinishRsp::default_instance_;
  delete Faction_BeastFinishRsp_reflection_;
  delete CL_FactionRoleUpdateRsp::default_instance_;
  delete CL_FactionRoleUpdateRsp_reflection_;
  delete LC_FactionCreate::default_instance_;
  delete LC_FactionCreate_reflection_;
  delete CL_FactionCreateResult::default_instance_;
  delete CL_FactionCreateResult_reflection_;
  delete LC_FactionChgName::default_instance_;
  delete LC_FactionChgName_reflection_;
  delete CL_FactionChgNameResult::default_instance_;
  delete CL_FactionChgNameResult_reflection_;
  delete CL_FactionDismissNotify::default_instance_;
  delete CL_FactionDismissNotify_reflection_;
  delete LC_FactionAddAttrReq::default_instance_;
  delete LC_FactionAddAttrReq_reflection_;
  delete LS_FactionAnswerCount::default_instance_;
  delete LS_FactionAnswerCount_reflection_;
  delete SL_FactionAnswerRank::default_instance_;
  delete SL_FactionAnswerRank_reflection_;
  delete SL_FactionAnswerCurRankReq::default_instance_;
  delete SL_FactionAnswerCurRankReq_reflection_;
  delete SC_FactionAnswerRankRsp::default_instance_;
  delete SC_FactionAnswerRankRsp_reflection_;
  delete LS_FactionAnswerEndRsp::default_instance_;
  delete LS_FactionAnswerEndRsp_reflection_;
  delete LC_FactionBeastFinishRsp::default_instance_;
  delete LC_FactionBeastFinishRsp_reflection_;
  delete FactionGuardData::default_instance_;
  delete FactionGuardData_reflection_;
  delete Faction_GuardSceneInfoReq::default_instance_;
  delete Faction_GuardSceneInfoReq_reflection_;
  delete Faction_GuardSceneInfoRsp::default_instance_;
  delete Faction_GuardSceneInfoRsp_reflection_;
  delete FactionGuardRankProto::default_instance_;
  delete FactionGuardRankProto_reflection_;
  delete FactionGuardRankListProto::default_instance_;
  delete FactionGuardRankListProto_reflection_;
  delete Faction_GuardPersonRankInfoReq::default_instance_;
  delete Faction_GuardPersonRankInfoReq_reflection_;
  delete Faction_GuardPersonRankInfoRsp::default_instance_;
  delete Faction_GuardPersonRankInfoRsp_reflection_;
  delete FactionGuardSocialRankProto::default_instance_;
  delete FactionGuardSocialRankProto_reflection_;
  delete FactionGuardSocialRankListProto::default_instance_;
  delete FactionGuardSocialRankListProto_reflection_;
  delete Faction_GuardSocialRankListReq::default_instance_;
  delete Faction_GuardSocialRankListReq_reflection_;
  delete Faction_GuardSocialRankListRsp::default_instance_;
  delete Faction_GuardSocialRankListRsp_reflection_;
  delete GuardMonInfo::default_instance_;
  delete GuardMonInfo_reflection_;
  delete Faction_GuardMonsterInfo::default_instance_;
  delete Faction_GuardMonsterInfo_reflection_;
  delete Faction_GuardMonsterInfoNotify::default_instance_;
  delete Faction_GuardMonsterInfoNotify_reflection_;
  delete Faction_GuardWaveReward::default_instance_;
  delete Faction_GuardWaveReward_reflection_;
  delete Faction_GuardFinishRsp::default_instance_;
  delete Faction_GuardFinishRsp_reflection_;
  delete Faction_GuardEncouragementReq::default_instance_;
  delete Faction_GuardEncouragementReq_reflection_;
  delete Faction_GuardEncouragementRsp::default_instance_;
  delete Faction_GuardEncouragementRsp_reflection_;
  delete LS_FactionGuardCount::default_instance_;
  delete LS_FactionGuardCount_reflection_;
  delete SL_FactionGuardRank::default_instance_;
  delete SL_FactionGuardRank_reflection_;
  delete SL_FactionGuardCurRankReq::default_instance_;
  delete SL_FactionGuardCurRankReq_reflection_;
  delete SC_FactionGuardRankResultNotify::default_instance_;
  delete SC_FactionGuardRankResultNotify_reflection_;
  delete LS_FactionGuardEndRsp::default_instance_;
  delete LS_FactionGuardEndRsp_reflection_;
  delete LC_FactionGuardEndRsp::default_instance_;
  delete LC_FactionGuardEndRsp_reflection_;
  delete GuardPlayerHarm::default_instance_;
  delete GuardPlayerHarm_reflection_;
  delete LC_FactionGuardPlayerHarm::default_instance_;
  delete LC_FactionGuardPlayerHarm_reflection_;
  delete SC_FactionAnswerFinalRsp::default_instance_;
  delete SC_FactionAnswerFinalRsp_reflection_;
  delete CL_FactionAnswerQuestionRsp::default_instance_;
  delete CL_FactionAnswerQuestionRsp_reflection_;
  delete FactionMoyuRankEntry::default_instance_;
  delete FactionMoyuRankEntry_reflection_;
  delete FactionMoyuRankReq::default_instance_;
  delete FactionMoyuRankReq_reflection_;
  delete NtFactionMoyuRank::default_instance_;
  delete NtFactionMoyuRank_reflection_;
  delete FactionMoyuRecvReq::default_instance_;
  delete FactionMoyuRecvReq_reflection_;
  delete FactionMoyuRecvRsp::default_instance_;
  delete FactionMoyuRecvRsp_reflection_;
  delete NotifyFactionMoyuDup::default_instance_;
  delete NotifyFactionMoyuDup_reflection_;
  delete FactionMoyuTeam::default_instance_;
  delete FactionMoyuTeam_reflection_;
  delete FactionMoyuEndRsp::default_instance_;
  delete FactionMoyuEndRsp_reflection_;
  delete FactionMoyuReq::default_instance_;
  delete FactionMoyuReq_reflection_;
  delete NtFactionMoyuHarm::default_instance_;
  delete NtFactionMoyuHarm_reflection_;
  delete NtFactionMoyuDupKill::default_instance_;
  delete NtFactionMoyuDupKill_reflection_;
  delete NtFactionMoyu::default_instance_;
  delete NtFactionMoyu_reflection_;
  delete FactionMoyuRewardReq::default_instance_;
  delete FactionMoyuRewardReq_reflection_;
  delete FactionMoyuUpdateReq::default_instance_;
  delete FactionMoyuUpdateReq_reflection_;
  delete FactionMoyuAddHarmReq::default_instance_;
  delete FactionMoyuAddHarmReq_reflection_;
  delete FactionSynMoyuReq::default_instance_;
  delete FactionSynMoyuReq_reflection_;
  delete FactionMoyuPassReq::default_instance_;
  delete FactionMoyuPassReq_reflection_;
  delete LCFactionMoyuRankReq::default_instance_;
  delete LCFactionMoyuRankReq_reflection_;
  delete CLFactionMoyuRecvReq::default_instance_;
  delete CLFactionMoyuRecvReq_reflection_;
}

void protobuf_AddDesc_Faction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rFaction.proto\022\010proto_ff\032\tCom.proto\032\017Co"
    "mDefine.proto\"\263\001\n\020FactionListProto\022\022\n\nfa"
    "ction_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\014\n\004rank\030\003 \001"
    "(\005\022\022\n\nleader_cid\030\004 \001(\004\022\023\n\013leader_name\030\005 "
    "\001(\014\022\r\n\005level\030\006 \001(\005\022\021\n\tmem_count\030\007 \001(\005\022\r\n"
    "\005fight\030\010 \001(\004\022\025\n\ralready_apply\030\t \001(\005\"\302\002\n\014"
    "FactionProto\022\022\n\nfaction_id\030\001 \001(\r\022\014\n\004name"
    "\030\002 \001(\014\022\r\n\005level\030\003 \001(\005\022\014\n\004rank\030\004 \001(\005\022\021\n\tm"
    "em_count\030\005 \001(\005\022\r\n\005fight\030\006 \001(\004\022\r\n\005grade\030\007"
    " \001(\005\022\013\n\003exp\030\010 \001(\004\022\016\n\006notice\030\t \001(\t\022\022\n\nlea"
    "der_cid\030\n \001(\004\022\023\n\013leader_name\030\013 \001(\014\022)\n\006fa"
    "cade\030\014 \001(\0132\031.proto_ff.RoleFacadeProto\022\022\n"
    "\napply_type\030\r \001(\005\022\024\n\014apply_minlev\030\016 \001(\005\022"
    "\023\n\013apply_fight\030\017 \001(\004\022\022\n\nonline_num\030\020 \001(\005"
    "\"\205\002\n\017FactionMemProto\022\013\n\003cid\030\001 \001(\004\022\014\n\004nam"
    "e\030\002 \001(\014\022\014\n\004prof\030\003 \001(\005\022\021\n\tvip_level\030\004 \001(\005"
    "\022\r\n\005level\030\005 \001(\005\022\014\n\004duty\030\006 \001(\005\022\r\n\005fight\030\007"
    " \001(\004\022\024\n\014total_contri\030\010 \001(\004\022\021\n\tis_online\030"
    "\t \001(\005\022\023\n\013logout_time\030\n \001(\004\022\020\n\010clan3_id\030\013"
    " \001(\004\022\020\n\010clan5_id\030\014 \001(\004\022(\n\004head\030\r \001(\0132\032.p"
    "roto_ff.RoleHeadPicProto\"A\n\023FactionMemLi"
    "stProto\022*\n\007mem_lst\030\001 \003(\0132\031.proto_ff.Fact"
    "ionMemProto\"L\n\021FactionApplyProto\022\013\n\003cid\030"
    "\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\r\n\005level\030\003 \001(\005\022\r\n\005fi"
    "ght\030\004 \001(\004\"G\n\025FactionApplyListProto\022.\n\tap"
    "ply_lst\030\001 \003(\0132\033.proto_ff.FactionApplyPro"
    "to\"^\n\025FactionMemSimpleProto\022\013\n\003cid\030\001 \001(\004"
    "\022\014\n\004name\030\002 \001(\014\022\r\n\005level\030\003 \001(\005\022\014\n\004duty\030\004 "
    "\001(\005\022\r\n\005fight\030\005 \001(\004\"P\n\031FactionMemSimpleLi"
    "stProto\0223\n\nsimple_lst\030\001 \003(\0132\037.proto_ff.F"
    "actionMemSimpleProto\"\217\002\n\022FactionSimplePr"
    "oto\022\022\n\nfaction_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\014\n"
    "\004rank\030\003 \001(\005\022\022\n\nleader_cid\030\004 \001(\004\022\023\n\013leade"
    "r_name\030\005 \001(\014\022\r\n\005level\030\006 \001(\005\022\021\n\tmem_count"
    "\030\007 \001(\005\022\r\n\005fight\030\010 \001(\004\022\022\n\napply_type\030\t \001("
    "\005\022\024\n\014apply_minlev\030\n \001(\005\022\023\n\013apply_fight\030\013"
    " \001(\004\0220\n\003mem\030\014 \001(\0132#.proto_ff.FactionMemS"
    "impleListProto\"L\n\022FactionRecordProto\022\014\n\004"
    "name\030\001 \001(\014\022\014\n\004time\030\002 \001(\004\022\n\n\002op\030\003 \001(\005\022\016\n\006"
    "param1\030\004 \001(\003\"J\n\026FactionRecordListProto\0220"
    "\n\nrecord_lst\030\001 \003(\0132\034.proto_ff.FactionRec"
    "ordProto\"<\n\022FactionSalaryProto\022\n\n\002id\030\001 \001"
    "(\005\022\013\n\003cur\030\002 \001(\005\022\r\n\005fetch\030\003 \001(\005\"D\n\026Factio"
    "nSalaryListProto\022*\n\004info\030\001 \003(\0132\034.proto_f"
    "f.FactionSalaryProto\"N\n\022FactionDinnerPro"
    "to\022\r\n\005trans\030\001 \001(\r\022\014\n\004meat\030\002 \001(\r\022\013\n\003exp\030\003"
    " \001(\r\022\016\n\006contri\030\004 \001(\r\"v\n\022FactionInvitePro"
    "to\022\013\n\003cid\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\r\n\005level\030\003"
    " \001(\005\022\014\n\004prof\030\004 \001(\005\022(\n\004head\030\005 \001(\0132\032.proto"
    "_ff.RoleHeadPicProto\".\n\021FactionSkillProt"
    "o\022\n\n\002id\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\"B\n\025FactionS"
    "killListProto\022)\n\004info\030\001 \003(\0132\033.proto_ff.F"
    "actionSkillProto\"d\n\026FactionAnswerRankPro"
    "to\022\014\n\004rank\030\001 \001(\005\022\022\n\nfaction_id\030\002 \001(\r\022\014\n\004"
    "name\030\003 \001(\014\022\013\n\003zid\030\004 \001(\r\022\r\n\005count\030\005 \001(\005\"K"
    "\n\032FactionAnswerRankListProto\022-\n\003lst\030\001 \003("
    "\0132 .proto_ff.FactionAnswerRankProto\"\253\001\n\027"
    "FactionAnswerFinalProto\022\014\n\004rank\030\001 \001(\005\022\022\n"
    "\nfaction_id\030\002 \001(\r\022\014\n\004name\030\003 \001(\014\022\013\n\003zid\030\004"
    " \001(\r\022\013\n\003cid\030\005 \001(\004\022\r\n\005count\030\006 \001(\r\022\013\n\003sec\030"
    "\007 \001(\005\022\023\n\013player_name\030\010 \001(\014\022\025\n\rfaction_co"
    "unt\030\t \001(\r\"N\n\025FactionBeastRankProto\022\014\n\004ra"
    "nk\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004\022\014\n\004name\030\003 \001(\014\022\014\n\004h"
    "arm\030\004 \001(\003\"I\n\031FactionBeastRankListProto\022,"
    "\n\003lst\030\001 \003(\0132\037.proto_ff.FactionBeastRankP"
    "roto\"J\n\024Faction_SyncLoginRsp\022$\n\004info\030\001 \001"
    "(\0132\026.proto_ff.FactionProto\022\014\n\004duty\030\002 \001(\005"
    "\"T\n\023Faction_SyncInfoRsp\022\022\n\nfaction_id\030\001 "
    "\001(\r\022\014\n\004name\030\002 \001(\014\022\014\n\004duty\030\003 \001(\005\022\r\n\005level"
    "\030\004 \001(\005\"\021\n\017Faction_InfoReq\"D\n\017Faction_Inf"
    "oRsp\022\013\n\003ret\030\001 \002(\005\022$\n\004info\030\002 \001(\0132\026.proto_"
    "ff.FactionProto\"\025\n\023Faction_InfoListReq\"C"
    "\n\023Faction_InfoListRsp\022,\n\010info_lst\030\001 \003(\0132"
    "\032.proto_ff.FactionListProto\"\'\n\021Faction_S"
    "impleReq\022\022\n\nfaction_id\030\001 \001(\r\"N\n\021Faction_"
    "SimpleRsp\022\013\n\003ret\030\001 \002(\005\022,\n\006simple\030\002 \001(\0132\034"
    ".proto_ff.FactionSimpleProto\"\024\n\022Faction_"
    "MemListReq\"Q\n\022Faction_MemListRsp\022\013\n\003ret\030"
    "\001 \002(\005\022.\n\007mem_lst\030\002 \001(\0132\035.proto_ff.Factio"
    "nMemListProto\"1\n\021Faction_CreateReq\022\014\n\004na"
    "me\030\001 \001(\014\022\016\n\006notice\030\002 \001(\014\"F\n\021Faction_Crea"
    "teRsp\022\013\n\003ret\030\001 \002(\005\022$\n\004info\030\002 \001(\0132\026.proto"
    "_ff.FactionProto\"\026\n\024Faction_ApplyListReq"
    "\"R\n\024Faction_ApplyListRsp\022\013\n\003ret\030\001 \002(\005\022-\n"
    "\004info\030\002 \001(\0132\037.proto_ff.FactionApplyListP"
    "roto\"*\n\024Faction_ApplyJoinReq\022\022\n\nfaction_"
    "id\030\001 \001(\r\"7\n\024Faction_ApplyJoinRsp\022\013\n\003ret\030"
    "\001 \002(\005\022\022\n\nfaction_id\030\002 \001(\r\"2\n\027Faction_App"
    "lyOperateReq\022\n\n\002op\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004\"o\n"
    "\027Faction_ApplyOperateRsp\022\013\n\003ret\030\001 \002(\005\022\n\n"
    "\002op\030\002 \001(\005\022\013\n\003cid\030\003 \001(\004\022.\n\007mem_lst\030\004 \001(\0132"
    "\035.proto_ff.FactionMemListProto\"\"\n\017Factio"
    "n_KickReq\022\017\n\007cid_lst\030\001 \003(\004\"/\n\017Faction_Ki"
    "ckRsp\022\013\n\003ret\030\001 \002(\005\022\017\n\007cid_lst\030\002 \003(\004\"\021\n\017F"
    "action_QuitReq\"\036\n\017Faction_QuitRsp\022\013\n\003ret"
    "\030\001 \002(\005\"/\n\022Faction_AppointReq\022\013\n\003cid\030\001 \001("
    "\004\022\014\n\004duty\030\002 \001(\005\"O\n\022Faction_AppointRsp\022\013\n"
    "\003ret\030\001 \002(\005\022\013\n\003cid\030\002 \001(\004\022\014\n\004duty\030\003 \001(\005\022\021\n"
    "\tself_duty\030\004 \001(\005\"&\n\024Faction_ChgNoticeReq"
    "\022\016\n\006notice\030\001 \001(\014\"3\n\024Faction_ChgNoticeRsp"
    "\022\013\n\003ret\030\001 \002(\005\022\016\n\006notice\030\002 \001(\014\"A\n\023Faction"
    "_SetApplyReq\022\014\n\004type\030\001 \001(\005\022\r\n\005level\030\002 \001("
    "\005\022\r\n\005fight\030\003 \001(\004\"N\n\023Faction_SetApplyRsp\022"
    "\013\n\003ret\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\022\r\n\005level\030\003 \001("
    "\005\022\r\n\005fight\030\004 \001(\004\"\030\n\026Faction_OneKeyApplyR"
    "eq\"5\n\026Faction_OneKeyApplyRsp\022\013\n\003ret\030\001 \002("
    "\005\022\016\n\006id_lst\030\002 \003(\r\"\"\n\022Faction_ChgNameReq\022"
    "\014\n\004name\030\001 \001(\014\"/\n\022Faction_ChgNameRsp\022\013\n\003r"
    "et\030\001 \002(\005\022\014\n\004name\030\002 \001(\014\"\030\n\026Faction_NewApp"
    "lyNotify\"$\n\025Faction_InviteJoinReq\022\013\n\003cid"
    "\030\002 \001(\004\"$\n\025Faction_InviteJoinRsp\022\013\n\003ret\030\001"
    " \002(\005\"^\n\027Faction_IviteJoinNotify\022\013\n\003cid\030\001"
    " \002(\004\022\014\n\004name\030\002 \002(\014\022\022\n\nfaction_id\030\003 \002(\r\022\024"
    "\n\014faction_name\030\004 \002(\014\"\027\n\025Faction_RecordLi"
    "stReq\"S\n\025Faction_RecordListRsp\022\013\n\003ret\030\001 "
    "\002(\005\022-\n\003lst\030\002 \001(\0132 .proto_ff.FactionRecor"
    "dListProto\"\037\n\021Faction_DonateReq\022\n\n\002id\030\001 "
    "\001(\005\" \n\021Faction_DonateRsp\022\013\n\003ret\030\001 \002(\005\"&\n"
    "\024Faction_DonateNotify\022\016\n\006donate\030\001 \002(\005\"\023\n"
    "\021Faction_SalaryReq\"E\n\021Faction_SalaryRsp\022"
    "0\n\006salary\030\001 \001(\0132 .proto_ff.FactionSalary"
    "ListProto\"H\n\024Faction_SalaryNotify\0220\n\006sal"
    "ary\030\001 \001(\0132 .proto_ff.FactionSalaryListPr"
    "oto\"$\n\026Faction_SalaryFetchReq\022\n\n\002id\030\001 \001("
    "\005\"%\n\026Faction_SalaryFetchRsp\022\013\n\003ret\030\001 \002(\005"
    "\"E\n\027Faction_DinnerUpdateRsp\022*\n\004info\030\001 \001("
    "\0132\034.proto_ff.FactionDinnerProto\"\034\n\032Facti"
    "on_TransInviteListReq\"J\n\032Faction_TransIn"
    "viteListRsp\022,\n\006invite\030\001 \003(\0132\034.proto_ff.F"
    "actionInviteProto\"J\n\032Faction_TransAccept"
    "ListRsp\022,\n\006accept\030\001 \003(\0132\034.proto_ff.Facti"
    "onInviteProto\",\n\026Faction_TransInviteReq\022"
    "\022\n\ninvite_cid\030\001 \001(\004\"9\n\026Faction_TransInvi"
    "teRsp\022\013\n\003ret\030\001 \002(\005\022\022\n\ninvite_cid\030\002 \001(\004\"G"
    "\n\031Faction_TransInviteNotify\022*\n\004info\030\001 \001("
    "\0132\034.proto_ff.FactionInviteProto\"/\n\034Facti"
    "on_TransDelAcceptNotify\022\017\n\007del_cid\030\001 \003(\004"
    "\"$\n\025Faction_TransAgreeReq\022\013\n\003cid\030\001 \001(\004\"$"
    "\n\025Faction_TransAgreeRsp\022\013\n\003ret\030\001 \002(\005\"\026\n\024"
    "Faction_SkillInfoReq\"F\n\024Faction_SkillInf"
    "oRsp\022.\n\005skill\030\001 \001(\0132\037.proto_ff.FactionSk"
    "illListProto\"H\n\026Faction_SkillUpdateRsp\022."
    "\n\005skill\030\001 \001(\0132\037.proto_ff.FactionSkillLis"
    "tProto\"%\n\027Faction_SkillUpgradeReq\022\n\n\002id\030"
    "\001 \001(\005\"&\n\027Faction_SkillUpgradeRsp\022\013\n\003ret\030"
    "\001 \002(\005\"\033\n\031Faction_AnswerRankListReq\"^\n\031Fa"
    "ction_AnswerRankListRsp\0222\n\004rank\030\001 \001(\0132$."
    "proto_ff.FactionAnswerRankListProto\022\r\n\005c"
    "ount\030\002 \001(\r\"N\n\030Faction_AnswerCurRankRsp\0222"
    "\n\004rank\030\001 \001(\0132$.proto_ff.FactionAnswerRan"
    "kListProto\"h\n\026Faction_AnswerStageRsp\022\r\n\005"
    "stage\030\001 \002(\005\022\013\n\003sec\030\002 \002(\005\022\013\n\003num\030\003 \001(\005\022\n\n"
    "\002id\030\004 \001(\005\022\014\n\004name\030\005 \001(\014\022\013\n\003cid\030\006 \001(\004\"O\n\027"
    "Faction_AnswerResultRsp\022\n\n\002id\030\001 \001(\005\022\013\n\003c"
    "id\030\002 \001(\004\022\014\n\004name\030\003 \001(\014\022\r\n\005count\030\004 \001(\005\"J\n"
    "\026Faction_AnswerFinalRsp\0220\n\005final\030\001 \003(\0132!"
    ".proto_ff.FactionAnswerFinalProto\"\026\n\024Fac"
    "tion_BeastInfoReq\"\321\001\n\024Faction_BeastInfoR"
    "sp\0221\n\004rank\030\001 \001(\0132#.proto_ff.FactionBeast"
    "RankListProto\022\016\n\006myrank\030\002 \001(\r\022\016\n\006myharm\030"
    "\003 \001(\003\022\014\n\004star\030\004 \001(\005\022\017\n\007is_open\030\005 \001(\005\022\023\n\013"
    "today_count\030\006 \001(\r\022\022\n\nweek_count\030\007 \001(\r\022\r\n"
    "\005level\030\010 \001(\005\022\017\n\007tribute\030\t \001(\r\"w\n\033Faction"
    "_BeastOpenInfoNotify\022\017\n\007is_open\030\001 \001(\005\022\023\n"
    "\013today_count\030\002 \001(\r\022\022\n\nweek_count\030\003 \001(\r\022\r"
    "\n\005level\030\004 \001(\005\022\017\n\007tribute\030\005 \001(\r\"\026\n\024Factio"
    "n_BeastOpenReq\"#\n\024Faction_BeastOpenRsp\022\013"
    "\n\003ret\030\001 \002(\005\"`\n\033Faction_BeastCurHarmRankR"
    "sp\0221\n\004rank\030\001 \001(\0132#.proto_ff.FactionBeast"
    "RankListProto\022\016\n\006myharm\030\002 \001(\003\"\235\001\n\026Factio"
    "n_BeastFinishRsp\022\013\n\003sec\030\001 \001(\005\022\014\n\004star\030\002 "
    "\001(\005\022\014\n\004harm\030\003 \001(\003\022\014\n\004rank\030\004 \001(\005\022!\n\006rewar"
    "d\030\005 \003(\0132\021.proto_ff.ComItem\022)\n\016faction_re"
    "ward\030\006 \003(\0132\021.proto_ff.ComItem\"u\n\027CL_Fact"
    "ionRoleUpdateRsp\022\013\n\003cid\030\001 \002(\004\022\022\n\nfaction"
    "_id\030\002 \002(\r\022\014\n\004name\030\003 \002(\014\022\014\n\004duty\030\004 \002(\005\022\r\n"
    "\005level\030\005 \002(\005\022\016\n\006leader\030\006 \002(\004\"=\n\020LC_Facti"
    "onCreate\022\013\n\003cid\030\001 \002(\004\022\014\n\004name\030\002 \002(\014\022\016\n\006n"
    "otice\030\003 \002(\014\"%\n\026CL_FactionCreateResult\022\013\n"
    "\003cid\030\001 \002(\004\".\n\021LC_FactionChgName\022\013\n\003cid\030\001"
    " \002(\004\022\014\n\004name\030\002 \002(\014\"3\n\027CL_FactionChgNameR"
    "esult\022\013\n\003ret\030\001 \002(\005\022\013\n\003cid\030\002 \002(\004\"-\n\027CL_Fa"
    "ctionDismissNotify\022\022\n\nfaction_id\030\001 \002(\r\"H"
    "\n\024LC_FactionAddAttrReq\022\022\n\nfaction_id\030\001 \002"
    "(\r\022\013\n\003exp\030\002 \001(\r\022\017\n\007tribute\030\003 \001(\005\"]\n\025LS_F"
    "actionAnswerCount\022\022\n\nfaction_id\030\001 \002(\r\022\024\n"
    "\014faction_name\030\002 \002(\014\022\r\n\005count\030\003 \002(\r\022\013\n\003zi"
    "d\030\004 \002(\r\"J\n\024SL_FactionAnswerRank\0222\n\004rank\030"
    "\001 \001(\0132$.proto_ff.FactionAnswerRankListPr"
    "oto\")\n\032SL_FactionAnswerCurRankReq\022\013\n\003cid"
    "\030\001 \002(\004\":\n\027SC_FactionAnswerRankRsp\022\021\n\tfac"
    "tionid\030\001 \003(\r\022\014\n\004rank\030\002 \003(\r\"\236\001\n\026LS_Factio"
    "nAnswerEndRsp\022\021\n\tfactionid\030\001 \002(\r\022\013\n\003zid\030"
    "\002 \002(\r\022\017\n\007endtime\030\003 \002(\004\022\013\n\003cid\030\004 \002(\004\022\r\n\005c"
    "ount\030\005 \002(\r\022\023\n\013player_name\030\006 \002(\014\022\013\n\003sec\030\007"
    " \002(\005\022\025\n\rfaction_count\030\010 \002(\r\"\205\001\n\030LC_Facti"
    "onBeastFinishRsp\022\021\n\tfactionid\030\001 \002(\r\022\017\n\007c"
    "id_lst\030\002 \003(\004\022\020\n\010harm_lst\030\003 \003(\003\022\014\n\004star\030\004"
    " \001(\005\022%\n\006reward\030\005 \003(\0132\025.proto_ff.ComItemB"
    "ind\"\225\001\n\020FactionGuardData\022\026\n\016acc_person_e"
    "xp\030\001 \001(\004\022\032\n\022acc_faction_contri\030\002 \001(\004\022$\n\034"
    "cur_encouragement_gold_count\030\003 \001(\r\022\'\n\037cu"
    "r_encouragement_diamond_count\030\004 \001(\r\"\033\n\031F"
    "action_GuardSceneInfoReq\"\240\001\n\031Faction_Gua"
    "rdSceneInfoRsp\022(\n\004data\030\001 \001(\0132\032.proto_ff."
    "FactionGuardData\022*\n\"cur_guard_encouragem"
    "ent_gold_count\030\002 \001(\r\022-\n%cur_guard_encour"
    "agement_diamond_count\030\003 \001(\r\"N\n\025FactionGu"
    "ardRankProto\022\014\n\004rank\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004\022"
    "\014\n\004name\030\003 \001(\014\022\014\n\004harm\030\004 \001(\003\"I\n\031FactionGu"
    "ardRankListProto\022,\n\003lst\030\001 \003(\0132\037.proto_ff"
    ".FactionGuardRankProto\" \n\036Faction_GuardP"
    "ersonRankInfoReq\"\200\001\n\036Faction_GuardPerson"
    "RankInfoRsp\022\013\n\003ret\030\001 \001(\005\0221\n\004rank\030\002 \001(\0132#"
    ".proto_ff.FactionGuardRankListProto\022\016\n\006m"
    "yrank\030\003 \001(\r\022\016\n\006myharm\030\004 \001(\003\"\204\001\n\033FactionG"
    "uardSocialRankProto\022\021\n\tfactionid\030\001 \001(\r\022\014"
    "\n\004name\030\002 \001(\014\022\r\n\005count\030\003 \001(\004\022\013\n\003zid\030\004 \001(\r"
    "\022\014\n\004time\030\005 \001(\004\022\014\n\004rank\030\006 \001(\r\022\014\n\004harm\030\007 \001"
    "(\003\"U\n\037FactionGuardSocialRankListProto\0222\n"
    "\003lst\030\001 \003(\0132%.proto_ff.FactionGuardSocial"
    "RankProto\" \n\036Faction_GuardSocialRankList"
    "Req\"u\n\036Faction_GuardSocialRankListRsp\022\013\n"
    "\003ret\030\001 \001(\005\0227\n\004rank\030\002 \001(\0132).proto_ff.Fact"
    "ionGuardSocialRankListProto\022\r\n\005count\030\003 \001"
    "(\r\"\217\001\n\014GuardMonInfo\022\016\n\006mon_id\030\001 \001(\003\022\013\n\003c"
    "id\030\002 \001(\003\022\n\n\002hp\030\003 \001(\003\022\016\n\006max_hp\030\004 \001(\003\022 \n\003"
    "pos\030\005 \001(\0132\023.proto_ff.Vector3PB\022\021\n\tis_tar"
    "get\030\006 \001(\005\022\021\n\tis_battle\030\007 \001(\005\"@\n\030Faction_"
    "GuardMonsterInfo\022$\n\004mons\030\001 \003(\0132\026.proto_f"
    "f.GuardMonInfo\"`\n\036Faction_GuardMonsterIn"
    "foNotify\0220\n\004mons\030\001 \001(\0132\".proto_ff.Factio"
    "n_GuardMonsterInfo\022\014\n\004type\030\002 \001(\005\"J\n\027Fact"
    "ion_GuardWaveReward\022\014\n\004wave\030\001 \001(\005\022!\n\006rew"
    "ard\030\002 \003(\0132\021.proto_ff.ComItem\"\202\002\n\026Faction"
    "_GuardFinishRsp\022\016\n\006result\030\001 \001(\005\022\013\n\003sec\030\002"
    " \001(\005\022\014\n\004harm\030\003 \001(\003\022\014\n\004rank\030\004 \001(\005\022\023\n\013fati"
    "on_rank\030\005 \001(\004\022\024\n\014fation_count\030\006 \001(\r\022!\n\006r"
    "eward\030\010 \003(\0132\021.proto_ff.ComItem\022)\n\016factio"
    "n_reward\030\t \003(\0132\021.proto_ff.ComItem\0226\n\013wav"
    "e_reward\030\n \003(\0132!.proto_ff.Faction_GuardW"
    "aveReward\"-\n\035Faction_GuardEncouragementR"
    "eq\022\014\n\004type\030\001 \001(\005\"\?\n\035Faction_GuardEncoura"
    "gementRsp\022\020\n\010ret_code\030\001 \001(\005\022\014\n\004type\030\002 \001("
    "\005\"x\n\024LS_FactionGuardCount\022\022\n\nfaction_id\030"
    "\001 \002(\r\022\024\n\014faction_name\030\002 \002(\014\022\r\n\005count\030\003 \002"
    "(\r\022\013\n\003zid\030\004 \002(\r\022\014\n\004harm\030\005 \002(\004\022\014\n\004time\030\006 "
    "\002(\004\"N\n\023SL_FactionGuardRank\0227\n\004rank\030\001 \001(\013"
    "2).proto_ff.FactionGuardSocialRankListPr"
    "oto\"(\n\031SL_FactionGuardCurRankReq\022\013\n\003cid\030"
    "\001 \002(\004\"V\n\037SC_FactionGuardRankResultNotify"
    "\0223\n\004rank\030\001 \001(\0132%.proto_ff.FactionGuardSo"
    "cialRankProto\"H\n\025LS_FactionGuardEndRsp\022\021"
    "\n\tfactionid\030\001 \002(\r\022\013\n\003zid\030\002 \002(\r\022\017\n\007endtim"
    "e\030\003 \002(\004\"b\n\025LC_FactionGuardEndRsp\022\021\n\tfact"
    "ionid\030\001 \002(\r\022\017\n\007cid_lst\030\002 \003(\004\022%\n\006reward\030\003"
    " \003(\0132\025.proto_ff.ComItemBind\",\n\017GuardPlay"
    "erHarm\022\013\n\003cid\030\001 \002(\004\022\014\n\004harm\030\002 \002(\004\"~\n\031LC_"
    "FactionGuardPlayerHarm\022*\n\007players\030\001 \003(\0132"
    "\031.proto_ff.GuardPlayerHarm\022\017\n\007logicid\030\002 "
    "\002(\r\022\022\n\nfaction_id\030\003 \002(\r\022\020\n\010scene_id\030\004 \002("
    "\004\"L\n\030SC_FactionAnswerFinalRsp\0220\n\005final\030\001"
    " \003(\0132!.proto_ff.FactionAnswerFinalProto\""
    "Z\n\033CL_FactionAnswerQuestionRsp\022\013\n\003cid\030\001 "
    "\002(\004\022\r\n\005first\030\002 \002(\005\022\016\n\006curnum\030\003 \002(\005\022\017\n\007co"
    "ntent\030\004 \002(\014\"Y\n\024FactionMoyuRankEntry\022\n\n\002i"
    "d\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\013\n\003zid\030\003 \001(\005\022\014\n\004ha"
    "rm\030\004 \001(\004\022\014\n\004rank\030\005 \001(\005\"\"\n\022FactionMoyuRan"
    "kReq\022\014\n\004type\030\001 \001(\005\"l\n\021NtFactionMoyuRank\022"
    "\014\n\004type\030\001 \001(\005\022-\n\005infos\030\002 \003(\0132\036.proto_ff."
    "FactionMoyuRankEntry\022\014\n\004harm\030\003 \001(\004\022\014\n\004ra"
    "nk\030\004 \001(\005\"%\n\022FactionMoyuRecvReq\022\017\n\007layeri"
    "d\030\001 \001(\005\"2\n\022FactionMoyuRecvRsp\022\013\n\003ret\030\001 \001"
    "(\005\022\017\n\007layerid\030\002 \001(\005\"J\n\024NotifyFactionMoyu"
    "Dup\022\022\n\ntarget_cid\030\001 \001(\004\022\016\n\006max_hp\030\002 \001(\004\022"
    "\016\n\006cur_hp\030\003 \001(\004\"\226\001\n\017FactionMoyuTeam\022*\n\004i"
    "nfo\030\001 \001(\0132\034.proto_ff.RolePlayerMiniInfo\022"
    "\014\n\004harm\030\002 \001(\004\022\r\n\005state\030\003 \001(\r\022\016\n\006max_hp\030\004"
    " \001(\004\022*\n\trewaditem\030\005 \003(\0132\027.proto_ff.ItemP"
    "rotoInfo\"J\n\021FactionMoyuEndRsp\022\r\n\005dupid\030\001"
    " \001(\004\022&\n\003mem\030\002 \003(\0132\031.proto_ff.FactionMoyu"
    "Team\"\020\n\016FactionMoyuReq\";\n\021NtFactionMoyuH"
    "arm\022&\n\003mem\030\001 \003(\0132\031.proto_ff.FactionMoyuT"
    "eam\"\'\n\024NtFactionMoyuDupKill\022\017\n\007endtime\030\001"
    " \001(\005\"V\n\rNtFactionMoyu\022\021\n\tcur_layer\030\001 \001(\005"
    "\022\016\n\006cur_hp\030\002 \001(\004\022\016\n\006max_hp\030\003 \001(\004\022\022\n\npass"
    "_layer\030\004 \001(\005\"F\n\024FactionMoyuRewardReq\022\021\n\t"
    "factionId\030\001 \001(\004\022\r\n\005boxid\030\002 \001(\004\022\014\n\004rank\030\003"
    " \001(\005\"y\n\024FactionMoyuUpdateReq\022\014\n\004type\030\001 \001"
    "(\005\022\013\n\003opt\030\002 \001(\005\022\n\n\002id\030\003 \001(\004\022\014\n\004name\030\004 \001("
    "\014\022\013\n\003zid\030\005 \001(\005\022\014\n\004harm\030\006 \001(\004\022\021\n\tharm_tim"
    "e\030\007 \001(\004\"<\n\025FactionMoyuAddHarmReq\022\021\n\tfact"
    "ionid\030\001 \001(\004\022\020\n\010add_harm\030\002 \001(\004\"I\n\021Faction"
    "SynMoyuReq\022\021\n\tfactionid\030\001 \001(\004\022\021\n\tcur_lay"
    "er\030\002 \001(\005\022\016\n\006cur_hp\030\003 \001(\004\"8\n\022FactionMoyuP"
    "assReq\022\021\n\tfactionid\030\001 \001(\004\022\017\n\007layerid\030\002 \001"
    "(\r\"^\n\024LCFactionMoyuRankReq\022\021\n\tfactionid\030"
    "\001 \001(\004\022\n\n\002id\030\002 \001(\004\022\014\n\004harm\030\003 \001(\004\022\014\n\004type\030"
    "\004 \001(\005\022\013\n\003zid\030\005 \001(\005\"4\n\024CLFactionMoyuRecvR"
    "eq\022\017\n\007layerid\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004", 11992);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Faction.proto", &protobuf_RegisterTypes);
  FactionListProto::default_instance_ = new FactionListProto();
  FactionProto::default_instance_ = new FactionProto();
  FactionMemProto::default_instance_ = new FactionMemProto();
  FactionMemListProto::default_instance_ = new FactionMemListProto();
  FactionApplyProto::default_instance_ = new FactionApplyProto();
  FactionApplyListProto::default_instance_ = new FactionApplyListProto();
  FactionMemSimpleProto::default_instance_ = new FactionMemSimpleProto();
  FactionMemSimpleListProto::default_instance_ = new FactionMemSimpleListProto();
  FactionSimpleProto::default_instance_ = new FactionSimpleProto();
  FactionRecordProto::default_instance_ = new FactionRecordProto();
  FactionRecordListProto::default_instance_ = new FactionRecordListProto();
  FactionSalaryProto::default_instance_ = new FactionSalaryProto();
  FactionSalaryListProto::default_instance_ = new FactionSalaryListProto();
  FactionDinnerProto::default_instance_ = new FactionDinnerProto();
  FactionInviteProto::default_instance_ = new FactionInviteProto();
  FactionSkillProto::default_instance_ = new FactionSkillProto();
  FactionSkillListProto::default_instance_ = new FactionSkillListProto();
  FactionAnswerRankProto::default_instance_ = new FactionAnswerRankProto();
  FactionAnswerRankListProto::default_instance_ = new FactionAnswerRankListProto();
  FactionAnswerFinalProto::default_instance_ = new FactionAnswerFinalProto();
  FactionBeastRankProto::default_instance_ = new FactionBeastRankProto();
  FactionBeastRankListProto::default_instance_ = new FactionBeastRankListProto();
  Faction_SyncLoginRsp::default_instance_ = new Faction_SyncLoginRsp();
  Faction_SyncInfoRsp::default_instance_ = new Faction_SyncInfoRsp();
  Faction_InfoReq::default_instance_ = new Faction_InfoReq();
  Faction_InfoRsp::default_instance_ = new Faction_InfoRsp();
  Faction_InfoListReq::default_instance_ = new Faction_InfoListReq();
  Faction_InfoListRsp::default_instance_ = new Faction_InfoListRsp();
  Faction_SimpleReq::default_instance_ = new Faction_SimpleReq();
  Faction_SimpleRsp::default_instance_ = new Faction_SimpleRsp();
  Faction_MemListReq::default_instance_ = new Faction_MemListReq();
  Faction_MemListRsp::default_instance_ = new Faction_MemListRsp();
  Faction_CreateReq::default_instance_ = new Faction_CreateReq();
  Faction_CreateRsp::default_instance_ = new Faction_CreateRsp();
  Faction_ApplyListReq::default_instance_ = new Faction_ApplyListReq();
  Faction_ApplyListRsp::default_instance_ = new Faction_ApplyListRsp();
  Faction_ApplyJoinReq::default_instance_ = new Faction_ApplyJoinReq();
  Faction_ApplyJoinRsp::default_instance_ = new Faction_ApplyJoinRsp();
  Faction_ApplyOperateReq::default_instance_ = new Faction_ApplyOperateReq();
  Faction_ApplyOperateRsp::default_instance_ = new Faction_ApplyOperateRsp();
  Faction_KickReq::default_instance_ = new Faction_KickReq();
  Faction_KickRsp::default_instance_ = new Faction_KickRsp();
  Faction_QuitReq::default_instance_ = new Faction_QuitReq();
  Faction_QuitRsp::default_instance_ = new Faction_QuitRsp();
  Faction_AppointReq::default_instance_ = new Faction_AppointReq();
  Faction_AppointRsp::default_instance_ = new Faction_AppointRsp();
  Faction_ChgNoticeReq::default_instance_ = new Faction_ChgNoticeReq();
  Faction_ChgNoticeRsp::default_instance_ = new Faction_ChgNoticeRsp();
  Faction_SetApplyReq::default_instance_ = new Faction_SetApplyReq();
  Faction_SetApplyRsp::default_instance_ = new Faction_SetApplyRsp();
  Faction_OneKeyApplyReq::default_instance_ = new Faction_OneKeyApplyReq();
  Faction_OneKeyApplyRsp::default_instance_ = new Faction_OneKeyApplyRsp();
  Faction_ChgNameReq::default_instance_ = new Faction_ChgNameReq();
  Faction_ChgNameRsp::default_instance_ = new Faction_ChgNameRsp();
  Faction_NewApplyNotify::default_instance_ = new Faction_NewApplyNotify();
  Faction_InviteJoinReq::default_instance_ = new Faction_InviteJoinReq();
  Faction_InviteJoinRsp::default_instance_ = new Faction_InviteJoinRsp();
  Faction_IviteJoinNotify::default_instance_ = new Faction_IviteJoinNotify();
  Faction_RecordListReq::default_instance_ = new Faction_RecordListReq();
  Faction_RecordListRsp::default_instance_ = new Faction_RecordListRsp();
  Faction_DonateReq::default_instance_ = new Faction_DonateReq();
  Faction_DonateRsp::default_instance_ = new Faction_DonateRsp();
  Faction_DonateNotify::default_instance_ = new Faction_DonateNotify();
  Faction_SalaryReq::default_instance_ = new Faction_SalaryReq();
  Faction_SalaryRsp::default_instance_ = new Faction_SalaryRsp();
  Faction_SalaryNotify::default_instance_ = new Faction_SalaryNotify();
  Faction_SalaryFetchReq::default_instance_ = new Faction_SalaryFetchReq();
  Faction_SalaryFetchRsp::default_instance_ = new Faction_SalaryFetchRsp();
  Faction_DinnerUpdateRsp::default_instance_ = new Faction_DinnerUpdateRsp();
  Faction_TransInviteListReq::default_instance_ = new Faction_TransInviteListReq();
  Faction_TransInviteListRsp::default_instance_ = new Faction_TransInviteListRsp();
  Faction_TransAcceptListRsp::default_instance_ = new Faction_TransAcceptListRsp();
  Faction_TransInviteReq::default_instance_ = new Faction_TransInviteReq();
  Faction_TransInviteRsp::default_instance_ = new Faction_TransInviteRsp();
  Faction_TransInviteNotify::default_instance_ = new Faction_TransInviteNotify();
  Faction_TransDelAcceptNotify::default_instance_ = new Faction_TransDelAcceptNotify();
  Faction_TransAgreeReq::default_instance_ = new Faction_TransAgreeReq();
  Faction_TransAgreeRsp::default_instance_ = new Faction_TransAgreeRsp();
  Faction_SkillInfoReq::default_instance_ = new Faction_SkillInfoReq();
  Faction_SkillInfoRsp::default_instance_ = new Faction_SkillInfoRsp();
  Faction_SkillUpdateRsp::default_instance_ = new Faction_SkillUpdateRsp();
  Faction_SkillUpgradeReq::default_instance_ = new Faction_SkillUpgradeReq();
  Faction_SkillUpgradeRsp::default_instance_ = new Faction_SkillUpgradeRsp();
  Faction_AnswerRankListReq::default_instance_ = new Faction_AnswerRankListReq();
  Faction_AnswerRankListRsp::default_instance_ = new Faction_AnswerRankListRsp();
  Faction_AnswerCurRankRsp::default_instance_ = new Faction_AnswerCurRankRsp();
  Faction_AnswerStageRsp::default_instance_ = new Faction_AnswerStageRsp();
  Faction_AnswerResultRsp::default_instance_ = new Faction_AnswerResultRsp();
  Faction_AnswerFinalRsp::default_instance_ = new Faction_AnswerFinalRsp();
  Faction_BeastInfoReq::default_instance_ = new Faction_BeastInfoReq();
  Faction_BeastInfoRsp::default_instance_ = new Faction_BeastInfoRsp();
  Faction_BeastOpenInfoNotify::default_instance_ = new Faction_BeastOpenInfoNotify();
  Faction_BeastOpenReq::default_instance_ = new Faction_BeastOpenReq();
  Faction_BeastOpenRsp::default_instance_ = new Faction_BeastOpenRsp();
  Faction_BeastCurHarmRankRsp::default_instance_ = new Faction_BeastCurHarmRankRsp();
  Faction_BeastFinishRsp::default_instance_ = new Faction_BeastFinishRsp();
  CL_FactionRoleUpdateRsp::default_instance_ = new CL_FactionRoleUpdateRsp();
  LC_FactionCreate::default_instance_ = new LC_FactionCreate();
  CL_FactionCreateResult::default_instance_ = new CL_FactionCreateResult();
  LC_FactionChgName::default_instance_ = new LC_FactionChgName();
  CL_FactionChgNameResult::default_instance_ = new CL_FactionChgNameResult();
  CL_FactionDismissNotify::default_instance_ = new CL_FactionDismissNotify();
  LC_FactionAddAttrReq::default_instance_ = new LC_FactionAddAttrReq();
  LS_FactionAnswerCount::default_instance_ = new LS_FactionAnswerCount();
  SL_FactionAnswerRank::default_instance_ = new SL_FactionAnswerRank();
  SL_FactionAnswerCurRankReq::default_instance_ = new SL_FactionAnswerCurRankReq();
  SC_FactionAnswerRankRsp::default_instance_ = new SC_FactionAnswerRankRsp();
  LS_FactionAnswerEndRsp::default_instance_ = new LS_FactionAnswerEndRsp();
  LC_FactionBeastFinishRsp::default_instance_ = new LC_FactionBeastFinishRsp();
  FactionGuardData::default_instance_ = new FactionGuardData();
  Faction_GuardSceneInfoReq::default_instance_ = new Faction_GuardSceneInfoReq();
  Faction_GuardSceneInfoRsp::default_instance_ = new Faction_GuardSceneInfoRsp();
  FactionGuardRankProto::default_instance_ = new FactionGuardRankProto();
  FactionGuardRankListProto::default_instance_ = new FactionGuardRankListProto();
  Faction_GuardPersonRankInfoReq::default_instance_ = new Faction_GuardPersonRankInfoReq();
  Faction_GuardPersonRankInfoRsp::default_instance_ = new Faction_GuardPersonRankInfoRsp();
  FactionGuardSocialRankProto::default_instance_ = new FactionGuardSocialRankProto();
  FactionGuardSocialRankListProto::default_instance_ = new FactionGuardSocialRankListProto();
  Faction_GuardSocialRankListReq::default_instance_ = new Faction_GuardSocialRankListReq();
  Faction_GuardSocialRankListRsp::default_instance_ = new Faction_GuardSocialRankListRsp();
  GuardMonInfo::default_instance_ = new GuardMonInfo();
  Faction_GuardMonsterInfo::default_instance_ = new Faction_GuardMonsterInfo();
  Faction_GuardMonsterInfoNotify::default_instance_ = new Faction_GuardMonsterInfoNotify();
  Faction_GuardWaveReward::default_instance_ = new Faction_GuardWaveReward();
  Faction_GuardFinishRsp::default_instance_ = new Faction_GuardFinishRsp();
  Faction_GuardEncouragementReq::default_instance_ = new Faction_GuardEncouragementReq();
  Faction_GuardEncouragementRsp::default_instance_ = new Faction_GuardEncouragementRsp();
  LS_FactionGuardCount::default_instance_ = new LS_FactionGuardCount();
  SL_FactionGuardRank::default_instance_ = new SL_FactionGuardRank();
  SL_FactionGuardCurRankReq::default_instance_ = new SL_FactionGuardCurRankReq();
  SC_FactionGuardRankResultNotify::default_instance_ = new SC_FactionGuardRankResultNotify();
  LS_FactionGuardEndRsp::default_instance_ = new LS_FactionGuardEndRsp();
  LC_FactionGuardEndRsp::default_instance_ = new LC_FactionGuardEndRsp();
  GuardPlayerHarm::default_instance_ = new GuardPlayerHarm();
  LC_FactionGuardPlayerHarm::default_instance_ = new LC_FactionGuardPlayerHarm();
  SC_FactionAnswerFinalRsp::default_instance_ = new SC_FactionAnswerFinalRsp();
  CL_FactionAnswerQuestionRsp::default_instance_ = new CL_FactionAnswerQuestionRsp();
  FactionMoyuRankEntry::default_instance_ = new FactionMoyuRankEntry();
  FactionMoyuRankReq::default_instance_ = new FactionMoyuRankReq();
  NtFactionMoyuRank::default_instance_ = new NtFactionMoyuRank();
  FactionMoyuRecvReq::default_instance_ = new FactionMoyuRecvReq();
  FactionMoyuRecvRsp::default_instance_ = new FactionMoyuRecvRsp();
  NotifyFactionMoyuDup::default_instance_ = new NotifyFactionMoyuDup();
  FactionMoyuTeam::default_instance_ = new FactionMoyuTeam();
  FactionMoyuEndRsp::default_instance_ = new FactionMoyuEndRsp();
  FactionMoyuReq::default_instance_ = new FactionMoyuReq();
  NtFactionMoyuHarm::default_instance_ = new NtFactionMoyuHarm();
  NtFactionMoyuDupKill::default_instance_ = new NtFactionMoyuDupKill();
  NtFactionMoyu::default_instance_ = new NtFactionMoyu();
  FactionMoyuRewardReq::default_instance_ = new FactionMoyuRewardReq();
  FactionMoyuUpdateReq::default_instance_ = new FactionMoyuUpdateReq();
  FactionMoyuAddHarmReq::default_instance_ = new FactionMoyuAddHarmReq();
  FactionSynMoyuReq::default_instance_ = new FactionSynMoyuReq();
  FactionMoyuPassReq::default_instance_ = new FactionMoyuPassReq();
  LCFactionMoyuRankReq::default_instance_ = new LCFactionMoyuRankReq();
  CLFactionMoyuRecvReq::default_instance_ = new CLFactionMoyuRecvReq();
  FactionListProto::default_instance_->InitAsDefaultInstance();
  FactionProto::default_instance_->InitAsDefaultInstance();
  FactionMemProto::default_instance_->InitAsDefaultInstance();
  FactionMemListProto::default_instance_->InitAsDefaultInstance();
  FactionApplyProto::default_instance_->InitAsDefaultInstance();
  FactionApplyListProto::default_instance_->InitAsDefaultInstance();
  FactionMemSimpleProto::default_instance_->InitAsDefaultInstance();
  FactionMemSimpleListProto::default_instance_->InitAsDefaultInstance();
  FactionSimpleProto::default_instance_->InitAsDefaultInstance();
  FactionRecordProto::default_instance_->InitAsDefaultInstance();
  FactionRecordListProto::default_instance_->InitAsDefaultInstance();
  FactionSalaryProto::default_instance_->InitAsDefaultInstance();
  FactionSalaryListProto::default_instance_->InitAsDefaultInstance();
  FactionDinnerProto::default_instance_->InitAsDefaultInstance();
  FactionInviteProto::default_instance_->InitAsDefaultInstance();
  FactionSkillProto::default_instance_->InitAsDefaultInstance();
  FactionSkillListProto::default_instance_->InitAsDefaultInstance();
  FactionAnswerRankProto::default_instance_->InitAsDefaultInstance();
  FactionAnswerRankListProto::default_instance_->InitAsDefaultInstance();
  FactionAnswerFinalProto::default_instance_->InitAsDefaultInstance();
  FactionBeastRankProto::default_instance_->InitAsDefaultInstance();
  FactionBeastRankListProto::default_instance_->InitAsDefaultInstance();
  Faction_SyncLoginRsp::default_instance_->InitAsDefaultInstance();
  Faction_SyncInfoRsp::default_instance_->InitAsDefaultInstance();
  Faction_InfoReq::default_instance_->InitAsDefaultInstance();
  Faction_InfoRsp::default_instance_->InitAsDefaultInstance();
  Faction_InfoListReq::default_instance_->InitAsDefaultInstance();
  Faction_InfoListRsp::default_instance_->InitAsDefaultInstance();
  Faction_SimpleReq::default_instance_->InitAsDefaultInstance();
  Faction_SimpleRsp::default_instance_->InitAsDefaultInstance();
  Faction_MemListReq::default_instance_->InitAsDefaultInstance();
  Faction_MemListRsp::default_instance_->InitAsDefaultInstance();
  Faction_CreateReq::default_instance_->InitAsDefaultInstance();
  Faction_CreateRsp::default_instance_->InitAsDefaultInstance();
  Faction_ApplyListReq::default_instance_->InitAsDefaultInstance();
  Faction_ApplyListRsp::default_instance_->InitAsDefaultInstance();
  Faction_ApplyJoinReq::default_instance_->InitAsDefaultInstance();
  Faction_ApplyJoinRsp::default_instance_->InitAsDefaultInstance();
  Faction_ApplyOperateReq::default_instance_->InitAsDefaultInstance();
  Faction_ApplyOperateRsp::default_instance_->InitAsDefaultInstance();
  Faction_KickReq::default_instance_->InitAsDefaultInstance();
  Faction_KickRsp::default_instance_->InitAsDefaultInstance();
  Faction_QuitReq::default_instance_->InitAsDefaultInstance();
  Faction_QuitRsp::default_instance_->InitAsDefaultInstance();
  Faction_AppointReq::default_instance_->InitAsDefaultInstance();
  Faction_AppointRsp::default_instance_->InitAsDefaultInstance();
  Faction_ChgNoticeReq::default_instance_->InitAsDefaultInstance();
  Faction_ChgNoticeRsp::default_instance_->InitAsDefaultInstance();
  Faction_SetApplyReq::default_instance_->InitAsDefaultInstance();
  Faction_SetApplyRsp::default_instance_->InitAsDefaultInstance();
  Faction_OneKeyApplyReq::default_instance_->InitAsDefaultInstance();
  Faction_OneKeyApplyRsp::default_instance_->InitAsDefaultInstance();
  Faction_ChgNameReq::default_instance_->InitAsDefaultInstance();
  Faction_ChgNameRsp::default_instance_->InitAsDefaultInstance();
  Faction_NewApplyNotify::default_instance_->InitAsDefaultInstance();
  Faction_InviteJoinReq::default_instance_->InitAsDefaultInstance();
  Faction_InviteJoinRsp::default_instance_->InitAsDefaultInstance();
  Faction_IviteJoinNotify::default_instance_->InitAsDefaultInstance();
  Faction_RecordListReq::default_instance_->InitAsDefaultInstance();
  Faction_RecordListRsp::default_instance_->InitAsDefaultInstance();
  Faction_DonateReq::default_instance_->InitAsDefaultInstance();
  Faction_DonateRsp::default_instance_->InitAsDefaultInstance();
  Faction_DonateNotify::default_instance_->InitAsDefaultInstance();
  Faction_SalaryReq::default_instance_->InitAsDefaultInstance();
  Faction_SalaryRsp::default_instance_->InitAsDefaultInstance();
  Faction_SalaryNotify::default_instance_->InitAsDefaultInstance();
  Faction_SalaryFetchReq::default_instance_->InitAsDefaultInstance();
  Faction_SalaryFetchRsp::default_instance_->InitAsDefaultInstance();
  Faction_DinnerUpdateRsp::default_instance_->InitAsDefaultInstance();
  Faction_TransInviteListReq::default_instance_->InitAsDefaultInstance();
  Faction_TransInviteListRsp::default_instance_->InitAsDefaultInstance();
  Faction_TransAcceptListRsp::default_instance_->InitAsDefaultInstance();
  Faction_TransInviteReq::default_instance_->InitAsDefaultInstance();
  Faction_TransInviteRsp::default_instance_->InitAsDefaultInstance();
  Faction_TransInviteNotify::default_instance_->InitAsDefaultInstance();
  Faction_TransDelAcceptNotify::default_instance_->InitAsDefaultInstance();
  Faction_TransAgreeReq::default_instance_->InitAsDefaultInstance();
  Faction_TransAgreeRsp::default_instance_->InitAsDefaultInstance();
  Faction_SkillInfoReq::default_instance_->InitAsDefaultInstance();
  Faction_SkillInfoRsp::default_instance_->InitAsDefaultInstance();
  Faction_SkillUpdateRsp::default_instance_->InitAsDefaultInstance();
  Faction_SkillUpgradeReq::default_instance_->InitAsDefaultInstance();
  Faction_SkillUpgradeRsp::default_instance_->InitAsDefaultInstance();
  Faction_AnswerRankListReq::default_instance_->InitAsDefaultInstance();
  Faction_AnswerRankListRsp::default_instance_->InitAsDefaultInstance();
  Faction_AnswerCurRankRsp::default_instance_->InitAsDefaultInstance();
  Faction_AnswerStageRsp::default_instance_->InitAsDefaultInstance();
  Faction_AnswerResultRsp::default_instance_->InitAsDefaultInstance();
  Faction_AnswerFinalRsp::default_instance_->InitAsDefaultInstance();
  Faction_BeastInfoReq::default_instance_->InitAsDefaultInstance();
  Faction_BeastInfoRsp::default_instance_->InitAsDefaultInstance();
  Faction_BeastOpenInfoNotify::default_instance_->InitAsDefaultInstance();
  Faction_BeastOpenReq::default_instance_->InitAsDefaultInstance();
  Faction_BeastOpenRsp::default_instance_->InitAsDefaultInstance();
  Faction_BeastCurHarmRankRsp::default_instance_->InitAsDefaultInstance();
  Faction_BeastFinishRsp::default_instance_->InitAsDefaultInstance();
  CL_FactionRoleUpdateRsp::default_instance_->InitAsDefaultInstance();
  LC_FactionCreate::default_instance_->InitAsDefaultInstance();
  CL_FactionCreateResult::default_instance_->InitAsDefaultInstance();
  LC_FactionChgName::default_instance_->InitAsDefaultInstance();
  CL_FactionChgNameResult::default_instance_->InitAsDefaultInstance();
  CL_FactionDismissNotify::default_instance_->InitAsDefaultInstance();
  LC_FactionAddAttrReq::default_instance_->InitAsDefaultInstance();
  LS_FactionAnswerCount::default_instance_->InitAsDefaultInstance();
  SL_FactionAnswerRank::default_instance_->InitAsDefaultInstance();
  SL_FactionAnswerCurRankReq::default_instance_->InitAsDefaultInstance();
  SC_FactionAnswerRankRsp::default_instance_->InitAsDefaultInstance();
  LS_FactionAnswerEndRsp::default_instance_->InitAsDefaultInstance();
  LC_FactionBeastFinishRsp::default_instance_->InitAsDefaultInstance();
  FactionGuardData::default_instance_->InitAsDefaultInstance();
  Faction_GuardSceneInfoReq::default_instance_->InitAsDefaultInstance();
  Faction_GuardSceneInfoRsp::default_instance_->InitAsDefaultInstance();
  FactionGuardRankProto::default_instance_->InitAsDefaultInstance();
  FactionGuardRankListProto::default_instance_->InitAsDefaultInstance();
  Faction_GuardPersonRankInfoReq::default_instance_->InitAsDefaultInstance();
  Faction_GuardPersonRankInfoRsp::default_instance_->InitAsDefaultInstance();
  FactionGuardSocialRankProto::default_instance_->InitAsDefaultInstance();
  FactionGuardSocialRankListProto::default_instance_->InitAsDefaultInstance();
  Faction_GuardSocialRankListReq::default_instance_->InitAsDefaultInstance();
  Faction_GuardSocialRankListRsp::default_instance_->InitAsDefaultInstance();
  GuardMonInfo::default_instance_->InitAsDefaultInstance();
  Faction_GuardMonsterInfo::default_instance_->InitAsDefaultInstance();
  Faction_GuardMonsterInfoNotify::default_instance_->InitAsDefaultInstance();
  Faction_GuardWaveReward::default_instance_->InitAsDefaultInstance();
  Faction_GuardFinishRsp::default_instance_->InitAsDefaultInstance();
  Faction_GuardEncouragementReq::default_instance_->InitAsDefaultInstance();
  Faction_GuardEncouragementRsp::default_instance_->InitAsDefaultInstance();
  LS_FactionGuardCount::default_instance_->InitAsDefaultInstance();
  SL_FactionGuardRank::default_instance_->InitAsDefaultInstance();
  SL_FactionGuardCurRankReq::default_instance_->InitAsDefaultInstance();
  SC_FactionGuardRankResultNotify::default_instance_->InitAsDefaultInstance();
  LS_FactionGuardEndRsp::default_instance_->InitAsDefaultInstance();
  LC_FactionGuardEndRsp::default_instance_->InitAsDefaultInstance();
  GuardPlayerHarm::default_instance_->InitAsDefaultInstance();
  LC_FactionGuardPlayerHarm::default_instance_->InitAsDefaultInstance();
  SC_FactionAnswerFinalRsp::default_instance_->InitAsDefaultInstance();
  CL_FactionAnswerQuestionRsp::default_instance_->InitAsDefaultInstance();
  FactionMoyuRankEntry::default_instance_->InitAsDefaultInstance();
  FactionMoyuRankReq::default_instance_->InitAsDefaultInstance();
  NtFactionMoyuRank::default_instance_->InitAsDefaultInstance();
  FactionMoyuRecvReq::default_instance_->InitAsDefaultInstance();
  FactionMoyuRecvRsp::default_instance_->InitAsDefaultInstance();
  NotifyFactionMoyuDup::default_instance_->InitAsDefaultInstance();
  FactionMoyuTeam::default_instance_->InitAsDefaultInstance();
  FactionMoyuEndRsp::default_instance_->InitAsDefaultInstance();
  FactionMoyuReq::default_instance_->InitAsDefaultInstance();
  NtFactionMoyuHarm::default_instance_->InitAsDefaultInstance();
  NtFactionMoyuDupKill::default_instance_->InitAsDefaultInstance();
  NtFactionMoyu::default_instance_->InitAsDefaultInstance();
  FactionMoyuRewardReq::default_instance_->InitAsDefaultInstance();
  FactionMoyuUpdateReq::default_instance_->InitAsDefaultInstance();
  FactionMoyuAddHarmReq::default_instance_->InitAsDefaultInstance();
  FactionSynMoyuReq::default_instance_->InitAsDefaultInstance();
  FactionMoyuPassReq::default_instance_->InitAsDefaultInstance();
  LCFactionMoyuRankReq::default_instance_->InitAsDefaultInstance();
  CLFactionMoyuRecvReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Faction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Faction_2eproto {
  StaticDescriptorInitializer_Faction_2eproto() {
    protobuf_AddDesc_Faction_2eproto();
  }
} static_descriptor_initializer_Faction_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FactionListProto::kFactionIdFieldNumber;
const int FactionListProto::kNameFieldNumber;
const int FactionListProto::kRankFieldNumber;
const int FactionListProto::kLeaderCidFieldNumber;
const int FactionListProto::kLeaderNameFieldNumber;
const int FactionListProto::kLevelFieldNumber;
const int FactionListProto::kMemCountFieldNumber;
const int FactionListProto::kFightFieldNumber;
const int FactionListProto::kAlreadyApplyFieldNumber;
#endif  // !_MSC_VER

FactionListProto::FactionListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionListProto::InitAsDefaultInstance() {
}

FactionListProto::FactionListProto(const FactionListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionListProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  leader_cid_ = GOOGLE_ULONGLONG(0);
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  mem_count_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  already_apply_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionListProto::~FactionListProto() {
  SharedDtor();
}

void FactionListProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
  }
}

void FactionListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionListProto_descriptor_;
}

const FactionListProto& FactionListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionListProto* FactionListProto::default_instance_ = NULL;

FactionListProto* FactionListProto::New() const {
  return new FactionListProto;
}

void FactionListProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rank_ = 0;
    leader_cid_ = GOOGLE_ULONGLONG(0);
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    level_ = 0;
    mem_count_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    already_apply_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leader_cid;
        break;
      }

      // optional uint64 leader_cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_cid_)));
          set_has_leader_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_leader_name;
        break;
      }

      // optional bytes leader_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mem_count;
        break;
      }

      // optional int32 mem_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_count_)));
          set_has_mem_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_already_apply;
        break;
      }

      // optional int32 already_apply = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_apply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &already_apply_)));
          set_has_already_apply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // optional uint64 leader_cid = 4;
  if (has_leader_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->leader_cid(), output);
  }

  // optional bytes leader_name = 5;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->leader_name(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 mem_count = 7;
  if (has_mem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mem_count(), output);
  }

  // optional uint64 fight = 8;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fight(), output);
  }

  // optional int32 already_apply = 9;
  if (has_already_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->already_apply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // optional uint64 leader_cid = 4;
  if (has_leader_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->leader_cid(), target);
  }

  // optional bytes leader_name = 5;
  if (has_leader_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->leader_name(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 mem_count = 7;
  if (has_mem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mem_count(), target);
  }

  // optional uint64 fight = 8;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fight(), target);
  }

  // optional int32 already_apply = 9;
  if (has_already_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->already_apply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionListProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 leader_cid = 4;
    if (has_leader_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_cid());
    }

    // optional bytes leader_name = 5;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_name());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 mem_count = 7;
    if (has_mem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mem_count());
    }

    // optional uint64 fight = 8;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 already_apply = 9;
    if (has_already_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->already_apply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionListProto::MergeFrom(const FactionListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_leader_cid()) {
      set_leader_cid(from.leader_cid());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_mem_count()) {
      set_mem_count(from.mem_count());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_already_apply()) {
      set_already_apply(from.already_apply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionListProto::CopyFrom(const FactionListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionListProto::IsInitialized() const {

  return true;
}

void FactionListProto::Swap(FactionListProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(rank_, other->rank_);
    std::swap(leader_cid_, other->leader_cid_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(level_, other->level_);
    std::swap(mem_count_, other->mem_count_);
    std::swap(fight_, other->fight_);
    std::swap(already_apply_, other->already_apply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionListProto_descriptor_;
  metadata.reflection = FactionListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionProto::kFactionIdFieldNumber;
const int FactionProto::kNameFieldNumber;
const int FactionProto::kLevelFieldNumber;
const int FactionProto::kRankFieldNumber;
const int FactionProto::kMemCountFieldNumber;
const int FactionProto::kFightFieldNumber;
const int FactionProto::kGradeFieldNumber;
const int FactionProto::kExpFieldNumber;
const int FactionProto::kNoticeFieldNumber;
const int FactionProto::kLeaderCidFieldNumber;
const int FactionProto::kLeaderNameFieldNumber;
const int FactionProto::kFacadeFieldNumber;
const int FactionProto::kApplyTypeFieldNumber;
const int FactionProto::kApplyMinlevFieldNumber;
const int FactionProto::kApplyFightFieldNumber;
const int FactionProto::kOnlineNumFieldNumber;
#endif  // !_MSC_VER

FactionProto::FactionProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionProto::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

FactionProto::FactionProto(const FactionProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  rank_ = 0;
  mem_count_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  grade_ = 0;
  exp_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_cid_ = GOOGLE_ULONGLONG(0);
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facade_ = NULL;
  apply_type_ = 0;
  apply_minlev_ = 0;
  apply_fight_ = GOOGLE_ULONGLONG(0);
  online_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionProto::~FactionProto() {
  SharedDtor();
}

void FactionProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void FactionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionProto_descriptor_;
}

const FactionProto& FactionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionProto* FactionProto::default_instance_ = NULL;

FactionProto* FactionProto::New() const {
  return new FactionProto;
}

void FactionProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    rank_ = 0;
    mem_count_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
    grade_ = 0;
    exp_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    leader_cid_ = GOOGLE_ULONGLONG(0);
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    apply_type_ = 0;
    apply_minlev_ = 0;
    apply_fight_ = GOOGLE_ULONGLONG(0);
    online_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mem_count;
        break;
      }

      // optional int32 mem_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_count_)));
          set_has_mem_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_grade;
        break;
      }

      // optional int32 grade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_notice;
        break;
      }

      // optional string notice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_leader_cid;
        break;
      }

      // optional uint64 leader_cid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_cid_)));
          set_has_leader_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_leader_name;
        break;
      }

      // optional bytes leader_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_apply_type;
        break;
      }

      // optional int32 apply_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_type_)));
          set_has_apply_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_apply_minlev;
        break;
      }

      // optional int32 apply_minlev = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_minlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_minlev_)));
          set_has_apply_minlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_apply_fight;
        break;
      }

      // optional uint64 apply_fight = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_fight_)));
          set_has_apply_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_online_num;
        break;
      }

      // optional int32 online_num = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_num_)));
          set_has_online_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // optional int32 mem_count = 5;
  if (has_mem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mem_count(), output);
  }

  // optional uint64 fight = 6;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fight(), output);
  }

  // optional int32 grade = 7;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->grade(), output);
  }

  // optional uint64 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->exp(), output);
  }

  // optional string notice = 9;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->notice(), output);
  }

  // optional uint64 leader_cid = 10;
  if (has_leader_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->leader_cid(), output);
  }

  // optional bytes leader_name = 11;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->leader_name(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 12;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->facade(), output);
  }

  // optional int32 apply_type = 13;
  if (has_apply_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->apply_type(), output);
  }

  // optional int32 apply_minlev = 14;
  if (has_apply_minlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->apply_minlev(), output);
  }

  // optional uint64 apply_fight = 15;
  if (has_apply_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->apply_fight(), output);
  }

  // optional int32 online_num = 16;
  if (has_online_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->online_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // optional int32 mem_count = 5;
  if (has_mem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mem_count(), target);
  }

  // optional uint64 fight = 6;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fight(), target);
  }

  // optional int32 grade = 7;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->grade(), target);
  }

  // optional uint64 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->exp(), target);
  }

  // optional string notice = 9;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->notice(), target);
  }

  // optional uint64 leader_cid = 10;
  if (has_leader_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->leader_cid(), target);
  }

  // optional bytes leader_name = 11;
  if (has_leader_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->leader_name(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 12;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->facade(), target);
  }

  // optional int32 apply_type = 13;
  if (has_apply_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->apply_type(), target);
  }

  // optional int32 apply_minlev = 14;
  if (has_apply_minlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->apply_minlev(), target);
  }

  // optional uint64 apply_fight = 15;
  if (has_apply_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->apply_fight(), target);
  }

  // optional int32 online_num = 16;
  if (has_online_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->online_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 mem_count = 5;
    if (has_mem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mem_count());
    }

    // optional uint64 fight = 6;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional int32 grade = 7;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional uint64 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string notice = 9;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional uint64 leader_cid = 10;
    if (has_leader_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_cid());
    }

    // optional bytes leader_name = 11;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_name());
    }

    // optional .proto_ff.RoleFacadeProto facade = 12;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional int32 apply_type = 13;
    if (has_apply_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_type());
    }

    // optional int32 apply_minlev = 14;
    if (has_apply_minlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_minlev());
    }

    // optional uint64 apply_fight = 15;
    if (has_apply_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_fight());
    }

    // optional int32 online_num = 16;
    if (has_online_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionProto::MergeFrom(const FactionProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_mem_count()) {
      set_mem_count(from.mem_count());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_leader_cid()) {
      set_leader_cid(from.leader_cid());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_apply_type()) {
      set_apply_type(from.apply_type());
    }
    if (from.has_apply_minlev()) {
      set_apply_minlev(from.apply_minlev());
    }
    if (from.has_apply_fight()) {
      set_apply_fight(from.apply_fight());
    }
    if (from.has_online_num()) {
      set_online_num(from.online_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionProto::CopyFrom(const FactionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionProto::IsInitialized() const {

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void FactionProto::Swap(FactionProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(rank_, other->rank_);
    std::swap(mem_count_, other->mem_count_);
    std::swap(fight_, other->fight_);
    std::swap(grade_, other->grade_);
    std::swap(exp_, other->exp_);
    std::swap(notice_, other->notice_);
    std::swap(leader_cid_, other->leader_cid_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(facade_, other->facade_);
    std::swap(apply_type_, other->apply_type_);
    std::swap(apply_minlev_, other->apply_minlev_);
    std::swap(apply_fight_, other->apply_fight_);
    std::swap(online_num_, other->online_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionProto_descriptor_;
  metadata.reflection = FactionProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMemProto::kCidFieldNumber;
const int FactionMemProto::kNameFieldNumber;
const int FactionMemProto::kProfFieldNumber;
const int FactionMemProto::kVipLevelFieldNumber;
const int FactionMemProto::kLevelFieldNumber;
const int FactionMemProto::kDutyFieldNumber;
const int FactionMemProto::kFightFieldNumber;
const int FactionMemProto::kTotalContriFieldNumber;
const int FactionMemProto::kIsOnlineFieldNumber;
const int FactionMemProto::kLogoutTimeFieldNumber;
const int FactionMemProto::kClan3IdFieldNumber;
const int FactionMemProto::kClan5IdFieldNumber;
const int FactionMemProto::kHeadFieldNumber;
#endif  // !_MSC_VER

FactionMemProto::FactionMemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMemProto::InitAsDefaultInstance() {
  head_ = const_cast< ::proto_ff::RoleHeadPicProto*>(&::proto_ff::RoleHeadPicProto::default_instance());
}

FactionMemProto::FactionMemProto(const FactionMemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMemProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0;
  vip_level_ = 0;
  level_ = 0;
  duty_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  total_contri_ = GOOGLE_ULONGLONG(0);
  is_online_ = 0;
  logout_time_ = GOOGLE_ULONGLONG(0);
  clan3_id_ = GOOGLE_ULONGLONG(0);
  clan5_id_ = GOOGLE_ULONGLONG(0);
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMemProto::~FactionMemProto() {
  SharedDtor();
}

void FactionMemProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void FactionMemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMemProto_descriptor_;
}

const FactionMemProto& FactionMemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMemProto* FactionMemProto::default_instance_ = NULL;

FactionMemProto* FactionMemProto::New() const {
  return new FactionMemProto;
}

void FactionMemProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0;
    vip_level_ = 0;
    level_ = 0;
    duty_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
    total_contri_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_online_ = 0;
    logout_time_ = GOOGLE_ULONGLONG(0);
    clan3_id_ = GOOGLE_ULONGLONG(0);
    clan5_id_ = GOOGLE_ULONGLONG(0);
    if (has_head()) {
      if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // optional int32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_duty;
        break;
      }

      // optional int32 duty = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_total_contri;
        break;
      }

      // optional uint64 total_contri = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_contri_)));
          set_has_total_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_online;
        break;
      }

      // optional int32 is_online = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_logout_time;
        break;
      }

      // optional uint64 logout_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logout_time_)));
          set_has_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_clan3_id;
        break;
      }

      // optional uint64 clan3_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan3_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clan3_id_)));
          set_has_clan3_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_clan5_id;
        break;
      }

      // optional uint64 clan5_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan5_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clan5_id_)));
          set_has_clan5_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_head;
        break;
      }

      // optional .proto_ff.RoleHeadPicProto head = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prof(), output);
  }

  // optional int32 vip_level = 4;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip_level(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 duty = 6;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->duty(), output);
  }

  // optional uint64 fight = 7;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->fight(), output);
  }

  // optional uint64 total_contri = 8;
  if (has_total_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->total_contri(), output);
  }

  // optional int32 is_online = 9;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->is_online(), output);
  }

  // optional uint64 logout_time = 10;
  if (has_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->logout_time(), output);
  }

  // optional uint64 clan3_id = 11;
  if (has_clan3_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->clan3_id(), output);
  }

  // optional uint64 clan5_id = 12;
  if (has_clan5_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->clan5_id(), output);
  }

  // optional .proto_ff.RoleHeadPicProto head = 13;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prof(), target);
  }

  // optional int32 vip_level = 4;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip_level(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 duty = 6;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->duty(), target);
  }

  // optional uint64 fight = 7;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->fight(), target);
  }

  // optional uint64 total_contri = 8;
  if (has_total_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->total_contri(), target);
  }

  // optional int32 is_online = 9;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->is_online(), target);
  }

  // optional uint64 logout_time = 10;
  if (has_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->logout_time(), target);
  }

  // optional uint64 clan3_id = 11;
  if (has_clan3_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->clan3_id(), target);
  }

  // optional uint64 clan5_id = 12;
  if (has_clan5_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->clan5_id(), target);
  }

  // optional .proto_ff.RoleHeadPicProto head = 13;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 vip_level = 4;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 duty = 6;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

    // optional uint64 fight = 7;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint64 total_contri = 8;
    if (has_total_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_contri());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 is_online = 9;
    if (has_is_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_online());
    }

    // optional uint64 logout_time = 10;
    if (has_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logout_time());
    }

    // optional uint64 clan3_id = 11;
    if (has_clan3_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clan3_id());
    }

    // optional uint64 clan5_id = 12;
    if (has_clan5_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clan5_id());
    }

    // optional .proto_ff.RoleHeadPicProto head = 13;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMemProto::MergeFrom(const FactionMemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_total_contri()) {
      set_total_contri(from.total_contri());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_logout_time()) {
      set_logout_time(from.logout_time());
    }
    if (from.has_clan3_id()) {
      set_clan3_id(from.clan3_id());
    }
    if (from.has_clan5_id()) {
      set_clan5_id(from.clan5_id());
    }
    if (from.has_head()) {
      mutable_head()->::proto_ff::RoleHeadPicProto::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMemProto::CopyFrom(const FactionMemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMemProto::IsInitialized() const {

  return true;
}

void FactionMemProto::Swap(FactionMemProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(level_, other->level_);
    std::swap(duty_, other->duty_);
    std::swap(fight_, other->fight_);
    std::swap(total_contri_, other->total_contri_);
    std::swap(is_online_, other->is_online_);
    std::swap(logout_time_, other->logout_time_);
    std::swap(clan3_id_, other->clan3_id_);
    std::swap(clan5_id_, other->clan5_id_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMemProto_descriptor_;
  metadata.reflection = FactionMemProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMemListProto::kMemLstFieldNumber;
#endif  // !_MSC_VER

FactionMemListProto::FactionMemListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMemListProto::InitAsDefaultInstance() {
}

FactionMemListProto::FactionMemListProto(const FactionMemListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMemListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMemListProto::~FactionMemListProto() {
  SharedDtor();
}

void FactionMemListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMemListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMemListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMemListProto_descriptor_;
}

const FactionMemListProto& FactionMemListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMemListProto* FactionMemListProto::default_instance_ = NULL;

FactionMemListProto* FactionMemListProto::New() const {
  return new FactionMemListProto;
}

void FactionMemListProto::Clear() {
  mem_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMemListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionMemProto mem_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mem_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMemListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionMemProto mem_lst = 1;
  for (int i = 0; i < this->mem_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mem_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMemListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionMemProto mem_lst = 1;
  for (int i = 0; i < this->mem_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mem_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMemListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionMemProto mem_lst = 1;
  total_size += 1 * this->mem_lst_size();
  for (int i = 0; i < this->mem_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMemListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMemListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMemListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMemListProto::MergeFrom(const FactionMemListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mem_lst_.MergeFrom(from.mem_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMemListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMemListProto::CopyFrom(const FactionMemListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMemListProto::IsInitialized() const {

  return true;
}

void FactionMemListProto::Swap(FactionMemListProto* other) {
  if (other != this) {
    mem_lst_.Swap(&other->mem_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMemListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMemListProto_descriptor_;
  metadata.reflection = FactionMemListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionApplyProto::kCidFieldNumber;
const int FactionApplyProto::kNameFieldNumber;
const int FactionApplyProto::kLevelFieldNumber;
const int FactionApplyProto::kFightFieldNumber;
#endif  // !_MSC_VER

FactionApplyProto::FactionApplyProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionApplyProto::InitAsDefaultInstance() {
}

FactionApplyProto::FactionApplyProto(const FactionApplyProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionApplyProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionApplyProto::~FactionApplyProto() {
  SharedDtor();
}

void FactionApplyProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionApplyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionApplyProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionApplyProto_descriptor_;
}

const FactionApplyProto& FactionApplyProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionApplyProto* FactionApplyProto::default_instance_ = NULL;

FactionApplyProto* FactionApplyProto::New() const {
  return new FactionApplyProto;
}

void FactionApplyProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionApplyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionApplyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionApplyProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionApplyProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionApplyProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionApplyProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionApplyProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionApplyProto::MergeFrom(const FactionApplyProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionApplyProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionApplyProto::CopyFrom(const FactionApplyProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionApplyProto::IsInitialized() const {

  return true;
}

void FactionApplyProto::Swap(FactionApplyProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionApplyProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionApplyProto_descriptor_;
  metadata.reflection = FactionApplyProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionApplyListProto::kApplyLstFieldNumber;
#endif  // !_MSC_VER

FactionApplyListProto::FactionApplyListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionApplyListProto::InitAsDefaultInstance() {
}

FactionApplyListProto::FactionApplyListProto(const FactionApplyListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionApplyListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionApplyListProto::~FactionApplyListProto() {
  SharedDtor();
}

void FactionApplyListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionApplyListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionApplyListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionApplyListProto_descriptor_;
}

const FactionApplyListProto& FactionApplyListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionApplyListProto* FactionApplyListProto::default_instance_ = NULL;

FactionApplyListProto* FactionApplyListProto::New() const {
  return new FactionApplyListProto;
}

void FactionApplyListProto::Clear() {
  apply_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionApplyListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionApplyProto apply_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_apply_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionApplyListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionApplyProto apply_lst = 1;
  for (int i = 0; i < this->apply_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->apply_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionApplyListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionApplyProto apply_lst = 1;
  for (int i = 0; i < this->apply_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->apply_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionApplyListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionApplyProto apply_lst = 1;
  total_size += 1 * this->apply_lst_size();
  for (int i = 0; i < this->apply_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionApplyListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionApplyListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionApplyListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionApplyListProto::MergeFrom(const FactionApplyListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_lst_.MergeFrom(from.apply_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionApplyListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionApplyListProto::CopyFrom(const FactionApplyListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionApplyListProto::IsInitialized() const {

  return true;
}

void FactionApplyListProto::Swap(FactionApplyListProto* other) {
  if (other != this) {
    apply_lst_.Swap(&other->apply_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionApplyListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionApplyListProto_descriptor_;
  metadata.reflection = FactionApplyListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMemSimpleProto::kCidFieldNumber;
const int FactionMemSimpleProto::kNameFieldNumber;
const int FactionMemSimpleProto::kLevelFieldNumber;
const int FactionMemSimpleProto::kDutyFieldNumber;
const int FactionMemSimpleProto::kFightFieldNumber;
#endif  // !_MSC_VER

FactionMemSimpleProto::FactionMemSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMemSimpleProto::InitAsDefaultInstance() {
}

FactionMemSimpleProto::FactionMemSimpleProto(const FactionMemSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMemSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  duty_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMemSimpleProto::~FactionMemSimpleProto() {
  SharedDtor();
}

void FactionMemSimpleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionMemSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMemSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMemSimpleProto_descriptor_;
}

const FactionMemSimpleProto& FactionMemSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMemSimpleProto* FactionMemSimpleProto::default_instance_ = NULL;

FactionMemSimpleProto* FactionMemSimpleProto::New() const {
  return new FactionMemSimpleProto;
}

void FactionMemSimpleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    duty_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMemSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duty;
        break;
      }

      // optional int32 duty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMemSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 duty = 4;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duty(), output);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMemSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 duty = 4;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duty(), target);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMemSimpleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 duty = 4;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

    // optional uint64 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMemSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMemSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMemSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMemSimpleProto::MergeFrom(const FactionMemSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMemSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMemSimpleProto::CopyFrom(const FactionMemSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMemSimpleProto::IsInitialized() const {

  return true;
}

void FactionMemSimpleProto::Swap(FactionMemSimpleProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(duty_, other->duty_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMemSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMemSimpleProto_descriptor_;
  metadata.reflection = FactionMemSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMemSimpleListProto::kSimpleLstFieldNumber;
#endif  // !_MSC_VER

FactionMemSimpleListProto::FactionMemSimpleListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMemSimpleListProto::InitAsDefaultInstance() {
}

FactionMemSimpleListProto::FactionMemSimpleListProto(const FactionMemSimpleListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMemSimpleListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMemSimpleListProto::~FactionMemSimpleListProto() {
  SharedDtor();
}

void FactionMemSimpleListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMemSimpleListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMemSimpleListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMemSimpleListProto_descriptor_;
}

const FactionMemSimpleListProto& FactionMemSimpleListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMemSimpleListProto* FactionMemSimpleListProto::default_instance_ = NULL;

FactionMemSimpleListProto* FactionMemSimpleListProto::New() const {
  return new FactionMemSimpleListProto;
}

void FactionMemSimpleListProto::Clear() {
  simple_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMemSimpleListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionMemSimpleProto simple_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simple_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_simple_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMemSimpleListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionMemSimpleProto simple_lst = 1;
  for (int i = 0; i < this->simple_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->simple_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMemSimpleListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionMemSimpleProto simple_lst = 1;
  for (int i = 0; i < this->simple_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->simple_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMemSimpleListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionMemSimpleProto simple_lst = 1;
  total_size += 1 * this->simple_lst_size();
  for (int i = 0; i < this->simple_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simple_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMemSimpleListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMemSimpleListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMemSimpleListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMemSimpleListProto::MergeFrom(const FactionMemSimpleListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  simple_lst_.MergeFrom(from.simple_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMemSimpleListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMemSimpleListProto::CopyFrom(const FactionMemSimpleListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMemSimpleListProto::IsInitialized() const {

  return true;
}

void FactionMemSimpleListProto::Swap(FactionMemSimpleListProto* other) {
  if (other != this) {
    simple_lst_.Swap(&other->simple_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMemSimpleListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMemSimpleListProto_descriptor_;
  metadata.reflection = FactionMemSimpleListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionSimpleProto::kFactionIdFieldNumber;
const int FactionSimpleProto::kNameFieldNumber;
const int FactionSimpleProto::kRankFieldNumber;
const int FactionSimpleProto::kLeaderCidFieldNumber;
const int FactionSimpleProto::kLeaderNameFieldNumber;
const int FactionSimpleProto::kLevelFieldNumber;
const int FactionSimpleProto::kMemCountFieldNumber;
const int FactionSimpleProto::kFightFieldNumber;
const int FactionSimpleProto::kApplyTypeFieldNumber;
const int FactionSimpleProto::kApplyMinlevFieldNumber;
const int FactionSimpleProto::kApplyFightFieldNumber;
const int FactionSimpleProto::kMemFieldNumber;
#endif  // !_MSC_VER

FactionSimpleProto::FactionSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionSimpleProto::InitAsDefaultInstance() {
  mem_ = const_cast< ::proto_ff::FactionMemSimpleListProto*>(&::proto_ff::FactionMemSimpleListProto::default_instance());
}

FactionSimpleProto::FactionSimpleProto(const FactionSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  leader_cid_ = GOOGLE_ULONGLONG(0);
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  mem_count_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  apply_type_ = 0;
  apply_minlev_ = 0;
  apply_fight_ = GOOGLE_ULONGLONG(0);
  mem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionSimpleProto::~FactionSimpleProto() {
  SharedDtor();
}

void FactionSimpleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
    delete mem_;
  }
}

void FactionSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionSimpleProto_descriptor_;
}

const FactionSimpleProto& FactionSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionSimpleProto* FactionSimpleProto::default_instance_ = NULL;

FactionSimpleProto* FactionSimpleProto::New() const {
  return new FactionSimpleProto;
}

void FactionSimpleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rank_ = 0;
    leader_cid_ = GOOGLE_ULONGLONG(0);
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    level_ = 0;
    mem_count_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    apply_type_ = 0;
    apply_minlev_ = 0;
    apply_fight_ = GOOGLE_ULONGLONG(0);
    if (has_mem()) {
      if (mem_ != NULL) mem_->::proto_ff::FactionMemSimpleListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leader_cid;
        break;
      }

      // optional uint64 leader_cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_cid_)));
          set_has_leader_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_leader_name;
        break;
      }

      // optional bytes leader_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mem_count;
        break;
      }

      // optional int32 mem_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_count_)));
          set_has_mem_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_apply_type;
        break;
      }

      // optional int32 apply_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_type_)));
          set_has_apply_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_apply_minlev;
        break;
      }

      // optional int32 apply_minlev = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_minlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_minlev_)));
          set_has_apply_minlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_apply_fight;
        break;
      }

      // optional uint64 apply_fight = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_fight_)));
          set_has_apply_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_mem;
        break;
      }

      // optional .proto_ff.FactionMemSimpleListProto mem = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // optional uint64 leader_cid = 4;
  if (has_leader_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->leader_cid(), output);
  }

  // optional bytes leader_name = 5;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->leader_name(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 mem_count = 7;
  if (has_mem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mem_count(), output);
  }

  // optional uint64 fight = 8;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fight(), output);
  }

  // optional int32 apply_type = 9;
  if (has_apply_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->apply_type(), output);
  }

  // optional int32 apply_minlev = 10;
  if (has_apply_minlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->apply_minlev(), output);
  }

  // optional uint64 apply_fight = 11;
  if (has_apply_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->apply_fight(), output);
  }

  // optional .proto_ff.FactionMemSimpleListProto mem = 12;
  if (has_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->mem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // optional uint64 leader_cid = 4;
  if (has_leader_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->leader_cid(), target);
  }

  // optional bytes leader_name = 5;
  if (has_leader_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->leader_name(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 mem_count = 7;
  if (has_mem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mem_count(), target);
  }

  // optional uint64 fight = 8;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fight(), target);
  }

  // optional int32 apply_type = 9;
  if (has_apply_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->apply_type(), target);
  }

  // optional int32 apply_minlev = 10;
  if (has_apply_minlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->apply_minlev(), target);
  }

  // optional uint64 apply_fight = 11;
  if (has_apply_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->apply_fight(), target);
  }

  // optional .proto_ff.FactionMemSimpleListProto mem = 12;
  if (has_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->mem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionSimpleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 leader_cid = 4;
    if (has_leader_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_cid());
    }

    // optional bytes leader_name = 5;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_name());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 mem_count = 7;
    if (has_mem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mem_count());
    }

    // optional uint64 fight = 8;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 apply_type = 9;
    if (has_apply_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_type());
    }

    // optional int32 apply_minlev = 10;
    if (has_apply_minlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_minlev());
    }

    // optional uint64 apply_fight = 11;
    if (has_apply_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_fight());
    }

    // optional .proto_ff.FactionMemSimpleListProto mem = 12;
    if (has_mem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionSimpleProto::MergeFrom(const FactionSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_leader_cid()) {
      set_leader_cid(from.leader_cid());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_mem_count()) {
      set_mem_count(from.mem_count());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_apply_type()) {
      set_apply_type(from.apply_type());
    }
    if (from.has_apply_minlev()) {
      set_apply_minlev(from.apply_minlev());
    }
    if (from.has_apply_fight()) {
      set_apply_fight(from.apply_fight());
    }
    if (from.has_mem()) {
      mutable_mem()->::proto_ff::FactionMemSimpleListProto::MergeFrom(from.mem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionSimpleProto::CopyFrom(const FactionSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionSimpleProto::IsInitialized() const {

  return true;
}

void FactionSimpleProto::Swap(FactionSimpleProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(rank_, other->rank_);
    std::swap(leader_cid_, other->leader_cid_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(level_, other->level_);
    std::swap(mem_count_, other->mem_count_);
    std::swap(fight_, other->fight_);
    std::swap(apply_type_, other->apply_type_);
    std::swap(apply_minlev_, other->apply_minlev_);
    std::swap(apply_fight_, other->apply_fight_);
    std::swap(mem_, other->mem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionSimpleProto_descriptor_;
  metadata.reflection = FactionSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionRecordProto::kNameFieldNumber;
const int FactionRecordProto::kTimeFieldNumber;
const int FactionRecordProto::kOpFieldNumber;
const int FactionRecordProto::kParam1FieldNumber;
#endif  // !_MSC_VER

FactionRecordProto::FactionRecordProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionRecordProto::InitAsDefaultInstance() {
}

FactionRecordProto::FactionRecordProto(const FactionRecordProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionRecordProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  op_ = 0;
  param1_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionRecordProto::~FactionRecordProto() {
  SharedDtor();
}

void FactionRecordProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionRecordProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionRecordProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionRecordProto_descriptor_;
}

const FactionRecordProto& FactionRecordProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionRecordProto* FactionRecordProto::default_instance_ = NULL;

FactionRecordProto* FactionRecordProto::New() const {
  return new FactionRecordProto;
}

void FactionRecordProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    op_ = 0;
    param1_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionRecordProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }

      // optional int32 op = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param1;
        break;
      }

      // optional int64 param1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionRecordProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional int32 op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->op(), output);
  }

  // optional int64 param1 = 4;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->param1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionRecordProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional int32 op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->op(), target);
  }

  // optional int64 param1 = 4;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->param1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionRecordProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional int32 op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional int64 param1 = 4;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionRecordProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionRecordProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionRecordProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionRecordProto::MergeFrom(const FactionRecordProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionRecordProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionRecordProto::CopyFrom(const FactionRecordProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionRecordProto::IsInitialized() const {

  return true;
}

void FactionRecordProto::Swap(FactionRecordProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(op_, other->op_);
    std::swap(param1_, other->param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionRecordProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionRecordProto_descriptor_;
  metadata.reflection = FactionRecordProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionRecordListProto::kRecordLstFieldNumber;
#endif  // !_MSC_VER

FactionRecordListProto::FactionRecordListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionRecordListProto::InitAsDefaultInstance() {
}

FactionRecordListProto::FactionRecordListProto(const FactionRecordListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionRecordListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionRecordListProto::~FactionRecordListProto() {
  SharedDtor();
}

void FactionRecordListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionRecordListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionRecordListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionRecordListProto_descriptor_;
}

const FactionRecordListProto& FactionRecordListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionRecordListProto* FactionRecordListProto::default_instance_ = NULL;

FactionRecordListProto* FactionRecordListProto::New() const {
  return new FactionRecordListProto;
}

void FactionRecordListProto::Clear() {
  record_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionRecordListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionRecordProto record_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionRecordListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionRecordProto record_lst = 1;
  for (int i = 0; i < this->record_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionRecordListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionRecordProto record_lst = 1;
  for (int i = 0; i < this->record_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionRecordListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionRecordProto record_lst = 1;
  total_size += 1 * this->record_lst_size();
  for (int i = 0; i < this->record_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionRecordListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionRecordListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionRecordListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionRecordListProto::MergeFrom(const FactionRecordListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_lst_.MergeFrom(from.record_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionRecordListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionRecordListProto::CopyFrom(const FactionRecordListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionRecordListProto::IsInitialized() const {

  return true;
}

void FactionRecordListProto::Swap(FactionRecordListProto* other) {
  if (other != this) {
    record_lst_.Swap(&other->record_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionRecordListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionRecordListProto_descriptor_;
  metadata.reflection = FactionRecordListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionSalaryProto::kIdFieldNumber;
const int FactionSalaryProto::kCurFieldNumber;
const int FactionSalaryProto::kFetchFieldNumber;
#endif  // !_MSC_VER

FactionSalaryProto::FactionSalaryProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionSalaryProto::InitAsDefaultInstance() {
}

FactionSalaryProto::FactionSalaryProto(const FactionSalaryProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionSalaryProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cur_ = 0;
  fetch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionSalaryProto::~FactionSalaryProto() {
  SharedDtor();
}

void FactionSalaryProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionSalaryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionSalaryProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionSalaryProto_descriptor_;
}

const FactionSalaryProto& FactionSalaryProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionSalaryProto* FactionSalaryProto::default_instance_ = NULL;

FactionSalaryProto* FactionSalaryProto::New() const {
  return new FactionSalaryProto;
}

void FactionSalaryProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cur_ = 0;
    fetch_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionSalaryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur;
        break;
      }

      // optional int32 cur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fetch;
        break;
      }

      // optional int32 fetch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionSalaryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 cur = 2;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur(), output);
  }

  // optional int32 fetch = 3;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fetch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionSalaryProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 cur = 2;
  if (has_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur(), target);
  }

  // optional int32 fetch = 3;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fetch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionSalaryProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 cur = 2;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur());
    }

    // optional int32 fetch = 3;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionSalaryProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionSalaryProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionSalaryProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionSalaryProto::MergeFrom(const FactionSalaryProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionSalaryProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionSalaryProto::CopyFrom(const FactionSalaryProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionSalaryProto::IsInitialized() const {

  return true;
}

void FactionSalaryProto::Swap(FactionSalaryProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cur_, other->cur_);
    std::swap(fetch_, other->fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionSalaryProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionSalaryProto_descriptor_;
  metadata.reflection = FactionSalaryProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionSalaryListProto::kInfoFieldNumber;
#endif  // !_MSC_VER

FactionSalaryListProto::FactionSalaryListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionSalaryListProto::InitAsDefaultInstance() {
}

FactionSalaryListProto::FactionSalaryListProto(const FactionSalaryListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionSalaryListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionSalaryListProto::~FactionSalaryListProto() {
  SharedDtor();
}

void FactionSalaryListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionSalaryListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionSalaryListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionSalaryListProto_descriptor_;
}

const FactionSalaryListProto& FactionSalaryListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionSalaryListProto* FactionSalaryListProto::default_instance_ = NULL;

FactionSalaryListProto* FactionSalaryListProto::New() const {
  return new FactionSalaryListProto;
}

void FactionSalaryListProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionSalaryListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionSalaryProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionSalaryListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionSalaryProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionSalaryListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionSalaryProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionSalaryListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionSalaryProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionSalaryListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionSalaryListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionSalaryListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionSalaryListProto::MergeFrom(const FactionSalaryListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionSalaryListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionSalaryListProto::CopyFrom(const FactionSalaryListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionSalaryListProto::IsInitialized() const {

  return true;
}

void FactionSalaryListProto::Swap(FactionSalaryListProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionSalaryListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionSalaryListProto_descriptor_;
  metadata.reflection = FactionSalaryListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDinnerProto::kTransFieldNumber;
const int FactionDinnerProto::kMeatFieldNumber;
const int FactionDinnerProto::kExpFieldNumber;
const int FactionDinnerProto::kContriFieldNumber;
#endif  // !_MSC_VER

FactionDinnerProto::FactionDinnerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDinnerProto::InitAsDefaultInstance() {
}

FactionDinnerProto::FactionDinnerProto(const FactionDinnerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDinnerProto::SharedCtor() {
  _cached_size_ = 0;
  trans_ = 0u;
  meat_ = 0u;
  exp_ = 0u;
  contri_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDinnerProto::~FactionDinnerProto() {
  SharedDtor();
}

void FactionDinnerProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDinnerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDinnerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDinnerProto_descriptor_;
}

const FactionDinnerProto& FactionDinnerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionDinnerProto* FactionDinnerProto::default_instance_ = NULL;

FactionDinnerProto* FactionDinnerProto::New() const {
  return new FactionDinnerProto;
}

void FactionDinnerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trans_ = 0u;
    meat_ = 0u;
    exp_ = 0u;
    contri_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDinnerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trans = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trans_)));
          set_has_trans();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_meat;
        break;
      }

      // optional uint32 meat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meat_)));
          set_has_meat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_contri;
        break;
      }

      // optional uint32 contri = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contri_)));
          set_has_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDinnerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 trans = 1;
  if (has_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trans(), output);
  }

  // optional uint32 meat = 2;
  if (has_meat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->meat(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 contri = 4;
  if (has_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->contri(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDinnerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 trans = 1;
  if (has_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trans(), target);
  }

  // optional uint32 meat = 2;
  if (has_meat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->meat(), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // optional uint32 contri = 4;
  if (has_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->contri(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDinnerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 trans = 1;
    if (has_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trans());
    }

    // optional uint32 meat = 2;
    if (has_meat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meat());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 contri = 4;
    if (has_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contri());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDinnerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDinnerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDinnerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDinnerProto::MergeFrom(const FactionDinnerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trans()) {
      set_trans(from.trans());
    }
    if (from.has_meat()) {
      set_meat(from.meat());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_contri()) {
      set_contri(from.contri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDinnerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDinnerProto::CopyFrom(const FactionDinnerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDinnerProto::IsInitialized() const {

  return true;
}

void FactionDinnerProto::Swap(FactionDinnerProto* other) {
  if (other != this) {
    std::swap(trans_, other->trans_);
    std::swap(meat_, other->meat_);
    std::swap(exp_, other->exp_);
    std::swap(contri_, other->contri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDinnerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDinnerProto_descriptor_;
  metadata.reflection = FactionDinnerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionInviteProto::kCidFieldNumber;
const int FactionInviteProto::kNameFieldNumber;
const int FactionInviteProto::kLevelFieldNumber;
const int FactionInviteProto::kProfFieldNumber;
const int FactionInviteProto::kHeadFieldNumber;
#endif  // !_MSC_VER

FactionInviteProto::FactionInviteProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionInviteProto::InitAsDefaultInstance() {
  head_ = const_cast< ::proto_ff::RoleHeadPicProto*>(&::proto_ff::RoleHeadPicProto::default_instance());
}

FactionInviteProto::FactionInviteProto(const FactionInviteProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionInviteProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  prof_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionInviteProto::~FactionInviteProto() {
  SharedDtor();
}

void FactionInviteProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void FactionInviteProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionInviteProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionInviteProto_descriptor_;
}

const FactionInviteProto& FactionInviteProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionInviteProto* FactionInviteProto::default_instance_ = NULL;

FactionInviteProto* FactionInviteProto::New() const {
  return new FactionInviteProto;
}

void FactionInviteProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    prof_ = 0;
    if (has_head()) {
      if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionInviteProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_head;
        break;
      }

      // optional .proto_ff.RoleHeadPicProto head = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionInviteProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  // optional .proto_ff.RoleHeadPicProto head = 5;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionInviteProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  // optional .proto_ff.RoleHeadPicProto head = 5;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionInviteProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional .proto_ff.RoleHeadPicProto head = 5;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionInviteProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionInviteProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionInviteProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionInviteProto::MergeFrom(const FactionInviteProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_head()) {
      mutable_head()->::proto_ff::RoleHeadPicProto::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionInviteProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionInviteProto::CopyFrom(const FactionInviteProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionInviteProto::IsInitialized() const {

  return true;
}

void FactionInviteProto::Swap(FactionInviteProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(prof_, other->prof_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionInviteProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionInviteProto_descriptor_;
  metadata.reflection = FactionInviteProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionSkillProto::kIdFieldNumber;
const int FactionSkillProto::kLevelFieldNumber;
#endif  // !_MSC_VER

FactionSkillProto::FactionSkillProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionSkillProto::InitAsDefaultInstance() {
}

FactionSkillProto::FactionSkillProto(const FactionSkillProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionSkillProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionSkillProto::~FactionSkillProto() {
  SharedDtor();
}

void FactionSkillProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionSkillProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionSkillProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionSkillProto_descriptor_;
}

const FactionSkillProto& FactionSkillProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionSkillProto* FactionSkillProto::default_instance_ = NULL;

FactionSkillProto* FactionSkillProto::New() const {
  return new FactionSkillProto;
}

void FactionSkillProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionSkillProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionSkillProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionSkillProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionSkillProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionSkillProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionSkillProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionSkillProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionSkillProto::MergeFrom(const FactionSkillProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionSkillProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionSkillProto::CopyFrom(const FactionSkillProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionSkillProto::IsInitialized() const {

  return true;
}

void FactionSkillProto::Swap(FactionSkillProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionSkillProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionSkillProto_descriptor_;
  metadata.reflection = FactionSkillProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionSkillListProto::kInfoFieldNumber;
#endif  // !_MSC_VER

FactionSkillListProto::FactionSkillListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionSkillListProto::InitAsDefaultInstance() {
}

FactionSkillListProto::FactionSkillListProto(const FactionSkillListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionSkillListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionSkillListProto::~FactionSkillListProto() {
  SharedDtor();
}

void FactionSkillListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionSkillListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionSkillListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionSkillListProto_descriptor_;
}

const FactionSkillListProto& FactionSkillListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionSkillListProto* FactionSkillListProto::default_instance_ = NULL;

FactionSkillListProto* FactionSkillListProto::New() const {
  return new FactionSkillListProto;
}

void FactionSkillListProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionSkillListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionSkillProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionSkillListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionSkillProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionSkillListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionSkillProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionSkillListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionSkillProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionSkillListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionSkillListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionSkillListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionSkillListProto::MergeFrom(const FactionSkillListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionSkillListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionSkillListProto::CopyFrom(const FactionSkillListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionSkillListProto::IsInitialized() const {

  return true;
}

void FactionSkillListProto::Swap(FactionSkillListProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionSkillListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionSkillListProto_descriptor_;
  metadata.reflection = FactionSkillListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionAnswerRankProto::kRankFieldNumber;
const int FactionAnswerRankProto::kFactionIdFieldNumber;
const int FactionAnswerRankProto::kNameFieldNumber;
const int FactionAnswerRankProto::kZidFieldNumber;
const int FactionAnswerRankProto::kCountFieldNumber;
#endif  // !_MSC_VER

FactionAnswerRankProto::FactionAnswerRankProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionAnswerRankProto::InitAsDefaultInstance() {
}

FactionAnswerRankProto::FactionAnswerRankProto(const FactionAnswerRankProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionAnswerRankProto::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionAnswerRankProto::~FactionAnswerRankProto() {
  SharedDtor();
}

void FactionAnswerRankProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionAnswerRankProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionAnswerRankProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionAnswerRankProto_descriptor_;
}

const FactionAnswerRankProto& FactionAnswerRankProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionAnswerRankProto* FactionAnswerRankProto::default_instance_ = NULL;

FactionAnswerRankProto* FactionAnswerRankProto::New() const {
  return new FactionAnswerRankProto;
}

void FactionAnswerRankProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0u;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionAnswerRankProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faction_id;
        break;
      }

      // optional uint32 faction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionAnswerRankProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->faction_id(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  // optional int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionAnswerRankProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->faction_id(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  // optional int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionAnswerRankProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint32 faction_id = 2;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionAnswerRankProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionAnswerRankProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionAnswerRankProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionAnswerRankProto::MergeFrom(const FactionAnswerRankProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionAnswerRankProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionAnswerRankProto::CopyFrom(const FactionAnswerRankProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionAnswerRankProto::IsInitialized() const {

  return true;
}

void FactionAnswerRankProto::Swap(FactionAnswerRankProto* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionAnswerRankProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionAnswerRankProto_descriptor_;
  metadata.reflection = FactionAnswerRankProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionAnswerRankListProto::kLstFieldNumber;
#endif  // !_MSC_VER

FactionAnswerRankListProto::FactionAnswerRankListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionAnswerRankListProto::InitAsDefaultInstance() {
}

FactionAnswerRankListProto::FactionAnswerRankListProto(const FactionAnswerRankListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionAnswerRankListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionAnswerRankListProto::~FactionAnswerRankListProto() {
  SharedDtor();
}

void FactionAnswerRankListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionAnswerRankListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionAnswerRankListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionAnswerRankListProto_descriptor_;
}

const FactionAnswerRankListProto& FactionAnswerRankListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionAnswerRankListProto* FactionAnswerRankListProto::default_instance_ = NULL;

FactionAnswerRankListProto* FactionAnswerRankListProto::New() const {
  return new FactionAnswerRankListProto;
}

void FactionAnswerRankListProto::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionAnswerRankListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionAnswerRankProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionAnswerRankListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionAnswerRankProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionAnswerRankListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionAnswerRankProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionAnswerRankListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionAnswerRankProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionAnswerRankListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionAnswerRankListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionAnswerRankListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionAnswerRankListProto::MergeFrom(const FactionAnswerRankListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionAnswerRankListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionAnswerRankListProto::CopyFrom(const FactionAnswerRankListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionAnswerRankListProto::IsInitialized() const {

  return true;
}

void FactionAnswerRankListProto::Swap(FactionAnswerRankListProto* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionAnswerRankListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionAnswerRankListProto_descriptor_;
  metadata.reflection = FactionAnswerRankListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionAnswerFinalProto::kRankFieldNumber;
const int FactionAnswerFinalProto::kFactionIdFieldNumber;
const int FactionAnswerFinalProto::kNameFieldNumber;
const int FactionAnswerFinalProto::kZidFieldNumber;
const int FactionAnswerFinalProto::kCidFieldNumber;
const int FactionAnswerFinalProto::kCountFieldNumber;
const int FactionAnswerFinalProto::kSecFieldNumber;
const int FactionAnswerFinalProto::kPlayerNameFieldNumber;
const int FactionAnswerFinalProto::kFactionCountFieldNumber;
#endif  // !_MSC_VER

FactionAnswerFinalProto::FactionAnswerFinalProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionAnswerFinalProto::InitAsDefaultInstance() {
}

FactionAnswerFinalProto::FactionAnswerFinalProto(const FactionAnswerFinalProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionAnswerFinalProto::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  sec_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  faction_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionAnswerFinalProto::~FactionAnswerFinalProto() {
  SharedDtor();
}

void FactionAnswerFinalProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void FactionAnswerFinalProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionAnswerFinalProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionAnswerFinalProto_descriptor_;
}

const FactionAnswerFinalProto& FactionAnswerFinalProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionAnswerFinalProto* FactionAnswerFinalProto::default_instance_ = NULL;

FactionAnswerFinalProto* FactionAnswerFinalProto::New() const {
  return new FactionAnswerFinalProto;
}

void FactionAnswerFinalProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
    sec_ = 0;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    faction_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionAnswerFinalProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faction_id;
        break;
      }

      // optional uint32 faction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional uint32 count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sec;
        break;
      }

      // optional int32 sec = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_player_name;
        break;
      }

      // optional bytes player_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_faction_count;
        break;
      }

      // optional uint32 faction_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_count_)));
          set_has_faction_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionAnswerFinalProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->faction_id(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  // optional uint64 cid = 5;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cid(), output);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // optional int32 sec = 7;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sec(), output);
  }

  // optional bytes player_name = 8;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->player_name(), output);
  }

  // optional uint32 faction_count = 9;
  if (has_faction_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->faction_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionAnswerFinalProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->faction_id(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  // optional uint64 cid = 5;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cid(), target);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // optional int32 sec = 7;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sec(), target);
  }

  // optional bytes player_name = 8;
  if (has_player_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->player_name(), target);
  }

  // optional uint32 faction_count = 9;
  if (has_faction_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->faction_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionAnswerFinalProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint32 faction_id = 2;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint64 cid = 5;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional int32 sec = 7;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sec());
    }

    // optional bytes player_name = 8;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 faction_count = 9;
    if (has_faction_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionAnswerFinalProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionAnswerFinalProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionAnswerFinalProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionAnswerFinalProto::MergeFrom(const FactionAnswerFinalProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_faction_count()) {
      set_faction_count(from.faction_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionAnswerFinalProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionAnswerFinalProto::CopyFrom(const FactionAnswerFinalProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionAnswerFinalProto::IsInitialized() const {

  return true;
}

void FactionAnswerFinalProto::Swap(FactionAnswerFinalProto* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(cid_, other->cid_);
    std::swap(count_, other->count_);
    std::swap(sec_, other->sec_);
    std::swap(player_name_, other->player_name_);
    std::swap(faction_count_, other->faction_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionAnswerFinalProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionAnswerFinalProto_descriptor_;
  metadata.reflection = FactionAnswerFinalProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionBeastRankProto::kRankFieldNumber;
const int FactionBeastRankProto::kCidFieldNumber;
const int FactionBeastRankProto::kNameFieldNumber;
const int FactionBeastRankProto::kHarmFieldNumber;
#endif  // !_MSC_VER

FactionBeastRankProto::FactionBeastRankProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionBeastRankProto::InitAsDefaultInstance() {
}

FactionBeastRankProto::FactionBeastRankProto(const FactionBeastRankProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionBeastRankProto::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  harm_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionBeastRankProto::~FactionBeastRankProto() {
  SharedDtor();
}

void FactionBeastRankProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionBeastRankProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionBeastRankProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionBeastRankProto_descriptor_;
}

const FactionBeastRankProto& FactionBeastRankProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionBeastRankProto* FactionBeastRankProto::default_instance_ = NULL;

FactionBeastRankProto* FactionBeastRankProto::New() const {
  return new FactionBeastRankProto;
}

void FactionBeastRankProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    harm_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionBeastRankProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_harm;
        break;
      }

      // optional int64 harm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionBeastRankProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int64 harm = 4;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionBeastRankProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int64 harm = 4;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionBeastRankProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int64 harm = 4;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->harm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionBeastRankProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionBeastRankProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionBeastRankProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionBeastRankProto::MergeFrom(const FactionBeastRankProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionBeastRankProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionBeastRankProto::CopyFrom(const FactionBeastRankProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionBeastRankProto::IsInitialized() const {

  return true;
}

void FactionBeastRankProto::Swap(FactionBeastRankProto* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(harm_, other->harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionBeastRankProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionBeastRankProto_descriptor_;
  metadata.reflection = FactionBeastRankProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionBeastRankListProto::kLstFieldNumber;
#endif  // !_MSC_VER

FactionBeastRankListProto::FactionBeastRankListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionBeastRankListProto::InitAsDefaultInstance() {
}

FactionBeastRankListProto::FactionBeastRankListProto(const FactionBeastRankListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionBeastRankListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionBeastRankListProto::~FactionBeastRankListProto() {
  SharedDtor();
}

void FactionBeastRankListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionBeastRankListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionBeastRankListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionBeastRankListProto_descriptor_;
}

const FactionBeastRankListProto& FactionBeastRankListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionBeastRankListProto* FactionBeastRankListProto::default_instance_ = NULL;

FactionBeastRankListProto* FactionBeastRankListProto::New() const {
  return new FactionBeastRankListProto;
}

void FactionBeastRankListProto::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionBeastRankListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionBeastRankProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionBeastRankListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionBeastRankProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionBeastRankListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionBeastRankProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionBeastRankListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionBeastRankProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionBeastRankListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionBeastRankListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionBeastRankListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionBeastRankListProto::MergeFrom(const FactionBeastRankListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionBeastRankListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionBeastRankListProto::CopyFrom(const FactionBeastRankListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionBeastRankListProto::IsInitialized() const {

  return true;
}

void FactionBeastRankListProto::Swap(FactionBeastRankListProto* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionBeastRankListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionBeastRankListProto_descriptor_;
  metadata.reflection = FactionBeastRankListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SyncLoginRsp::kInfoFieldNumber;
const int Faction_SyncLoginRsp::kDutyFieldNumber;
#endif  // !_MSC_VER

Faction_SyncLoginRsp::Faction_SyncLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SyncLoginRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::FactionProto*>(&::proto_ff::FactionProto::default_instance());
}

Faction_SyncLoginRsp::Faction_SyncLoginRsp(const Faction_SyncLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SyncLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  duty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SyncLoginRsp::~Faction_SyncLoginRsp() {
  SharedDtor();
}

void Faction_SyncLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Faction_SyncLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SyncLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SyncLoginRsp_descriptor_;
}

const Faction_SyncLoginRsp& Faction_SyncLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SyncLoginRsp* Faction_SyncLoginRsp::default_instance_ = NULL;

Faction_SyncLoginRsp* Faction_SyncLoginRsp::New() const {
  return new Faction_SyncLoginRsp;
}

void Faction_SyncLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::FactionProto::Clear();
    }
    duty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SyncLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duty;
        break;
      }

      // optional int32 duty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SyncLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional int32 duty = 2;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SyncLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional int32 duty = 2;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SyncLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 duty = 2;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SyncLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SyncLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SyncLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SyncLoginRsp::MergeFrom(const Faction_SyncLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::FactionProto::MergeFrom(from.info());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SyncLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SyncLoginRsp::CopyFrom(const Faction_SyncLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SyncLoginRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void Faction_SyncLoginRsp::Swap(Faction_SyncLoginRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(duty_, other->duty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SyncLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SyncLoginRsp_descriptor_;
  metadata.reflection = Faction_SyncLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SyncInfoRsp::kFactionIdFieldNumber;
const int Faction_SyncInfoRsp::kNameFieldNumber;
const int Faction_SyncInfoRsp::kDutyFieldNumber;
const int Faction_SyncInfoRsp::kLevelFieldNumber;
#endif  // !_MSC_VER

Faction_SyncInfoRsp::Faction_SyncInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SyncInfoRsp::InitAsDefaultInstance() {
}

Faction_SyncInfoRsp::Faction_SyncInfoRsp(const Faction_SyncInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SyncInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duty_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SyncInfoRsp::~Faction_SyncInfoRsp() {
  SharedDtor();
}

void Faction_SyncInfoRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Faction_SyncInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SyncInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SyncInfoRsp_descriptor_;
}

const Faction_SyncInfoRsp& Faction_SyncInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SyncInfoRsp* Faction_SyncInfoRsp::default_instance_ = NULL;

Faction_SyncInfoRsp* Faction_SyncInfoRsp::New() const {
  return new Faction_SyncInfoRsp;
}

void Faction_SyncInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    duty_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SyncInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duty;
        break;
      }

      // optional int32 duty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SyncInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 duty = 3;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duty(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SyncInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 duty = 3;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duty(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SyncInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 duty = 3;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SyncInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SyncInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SyncInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SyncInfoRsp::MergeFrom(const Faction_SyncInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SyncInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SyncInfoRsp::CopyFrom(const Faction_SyncInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SyncInfoRsp::IsInitialized() const {

  return true;
}

void Faction_SyncInfoRsp::Swap(Faction_SyncInfoRsp* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(duty_, other->duty_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SyncInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SyncInfoRsp_descriptor_;
  metadata.reflection = Faction_SyncInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_InfoReq::Faction_InfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_InfoReq::InitAsDefaultInstance() {
}

Faction_InfoReq::Faction_InfoReq(const Faction_InfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_InfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_InfoReq::~Faction_InfoReq() {
  SharedDtor();
}

void Faction_InfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_InfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_InfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_InfoReq_descriptor_;
}

const Faction_InfoReq& Faction_InfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_InfoReq* Faction_InfoReq::default_instance_ = NULL;

Faction_InfoReq* Faction_InfoReq::New() const {
  return new Faction_InfoReq;
}

void Faction_InfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_InfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_InfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_InfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_InfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_InfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_InfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_InfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_InfoReq::MergeFrom(const Faction_InfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_InfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_InfoReq::CopyFrom(const Faction_InfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_InfoReq::IsInitialized() const {

  return true;
}

void Faction_InfoReq::Swap(Faction_InfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_InfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_InfoReq_descriptor_;
  metadata.reflection = Faction_InfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_InfoRsp::kRetFieldNumber;
const int Faction_InfoRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Faction_InfoRsp::Faction_InfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_InfoRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::FactionProto*>(&::proto_ff::FactionProto::default_instance());
}

Faction_InfoRsp::Faction_InfoRsp(const Faction_InfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_InfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_InfoRsp::~Faction_InfoRsp() {
  SharedDtor();
}

void Faction_InfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Faction_InfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_InfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_InfoRsp_descriptor_;
}

const Faction_InfoRsp& Faction_InfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_InfoRsp* Faction_InfoRsp::default_instance_ = NULL;

Faction_InfoRsp* Faction_InfoRsp::New() const {
  return new Faction_InfoRsp;
}

void Faction_InfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::FactionProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_InfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.FactionProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_InfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_InfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_InfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_InfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_InfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_InfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_InfoRsp::MergeFrom(const Faction_InfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::FactionProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_InfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_InfoRsp::CopyFrom(const Faction_InfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_InfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void Faction_InfoRsp::Swap(Faction_InfoRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_InfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_InfoRsp_descriptor_;
  metadata.reflection = Faction_InfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_InfoListReq::Faction_InfoListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_InfoListReq::InitAsDefaultInstance() {
}

Faction_InfoListReq::Faction_InfoListReq(const Faction_InfoListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_InfoListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_InfoListReq::~Faction_InfoListReq() {
  SharedDtor();
}

void Faction_InfoListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_InfoListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_InfoListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_InfoListReq_descriptor_;
}

const Faction_InfoListReq& Faction_InfoListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_InfoListReq* Faction_InfoListReq::default_instance_ = NULL;

Faction_InfoListReq* Faction_InfoListReq::New() const {
  return new Faction_InfoListReq;
}

void Faction_InfoListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_InfoListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_InfoListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_InfoListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_InfoListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_InfoListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_InfoListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_InfoListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_InfoListReq::MergeFrom(const Faction_InfoListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_InfoListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_InfoListReq::CopyFrom(const Faction_InfoListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_InfoListReq::IsInitialized() const {

  return true;
}

void Faction_InfoListReq::Swap(Faction_InfoListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_InfoListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_InfoListReq_descriptor_;
  metadata.reflection = Faction_InfoListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_InfoListRsp::kInfoLstFieldNumber;
#endif  // !_MSC_VER

Faction_InfoListRsp::Faction_InfoListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_InfoListRsp::InitAsDefaultInstance() {
}

Faction_InfoListRsp::Faction_InfoListRsp(const Faction_InfoListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_InfoListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_InfoListRsp::~Faction_InfoListRsp() {
  SharedDtor();
}

void Faction_InfoListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_InfoListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_InfoListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_InfoListRsp_descriptor_;
}

const Faction_InfoListRsp& Faction_InfoListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_InfoListRsp* Faction_InfoListRsp::default_instance_ = NULL;

Faction_InfoListRsp* Faction_InfoListRsp::New() const {
  return new Faction_InfoListRsp;
}

void Faction_InfoListRsp::Clear() {
  info_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_InfoListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionListProto info_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_InfoListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionListProto info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_InfoListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionListProto info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_InfoListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionListProto info_lst = 1;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_InfoListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_InfoListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_InfoListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_InfoListRsp::MergeFrom(const Faction_InfoListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_InfoListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_InfoListRsp::CopyFrom(const Faction_InfoListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_InfoListRsp::IsInitialized() const {

  return true;
}

void Faction_InfoListRsp::Swap(Faction_InfoListRsp* other) {
  if (other != this) {
    info_lst_.Swap(&other->info_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_InfoListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_InfoListRsp_descriptor_;
  metadata.reflection = Faction_InfoListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SimpleReq::kFactionIdFieldNumber;
#endif  // !_MSC_VER

Faction_SimpleReq::Faction_SimpleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SimpleReq::InitAsDefaultInstance() {
}

Faction_SimpleReq::Faction_SimpleReq(const Faction_SimpleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SimpleReq::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SimpleReq::~Faction_SimpleReq() {
  SharedDtor();
}

void Faction_SimpleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_SimpleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SimpleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SimpleReq_descriptor_;
}

const Faction_SimpleReq& Faction_SimpleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SimpleReq* Faction_SimpleReq::default_instance_ = NULL;

Faction_SimpleReq* Faction_SimpleReq::New() const {
  return new Faction_SimpleReq;
}

void Faction_SimpleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SimpleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SimpleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SimpleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SimpleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SimpleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SimpleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SimpleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SimpleReq::MergeFrom(const Faction_SimpleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SimpleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SimpleReq::CopyFrom(const Faction_SimpleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SimpleReq::IsInitialized() const {

  return true;
}

void Faction_SimpleReq::Swap(Faction_SimpleReq* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SimpleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SimpleReq_descriptor_;
  metadata.reflection = Faction_SimpleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SimpleRsp::kRetFieldNumber;
const int Faction_SimpleRsp::kSimpleFieldNumber;
#endif  // !_MSC_VER

Faction_SimpleRsp::Faction_SimpleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SimpleRsp::InitAsDefaultInstance() {
  simple_ = const_cast< ::proto_ff::FactionSimpleProto*>(&::proto_ff::FactionSimpleProto::default_instance());
}

Faction_SimpleRsp::Faction_SimpleRsp(const Faction_SimpleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SimpleRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  simple_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SimpleRsp::~Faction_SimpleRsp() {
  SharedDtor();
}

void Faction_SimpleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete simple_;
  }
}

void Faction_SimpleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SimpleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SimpleRsp_descriptor_;
}

const Faction_SimpleRsp& Faction_SimpleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SimpleRsp* Faction_SimpleRsp::default_instance_ = NULL;

Faction_SimpleRsp* Faction_SimpleRsp::New() const {
  return new Faction_SimpleRsp;
}

void Faction_SimpleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_simple()) {
      if (simple_ != NULL) simple_->::proto_ff::FactionSimpleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SimpleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple;
        break;
      }

      // optional .proto_ff.FactionSimpleProto simple = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SimpleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionSimpleProto simple = 2;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->simple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SimpleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionSimpleProto simple = 2;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SimpleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionSimpleProto simple = 2;
    if (has_simple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SimpleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SimpleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SimpleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SimpleRsp::MergeFrom(const Faction_SimpleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_simple()) {
      mutable_simple()->::proto_ff::FactionSimpleProto::MergeFrom(from.simple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SimpleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SimpleRsp::CopyFrom(const Faction_SimpleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SimpleRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_SimpleRsp::Swap(Faction_SimpleRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(simple_, other->simple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SimpleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SimpleRsp_descriptor_;
  metadata.reflection = Faction_SimpleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_MemListReq::Faction_MemListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_MemListReq::InitAsDefaultInstance() {
}

Faction_MemListReq::Faction_MemListReq(const Faction_MemListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_MemListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_MemListReq::~Faction_MemListReq() {
  SharedDtor();
}

void Faction_MemListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_MemListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_MemListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_MemListReq_descriptor_;
}

const Faction_MemListReq& Faction_MemListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_MemListReq* Faction_MemListReq::default_instance_ = NULL;

Faction_MemListReq* Faction_MemListReq::New() const {
  return new Faction_MemListReq;
}

void Faction_MemListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_MemListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_MemListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_MemListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_MemListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_MemListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_MemListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_MemListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_MemListReq::MergeFrom(const Faction_MemListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_MemListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_MemListReq::CopyFrom(const Faction_MemListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_MemListReq::IsInitialized() const {

  return true;
}

void Faction_MemListReq::Swap(Faction_MemListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_MemListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_MemListReq_descriptor_;
  metadata.reflection = Faction_MemListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_MemListRsp::kRetFieldNumber;
const int Faction_MemListRsp::kMemLstFieldNumber;
#endif  // !_MSC_VER

Faction_MemListRsp::Faction_MemListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_MemListRsp::InitAsDefaultInstance() {
  mem_lst_ = const_cast< ::proto_ff::FactionMemListProto*>(&::proto_ff::FactionMemListProto::default_instance());
}

Faction_MemListRsp::Faction_MemListRsp(const Faction_MemListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_MemListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  mem_lst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_MemListRsp::~Faction_MemListRsp() {
  SharedDtor();
}

void Faction_MemListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete mem_lst_;
  }
}

void Faction_MemListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_MemListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_MemListRsp_descriptor_;
}

const Faction_MemListRsp& Faction_MemListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_MemListRsp* Faction_MemListRsp::default_instance_ = NULL;

Faction_MemListRsp* Faction_MemListRsp::New() const {
  return new Faction_MemListRsp;
}

void Faction_MemListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_mem_lst()) {
      if (mem_lst_ != NULL) mem_lst_->::proto_ff::FactionMemListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_MemListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mem_lst;
        break;
      }

      // optional .proto_ff.FactionMemListProto mem_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_MemListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionMemListProto mem_lst = 2;
  if (has_mem_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mem_lst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_MemListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionMemListProto mem_lst = 2;
  if (has_mem_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mem_lst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_MemListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionMemListProto mem_lst = 2;
    if (has_mem_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mem_lst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_MemListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_MemListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_MemListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_MemListRsp::MergeFrom(const Faction_MemListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mem_lst()) {
      mutable_mem_lst()->::proto_ff::FactionMemListProto::MergeFrom(from.mem_lst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_MemListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_MemListRsp::CopyFrom(const Faction_MemListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_MemListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_MemListRsp::Swap(Faction_MemListRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mem_lst_, other->mem_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_MemListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_MemListRsp_descriptor_;
  metadata.reflection = Faction_MemListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_CreateReq::kNameFieldNumber;
const int Faction_CreateReq::kNoticeFieldNumber;
#endif  // !_MSC_VER

Faction_CreateReq::Faction_CreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_CreateReq::InitAsDefaultInstance() {
}

Faction_CreateReq::Faction_CreateReq(const Faction_CreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_CreateReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_CreateReq::~Faction_CreateReq() {
  SharedDtor();
}

void Faction_CreateReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void Faction_CreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_CreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_CreateReq_descriptor_;
}

const Faction_CreateReq& Faction_CreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_CreateReq* Faction_CreateReq::default_instance_ = NULL;

Faction_CreateReq* Faction_CreateReq::New() const {
  return new Faction_CreateReq;
}

void Faction_CreateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_CreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notice;
        break;
      }

      // optional bytes notice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_CreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional bytes notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_CreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes notice = 2;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_CreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes notice = 2;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_CreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_CreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_CreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_CreateReq::MergeFrom(const Faction_CreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_CreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_CreateReq::CopyFrom(const Faction_CreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_CreateReq::IsInitialized() const {

  return true;
}

void Faction_CreateReq::Swap(Faction_CreateReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_CreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_CreateReq_descriptor_;
  metadata.reflection = Faction_CreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_CreateRsp::kRetFieldNumber;
const int Faction_CreateRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Faction_CreateRsp::Faction_CreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_CreateRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::FactionProto*>(&::proto_ff::FactionProto::default_instance());
}

Faction_CreateRsp::Faction_CreateRsp(const Faction_CreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_CreateRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_CreateRsp::~Faction_CreateRsp() {
  SharedDtor();
}

void Faction_CreateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Faction_CreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_CreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_CreateRsp_descriptor_;
}

const Faction_CreateRsp& Faction_CreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_CreateRsp* Faction_CreateRsp::default_instance_ = NULL;

Faction_CreateRsp* Faction_CreateRsp::New() const {
  return new Faction_CreateRsp;
}

void Faction_CreateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::FactionProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_CreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.FactionProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_CreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_CreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_CreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_CreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_CreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_CreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_CreateRsp::MergeFrom(const Faction_CreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::FactionProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_CreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_CreateRsp::CopyFrom(const Faction_CreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_CreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void Faction_CreateRsp::Swap(Faction_CreateRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_CreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_CreateRsp_descriptor_;
  metadata.reflection = Faction_CreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_ApplyListReq::Faction_ApplyListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ApplyListReq::InitAsDefaultInstance() {
}

Faction_ApplyListReq::Faction_ApplyListReq(const Faction_ApplyListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ApplyListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ApplyListReq::~Faction_ApplyListReq() {
  SharedDtor();
}

void Faction_ApplyListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_ApplyListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ApplyListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ApplyListReq_descriptor_;
}

const Faction_ApplyListReq& Faction_ApplyListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ApplyListReq* Faction_ApplyListReq::default_instance_ = NULL;

Faction_ApplyListReq* Faction_ApplyListReq::New() const {
  return new Faction_ApplyListReq;
}

void Faction_ApplyListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ApplyListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_ApplyListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ApplyListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ApplyListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ApplyListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ApplyListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ApplyListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ApplyListReq::MergeFrom(const Faction_ApplyListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ApplyListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ApplyListReq::CopyFrom(const Faction_ApplyListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ApplyListReq::IsInitialized() const {

  return true;
}

void Faction_ApplyListReq::Swap(Faction_ApplyListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ApplyListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ApplyListReq_descriptor_;
  metadata.reflection = Faction_ApplyListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ApplyListRsp::kRetFieldNumber;
const int Faction_ApplyListRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Faction_ApplyListRsp::Faction_ApplyListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ApplyListRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::FactionApplyListProto*>(&::proto_ff::FactionApplyListProto::default_instance());
}

Faction_ApplyListRsp::Faction_ApplyListRsp(const Faction_ApplyListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ApplyListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ApplyListRsp::~Faction_ApplyListRsp() {
  SharedDtor();
}

void Faction_ApplyListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Faction_ApplyListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ApplyListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ApplyListRsp_descriptor_;
}

const Faction_ApplyListRsp& Faction_ApplyListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ApplyListRsp* Faction_ApplyListRsp::default_instance_ = NULL;

Faction_ApplyListRsp* Faction_ApplyListRsp::New() const {
  return new Faction_ApplyListRsp;
}

void Faction_ApplyListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::FactionApplyListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ApplyListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.FactionApplyListProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ApplyListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionApplyListProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ApplyListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionApplyListProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ApplyListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionApplyListProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ApplyListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ApplyListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ApplyListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ApplyListRsp::MergeFrom(const Faction_ApplyListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::FactionApplyListProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ApplyListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ApplyListRsp::CopyFrom(const Faction_ApplyListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ApplyListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_ApplyListRsp::Swap(Faction_ApplyListRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ApplyListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ApplyListRsp_descriptor_;
  metadata.reflection = Faction_ApplyListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ApplyJoinReq::kFactionIdFieldNumber;
#endif  // !_MSC_VER

Faction_ApplyJoinReq::Faction_ApplyJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ApplyJoinReq::InitAsDefaultInstance() {
}

Faction_ApplyJoinReq::Faction_ApplyJoinReq(const Faction_ApplyJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ApplyJoinReq::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ApplyJoinReq::~Faction_ApplyJoinReq() {
  SharedDtor();
}

void Faction_ApplyJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_ApplyJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ApplyJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ApplyJoinReq_descriptor_;
}

const Faction_ApplyJoinReq& Faction_ApplyJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ApplyJoinReq* Faction_ApplyJoinReq::default_instance_ = NULL;

Faction_ApplyJoinReq* Faction_ApplyJoinReq::New() const {
  return new Faction_ApplyJoinReq;
}

void Faction_ApplyJoinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ApplyJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ApplyJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ApplyJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ApplyJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ApplyJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ApplyJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ApplyJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ApplyJoinReq::MergeFrom(const Faction_ApplyJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ApplyJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ApplyJoinReq::CopyFrom(const Faction_ApplyJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ApplyJoinReq::IsInitialized() const {

  return true;
}

void Faction_ApplyJoinReq::Swap(Faction_ApplyJoinReq* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ApplyJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ApplyJoinReq_descriptor_;
  metadata.reflection = Faction_ApplyJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ApplyJoinRsp::kRetFieldNumber;
const int Faction_ApplyJoinRsp::kFactionIdFieldNumber;
#endif  // !_MSC_VER

Faction_ApplyJoinRsp::Faction_ApplyJoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ApplyJoinRsp::InitAsDefaultInstance() {
}

Faction_ApplyJoinRsp::Faction_ApplyJoinRsp(const Faction_ApplyJoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ApplyJoinRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ApplyJoinRsp::~Faction_ApplyJoinRsp() {
  SharedDtor();
}

void Faction_ApplyJoinRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_ApplyJoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ApplyJoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ApplyJoinRsp_descriptor_;
}

const Faction_ApplyJoinRsp& Faction_ApplyJoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ApplyJoinRsp* Faction_ApplyJoinRsp::default_instance_ = NULL;

Faction_ApplyJoinRsp* Faction_ApplyJoinRsp::New() const {
  return new Faction_ApplyJoinRsp;
}

void Faction_ApplyJoinRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    faction_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ApplyJoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faction_id;
        break;
      }

      // optional uint32 faction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ApplyJoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ApplyJoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ApplyJoinRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint32 faction_id = 2;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ApplyJoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ApplyJoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ApplyJoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ApplyJoinRsp::MergeFrom(const Faction_ApplyJoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ApplyJoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ApplyJoinRsp::CopyFrom(const Faction_ApplyJoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ApplyJoinRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_ApplyJoinRsp::Swap(Faction_ApplyJoinRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ApplyJoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ApplyJoinRsp_descriptor_;
  metadata.reflection = Faction_ApplyJoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ApplyOperateReq::kOpFieldNumber;
const int Faction_ApplyOperateReq::kCidFieldNumber;
#endif  // !_MSC_VER

Faction_ApplyOperateReq::Faction_ApplyOperateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ApplyOperateReq::InitAsDefaultInstance() {
}

Faction_ApplyOperateReq::Faction_ApplyOperateReq(const Faction_ApplyOperateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ApplyOperateReq::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ApplyOperateReq::~Faction_ApplyOperateReq() {
  SharedDtor();
}

void Faction_ApplyOperateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_ApplyOperateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ApplyOperateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ApplyOperateReq_descriptor_;
}

const Faction_ApplyOperateReq& Faction_ApplyOperateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ApplyOperateReq* Faction_ApplyOperateReq::default_instance_ = NULL;

Faction_ApplyOperateReq* Faction_ApplyOperateReq::New() const {
  return new Faction_ApplyOperateReq;
}

void Faction_ApplyOperateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ApplyOperateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ApplyOperateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ApplyOperateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ApplyOperateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ApplyOperateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ApplyOperateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ApplyOperateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ApplyOperateReq::MergeFrom(const Faction_ApplyOperateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ApplyOperateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ApplyOperateReq::CopyFrom(const Faction_ApplyOperateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ApplyOperateReq::IsInitialized() const {

  return true;
}

void Faction_ApplyOperateReq::Swap(Faction_ApplyOperateReq* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ApplyOperateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ApplyOperateReq_descriptor_;
  metadata.reflection = Faction_ApplyOperateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ApplyOperateRsp::kRetFieldNumber;
const int Faction_ApplyOperateRsp::kOpFieldNumber;
const int Faction_ApplyOperateRsp::kCidFieldNumber;
const int Faction_ApplyOperateRsp::kMemLstFieldNumber;
#endif  // !_MSC_VER

Faction_ApplyOperateRsp::Faction_ApplyOperateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ApplyOperateRsp::InitAsDefaultInstance() {
  mem_lst_ = const_cast< ::proto_ff::FactionMemListProto*>(&::proto_ff::FactionMemListProto::default_instance());
}

Faction_ApplyOperateRsp::Faction_ApplyOperateRsp(const Faction_ApplyOperateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ApplyOperateRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  op_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  mem_lst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ApplyOperateRsp::~Faction_ApplyOperateRsp() {
  SharedDtor();
}

void Faction_ApplyOperateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete mem_lst_;
  }
}

void Faction_ApplyOperateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ApplyOperateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ApplyOperateRsp_descriptor_;
}

const Faction_ApplyOperateRsp& Faction_ApplyOperateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ApplyOperateRsp* Faction_ApplyOperateRsp::default_instance_ = NULL;

Faction_ApplyOperateRsp* Faction_ApplyOperateRsp::New() const {
  return new Faction_ApplyOperateRsp;
}

void Faction_ApplyOperateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    op_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_mem_lst()) {
      if (mem_lst_ != NULL) mem_lst_->::proto_ff::FactionMemListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ApplyOperateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op;
        break;
      }

      // optional int32 op = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mem_lst;
        break;
      }

      // optional .proto_ff.FactionMemListProto mem_lst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ApplyOperateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 op = 2;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->op(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  // optional .proto_ff.FactionMemListProto mem_lst = 4;
  if (has_mem_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mem_lst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ApplyOperateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 op = 2;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->op(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  // optional .proto_ff.FactionMemListProto mem_lst = 4;
  if (has_mem_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mem_lst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ApplyOperateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 op = 2;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.FactionMemListProto mem_lst = 4;
    if (has_mem_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mem_lst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ApplyOperateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ApplyOperateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ApplyOperateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ApplyOperateRsp::MergeFrom(const Faction_ApplyOperateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_mem_lst()) {
      mutable_mem_lst()->::proto_ff::FactionMemListProto::MergeFrom(from.mem_lst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ApplyOperateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ApplyOperateRsp::CopyFrom(const Faction_ApplyOperateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ApplyOperateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_ApplyOperateRsp::Swap(Faction_ApplyOperateRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(op_, other->op_);
    std::swap(cid_, other->cid_);
    std::swap(mem_lst_, other->mem_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ApplyOperateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ApplyOperateRsp_descriptor_;
  metadata.reflection = Faction_ApplyOperateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_KickReq::kCidLstFieldNumber;
#endif  // !_MSC_VER

Faction_KickReq::Faction_KickReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_KickReq::InitAsDefaultInstance() {
}

Faction_KickReq::Faction_KickReq(const Faction_KickReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_KickReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_KickReq::~Faction_KickReq() {
  SharedDtor();
}

void Faction_KickReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_KickReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_KickReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_KickReq_descriptor_;
}

const Faction_KickReq& Faction_KickReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_KickReq* Faction_KickReq::default_instance_ = NULL;

Faction_KickReq* Faction_KickReq::New() const {
  return new Faction_KickReq;
}

void Faction_KickReq::Clear() {
  cid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_KickReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 cid_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_cid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cid_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_KickReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 cid_lst = 1;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->cid_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_KickReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 cid_lst = 1;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->cid_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_KickReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 cid_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_lst(i));
    }
    total_size += 1 * this->cid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_KickReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_KickReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_KickReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_KickReq::MergeFrom(const Faction_KickReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_lst_.MergeFrom(from.cid_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_KickReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_KickReq::CopyFrom(const Faction_KickReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_KickReq::IsInitialized() const {

  return true;
}

void Faction_KickReq::Swap(Faction_KickReq* other) {
  if (other != this) {
    cid_lst_.Swap(&other->cid_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_KickReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_KickReq_descriptor_;
  metadata.reflection = Faction_KickReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_KickRsp::kRetFieldNumber;
const int Faction_KickRsp::kCidLstFieldNumber;
#endif  // !_MSC_VER

Faction_KickRsp::Faction_KickRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_KickRsp::InitAsDefaultInstance() {
}

Faction_KickRsp::Faction_KickRsp(const Faction_KickRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_KickRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_KickRsp::~Faction_KickRsp() {
  SharedDtor();
}

void Faction_KickRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_KickRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_KickRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_KickRsp_descriptor_;
}

const Faction_KickRsp& Faction_KickRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_KickRsp* Faction_KickRsp::default_instance_ = NULL;

Faction_KickRsp* Faction_KickRsp::New() const {
  return new Faction_KickRsp;
}

void Faction_KickRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  cid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_KickRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid_lst;
        break;
      }

      // repeated uint64 cid_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_cid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_KickRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated uint64 cid_lst = 2;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->cid_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_KickRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated uint64 cid_lst = 2;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->cid_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_KickRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated uint64 cid_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_lst(i));
    }
    total_size += 1 * this->cid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_KickRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_KickRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_KickRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_KickRsp::MergeFrom(const Faction_KickRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_lst_.MergeFrom(from.cid_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_KickRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_KickRsp::CopyFrom(const Faction_KickRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_KickRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_KickRsp::Swap(Faction_KickRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    cid_lst_.Swap(&other->cid_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_KickRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_KickRsp_descriptor_;
  metadata.reflection = Faction_KickRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_QuitReq::Faction_QuitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_QuitReq::InitAsDefaultInstance() {
}

Faction_QuitReq::Faction_QuitReq(const Faction_QuitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_QuitReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_QuitReq::~Faction_QuitReq() {
  SharedDtor();
}

void Faction_QuitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_QuitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_QuitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_QuitReq_descriptor_;
}

const Faction_QuitReq& Faction_QuitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_QuitReq* Faction_QuitReq::default_instance_ = NULL;

Faction_QuitReq* Faction_QuitReq::New() const {
  return new Faction_QuitReq;
}

void Faction_QuitReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_QuitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_QuitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_QuitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_QuitReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_QuitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_QuitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_QuitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_QuitReq::MergeFrom(const Faction_QuitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_QuitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_QuitReq::CopyFrom(const Faction_QuitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_QuitReq::IsInitialized() const {

  return true;
}

void Faction_QuitReq::Swap(Faction_QuitReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_QuitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_QuitReq_descriptor_;
  metadata.reflection = Faction_QuitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_QuitRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Faction_QuitRsp::Faction_QuitRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_QuitRsp::InitAsDefaultInstance() {
}

Faction_QuitRsp::Faction_QuitRsp(const Faction_QuitRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_QuitRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_QuitRsp::~Faction_QuitRsp() {
  SharedDtor();
}

void Faction_QuitRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_QuitRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_QuitRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_QuitRsp_descriptor_;
}

const Faction_QuitRsp& Faction_QuitRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_QuitRsp* Faction_QuitRsp::default_instance_ = NULL;

Faction_QuitRsp* Faction_QuitRsp::New() const {
  return new Faction_QuitRsp;
}

void Faction_QuitRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_QuitRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_QuitRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_QuitRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_QuitRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_QuitRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_QuitRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_QuitRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_QuitRsp::MergeFrom(const Faction_QuitRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_QuitRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_QuitRsp::CopyFrom(const Faction_QuitRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_QuitRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_QuitRsp::Swap(Faction_QuitRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_QuitRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_QuitRsp_descriptor_;
  metadata.reflection = Faction_QuitRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_AppointReq::kCidFieldNumber;
const int Faction_AppointReq::kDutyFieldNumber;
#endif  // !_MSC_VER

Faction_AppointReq::Faction_AppointReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_AppointReq::InitAsDefaultInstance() {
}

Faction_AppointReq::Faction_AppointReq(const Faction_AppointReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_AppointReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  duty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_AppointReq::~Faction_AppointReq() {
  SharedDtor();
}

void Faction_AppointReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_AppointReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_AppointReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_AppointReq_descriptor_;
}

const Faction_AppointReq& Faction_AppointReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_AppointReq* Faction_AppointReq::default_instance_ = NULL;

Faction_AppointReq* Faction_AppointReq::New() const {
  return new Faction_AppointReq;
}

void Faction_AppointReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    duty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_AppointReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duty;
        break;
      }

      // optional int32 duty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_AppointReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 duty = 2;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_AppointReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 duty = 2;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_AppointReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 duty = 2;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_AppointReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_AppointReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_AppointReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_AppointReq::MergeFrom(const Faction_AppointReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_AppointReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_AppointReq::CopyFrom(const Faction_AppointReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_AppointReq::IsInitialized() const {

  return true;
}

void Faction_AppointReq::Swap(Faction_AppointReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(duty_, other->duty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_AppointReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_AppointReq_descriptor_;
  metadata.reflection = Faction_AppointReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_AppointRsp::kRetFieldNumber;
const int Faction_AppointRsp::kCidFieldNumber;
const int Faction_AppointRsp::kDutyFieldNumber;
const int Faction_AppointRsp::kSelfDutyFieldNumber;
#endif  // !_MSC_VER

Faction_AppointRsp::Faction_AppointRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_AppointRsp::InitAsDefaultInstance() {
}

Faction_AppointRsp::Faction_AppointRsp(const Faction_AppointRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_AppointRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  duty_ = 0;
  self_duty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_AppointRsp::~Faction_AppointRsp() {
  SharedDtor();
}

void Faction_AppointRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_AppointRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_AppointRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_AppointRsp_descriptor_;
}

const Faction_AppointRsp& Faction_AppointRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_AppointRsp* Faction_AppointRsp::default_instance_ = NULL;

Faction_AppointRsp* Faction_AppointRsp::New() const {
  return new Faction_AppointRsp;
}

void Faction_AppointRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    duty_ = 0;
    self_duty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_AppointRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duty;
        break;
      }

      // optional int32 duty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_self_duty;
        break;
      }

      // optional int32 self_duty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_duty_)));
          set_has_self_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_AppointRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional int32 duty = 3;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duty(), output);
  }

  // optional int32 self_duty = 4;
  if (has_self_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->self_duty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_AppointRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional int32 duty = 3;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duty(), target);
  }

  // optional int32 self_duty = 4;
  if (has_self_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->self_duty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_AppointRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 duty = 3;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

    // optional int32 self_duty = 4;
    if (has_self_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->self_duty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_AppointRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_AppointRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_AppointRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_AppointRsp::MergeFrom(const Faction_AppointRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
    if (from.has_self_duty()) {
      set_self_duty(from.self_duty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_AppointRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_AppointRsp::CopyFrom(const Faction_AppointRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_AppointRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_AppointRsp::Swap(Faction_AppointRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cid_, other->cid_);
    std::swap(duty_, other->duty_);
    std::swap(self_duty_, other->self_duty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_AppointRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_AppointRsp_descriptor_;
  metadata.reflection = Faction_AppointRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ChgNoticeReq::kNoticeFieldNumber;
#endif  // !_MSC_VER

Faction_ChgNoticeReq::Faction_ChgNoticeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ChgNoticeReq::InitAsDefaultInstance() {
}

Faction_ChgNoticeReq::Faction_ChgNoticeReq(const Faction_ChgNoticeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ChgNoticeReq::SharedCtor() {
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ChgNoticeReq::~Faction_ChgNoticeReq() {
  SharedDtor();
}

void Faction_ChgNoticeReq::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void Faction_ChgNoticeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ChgNoticeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ChgNoticeReq_descriptor_;
}

const Faction_ChgNoticeReq& Faction_ChgNoticeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ChgNoticeReq* Faction_ChgNoticeReq::default_instance_ = NULL;

Faction_ChgNoticeReq* Faction_ChgNoticeReq::New() const {
  return new Faction_ChgNoticeReq;
}

void Faction_ChgNoticeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ChgNoticeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ChgNoticeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ChgNoticeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes notice = 1;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ChgNoticeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ChgNoticeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ChgNoticeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ChgNoticeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ChgNoticeReq::MergeFrom(const Faction_ChgNoticeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ChgNoticeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ChgNoticeReq::CopyFrom(const Faction_ChgNoticeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ChgNoticeReq::IsInitialized() const {

  return true;
}

void Faction_ChgNoticeReq::Swap(Faction_ChgNoticeReq* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ChgNoticeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ChgNoticeReq_descriptor_;
  metadata.reflection = Faction_ChgNoticeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ChgNoticeRsp::kRetFieldNumber;
const int Faction_ChgNoticeRsp::kNoticeFieldNumber;
#endif  // !_MSC_VER

Faction_ChgNoticeRsp::Faction_ChgNoticeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ChgNoticeRsp::InitAsDefaultInstance() {
}

Faction_ChgNoticeRsp::Faction_ChgNoticeRsp(const Faction_ChgNoticeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ChgNoticeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ChgNoticeRsp::~Faction_ChgNoticeRsp() {
  SharedDtor();
}

void Faction_ChgNoticeRsp::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void Faction_ChgNoticeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ChgNoticeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ChgNoticeRsp_descriptor_;
}

const Faction_ChgNoticeRsp& Faction_ChgNoticeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ChgNoticeRsp* Faction_ChgNoticeRsp::default_instance_ = NULL;

Faction_ChgNoticeRsp* Faction_ChgNoticeRsp::New() const {
  return new Faction_ChgNoticeRsp;
}

void Faction_ChgNoticeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ChgNoticeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notice;
        break;
      }

      // optional bytes notice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ChgNoticeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional bytes notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ChgNoticeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional bytes notice = 2;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ChgNoticeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional bytes notice = 2;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ChgNoticeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ChgNoticeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ChgNoticeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ChgNoticeRsp::MergeFrom(const Faction_ChgNoticeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ChgNoticeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ChgNoticeRsp::CopyFrom(const Faction_ChgNoticeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ChgNoticeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_ChgNoticeRsp::Swap(Faction_ChgNoticeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ChgNoticeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ChgNoticeRsp_descriptor_;
  metadata.reflection = Faction_ChgNoticeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SetApplyReq::kTypeFieldNumber;
const int Faction_SetApplyReq::kLevelFieldNumber;
const int Faction_SetApplyReq::kFightFieldNumber;
#endif  // !_MSC_VER

Faction_SetApplyReq::Faction_SetApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SetApplyReq::InitAsDefaultInstance() {
}

Faction_SetApplyReq::Faction_SetApplyReq(const Faction_SetApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SetApplyReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SetApplyReq::~Faction_SetApplyReq() {
  SharedDtor();
}

void Faction_SetApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_SetApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SetApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SetApplyReq_descriptor_;
}

const Faction_SetApplyReq& Faction_SetApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SetApplyReq* Faction_SetApplyReq::default_instance_ = NULL;

Faction_SetApplyReq* Faction_SetApplyReq::New() const {
  return new Faction_SetApplyReq;
}

void Faction_SetApplyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SetApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SetApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional uint64 fight = 3;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SetApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional uint64 fight = 3;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SetApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 fight = 3;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SetApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SetApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SetApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SetApplyReq::MergeFrom(const Faction_SetApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SetApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SetApplyReq::CopyFrom(const Faction_SetApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SetApplyReq::IsInitialized() const {

  return true;
}

void Faction_SetApplyReq::Swap(Faction_SetApplyReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SetApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SetApplyReq_descriptor_;
  metadata.reflection = Faction_SetApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SetApplyRsp::kRetFieldNumber;
const int Faction_SetApplyRsp::kTypeFieldNumber;
const int Faction_SetApplyRsp::kLevelFieldNumber;
const int Faction_SetApplyRsp::kFightFieldNumber;
#endif  // !_MSC_VER

Faction_SetApplyRsp::Faction_SetApplyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SetApplyRsp::InitAsDefaultInstance() {
}

Faction_SetApplyRsp::Faction_SetApplyRsp(const Faction_SetApplyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SetApplyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  level_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SetApplyRsp::~Faction_SetApplyRsp() {
  SharedDtor();
}

void Faction_SetApplyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_SetApplyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SetApplyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SetApplyRsp_descriptor_;
}

const Faction_SetApplyRsp& Faction_SetApplyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SetApplyRsp* Faction_SetApplyRsp::default_instance_ = NULL;

Faction_SetApplyRsp* Faction_SetApplyRsp::New() const {
  return new Faction_SetApplyRsp;
}

void Faction_SetApplyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
    level_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SetApplyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SetApplyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SetApplyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SetApplyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SetApplyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SetApplyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SetApplyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SetApplyRsp::MergeFrom(const Faction_SetApplyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SetApplyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SetApplyRsp::CopyFrom(const Faction_SetApplyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SetApplyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_SetApplyRsp::Swap(Faction_SetApplyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SetApplyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SetApplyRsp_descriptor_;
  metadata.reflection = Faction_SetApplyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_OneKeyApplyReq::Faction_OneKeyApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_OneKeyApplyReq::InitAsDefaultInstance() {
}

Faction_OneKeyApplyReq::Faction_OneKeyApplyReq(const Faction_OneKeyApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_OneKeyApplyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_OneKeyApplyReq::~Faction_OneKeyApplyReq() {
  SharedDtor();
}

void Faction_OneKeyApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_OneKeyApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_OneKeyApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_OneKeyApplyReq_descriptor_;
}

const Faction_OneKeyApplyReq& Faction_OneKeyApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_OneKeyApplyReq* Faction_OneKeyApplyReq::default_instance_ = NULL;

Faction_OneKeyApplyReq* Faction_OneKeyApplyReq::New() const {
  return new Faction_OneKeyApplyReq;
}

void Faction_OneKeyApplyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_OneKeyApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_OneKeyApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_OneKeyApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_OneKeyApplyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_OneKeyApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_OneKeyApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_OneKeyApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_OneKeyApplyReq::MergeFrom(const Faction_OneKeyApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_OneKeyApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_OneKeyApplyReq::CopyFrom(const Faction_OneKeyApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_OneKeyApplyReq::IsInitialized() const {

  return true;
}

void Faction_OneKeyApplyReq::Swap(Faction_OneKeyApplyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_OneKeyApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_OneKeyApplyReq_descriptor_;
  metadata.reflection = Faction_OneKeyApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_OneKeyApplyRsp::kRetFieldNumber;
const int Faction_OneKeyApplyRsp::kIdLstFieldNumber;
#endif  // !_MSC_VER

Faction_OneKeyApplyRsp::Faction_OneKeyApplyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_OneKeyApplyRsp::InitAsDefaultInstance() {
}

Faction_OneKeyApplyRsp::Faction_OneKeyApplyRsp(const Faction_OneKeyApplyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_OneKeyApplyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_OneKeyApplyRsp::~Faction_OneKeyApplyRsp() {
  SharedDtor();
}

void Faction_OneKeyApplyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_OneKeyApplyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_OneKeyApplyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_OneKeyApplyRsp_descriptor_;
}

const Faction_OneKeyApplyRsp& Faction_OneKeyApplyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_OneKeyApplyRsp* Faction_OneKeyApplyRsp::default_instance_ = NULL;

Faction_OneKeyApplyRsp* Faction_OneKeyApplyRsp::New() const {
  return new Faction_OneKeyApplyRsp;
}

void Faction_OneKeyApplyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  id_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_OneKeyApplyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_lst;
        break;
      }

      // repeated uint32 id_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_id_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_OneKeyApplyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated uint32 id_lst = 2;
  for (int i = 0; i < this->id_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->id_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_OneKeyApplyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated uint32 id_lst = 2;
  for (int i = 0; i < this->id_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->id_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_OneKeyApplyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated uint32 id_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id_lst(i));
    }
    total_size += 1 * this->id_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_OneKeyApplyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_OneKeyApplyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_OneKeyApplyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_OneKeyApplyRsp::MergeFrom(const Faction_OneKeyApplyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lst_.MergeFrom(from.id_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_OneKeyApplyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_OneKeyApplyRsp::CopyFrom(const Faction_OneKeyApplyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_OneKeyApplyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_OneKeyApplyRsp::Swap(Faction_OneKeyApplyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    id_lst_.Swap(&other->id_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_OneKeyApplyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_OneKeyApplyRsp_descriptor_;
  metadata.reflection = Faction_OneKeyApplyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ChgNameReq::kNameFieldNumber;
#endif  // !_MSC_VER

Faction_ChgNameReq::Faction_ChgNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ChgNameReq::InitAsDefaultInstance() {
}

Faction_ChgNameReq::Faction_ChgNameReq(const Faction_ChgNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ChgNameReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ChgNameReq::~Faction_ChgNameReq() {
  SharedDtor();
}

void Faction_ChgNameReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Faction_ChgNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ChgNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ChgNameReq_descriptor_;
}

const Faction_ChgNameReq& Faction_ChgNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ChgNameReq* Faction_ChgNameReq::default_instance_ = NULL;

Faction_ChgNameReq* Faction_ChgNameReq::New() const {
  return new Faction_ChgNameReq;
}

void Faction_ChgNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ChgNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ChgNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ChgNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ChgNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ChgNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ChgNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ChgNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ChgNameReq::MergeFrom(const Faction_ChgNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ChgNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ChgNameReq::CopyFrom(const Faction_ChgNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ChgNameReq::IsInitialized() const {

  return true;
}

void Faction_ChgNameReq::Swap(Faction_ChgNameReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ChgNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ChgNameReq_descriptor_;
  metadata.reflection = Faction_ChgNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ChgNameRsp::kRetFieldNumber;
const int Faction_ChgNameRsp::kNameFieldNumber;
#endif  // !_MSC_VER

Faction_ChgNameRsp::Faction_ChgNameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ChgNameRsp::InitAsDefaultInstance() {
}

Faction_ChgNameRsp::Faction_ChgNameRsp(const Faction_ChgNameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ChgNameRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ChgNameRsp::~Faction_ChgNameRsp() {
  SharedDtor();
}

void Faction_ChgNameRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Faction_ChgNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ChgNameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ChgNameRsp_descriptor_;
}

const Faction_ChgNameRsp& Faction_ChgNameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ChgNameRsp* Faction_ChgNameRsp::default_instance_ = NULL;

Faction_ChgNameRsp* Faction_ChgNameRsp::New() const {
  return new Faction_ChgNameRsp;
}

void Faction_ChgNameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ChgNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ChgNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ChgNameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ChgNameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ChgNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ChgNameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ChgNameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ChgNameRsp::MergeFrom(const Faction_ChgNameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ChgNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ChgNameRsp::CopyFrom(const Faction_ChgNameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ChgNameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_ChgNameRsp::Swap(Faction_ChgNameRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ChgNameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ChgNameRsp_descriptor_;
  metadata.reflection = Faction_ChgNameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_NewApplyNotify::Faction_NewApplyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_NewApplyNotify::InitAsDefaultInstance() {
}

Faction_NewApplyNotify::Faction_NewApplyNotify(const Faction_NewApplyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_NewApplyNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_NewApplyNotify::~Faction_NewApplyNotify() {
  SharedDtor();
}

void Faction_NewApplyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_NewApplyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_NewApplyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_NewApplyNotify_descriptor_;
}

const Faction_NewApplyNotify& Faction_NewApplyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_NewApplyNotify* Faction_NewApplyNotify::default_instance_ = NULL;

Faction_NewApplyNotify* Faction_NewApplyNotify::New() const {
  return new Faction_NewApplyNotify;
}

void Faction_NewApplyNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_NewApplyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_NewApplyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_NewApplyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_NewApplyNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_NewApplyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_NewApplyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_NewApplyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_NewApplyNotify::MergeFrom(const Faction_NewApplyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_NewApplyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_NewApplyNotify::CopyFrom(const Faction_NewApplyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_NewApplyNotify::IsInitialized() const {

  return true;
}

void Faction_NewApplyNotify::Swap(Faction_NewApplyNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_NewApplyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_NewApplyNotify_descriptor_;
  metadata.reflection = Faction_NewApplyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_InviteJoinReq::kCidFieldNumber;
#endif  // !_MSC_VER

Faction_InviteJoinReq::Faction_InviteJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_InviteJoinReq::InitAsDefaultInstance() {
}

Faction_InviteJoinReq::Faction_InviteJoinReq(const Faction_InviteJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_InviteJoinReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_InviteJoinReq::~Faction_InviteJoinReq() {
  SharedDtor();
}

void Faction_InviteJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_InviteJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_InviteJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_InviteJoinReq_descriptor_;
}

const Faction_InviteJoinReq& Faction_InviteJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_InviteJoinReq* Faction_InviteJoinReq::default_instance_ = NULL;

Faction_InviteJoinReq* Faction_InviteJoinReq::New() const {
  return new Faction_InviteJoinReq;
}

void Faction_InviteJoinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_InviteJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_InviteJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_InviteJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_InviteJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_InviteJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_InviteJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_InviteJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_InviteJoinReq::MergeFrom(const Faction_InviteJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_InviteJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_InviteJoinReq::CopyFrom(const Faction_InviteJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_InviteJoinReq::IsInitialized() const {

  return true;
}

void Faction_InviteJoinReq::Swap(Faction_InviteJoinReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_InviteJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_InviteJoinReq_descriptor_;
  metadata.reflection = Faction_InviteJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_InviteJoinRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Faction_InviteJoinRsp::Faction_InviteJoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_InviteJoinRsp::InitAsDefaultInstance() {
}

Faction_InviteJoinRsp::Faction_InviteJoinRsp(const Faction_InviteJoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_InviteJoinRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_InviteJoinRsp::~Faction_InviteJoinRsp() {
  SharedDtor();
}

void Faction_InviteJoinRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_InviteJoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_InviteJoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_InviteJoinRsp_descriptor_;
}

const Faction_InviteJoinRsp& Faction_InviteJoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_InviteJoinRsp* Faction_InviteJoinRsp::default_instance_ = NULL;

Faction_InviteJoinRsp* Faction_InviteJoinRsp::New() const {
  return new Faction_InviteJoinRsp;
}

void Faction_InviteJoinRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_InviteJoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_InviteJoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_InviteJoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_InviteJoinRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_InviteJoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_InviteJoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_InviteJoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_InviteJoinRsp::MergeFrom(const Faction_InviteJoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_InviteJoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_InviteJoinRsp::CopyFrom(const Faction_InviteJoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_InviteJoinRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_InviteJoinRsp::Swap(Faction_InviteJoinRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_InviteJoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_InviteJoinRsp_descriptor_;
  metadata.reflection = Faction_InviteJoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_IviteJoinNotify::kCidFieldNumber;
const int Faction_IviteJoinNotify::kNameFieldNumber;
const int Faction_IviteJoinNotify::kFactionIdFieldNumber;
const int Faction_IviteJoinNotify::kFactionNameFieldNumber;
#endif  // !_MSC_VER

Faction_IviteJoinNotify::Faction_IviteJoinNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_IviteJoinNotify::InitAsDefaultInstance() {
}

Faction_IviteJoinNotify::Faction_IviteJoinNotify(const Faction_IviteJoinNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_IviteJoinNotify::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  faction_id_ = 0u;
  faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_IviteJoinNotify::~Faction_IviteJoinNotify() {
  SharedDtor();
}

void Faction_IviteJoinNotify::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete faction_name_;
  }
  if (this != default_instance_) {
  }
}

void Faction_IviteJoinNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_IviteJoinNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_IviteJoinNotify_descriptor_;
}

const Faction_IviteJoinNotify& Faction_IviteJoinNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_IviteJoinNotify* Faction_IviteJoinNotify::default_instance_ = NULL;

Faction_IviteJoinNotify* Faction_IviteJoinNotify::New() const {
  return new Faction_IviteJoinNotify;
}

void Faction_IviteJoinNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    faction_id_ = 0u;
    if (has_faction_name()) {
      if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
        faction_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_IviteJoinNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_faction_id;
        break;
      }

      // required uint32 faction_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_faction_name;
        break;
      }

      // required bytes faction_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faction_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_faction_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_IviteJoinNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required uint32 faction_id = 3;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->faction_id(), output);
  }

  // required bytes faction_name = 4;
  if (has_faction_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->faction_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_IviteJoinNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required uint32 faction_id = 3;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->faction_id(), target);
  }

  // required bytes faction_name = 4;
  if (has_faction_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->faction_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_IviteJoinNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 faction_id = 3;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // required bytes faction_name = 4;
    if (has_faction_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->faction_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_IviteJoinNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_IviteJoinNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_IviteJoinNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_IviteJoinNotify::MergeFrom(const Faction_IviteJoinNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_faction_name()) {
      set_faction_name(from.faction_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_IviteJoinNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_IviteJoinNotify::CopyFrom(const Faction_IviteJoinNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_IviteJoinNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Faction_IviteJoinNotify::Swap(Faction_IviteJoinNotify* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(faction_name_, other->faction_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_IviteJoinNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_IviteJoinNotify_descriptor_;
  metadata.reflection = Faction_IviteJoinNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_RecordListReq::Faction_RecordListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_RecordListReq::InitAsDefaultInstance() {
}

Faction_RecordListReq::Faction_RecordListReq(const Faction_RecordListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_RecordListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_RecordListReq::~Faction_RecordListReq() {
  SharedDtor();
}

void Faction_RecordListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_RecordListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_RecordListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_RecordListReq_descriptor_;
}

const Faction_RecordListReq& Faction_RecordListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_RecordListReq* Faction_RecordListReq::default_instance_ = NULL;

Faction_RecordListReq* Faction_RecordListReq::New() const {
  return new Faction_RecordListReq;
}

void Faction_RecordListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_RecordListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_RecordListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_RecordListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_RecordListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_RecordListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_RecordListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_RecordListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_RecordListReq::MergeFrom(const Faction_RecordListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_RecordListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_RecordListReq::CopyFrom(const Faction_RecordListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_RecordListReq::IsInitialized() const {

  return true;
}

void Faction_RecordListReq::Swap(Faction_RecordListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_RecordListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_RecordListReq_descriptor_;
  metadata.reflection = Faction_RecordListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_RecordListRsp::kRetFieldNumber;
const int Faction_RecordListRsp::kLstFieldNumber;
#endif  // !_MSC_VER

Faction_RecordListRsp::Faction_RecordListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_RecordListRsp::InitAsDefaultInstance() {
  lst_ = const_cast< ::proto_ff::FactionRecordListProto*>(&::proto_ff::FactionRecordListProto::default_instance());
}

Faction_RecordListRsp::Faction_RecordListRsp(const Faction_RecordListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_RecordListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  lst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_RecordListRsp::~Faction_RecordListRsp() {
  SharedDtor();
}

void Faction_RecordListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete lst_;
  }
}

void Faction_RecordListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_RecordListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_RecordListRsp_descriptor_;
}

const Faction_RecordListRsp& Faction_RecordListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_RecordListRsp* Faction_RecordListRsp::default_instance_ = NULL;

Faction_RecordListRsp* Faction_RecordListRsp::New() const {
  return new Faction_RecordListRsp;
}

void Faction_RecordListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_lst()) {
      if (lst_ != NULL) lst_->::proto_ff::FactionRecordListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_RecordListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lst;
        break;
      }

      // optional .proto_ff.FactionRecordListProto lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_RecordListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionRecordListProto lst = 2;
  if (has_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_RecordListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionRecordListProto lst = 2;
  if (has_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_RecordListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionRecordListProto lst = 2;
    if (has_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_RecordListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_RecordListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_RecordListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_RecordListRsp::MergeFrom(const Faction_RecordListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_lst()) {
      mutable_lst()->::proto_ff::FactionRecordListProto::MergeFrom(from.lst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_RecordListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_RecordListRsp::CopyFrom(const Faction_RecordListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_RecordListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_RecordListRsp::Swap(Faction_RecordListRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(lst_, other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_RecordListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_RecordListRsp_descriptor_;
  metadata.reflection = Faction_RecordListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_DonateReq::kIdFieldNumber;
#endif  // !_MSC_VER

Faction_DonateReq::Faction_DonateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_DonateReq::InitAsDefaultInstance() {
}

Faction_DonateReq::Faction_DonateReq(const Faction_DonateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_DonateReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_DonateReq::~Faction_DonateReq() {
  SharedDtor();
}

void Faction_DonateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_DonateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_DonateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_DonateReq_descriptor_;
}

const Faction_DonateReq& Faction_DonateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_DonateReq* Faction_DonateReq::default_instance_ = NULL;

Faction_DonateReq* Faction_DonateReq::New() const {
  return new Faction_DonateReq;
}

void Faction_DonateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_DonateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_DonateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_DonateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_DonateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_DonateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_DonateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_DonateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_DonateReq::MergeFrom(const Faction_DonateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_DonateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_DonateReq::CopyFrom(const Faction_DonateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_DonateReq::IsInitialized() const {

  return true;
}

void Faction_DonateReq::Swap(Faction_DonateReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_DonateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_DonateReq_descriptor_;
  metadata.reflection = Faction_DonateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_DonateRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Faction_DonateRsp::Faction_DonateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_DonateRsp::InitAsDefaultInstance() {
}

Faction_DonateRsp::Faction_DonateRsp(const Faction_DonateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_DonateRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_DonateRsp::~Faction_DonateRsp() {
  SharedDtor();
}

void Faction_DonateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_DonateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_DonateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_DonateRsp_descriptor_;
}

const Faction_DonateRsp& Faction_DonateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_DonateRsp* Faction_DonateRsp::default_instance_ = NULL;

Faction_DonateRsp* Faction_DonateRsp::New() const {
  return new Faction_DonateRsp;
}

void Faction_DonateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_DonateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_DonateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_DonateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_DonateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_DonateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_DonateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_DonateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_DonateRsp::MergeFrom(const Faction_DonateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_DonateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_DonateRsp::CopyFrom(const Faction_DonateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_DonateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_DonateRsp::Swap(Faction_DonateRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_DonateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_DonateRsp_descriptor_;
  metadata.reflection = Faction_DonateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_DonateNotify::kDonateFieldNumber;
#endif  // !_MSC_VER

Faction_DonateNotify::Faction_DonateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_DonateNotify::InitAsDefaultInstance() {
}

Faction_DonateNotify::Faction_DonateNotify(const Faction_DonateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_DonateNotify::SharedCtor() {
  _cached_size_ = 0;
  donate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_DonateNotify::~Faction_DonateNotify() {
  SharedDtor();
}

void Faction_DonateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_DonateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_DonateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_DonateNotify_descriptor_;
}

const Faction_DonateNotify& Faction_DonateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_DonateNotify* Faction_DonateNotify::default_instance_ = NULL;

Faction_DonateNotify* Faction_DonateNotify::New() const {
  return new Faction_DonateNotify;
}

void Faction_DonateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    donate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_DonateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 donate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donate_)));
          set_has_donate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_DonateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 donate = 1;
  if (has_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->donate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_DonateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 donate = 1;
  if (has_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->donate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_DonateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 donate = 1;
    if (has_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_DonateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_DonateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_DonateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_DonateNotify::MergeFrom(const Faction_DonateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donate()) {
      set_donate(from.donate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_DonateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_DonateNotify::CopyFrom(const Faction_DonateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_DonateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_DonateNotify::Swap(Faction_DonateNotify* other) {
  if (other != this) {
    std::swap(donate_, other->donate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_DonateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_DonateNotify_descriptor_;
  metadata.reflection = Faction_DonateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_SalaryReq::Faction_SalaryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SalaryReq::InitAsDefaultInstance() {
}

Faction_SalaryReq::Faction_SalaryReq(const Faction_SalaryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SalaryReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SalaryReq::~Faction_SalaryReq() {
  SharedDtor();
}

void Faction_SalaryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_SalaryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SalaryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SalaryReq_descriptor_;
}

const Faction_SalaryReq& Faction_SalaryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SalaryReq* Faction_SalaryReq::default_instance_ = NULL;

Faction_SalaryReq* Faction_SalaryReq::New() const {
  return new Faction_SalaryReq;
}

void Faction_SalaryReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SalaryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_SalaryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SalaryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SalaryReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SalaryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SalaryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SalaryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SalaryReq::MergeFrom(const Faction_SalaryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SalaryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SalaryReq::CopyFrom(const Faction_SalaryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SalaryReq::IsInitialized() const {

  return true;
}

void Faction_SalaryReq::Swap(Faction_SalaryReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SalaryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SalaryReq_descriptor_;
  metadata.reflection = Faction_SalaryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SalaryRsp::kSalaryFieldNumber;
#endif  // !_MSC_VER

Faction_SalaryRsp::Faction_SalaryRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SalaryRsp::InitAsDefaultInstance() {
  salary_ = const_cast< ::proto_ff::FactionSalaryListProto*>(&::proto_ff::FactionSalaryListProto::default_instance());
}

Faction_SalaryRsp::Faction_SalaryRsp(const Faction_SalaryRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SalaryRsp::SharedCtor() {
  _cached_size_ = 0;
  salary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SalaryRsp::~Faction_SalaryRsp() {
  SharedDtor();
}

void Faction_SalaryRsp::SharedDtor() {
  if (this != default_instance_) {
    delete salary_;
  }
}

void Faction_SalaryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SalaryRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SalaryRsp_descriptor_;
}

const Faction_SalaryRsp& Faction_SalaryRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SalaryRsp* Faction_SalaryRsp::default_instance_ = NULL;

Faction_SalaryRsp* Faction_SalaryRsp::New() const {
  return new Faction_SalaryRsp;
}

void Faction_SalaryRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_salary()) {
      if (salary_ != NULL) salary_->::proto_ff::FactionSalaryListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SalaryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionSalaryListProto salary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SalaryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionSalaryListProto salary = 1;
  if (has_salary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->salary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SalaryRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionSalaryListProto salary = 1;
  if (has_salary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->salary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SalaryRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionSalaryListProto salary = 1;
    if (has_salary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SalaryRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SalaryRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SalaryRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SalaryRsp::MergeFrom(const Faction_SalaryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_salary()) {
      mutable_salary()->::proto_ff::FactionSalaryListProto::MergeFrom(from.salary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SalaryRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SalaryRsp::CopyFrom(const Faction_SalaryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SalaryRsp::IsInitialized() const {

  return true;
}

void Faction_SalaryRsp::Swap(Faction_SalaryRsp* other) {
  if (other != this) {
    std::swap(salary_, other->salary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SalaryRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SalaryRsp_descriptor_;
  metadata.reflection = Faction_SalaryRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SalaryNotify::kSalaryFieldNumber;
#endif  // !_MSC_VER

Faction_SalaryNotify::Faction_SalaryNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SalaryNotify::InitAsDefaultInstance() {
  salary_ = const_cast< ::proto_ff::FactionSalaryListProto*>(&::proto_ff::FactionSalaryListProto::default_instance());
}

Faction_SalaryNotify::Faction_SalaryNotify(const Faction_SalaryNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SalaryNotify::SharedCtor() {
  _cached_size_ = 0;
  salary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SalaryNotify::~Faction_SalaryNotify() {
  SharedDtor();
}

void Faction_SalaryNotify::SharedDtor() {
  if (this != default_instance_) {
    delete salary_;
  }
}

void Faction_SalaryNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SalaryNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SalaryNotify_descriptor_;
}

const Faction_SalaryNotify& Faction_SalaryNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SalaryNotify* Faction_SalaryNotify::default_instance_ = NULL;

Faction_SalaryNotify* Faction_SalaryNotify::New() const {
  return new Faction_SalaryNotify;
}

void Faction_SalaryNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_salary()) {
      if (salary_ != NULL) salary_->::proto_ff::FactionSalaryListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SalaryNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionSalaryListProto salary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SalaryNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionSalaryListProto salary = 1;
  if (has_salary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->salary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SalaryNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionSalaryListProto salary = 1;
  if (has_salary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->salary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SalaryNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionSalaryListProto salary = 1;
    if (has_salary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SalaryNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SalaryNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SalaryNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SalaryNotify::MergeFrom(const Faction_SalaryNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_salary()) {
      mutable_salary()->::proto_ff::FactionSalaryListProto::MergeFrom(from.salary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SalaryNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SalaryNotify::CopyFrom(const Faction_SalaryNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SalaryNotify::IsInitialized() const {

  return true;
}

void Faction_SalaryNotify::Swap(Faction_SalaryNotify* other) {
  if (other != this) {
    std::swap(salary_, other->salary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SalaryNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SalaryNotify_descriptor_;
  metadata.reflection = Faction_SalaryNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SalaryFetchReq::kIdFieldNumber;
#endif  // !_MSC_VER

Faction_SalaryFetchReq::Faction_SalaryFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SalaryFetchReq::InitAsDefaultInstance() {
}

Faction_SalaryFetchReq::Faction_SalaryFetchReq(const Faction_SalaryFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SalaryFetchReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SalaryFetchReq::~Faction_SalaryFetchReq() {
  SharedDtor();
}

void Faction_SalaryFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_SalaryFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SalaryFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SalaryFetchReq_descriptor_;
}

const Faction_SalaryFetchReq& Faction_SalaryFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SalaryFetchReq* Faction_SalaryFetchReq::default_instance_ = NULL;

Faction_SalaryFetchReq* Faction_SalaryFetchReq::New() const {
  return new Faction_SalaryFetchReq;
}

void Faction_SalaryFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SalaryFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SalaryFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SalaryFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SalaryFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SalaryFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SalaryFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SalaryFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SalaryFetchReq::MergeFrom(const Faction_SalaryFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SalaryFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SalaryFetchReq::CopyFrom(const Faction_SalaryFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SalaryFetchReq::IsInitialized() const {

  return true;
}

void Faction_SalaryFetchReq::Swap(Faction_SalaryFetchReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SalaryFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SalaryFetchReq_descriptor_;
  metadata.reflection = Faction_SalaryFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SalaryFetchRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Faction_SalaryFetchRsp::Faction_SalaryFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SalaryFetchRsp::InitAsDefaultInstance() {
}

Faction_SalaryFetchRsp::Faction_SalaryFetchRsp(const Faction_SalaryFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SalaryFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SalaryFetchRsp::~Faction_SalaryFetchRsp() {
  SharedDtor();
}

void Faction_SalaryFetchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_SalaryFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SalaryFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SalaryFetchRsp_descriptor_;
}

const Faction_SalaryFetchRsp& Faction_SalaryFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SalaryFetchRsp* Faction_SalaryFetchRsp::default_instance_ = NULL;

Faction_SalaryFetchRsp* Faction_SalaryFetchRsp::New() const {
  return new Faction_SalaryFetchRsp;
}

void Faction_SalaryFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SalaryFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SalaryFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SalaryFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SalaryFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SalaryFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SalaryFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SalaryFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SalaryFetchRsp::MergeFrom(const Faction_SalaryFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SalaryFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SalaryFetchRsp::CopyFrom(const Faction_SalaryFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SalaryFetchRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_SalaryFetchRsp::Swap(Faction_SalaryFetchRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SalaryFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SalaryFetchRsp_descriptor_;
  metadata.reflection = Faction_SalaryFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_DinnerUpdateRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Faction_DinnerUpdateRsp::Faction_DinnerUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_DinnerUpdateRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::FactionDinnerProto*>(&::proto_ff::FactionDinnerProto::default_instance());
}

Faction_DinnerUpdateRsp::Faction_DinnerUpdateRsp(const Faction_DinnerUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_DinnerUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_DinnerUpdateRsp::~Faction_DinnerUpdateRsp() {
  SharedDtor();
}

void Faction_DinnerUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Faction_DinnerUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_DinnerUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_DinnerUpdateRsp_descriptor_;
}

const Faction_DinnerUpdateRsp& Faction_DinnerUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_DinnerUpdateRsp* Faction_DinnerUpdateRsp::default_instance_ = NULL;

Faction_DinnerUpdateRsp* Faction_DinnerUpdateRsp::New() const {
  return new Faction_DinnerUpdateRsp;
}

void Faction_DinnerUpdateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::FactionDinnerProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_DinnerUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionDinnerProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_DinnerUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionDinnerProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_DinnerUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionDinnerProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_DinnerUpdateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionDinnerProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_DinnerUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_DinnerUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_DinnerUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_DinnerUpdateRsp::MergeFrom(const Faction_DinnerUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::FactionDinnerProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_DinnerUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_DinnerUpdateRsp::CopyFrom(const Faction_DinnerUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_DinnerUpdateRsp::IsInitialized() const {

  return true;
}

void Faction_DinnerUpdateRsp::Swap(Faction_DinnerUpdateRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_DinnerUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_DinnerUpdateRsp_descriptor_;
  metadata.reflection = Faction_DinnerUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_TransInviteListReq::Faction_TransInviteListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_TransInviteListReq::InitAsDefaultInstance() {
}

Faction_TransInviteListReq::Faction_TransInviteListReq(const Faction_TransInviteListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_TransInviteListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_TransInviteListReq::~Faction_TransInviteListReq() {
  SharedDtor();
}

void Faction_TransInviteListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_TransInviteListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_TransInviteListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_TransInviteListReq_descriptor_;
}

const Faction_TransInviteListReq& Faction_TransInviteListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_TransInviteListReq* Faction_TransInviteListReq::default_instance_ = NULL;

Faction_TransInviteListReq* Faction_TransInviteListReq::New() const {
  return new Faction_TransInviteListReq;
}

void Faction_TransInviteListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_TransInviteListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_TransInviteListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_TransInviteListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_TransInviteListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_TransInviteListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_TransInviteListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_TransInviteListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_TransInviteListReq::MergeFrom(const Faction_TransInviteListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_TransInviteListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_TransInviteListReq::CopyFrom(const Faction_TransInviteListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_TransInviteListReq::IsInitialized() const {

  return true;
}

void Faction_TransInviteListReq::Swap(Faction_TransInviteListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_TransInviteListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_TransInviteListReq_descriptor_;
  metadata.reflection = Faction_TransInviteListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_TransInviteListRsp::kInviteFieldNumber;
#endif  // !_MSC_VER

Faction_TransInviteListRsp::Faction_TransInviteListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_TransInviteListRsp::InitAsDefaultInstance() {
}

Faction_TransInviteListRsp::Faction_TransInviteListRsp(const Faction_TransInviteListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_TransInviteListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_TransInviteListRsp::~Faction_TransInviteListRsp() {
  SharedDtor();
}

void Faction_TransInviteListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_TransInviteListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_TransInviteListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_TransInviteListRsp_descriptor_;
}

const Faction_TransInviteListRsp& Faction_TransInviteListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_TransInviteListRsp* Faction_TransInviteListRsp::default_instance_ = NULL;

Faction_TransInviteListRsp* Faction_TransInviteListRsp::New() const {
  return new Faction_TransInviteListRsp;
}

void Faction_TransInviteListRsp::Clear() {
  invite_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_TransInviteListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionInviteProto invite = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_invite;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_TransInviteListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionInviteProto invite = 1;
  for (int i = 0; i < this->invite_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->invite(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_TransInviteListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionInviteProto invite = 1;
  for (int i = 0; i < this->invite_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->invite(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_TransInviteListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionInviteProto invite = 1;
  total_size += 1 * this->invite_size();
  for (int i = 0; i < this->invite_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invite(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_TransInviteListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_TransInviteListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_TransInviteListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_TransInviteListRsp::MergeFrom(const Faction_TransInviteListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  invite_.MergeFrom(from.invite_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_TransInviteListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_TransInviteListRsp::CopyFrom(const Faction_TransInviteListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_TransInviteListRsp::IsInitialized() const {

  return true;
}

void Faction_TransInviteListRsp::Swap(Faction_TransInviteListRsp* other) {
  if (other != this) {
    invite_.Swap(&other->invite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_TransInviteListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_TransInviteListRsp_descriptor_;
  metadata.reflection = Faction_TransInviteListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_TransAcceptListRsp::kAcceptFieldNumber;
#endif  // !_MSC_VER

Faction_TransAcceptListRsp::Faction_TransAcceptListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_TransAcceptListRsp::InitAsDefaultInstance() {
}

Faction_TransAcceptListRsp::Faction_TransAcceptListRsp(const Faction_TransAcceptListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_TransAcceptListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_TransAcceptListRsp::~Faction_TransAcceptListRsp() {
  SharedDtor();
}

void Faction_TransAcceptListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_TransAcceptListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_TransAcceptListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_TransAcceptListRsp_descriptor_;
}

const Faction_TransAcceptListRsp& Faction_TransAcceptListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_TransAcceptListRsp* Faction_TransAcceptListRsp::default_instance_ = NULL;

Faction_TransAcceptListRsp* Faction_TransAcceptListRsp::New() const {
  return new Faction_TransAcceptListRsp;
}

void Faction_TransAcceptListRsp::Clear() {
  accept_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_TransAcceptListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionInviteProto accept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accept:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accept()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_accept;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_TransAcceptListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionInviteProto accept = 1;
  for (int i = 0; i < this->accept_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accept(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_TransAcceptListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionInviteProto accept = 1;
  for (int i = 0; i < this->accept_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accept(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_TransAcceptListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionInviteProto accept = 1;
  total_size += 1 * this->accept_size();
  for (int i = 0; i < this->accept_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accept(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_TransAcceptListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_TransAcceptListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_TransAcceptListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_TransAcceptListRsp::MergeFrom(const Faction_TransAcceptListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  accept_.MergeFrom(from.accept_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_TransAcceptListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_TransAcceptListRsp::CopyFrom(const Faction_TransAcceptListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_TransAcceptListRsp::IsInitialized() const {

  return true;
}

void Faction_TransAcceptListRsp::Swap(Faction_TransAcceptListRsp* other) {
  if (other != this) {
    accept_.Swap(&other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_TransAcceptListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_TransAcceptListRsp_descriptor_;
  metadata.reflection = Faction_TransAcceptListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_TransInviteReq::kInviteCidFieldNumber;
#endif  // !_MSC_VER

Faction_TransInviteReq::Faction_TransInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_TransInviteReq::InitAsDefaultInstance() {
}

Faction_TransInviteReq::Faction_TransInviteReq(const Faction_TransInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_TransInviteReq::SharedCtor() {
  _cached_size_ = 0;
  invite_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_TransInviteReq::~Faction_TransInviteReq() {
  SharedDtor();
}

void Faction_TransInviteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_TransInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_TransInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_TransInviteReq_descriptor_;
}

const Faction_TransInviteReq& Faction_TransInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_TransInviteReq* Faction_TransInviteReq::default_instance_ = NULL;

Faction_TransInviteReq* Faction_TransInviteReq::New() const {
  return new Faction_TransInviteReq;
}

void Faction_TransInviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    invite_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_TransInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invite_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_cid_)));
          set_has_invite_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_TransInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 invite_cid = 1;
  if (has_invite_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invite_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_TransInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 invite_cid = 1;
  if (has_invite_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invite_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_TransInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invite_cid = 1;
    if (has_invite_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_TransInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_TransInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_TransInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_TransInviteReq::MergeFrom(const Faction_TransInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite_cid()) {
      set_invite_cid(from.invite_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_TransInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_TransInviteReq::CopyFrom(const Faction_TransInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_TransInviteReq::IsInitialized() const {

  return true;
}

void Faction_TransInviteReq::Swap(Faction_TransInviteReq* other) {
  if (other != this) {
    std::swap(invite_cid_, other->invite_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_TransInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_TransInviteReq_descriptor_;
  metadata.reflection = Faction_TransInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_TransInviteRsp::kRetFieldNumber;
const int Faction_TransInviteRsp::kInviteCidFieldNumber;
#endif  // !_MSC_VER

Faction_TransInviteRsp::Faction_TransInviteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_TransInviteRsp::InitAsDefaultInstance() {
}

Faction_TransInviteRsp::Faction_TransInviteRsp(const Faction_TransInviteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_TransInviteRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  invite_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_TransInviteRsp::~Faction_TransInviteRsp() {
  SharedDtor();
}

void Faction_TransInviteRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_TransInviteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_TransInviteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_TransInviteRsp_descriptor_;
}

const Faction_TransInviteRsp& Faction_TransInviteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_TransInviteRsp* Faction_TransInviteRsp::default_instance_ = NULL;

Faction_TransInviteRsp* Faction_TransInviteRsp::New() const {
  return new Faction_TransInviteRsp;
}

void Faction_TransInviteRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    invite_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_TransInviteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_invite_cid;
        break;
      }

      // optional uint64 invite_cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invite_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_cid_)));
          set_has_invite_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_TransInviteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 invite_cid = 2;
  if (has_invite_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->invite_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_TransInviteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 invite_cid = 2;
  if (has_invite_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->invite_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_TransInviteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 invite_cid = 2;
    if (has_invite_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_TransInviteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_TransInviteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_TransInviteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_TransInviteRsp::MergeFrom(const Faction_TransInviteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_invite_cid()) {
      set_invite_cid(from.invite_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_TransInviteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_TransInviteRsp::CopyFrom(const Faction_TransInviteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_TransInviteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_TransInviteRsp::Swap(Faction_TransInviteRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(invite_cid_, other->invite_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_TransInviteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_TransInviteRsp_descriptor_;
  metadata.reflection = Faction_TransInviteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_TransInviteNotify::kInfoFieldNumber;
#endif  // !_MSC_VER

Faction_TransInviteNotify::Faction_TransInviteNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_TransInviteNotify::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::FactionInviteProto*>(&::proto_ff::FactionInviteProto::default_instance());
}

Faction_TransInviteNotify::Faction_TransInviteNotify(const Faction_TransInviteNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_TransInviteNotify::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_TransInviteNotify::~Faction_TransInviteNotify() {
  SharedDtor();
}

void Faction_TransInviteNotify::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Faction_TransInviteNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_TransInviteNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_TransInviteNotify_descriptor_;
}

const Faction_TransInviteNotify& Faction_TransInviteNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_TransInviteNotify* Faction_TransInviteNotify::default_instance_ = NULL;

Faction_TransInviteNotify* Faction_TransInviteNotify::New() const {
  return new Faction_TransInviteNotify;
}

void Faction_TransInviteNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::FactionInviteProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_TransInviteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionInviteProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_TransInviteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionInviteProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_TransInviteNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionInviteProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_TransInviteNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionInviteProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_TransInviteNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_TransInviteNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_TransInviteNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_TransInviteNotify::MergeFrom(const Faction_TransInviteNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::FactionInviteProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_TransInviteNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_TransInviteNotify::CopyFrom(const Faction_TransInviteNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_TransInviteNotify::IsInitialized() const {

  return true;
}

void Faction_TransInviteNotify::Swap(Faction_TransInviteNotify* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_TransInviteNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_TransInviteNotify_descriptor_;
  metadata.reflection = Faction_TransInviteNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_TransDelAcceptNotify::kDelCidFieldNumber;
#endif  // !_MSC_VER

Faction_TransDelAcceptNotify::Faction_TransDelAcceptNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_TransDelAcceptNotify::InitAsDefaultInstance() {
}

Faction_TransDelAcceptNotify::Faction_TransDelAcceptNotify(const Faction_TransDelAcceptNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_TransDelAcceptNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_TransDelAcceptNotify::~Faction_TransDelAcceptNotify() {
  SharedDtor();
}

void Faction_TransDelAcceptNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_TransDelAcceptNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_TransDelAcceptNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_TransDelAcceptNotify_descriptor_;
}

const Faction_TransDelAcceptNotify& Faction_TransDelAcceptNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_TransDelAcceptNotify* Faction_TransDelAcceptNotify::default_instance_ = NULL;

Faction_TransDelAcceptNotify* Faction_TransDelAcceptNotify::New() const {
  return new Faction_TransDelAcceptNotify;
}

void Faction_TransDelAcceptNotify::Clear() {
  del_cid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_TransDelAcceptNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 del_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_del_cid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_del_cid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_del_cid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_TransDelAcceptNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 del_cid = 1;
  for (int i = 0; i < this->del_cid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->del_cid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_TransDelAcceptNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 del_cid = 1;
  for (int i = 0; i < this->del_cid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->del_cid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_TransDelAcceptNotify::ByteSize() const {
  int total_size = 0;

  // repeated uint64 del_cid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_cid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->del_cid(i));
    }
    total_size += 1 * this->del_cid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_TransDelAcceptNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_TransDelAcceptNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_TransDelAcceptNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_TransDelAcceptNotify::MergeFrom(const Faction_TransDelAcceptNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  del_cid_.MergeFrom(from.del_cid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_TransDelAcceptNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_TransDelAcceptNotify::CopyFrom(const Faction_TransDelAcceptNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_TransDelAcceptNotify::IsInitialized() const {

  return true;
}

void Faction_TransDelAcceptNotify::Swap(Faction_TransDelAcceptNotify* other) {
  if (other != this) {
    del_cid_.Swap(&other->del_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_TransDelAcceptNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_TransDelAcceptNotify_descriptor_;
  metadata.reflection = Faction_TransDelAcceptNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_TransAgreeReq::kCidFieldNumber;
#endif  // !_MSC_VER

Faction_TransAgreeReq::Faction_TransAgreeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_TransAgreeReq::InitAsDefaultInstance() {
}

Faction_TransAgreeReq::Faction_TransAgreeReq(const Faction_TransAgreeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_TransAgreeReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_TransAgreeReq::~Faction_TransAgreeReq() {
  SharedDtor();
}

void Faction_TransAgreeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_TransAgreeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_TransAgreeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_TransAgreeReq_descriptor_;
}

const Faction_TransAgreeReq& Faction_TransAgreeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_TransAgreeReq* Faction_TransAgreeReq::default_instance_ = NULL;

Faction_TransAgreeReq* Faction_TransAgreeReq::New() const {
  return new Faction_TransAgreeReq;
}

void Faction_TransAgreeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_TransAgreeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_TransAgreeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_TransAgreeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_TransAgreeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_TransAgreeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_TransAgreeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_TransAgreeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_TransAgreeReq::MergeFrom(const Faction_TransAgreeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_TransAgreeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_TransAgreeReq::CopyFrom(const Faction_TransAgreeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_TransAgreeReq::IsInitialized() const {

  return true;
}

void Faction_TransAgreeReq::Swap(Faction_TransAgreeReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_TransAgreeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_TransAgreeReq_descriptor_;
  metadata.reflection = Faction_TransAgreeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_TransAgreeRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Faction_TransAgreeRsp::Faction_TransAgreeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_TransAgreeRsp::InitAsDefaultInstance() {
}

Faction_TransAgreeRsp::Faction_TransAgreeRsp(const Faction_TransAgreeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_TransAgreeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_TransAgreeRsp::~Faction_TransAgreeRsp() {
  SharedDtor();
}

void Faction_TransAgreeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_TransAgreeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_TransAgreeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_TransAgreeRsp_descriptor_;
}

const Faction_TransAgreeRsp& Faction_TransAgreeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_TransAgreeRsp* Faction_TransAgreeRsp::default_instance_ = NULL;

Faction_TransAgreeRsp* Faction_TransAgreeRsp::New() const {
  return new Faction_TransAgreeRsp;
}

void Faction_TransAgreeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_TransAgreeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_TransAgreeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_TransAgreeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_TransAgreeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_TransAgreeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_TransAgreeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_TransAgreeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_TransAgreeRsp::MergeFrom(const Faction_TransAgreeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_TransAgreeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_TransAgreeRsp::CopyFrom(const Faction_TransAgreeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_TransAgreeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_TransAgreeRsp::Swap(Faction_TransAgreeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_TransAgreeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_TransAgreeRsp_descriptor_;
  metadata.reflection = Faction_TransAgreeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_SkillInfoReq::Faction_SkillInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SkillInfoReq::InitAsDefaultInstance() {
}

Faction_SkillInfoReq::Faction_SkillInfoReq(const Faction_SkillInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SkillInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SkillInfoReq::~Faction_SkillInfoReq() {
  SharedDtor();
}

void Faction_SkillInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_SkillInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SkillInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SkillInfoReq_descriptor_;
}

const Faction_SkillInfoReq& Faction_SkillInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SkillInfoReq* Faction_SkillInfoReq::default_instance_ = NULL;

Faction_SkillInfoReq* Faction_SkillInfoReq::New() const {
  return new Faction_SkillInfoReq;
}

void Faction_SkillInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SkillInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_SkillInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SkillInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SkillInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SkillInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SkillInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SkillInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SkillInfoReq::MergeFrom(const Faction_SkillInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SkillInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SkillInfoReq::CopyFrom(const Faction_SkillInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SkillInfoReq::IsInitialized() const {

  return true;
}

void Faction_SkillInfoReq::Swap(Faction_SkillInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SkillInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SkillInfoReq_descriptor_;
  metadata.reflection = Faction_SkillInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SkillInfoRsp::kSkillFieldNumber;
#endif  // !_MSC_VER

Faction_SkillInfoRsp::Faction_SkillInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SkillInfoRsp::InitAsDefaultInstance() {
  skill_ = const_cast< ::proto_ff::FactionSkillListProto*>(&::proto_ff::FactionSkillListProto::default_instance());
}

Faction_SkillInfoRsp::Faction_SkillInfoRsp(const Faction_SkillInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SkillInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SkillInfoRsp::~Faction_SkillInfoRsp() {
  SharedDtor();
}

void Faction_SkillInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void Faction_SkillInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SkillInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SkillInfoRsp_descriptor_;
}

const Faction_SkillInfoRsp& Faction_SkillInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SkillInfoRsp* Faction_SkillInfoRsp::default_instance_ = NULL;

Faction_SkillInfoRsp* Faction_SkillInfoRsp::New() const {
  return new Faction_SkillInfoRsp;
}

void Faction_SkillInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_skill()) {
      if (skill_ != NULL) skill_->::proto_ff::FactionSkillListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SkillInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionSkillListProto skill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SkillInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionSkillListProto skill = 1;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SkillInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionSkillListProto skill = 1;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SkillInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionSkillListProto skill = 1;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SkillInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SkillInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SkillInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SkillInfoRsp::MergeFrom(const Faction_SkillInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill()) {
      mutable_skill()->::proto_ff::FactionSkillListProto::MergeFrom(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SkillInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SkillInfoRsp::CopyFrom(const Faction_SkillInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SkillInfoRsp::IsInitialized() const {

  return true;
}

void Faction_SkillInfoRsp::Swap(Faction_SkillInfoRsp* other) {
  if (other != this) {
    std::swap(skill_, other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SkillInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SkillInfoRsp_descriptor_;
  metadata.reflection = Faction_SkillInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SkillUpdateRsp::kSkillFieldNumber;
#endif  // !_MSC_VER

Faction_SkillUpdateRsp::Faction_SkillUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SkillUpdateRsp::InitAsDefaultInstance() {
  skill_ = const_cast< ::proto_ff::FactionSkillListProto*>(&::proto_ff::FactionSkillListProto::default_instance());
}

Faction_SkillUpdateRsp::Faction_SkillUpdateRsp(const Faction_SkillUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SkillUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SkillUpdateRsp::~Faction_SkillUpdateRsp() {
  SharedDtor();
}

void Faction_SkillUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void Faction_SkillUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SkillUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SkillUpdateRsp_descriptor_;
}

const Faction_SkillUpdateRsp& Faction_SkillUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SkillUpdateRsp* Faction_SkillUpdateRsp::default_instance_ = NULL;

Faction_SkillUpdateRsp* Faction_SkillUpdateRsp::New() const {
  return new Faction_SkillUpdateRsp;
}

void Faction_SkillUpdateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_skill()) {
      if (skill_ != NULL) skill_->::proto_ff::FactionSkillListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SkillUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionSkillListProto skill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SkillUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionSkillListProto skill = 1;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SkillUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionSkillListProto skill = 1;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SkillUpdateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionSkillListProto skill = 1;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SkillUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SkillUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SkillUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SkillUpdateRsp::MergeFrom(const Faction_SkillUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill()) {
      mutable_skill()->::proto_ff::FactionSkillListProto::MergeFrom(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SkillUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SkillUpdateRsp::CopyFrom(const Faction_SkillUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SkillUpdateRsp::IsInitialized() const {

  return true;
}

void Faction_SkillUpdateRsp::Swap(Faction_SkillUpdateRsp* other) {
  if (other != this) {
    std::swap(skill_, other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SkillUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SkillUpdateRsp_descriptor_;
  metadata.reflection = Faction_SkillUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SkillUpgradeReq::kIdFieldNumber;
#endif  // !_MSC_VER

Faction_SkillUpgradeReq::Faction_SkillUpgradeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SkillUpgradeReq::InitAsDefaultInstance() {
}

Faction_SkillUpgradeReq::Faction_SkillUpgradeReq(const Faction_SkillUpgradeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SkillUpgradeReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SkillUpgradeReq::~Faction_SkillUpgradeReq() {
  SharedDtor();
}

void Faction_SkillUpgradeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_SkillUpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SkillUpgradeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SkillUpgradeReq_descriptor_;
}

const Faction_SkillUpgradeReq& Faction_SkillUpgradeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SkillUpgradeReq* Faction_SkillUpgradeReq::default_instance_ = NULL;

Faction_SkillUpgradeReq* Faction_SkillUpgradeReq::New() const {
  return new Faction_SkillUpgradeReq;
}

void Faction_SkillUpgradeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SkillUpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SkillUpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SkillUpgradeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SkillUpgradeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SkillUpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SkillUpgradeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SkillUpgradeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SkillUpgradeReq::MergeFrom(const Faction_SkillUpgradeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SkillUpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SkillUpgradeReq::CopyFrom(const Faction_SkillUpgradeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SkillUpgradeReq::IsInitialized() const {

  return true;
}

void Faction_SkillUpgradeReq::Swap(Faction_SkillUpgradeReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SkillUpgradeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SkillUpgradeReq_descriptor_;
  metadata.reflection = Faction_SkillUpgradeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SkillUpgradeRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Faction_SkillUpgradeRsp::Faction_SkillUpgradeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SkillUpgradeRsp::InitAsDefaultInstance() {
}

Faction_SkillUpgradeRsp::Faction_SkillUpgradeRsp(const Faction_SkillUpgradeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SkillUpgradeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SkillUpgradeRsp::~Faction_SkillUpgradeRsp() {
  SharedDtor();
}

void Faction_SkillUpgradeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_SkillUpgradeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SkillUpgradeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SkillUpgradeRsp_descriptor_;
}

const Faction_SkillUpgradeRsp& Faction_SkillUpgradeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SkillUpgradeRsp* Faction_SkillUpgradeRsp::default_instance_ = NULL;

Faction_SkillUpgradeRsp* Faction_SkillUpgradeRsp::New() const {
  return new Faction_SkillUpgradeRsp;
}

void Faction_SkillUpgradeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SkillUpgradeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SkillUpgradeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SkillUpgradeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SkillUpgradeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SkillUpgradeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SkillUpgradeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SkillUpgradeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SkillUpgradeRsp::MergeFrom(const Faction_SkillUpgradeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SkillUpgradeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SkillUpgradeRsp::CopyFrom(const Faction_SkillUpgradeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SkillUpgradeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_SkillUpgradeRsp::Swap(Faction_SkillUpgradeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SkillUpgradeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SkillUpgradeRsp_descriptor_;
  metadata.reflection = Faction_SkillUpgradeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_AnswerRankListReq::Faction_AnswerRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_AnswerRankListReq::InitAsDefaultInstance() {
}

Faction_AnswerRankListReq::Faction_AnswerRankListReq(const Faction_AnswerRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_AnswerRankListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_AnswerRankListReq::~Faction_AnswerRankListReq() {
  SharedDtor();
}

void Faction_AnswerRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_AnswerRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_AnswerRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_AnswerRankListReq_descriptor_;
}

const Faction_AnswerRankListReq& Faction_AnswerRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_AnswerRankListReq* Faction_AnswerRankListReq::default_instance_ = NULL;

Faction_AnswerRankListReq* Faction_AnswerRankListReq::New() const {
  return new Faction_AnswerRankListReq;
}

void Faction_AnswerRankListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_AnswerRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_AnswerRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_AnswerRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_AnswerRankListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_AnswerRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_AnswerRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_AnswerRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_AnswerRankListReq::MergeFrom(const Faction_AnswerRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_AnswerRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_AnswerRankListReq::CopyFrom(const Faction_AnswerRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_AnswerRankListReq::IsInitialized() const {

  return true;
}

void Faction_AnswerRankListReq::Swap(Faction_AnswerRankListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_AnswerRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_AnswerRankListReq_descriptor_;
  metadata.reflection = Faction_AnswerRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_AnswerRankListRsp::kRankFieldNumber;
const int Faction_AnswerRankListRsp::kCountFieldNumber;
#endif  // !_MSC_VER

Faction_AnswerRankListRsp::Faction_AnswerRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_AnswerRankListRsp::InitAsDefaultInstance() {
  rank_ = const_cast< ::proto_ff::FactionAnswerRankListProto*>(&::proto_ff::FactionAnswerRankListProto::default_instance());
}

Faction_AnswerRankListRsp::Faction_AnswerRankListRsp(const Faction_AnswerRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_AnswerRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  rank_ = NULL;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_AnswerRankListRsp::~Faction_AnswerRankListRsp() {
  SharedDtor();
}

void Faction_AnswerRankListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rank_;
  }
}

void Faction_AnswerRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_AnswerRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_AnswerRankListRsp_descriptor_;
}

const Faction_AnswerRankListRsp& Faction_AnswerRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_AnswerRankListRsp* Faction_AnswerRankListRsp::default_instance_ = NULL;

Faction_AnswerRankListRsp* Faction_AnswerRankListRsp::New() const {
  return new Faction_AnswerRankListRsp;
}

void Faction_AnswerRankListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rank()) {
      if (rank_ != NULL) rank_->::proto_ff::FactionAnswerRankListProto::Clear();
    }
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_AnswerRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionAnswerRankListProto rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_AnswerRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionAnswerRankListProto rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_AnswerRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionAnswerRankListProto rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_AnswerRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionAnswerRankListProto rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_AnswerRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_AnswerRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_AnswerRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_AnswerRankListRsp::MergeFrom(const Faction_AnswerRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      mutable_rank()->::proto_ff::FactionAnswerRankListProto::MergeFrom(from.rank());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_AnswerRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_AnswerRankListRsp::CopyFrom(const Faction_AnswerRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_AnswerRankListRsp::IsInitialized() const {

  return true;
}

void Faction_AnswerRankListRsp::Swap(Faction_AnswerRankListRsp* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_AnswerRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_AnswerRankListRsp_descriptor_;
  metadata.reflection = Faction_AnswerRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_AnswerCurRankRsp::kRankFieldNumber;
#endif  // !_MSC_VER

Faction_AnswerCurRankRsp::Faction_AnswerCurRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_AnswerCurRankRsp::InitAsDefaultInstance() {
  rank_ = const_cast< ::proto_ff::FactionAnswerRankListProto*>(&::proto_ff::FactionAnswerRankListProto::default_instance());
}

Faction_AnswerCurRankRsp::Faction_AnswerCurRankRsp(const Faction_AnswerCurRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_AnswerCurRankRsp::SharedCtor() {
  _cached_size_ = 0;
  rank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_AnswerCurRankRsp::~Faction_AnswerCurRankRsp() {
  SharedDtor();
}

void Faction_AnswerCurRankRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rank_;
  }
}

void Faction_AnswerCurRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_AnswerCurRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_AnswerCurRankRsp_descriptor_;
}

const Faction_AnswerCurRankRsp& Faction_AnswerCurRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_AnswerCurRankRsp* Faction_AnswerCurRankRsp::default_instance_ = NULL;

Faction_AnswerCurRankRsp* Faction_AnswerCurRankRsp::New() const {
  return new Faction_AnswerCurRankRsp;
}

void Faction_AnswerCurRankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rank()) {
      if (rank_ != NULL) rank_->::proto_ff::FactionAnswerRankListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_AnswerCurRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionAnswerRankListProto rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_AnswerCurRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionAnswerRankListProto rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_AnswerCurRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionAnswerRankListProto rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_AnswerCurRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionAnswerRankListProto rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_AnswerCurRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_AnswerCurRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_AnswerCurRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_AnswerCurRankRsp::MergeFrom(const Faction_AnswerCurRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      mutable_rank()->::proto_ff::FactionAnswerRankListProto::MergeFrom(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_AnswerCurRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_AnswerCurRankRsp::CopyFrom(const Faction_AnswerCurRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_AnswerCurRankRsp::IsInitialized() const {

  return true;
}

void Faction_AnswerCurRankRsp::Swap(Faction_AnswerCurRankRsp* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_AnswerCurRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_AnswerCurRankRsp_descriptor_;
  metadata.reflection = Faction_AnswerCurRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_AnswerStageRsp::kStageFieldNumber;
const int Faction_AnswerStageRsp::kSecFieldNumber;
const int Faction_AnswerStageRsp::kNumFieldNumber;
const int Faction_AnswerStageRsp::kIdFieldNumber;
const int Faction_AnswerStageRsp::kNameFieldNumber;
const int Faction_AnswerStageRsp::kCidFieldNumber;
#endif  // !_MSC_VER

Faction_AnswerStageRsp::Faction_AnswerStageRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_AnswerStageRsp::InitAsDefaultInstance() {
}

Faction_AnswerStageRsp::Faction_AnswerStageRsp(const Faction_AnswerStageRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_AnswerStageRsp::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  sec_ = 0;
  num_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_AnswerStageRsp::~Faction_AnswerStageRsp() {
  SharedDtor();
}

void Faction_AnswerStageRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Faction_AnswerStageRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_AnswerStageRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_AnswerStageRsp_descriptor_;
}

const Faction_AnswerStageRsp& Faction_AnswerStageRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_AnswerStageRsp* Faction_AnswerStageRsp::default_instance_ = NULL;

Faction_AnswerStageRsp* Faction_AnswerStageRsp::New() const {
  return new Faction_AnswerStageRsp;
}

void Faction_AnswerStageRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0;
    sec_ = 0;
    num_ = 0;
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_AnswerStageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sec;
        break;
      }

      // required int32 sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional bytes name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_AnswerStageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage(), output);
  }

  // required int32 sec = 2;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sec(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // optional bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->name(), output);
  }

  // optional uint64 cid = 6;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_AnswerStageRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage(), target);
  }

  // required int32 sec = 2;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sec(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // optional bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  // optional uint64 cid = 6;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_AnswerStageRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // required int32 sec = 2;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sec());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 cid = 6;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_AnswerStageRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_AnswerStageRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_AnswerStageRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_AnswerStageRsp::MergeFrom(const Faction_AnswerStageRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_AnswerStageRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_AnswerStageRsp::CopyFrom(const Faction_AnswerStageRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_AnswerStageRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Faction_AnswerStageRsp::Swap(Faction_AnswerStageRsp* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(sec_, other->sec_);
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_AnswerStageRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_AnswerStageRsp_descriptor_;
  metadata.reflection = Faction_AnswerStageRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_AnswerResultRsp::kIdFieldNumber;
const int Faction_AnswerResultRsp::kCidFieldNumber;
const int Faction_AnswerResultRsp::kNameFieldNumber;
const int Faction_AnswerResultRsp::kCountFieldNumber;
#endif  // !_MSC_VER

Faction_AnswerResultRsp::Faction_AnswerResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_AnswerResultRsp::InitAsDefaultInstance() {
}

Faction_AnswerResultRsp::Faction_AnswerResultRsp(const Faction_AnswerResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_AnswerResultRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_AnswerResultRsp::~Faction_AnswerResultRsp() {
  SharedDtor();
}

void Faction_AnswerResultRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Faction_AnswerResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_AnswerResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_AnswerResultRsp_descriptor_;
}

const Faction_AnswerResultRsp& Faction_AnswerResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_AnswerResultRsp* Faction_AnswerResultRsp::default_instance_ = NULL;

Faction_AnswerResultRsp* Faction_AnswerResultRsp::New() const {
  return new Faction_AnswerResultRsp;
}

void Faction_AnswerResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_AnswerResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_AnswerResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_AnswerResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_AnswerResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_AnswerResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_AnswerResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_AnswerResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_AnswerResultRsp::MergeFrom(const Faction_AnswerResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_AnswerResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_AnswerResultRsp::CopyFrom(const Faction_AnswerResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_AnswerResultRsp::IsInitialized() const {

  return true;
}

void Faction_AnswerResultRsp::Swap(Faction_AnswerResultRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_AnswerResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_AnswerResultRsp_descriptor_;
  metadata.reflection = Faction_AnswerResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_AnswerFinalRsp::kFinalFieldNumber;
#endif  // !_MSC_VER

Faction_AnswerFinalRsp::Faction_AnswerFinalRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_AnswerFinalRsp::InitAsDefaultInstance() {
}

Faction_AnswerFinalRsp::Faction_AnswerFinalRsp(const Faction_AnswerFinalRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_AnswerFinalRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_AnswerFinalRsp::~Faction_AnswerFinalRsp() {
  SharedDtor();
}

void Faction_AnswerFinalRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_AnswerFinalRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_AnswerFinalRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_AnswerFinalRsp_descriptor_;
}

const Faction_AnswerFinalRsp& Faction_AnswerFinalRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_AnswerFinalRsp* Faction_AnswerFinalRsp::default_instance_ = NULL;

Faction_AnswerFinalRsp* Faction_AnswerFinalRsp::New() const {
  return new Faction_AnswerFinalRsp;
}

void Faction_AnswerFinalRsp::Clear() {
  final_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_AnswerFinalRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionAnswerFinalProto final = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_final:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_final()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_final;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_AnswerFinalRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionAnswerFinalProto final = 1;
  for (int i = 0; i < this->final_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->final(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_AnswerFinalRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionAnswerFinalProto final = 1;
  for (int i = 0; i < this->final_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->final(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_AnswerFinalRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionAnswerFinalProto final = 1;
  total_size += 1 * this->final_size();
  for (int i = 0; i < this->final_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->final(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_AnswerFinalRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_AnswerFinalRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_AnswerFinalRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_AnswerFinalRsp::MergeFrom(const Faction_AnswerFinalRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  final_.MergeFrom(from.final_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_AnswerFinalRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_AnswerFinalRsp::CopyFrom(const Faction_AnswerFinalRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_AnswerFinalRsp::IsInitialized() const {

  return true;
}

void Faction_AnswerFinalRsp::Swap(Faction_AnswerFinalRsp* other) {
  if (other != this) {
    final_.Swap(&other->final_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_AnswerFinalRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_AnswerFinalRsp_descriptor_;
  metadata.reflection = Faction_AnswerFinalRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_BeastInfoReq::Faction_BeastInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_BeastInfoReq::InitAsDefaultInstance() {
}

Faction_BeastInfoReq::Faction_BeastInfoReq(const Faction_BeastInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_BeastInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_BeastInfoReq::~Faction_BeastInfoReq() {
  SharedDtor();
}

void Faction_BeastInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_BeastInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_BeastInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_BeastInfoReq_descriptor_;
}

const Faction_BeastInfoReq& Faction_BeastInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_BeastInfoReq* Faction_BeastInfoReq::default_instance_ = NULL;

Faction_BeastInfoReq* Faction_BeastInfoReq::New() const {
  return new Faction_BeastInfoReq;
}

void Faction_BeastInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_BeastInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_BeastInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_BeastInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_BeastInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_BeastInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_BeastInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_BeastInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_BeastInfoReq::MergeFrom(const Faction_BeastInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_BeastInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_BeastInfoReq::CopyFrom(const Faction_BeastInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_BeastInfoReq::IsInitialized() const {

  return true;
}

void Faction_BeastInfoReq::Swap(Faction_BeastInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_BeastInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_BeastInfoReq_descriptor_;
  metadata.reflection = Faction_BeastInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_BeastInfoRsp::kRankFieldNumber;
const int Faction_BeastInfoRsp::kMyrankFieldNumber;
const int Faction_BeastInfoRsp::kMyharmFieldNumber;
const int Faction_BeastInfoRsp::kStarFieldNumber;
const int Faction_BeastInfoRsp::kIsOpenFieldNumber;
const int Faction_BeastInfoRsp::kTodayCountFieldNumber;
const int Faction_BeastInfoRsp::kWeekCountFieldNumber;
const int Faction_BeastInfoRsp::kLevelFieldNumber;
const int Faction_BeastInfoRsp::kTributeFieldNumber;
#endif  // !_MSC_VER

Faction_BeastInfoRsp::Faction_BeastInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_BeastInfoRsp::InitAsDefaultInstance() {
  rank_ = const_cast< ::proto_ff::FactionBeastRankListProto*>(&::proto_ff::FactionBeastRankListProto::default_instance());
}

Faction_BeastInfoRsp::Faction_BeastInfoRsp(const Faction_BeastInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_BeastInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  rank_ = NULL;
  myrank_ = 0u;
  myharm_ = GOOGLE_LONGLONG(0);
  star_ = 0;
  is_open_ = 0;
  today_count_ = 0u;
  week_count_ = 0u;
  level_ = 0;
  tribute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_BeastInfoRsp::~Faction_BeastInfoRsp() {
  SharedDtor();
}

void Faction_BeastInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rank_;
  }
}

void Faction_BeastInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_BeastInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_BeastInfoRsp_descriptor_;
}

const Faction_BeastInfoRsp& Faction_BeastInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_BeastInfoRsp* Faction_BeastInfoRsp::default_instance_ = NULL;

Faction_BeastInfoRsp* Faction_BeastInfoRsp::New() const {
  return new Faction_BeastInfoRsp;
}

void Faction_BeastInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rank()) {
      if (rank_ != NULL) rank_->::proto_ff::FactionBeastRankListProto::Clear();
    }
    myrank_ = 0u;
    myharm_ = GOOGLE_LONGLONG(0);
    star_ = 0;
    is_open_ = 0;
    today_count_ = 0u;
    week_count_ = 0u;
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tribute_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_BeastInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionBeastRankListProto rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_myrank;
        break;
      }

      // optional uint32 myrank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_myharm;
        break;
      }

      // optional int64 myharm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myharm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &myharm_)));
          set_has_myharm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // optional int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_open;
        break;
      }

      // optional int32 is_open = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_today_count;
        break;
      }

      // optional uint32 today_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_count_)));
          set_has_today_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_week_count;
        break;
      }

      // optional uint32 week_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_count_)));
          set_has_week_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tribute;
        break;
      }

      // optional uint32 tribute = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tribute_)));
          set_has_tribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_BeastInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionBeastRankListProto rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(), output);
  }

  // optional uint32 myrank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myrank(), output);
  }

  // optional int64 myharm = 3;
  if (has_myharm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->myharm(), output);
  }

  // optional int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

  // optional int32 is_open = 5;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_open(), output);
  }

  // optional uint32 today_count = 6;
  if (has_today_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->today_count(), output);
  }

  // optional uint32 week_count = 7;
  if (has_week_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->week_count(), output);
  }

  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }

  // optional uint32 tribute = 9;
  if (has_tribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_BeastInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionBeastRankListProto rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(), target);
  }

  // optional uint32 myrank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myrank(), target);
  }

  // optional int64 myharm = 3;
  if (has_myharm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->myharm(), target);
  }

  // optional int32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star(), target);
  }

  // optional int32 is_open = 5;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_open(), target);
  }

  // optional uint32 today_count = 6;
  if (has_today_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->today_count(), target);
  }

  // optional uint32 week_count = 7;
  if (has_week_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->week_count(), target);
  }

  // optional int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }

  // optional uint32 tribute = 9;
  if (has_tribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_BeastInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionBeastRankListProto rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

    // optional uint32 myrank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

    // optional int64 myharm = 3;
    if (has_myharm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->myharm());
    }

    // optional int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 is_open = 5;
    if (has_is_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_open());
    }

    // optional uint32 today_count = 6;
    if (has_today_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_count());
    }

    // optional uint32 week_count = 7;
    if (has_week_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_count());
    }

    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 tribute = 9;
    if (has_tribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_BeastInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_BeastInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_BeastInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_BeastInfoRsp::MergeFrom(const Faction_BeastInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      mutable_rank()->::proto_ff::FactionBeastRankListProto::MergeFrom(from.rank());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_myharm()) {
      set_myharm(from.myharm());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
    if (from.has_today_count()) {
      set_today_count(from.today_count());
    }
    if (from.has_week_count()) {
      set_week_count(from.week_count());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tribute()) {
      set_tribute(from.tribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_BeastInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_BeastInfoRsp::CopyFrom(const Faction_BeastInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_BeastInfoRsp::IsInitialized() const {

  return true;
}

void Faction_BeastInfoRsp::Swap(Faction_BeastInfoRsp* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(myrank_, other->myrank_);
    std::swap(myharm_, other->myharm_);
    std::swap(star_, other->star_);
    std::swap(is_open_, other->is_open_);
    std::swap(today_count_, other->today_count_);
    std::swap(week_count_, other->week_count_);
    std::swap(level_, other->level_);
    std::swap(tribute_, other->tribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_BeastInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_BeastInfoRsp_descriptor_;
  metadata.reflection = Faction_BeastInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_BeastOpenInfoNotify::kIsOpenFieldNumber;
const int Faction_BeastOpenInfoNotify::kTodayCountFieldNumber;
const int Faction_BeastOpenInfoNotify::kWeekCountFieldNumber;
const int Faction_BeastOpenInfoNotify::kLevelFieldNumber;
const int Faction_BeastOpenInfoNotify::kTributeFieldNumber;
#endif  // !_MSC_VER

Faction_BeastOpenInfoNotify::Faction_BeastOpenInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_BeastOpenInfoNotify::InitAsDefaultInstance() {
}

Faction_BeastOpenInfoNotify::Faction_BeastOpenInfoNotify(const Faction_BeastOpenInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_BeastOpenInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  is_open_ = 0;
  today_count_ = 0u;
  week_count_ = 0u;
  level_ = 0;
  tribute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_BeastOpenInfoNotify::~Faction_BeastOpenInfoNotify() {
  SharedDtor();
}

void Faction_BeastOpenInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_BeastOpenInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_BeastOpenInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_BeastOpenInfoNotify_descriptor_;
}

const Faction_BeastOpenInfoNotify& Faction_BeastOpenInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_BeastOpenInfoNotify* Faction_BeastOpenInfoNotify::default_instance_ = NULL;

Faction_BeastOpenInfoNotify* Faction_BeastOpenInfoNotify::New() const {
  return new Faction_BeastOpenInfoNotify;
}

void Faction_BeastOpenInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_open_ = 0;
    today_count_ = 0u;
    week_count_ = 0u;
    level_ = 0;
    tribute_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_BeastOpenInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_open = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_today_count;
        break;
      }

      // optional uint32 today_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_count_)));
          set_has_today_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_week_count;
        break;
      }

      // optional uint32 week_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_count_)));
          set_has_week_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tribute;
        break;
      }

      // optional uint32 tribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tribute_)));
          set_has_tribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_BeastOpenInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_open = 1;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_open(), output);
  }

  // optional uint32 today_count = 2;
  if (has_today_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->today_count(), output);
  }

  // optional uint32 week_count = 3;
  if (has_week_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->week_count(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional uint32 tribute = 5;
  if (has_tribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_BeastOpenInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_open = 1;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_open(), target);
  }

  // optional uint32 today_count = 2;
  if (has_today_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->today_count(), target);
  }

  // optional uint32 week_count = 3;
  if (has_week_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->week_count(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional uint32 tribute = 5;
  if (has_tribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_BeastOpenInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_open = 1;
    if (has_is_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_open());
    }

    // optional uint32 today_count = 2;
    if (has_today_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_count());
    }

    // optional uint32 week_count = 3;
    if (has_week_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_count());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 tribute = 5;
    if (has_tribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_BeastOpenInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_BeastOpenInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_BeastOpenInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_BeastOpenInfoNotify::MergeFrom(const Faction_BeastOpenInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
    if (from.has_today_count()) {
      set_today_count(from.today_count());
    }
    if (from.has_week_count()) {
      set_week_count(from.week_count());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_tribute()) {
      set_tribute(from.tribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_BeastOpenInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_BeastOpenInfoNotify::CopyFrom(const Faction_BeastOpenInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_BeastOpenInfoNotify::IsInitialized() const {

  return true;
}

void Faction_BeastOpenInfoNotify::Swap(Faction_BeastOpenInfoNotify* other) {
  if (other != this) {
    std::swap(is_open_, other->is_open_);
    std::swap(today_count_, other->today_count_);
    std::swap(week_count_, other->week_count_);
    std::swap(level_, other->level_);
    std::swap(tribute_, other->tribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_BeastOpenInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_BeastOpenInfoNotify_descriptor_;
  metadata.reflection = Faction_BeastOpenInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_BeastOpenReq::Faction_BeastOpenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_BeastOpenReq::InitAsDefaultInstance() {
}

Faction_BeastOpenReq::Faction_BeastOpenReq(const Faction_BeastOpenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_BeastOpenReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_BeastOpenReq::~Faction_BeastOpenReq() {
  SharedDtor();
}

void Faction_BeastOpenReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_BeastOpenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_BeastOpenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_BeastOpenReq_descriptor_;
}

const Faction_BeastOpenReq& Faction_BeastOpenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_BeastOpenReq* Faction_BeastOpenReq::default_instance_ = NULL;

Faction_BeastOpenReq* Faction_BeastOpenReq::New() const {
  return new Faction_BeastOpenReq;
}

void Faction_BeastOpenReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_BeastOpenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_BeastOpenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_BeastOpenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_BeastOpenReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_BeastOpenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_BeastOpenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_BeastOpenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_BeastOpenReq::MergeFrom(const Faction_BeastOpenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_BeastOpenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_BeastOpenReq::CopyFrom(const Faction_BeastOpenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_BeastOpenReq::IsInitialized() const {

  return true;
}

void Faction_BeastOpenReq::Swap(Faction_BeastOpenReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_BeastOpenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_BeastOpenReq_descriptor_;
  metadata.reflection = Faction_BeastOpenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_BeastOpenRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Faction_BeastOpenRsp::Faction_BeastOpenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_BeastOpenRsp::InitAsDefaultInstance() {
}

Faction_BeastOpenRsp::Faction_BeastOpenRsp(const Faction_BeastOpenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_BeastOpenRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_BeastOpenRsp::~Faction_BeastOpenRsp() {
  SharedDtor();
}

void Faction_BeastOpenRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_BeastOpenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_BeastOpenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_BeastOpenRsp_descriptor_;
}

const Faction_BeastOpenRsp& Faction_BeastOpenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_BeastOpenRsp* Faction_BeastOpenRsp::default_instance_ = NULL;

Faction_BeastOpenRsp* Faction_BeastOpenRsp::New() const {
  return new Faction_BeastOpenRsp;
}

void Faction_BeastOpenRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_BeastOpenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_BeastOpenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_BeastOpenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_BeastOpenRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_BeastOpenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_BeastOpenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_BeastOpenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_BeastOpenRsp::MergeFrom(const Faction_BeastOpenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_BeastOpenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_BeastOpenRsp::CopyFrom(const Faction_BeastOpenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_BeastOpenRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_BeastOpenRsp::Swap(Faction_BeastOpenRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_BeastOpenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_BeastOpenRsp_descriptor_;
  metadata.reflection = Faction_BeastOpenRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_BeastCurHarmRankRsp::kRankFieldNumber;
const int Faction_BeastCurHarmRankRsp::kMyharmFieldNumber;
#endif  // !_MSC_VER

Faction_BeastCurHarmRankRsp::Faction_BeastCurHarmRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_BeastCurHarmRankRsp::InitAsDefaultInstance() {
  rank_ = const_cast< ::proto_ff::FactionBeastRankListProto*>(&::proto_ff::FactionBeastRankListProto::default_instance());
}

Faction_BeastCurHarmRankRsp::Faction_BeastCurHarmRankRsp(const Faction_BeastCurHarmRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_BeastCurHarmRankRsp::SharedCtor() {
  _cached_size_ = 0;
  rank_ = NULL;
  myharm_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_BeastCurHarmRankRsp::~Faction_BeastCurHarmRankRsp() {
  SharedDtor();
}

void Faction_BeastCurHarmRankRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rank_;
  }
}

void Faction_BeastCurHarmRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_BeastCurHarmRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_BeastCurHarmRankRsp_descriptor_;
}

const Faction_BeastCurHarmRankRsp& Faction_BeastCurHarmRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_BeastCurHarmRankRsp* Faction_BeastCurHarmRankRsp::default_instance_ = NULL;

Faction_BeastCurHarmRankRsp* Faction_BeastCurHarmRankRsp::New() const {
  return new Faction_BeastCurHarmRankRsp;
}

void Faction_BeastCurHarmRankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rank()) {
      if (rank_ != NULL) rank_->::proto_ff::FactionBeastRankListProto::Clear();
    }
    myharm_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_BeastCurHarmRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionBeastRankListProto rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_myharm;
        break;
      }

      // optional int64 myharm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myharm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &myharm_)));
          set_has_myharm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_BeastCurHarmRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionBeastRankListProto rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(), output);
  }

  // optional int64 myharm = 2;
  if (has_myharm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->myharm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_BeastCurHarmRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionBeastRankListProto rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(), target);
  }

  // optional int64 myharm = 2;
  if (has_myharm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->myharm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_BeastCurHarmRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionBeastRankListProto rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

    // optional int64 myharm = 2;
    if (has_myharm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->myharm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_BeastCurHarmRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_BeastCurHarmRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_BeastCurHarmRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_BeastCurHarmRankRsp::MergeFrom(const Faction_BeastCurHarmRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      mutable_rank()->::proto_ff::FactionBeastRankListProto::MergeFrom(from.rank());
    }
    if (from.has_myharm()) {
      set_myharm(from.myharm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_BeastCurHarmRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_BeastCurHarmRankRsp::CopyFrom(const Faction_BeastCurHarmRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_BeastCurHarmRankRsp::IsInitialized() const {

  return true;
}

void Faction_BeastCurHarmRankRsp::Swap(Faction_BeastCurHarmRankRsp* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(myharm_, other->myharm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_BeastCurHarmRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_BeastCurHarmRankRsp_descriptor_;
  metadata.reflection = Faction_BeastCurHarmRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_BeastFinishRsp::kSecFieldNumber;
const int Faction_BeastFinishRsp::kStarFieldNumber;
const int Faction_BeastFinishRsp::kHarmFieldNumber;
const int Faction_BeastFinishRsp::kRankFieldNumber;
const int Faction_BeastFinishRsp::kRewardFieldNumber;
const int Faction_BeastFinishRsp::kFactionRewardFieldNumber;
#endif  // !_MSC_VER

Faction_BeastFinishRsp::Faction_BeastFinishRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_BeastFinishRsp::InitAsDefaultInstance() {
}

Faction_BeastFinishRsp::Faction_BeastFinishRsp(const Faction_BeastFinishRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_BeastFinishRsp::SharedCtor() {
  _cached_size_ = 0;
  sec_ = 0;
  star_ = 0;
  harm_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_BeastFinishRsp::~Faction_BeastFinishRsp() {
  SharedDtor();
}

void Faction_BeastFinishRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_BeastFinishRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_BeastFinishRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_BeastFinishRsp_descriptor_;
}

const Faction_BeastFinishRsp& Faction_BeastFinishRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_BeastFinishRsp* Faction_BeastFinishRsp::default_instance_ = NULL;

Faction_BeastFinishRsp* Faction_BeastFinishRsp::New() const {
  return new Faction_BeastFinishRsp;
}

void Faction_BeastFinishRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sec_ = 0;
    star_ = 0;
    harm_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
  }
  reward_.Clear();
  faction_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_BeastFinishRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_harm;
        break;
      }

      // optional int64 harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ComItem reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        if (input->ExpectTag(50)) goto parse_faction_reward;
        break;
      }

      // repeated .proto_ff.ComItem faction_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faction_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faction_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_faction_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_BeastFinishRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sec = 1;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sec(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // optional int64 harm = 3;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->harm(), output);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // repeated .proto_ff.ComItem reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(i), output);
  }

  // repeated .proto_ff.ComItem faction_reward = 6;
  for (int i = 0; i < this->faction_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->faction_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_BeastFinishRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sec = 1;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sec(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // optional int64 harm = 3;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->harm(), target);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // repeated .proto_ff.ComItem reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(i), target);
  }

  // repeated .proto_ff.ComItem faction_reward = 6;
  for (int i = 0; i < this->faction_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->faction_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_BeastFinishRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sec = 1;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sec());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int64 harm = 3;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->harm());
    }

    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  // repeated .proto_ff.ComItem reward = 5;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .proto_ff.ComItem faction_reward = 6;
  total_size += 1 * this->faction_reward_size();
  for (int i = 0; i < this->faction_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faction_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_BeastFinishRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_BeastFinishRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_BeastFinishRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_BeastFinishRsp::MergeFrom(const Faction_BeastFinishRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  faction_reward_.MergeFrom(from.faction_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_BeastFinishRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_BeastFinishRsp::CopyFrom(const Faction_BeastFinishRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_BeastFinishRsp::IsInitialized() const {

  return true;
}

void Faction_BeastFinishRsp::Swap(Faction_BeastFinishRsp* other) {
  if (other != this) {
    std::swap(sec_, other->sec_);
    std::swap(star_, other->star_);
    std::swap(harm_, other->harm_);
    std::swap(rank_, other->rank_);
    reward_.Swap(&other->reward_);
    faction_reward_.Swap(&other->faction_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_BeastFinishRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_BeastFinishRsp_descriptor_;
  metadata.reflection = Faction_BeastFinishRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CL_FactionRoleUpdateRsp::kCidFieldNumber;
const int CL_FactionRoleUpdateRsp::kFactionIdFieldNumber;
const int CL_FactionRoleUpdateRsp::kNameFieldNumber;
const int CL_FactionRoleUpdateRsp::kDutyFieldNumber;
const int CL_FactionRoleUpdateRsp::kLevelFieldNumber;
const int CL_FactionRoleUpdateRsp::kLeaderFieldNumber;
#endif  // !_MSC_VER

CL_FactionRoleUpdateRsp::CL_FactionRoleUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CL_FactionRoleUpdateRsp::InitAsDefaultInstance() {
}

CL_FactionRoleUpdateRsp::CL_FactionRoleUpdateRsp(const CL_FactionRoleUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CL_FactionRoleUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duty_ = 0;
  level_ = 0;
  leader_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CL_FactionRoleUpdateRsp::~CL_FactionRoleUpdateRsp() {
  SharedDtor();
}

void CL_FactionRoleUpdateRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CL_FactionRoleUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CL_FactionRoleUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CL_FactionRoleUpdateRsp_descriptor_;
}

const CL_FactionRoleUpdateRsp& CL_FactionRoleUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

CL_FactionRoleUpdateRsp* CL_FactionRoleUpdateRsp::default_instance_ = NULL;

CL_FactionRoleUpdateRsp* CL_FactionRoleUpdateRsp::New() const {
  return new CL_FactionRoleUpdateRsp;
}

void CL_FactionRoleUpdateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    duty_ = 0;
    level_ = 0;
    leader_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CL_FactionRoleUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faction_id;
        break;
      }

      // required uint32 faction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duty;
        break;
      }

      // required int32 duty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leader;
        break;
      }

      // required uint64 leader = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CL_FactionRoleUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 faction_id = 2;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->faction_id(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // required int32 duty = 4;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duty(), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // required uint64 leader = 6;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CL_FactionRoleUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 faction_id = 2;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->faction_id(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int32 duty = 4;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duty(), target);
  }

  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // required uint64 leader = 6;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CL_FactionRoleUpdateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 faction_id = 2;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 duty = 4;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required uint64 leader = 6;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CL_FactionRoleUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CL_FactionRoleUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CL_FactionRoleUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CL_FactionRoleUpdateRsp::MergeFrom(const CL_FactionRoleUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CL_FactionRoleUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CL_FactionRoleUpdateRsp::CopyFrom(const CL_FactionRoleUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CL_FactionRoleUpdateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CL_FactionRoleUpdateRsp::Swap(CL_FactionRoleUpdateRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(duty_, other->duty_);
    std::swap(level_, other->level_);
    std::swap(leader_, other->leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CL_FactionRoleUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CL_FactionRoleUpdateRsp_descriptor_;
  metadata.reflection = CL_FactionRoleUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LC_FactionCreate::kCidFieldNumber;
const int LC_FactionCreate::kNameFieldNumber;
const int LC_FactionCreate::kNoticeFieldNumber;
#endif  // !_MSC_VER

LC_FactionCreate::LC_FactionCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LC_FactionCreate::InitAsDefaultInstance() {
}

LC_FactionCreate::LC_FactionCreate(const LC_FactionCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LC_FactionCreate::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LC_FactionCreate::~LC_FactionCreate() {
  SharedDtor();
}

void LC_FactionCreate::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void LC_FactionCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LC_FactionCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LC_FactionCreate_descriptor_;
}

const LC_FactionCreate& LC_FactionCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LC_FactionCreate* LC_FactionCreate::default_instance_ = NULL;

LC_FactionCreate* LC_FactionCreate::New() const {
  return new LC_FactionCreate;
}

void LC_FactionCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LC_FactionCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notice;
        break;
      }

      // required bytes notice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LC_FactionCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required bytes notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LC_FactionCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes notice = 3;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LC_FactionCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes notice = 3;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LC_FactionCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LC_FactionCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LC_FactionCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LC_FactionCreate::MergeFrom(const LC_FactionCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LC_FactionCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_FactionCreate::CopyFrom(const LC_FactionCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_FactionCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LC_FactionCreate::Swap(LC_FactionCreate* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LC_FactionCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LC_FactionCreate_descriptor_;
  metadata.reflection = LC_FactionCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CL_FactionCreateResult::kCidFieldNumber;
#endif  // !_MSC_VER

CL_FactionCreateResult::CL_FactionCreateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CL_FactionCreateResult::InitAsDefaultInstance() {
}

CL_FactionCreateResult::CL_FactionCreateResult(const CL_FactionCreateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CL_FactionCreateResult::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CL_FactionCreateResult::~CL_FactionCreateResult() {
  SharedDtor();
}

void CL_FactionCreateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CL_FactionCreateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CL_FactionCreateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CL_FactionCreateResult_descriptor_;
}

const CL_FactionCreateResult& CL_FactionCreateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

CL_FactionCreateResult* CL_FactionCreateResult::default_instance_ = NULL;

CL_FactionCreateResult* CL_FactionCreateResult::New() const {
  return new CL_FactionCreateResult;
}

void CL_FactionCreateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CL_FactionCreateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CL_FactionCreateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CL_FactionCreateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CL_FactionCreateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CL_FactionCreateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CL_FactionCreateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CL_FactionCreateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CL_FactionCreateResult::MergeFrom(const CL_FactionCreateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CL_FactionCreateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CL_FactionCreateResult::CopyFrom(const CL_FactionCreateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CL_FactionCreateResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CL_FactionCreateResult::Swap(CL_FactionCreateResult* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CL_FactionCreateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CL_FactionCreateResult_descriptor_;
  metadata.reflection = CL_FactionCreateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LC_FactionChgName::kCidFieldNumber;
const int LC_FactionChgName::kNameFieldNumber;
#endif  // !_MSC_VER

LC_FactionChgName::LC_FactionChgName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LC_FactionChgName::InitAsDefaultInstance() {
}

LC_FactionChgName::LC_FactionChgName(const LC_FactionChgName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LC_FactionChgName::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LC_FactionChgName::~LC_FactionChgName() {
  SharedDtor();
}

void LC_FactionChgName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LC_FactionChgName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LC_FactionChgName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LC_FactionChgName_descriptor_;
}

const LC_FactionChgName& LC_FactionChgName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LC_FactionChgName* LC_FactionChgName::default_instance_ = NULL;

LC_FactionChgName* LC_FactionChgName::New() const {
  return new LC_FactionChgName;
}

void LC_FactionChgName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LC_FactionChgName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LC_FactionChgName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LC_FactionChgName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LC_FactionChgName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LC_FactionChgName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LC_FactionChgName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LC_FactionChgName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LC_FactionChgName::MergeFrom(const LC_FactionChgName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LC_FactionChgName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_FactionChgName::CopyFrom(const LC_FactionChgName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_FactionChgName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LC_FactionChgName::Swap(LC_FactionChgName* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LC_FactionChgName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LC_FactionChgName_descriptor_;
  metadata.reflection = LC_FactionChgName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CL_FactionChgNameResult::kRetFieldNumber;
const int CL_FactionChgNameResult::kCidFieldNumber;
#endif  // !_MSC_VER

CL_FactionChgNameResult::CL_FactionChgNameResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CL_FactionChgNameResult::InitAsDefaultInstance() {
}

CL_FactionChgNameResult::CL_FactionChgNameResult(const CL_FactionChgNameResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CL_FactionChgNameResult::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CL_FactionChgNameResult::~CL_FactionChgNameResult() {
  SharedDtor();
}

void CL_FactionChgNameResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CL_FactionChgNameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CL_FactionChgNameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CL_FactionChgNameResult_descriptor_;
}

const CL_FactionChgNameResult& CL_FactionChgNameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

CL_FactionChgNameResult* CL_FactionChgNameResult::default_instance_ = NULL;

CL_FactionChgNameResult* CL_FactionChgNameResult::New() const {
  return new CL_FactionChgNameResult;
}

void CL_FactionChgNameResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CL_FactionChgNameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CL_FactionChgNameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CL_FactionChgNameResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CL_FactionChgNameResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CL_FactionChgNameResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CL_FactionChgNameResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CL_FactionChgNameResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CL_FactionChgNameResult::MergeFrom(const CL_FactionChgNameResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CL_FactionChgNameResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CL_FactionChgNameResult::CopyFrom(const CL_FactionChgNameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CL_FactionChgNameResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CL_FactionChgNameResult::Swap(CL_FactionChgNameResult* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CL_FactionChgNameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CL_FactionChgNameResult_descriptor_;
  metadata.reflection = CL_FactionChgNameResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CL_FactionDismissNotify::kFactionIdFieldNumber;
#endif  // !_MSC_VER

CL_FactionDismissNotify::CL_FactionDismissNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CL_FactionDismissNotify::InitAsDefaultInstance() {
}

CL_FactionDismissNotify::CL_FactionDismissNotify(const CL_FactionDismissNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CL_FactionDismissNotify::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CL_FactionDismissNotify::~CL_FactionDismissNotify() {
  SharedDtor();
}

void CL_FactionDismissNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CL_FactionDismissNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CL_FactionDismissNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CL_FactionDismissNotify_descriptor_;
}

const CL_FactionDismissNotify& CL_FactionDismissNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

CL_FactionDismissNotify* CL_FactionDismissNotify::default_instance_ = NULL;

CL_FactionDismissNotify* CL_FactionDismissNotify::New() const {
  return new CL_FactionDismissNotify;
}

void CL_FactionDismissNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CL_FactionDismissNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CL_FactionDismissNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CL_FactionDismissNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CL_FactionDismissNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CL_FactionDismissNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CL_FactionDismissNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CL_FactionDismissNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CL_FactionDismissNotify::MergeFrom(const CL_FactionDismissNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CL_FactionDismissNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CL_FactionDismissNotify::CopyFrom(const CL_FactionDismissNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CL_FactionDismissNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CL_FactionDismissNotify::Swap(CL_FactionDismissNotify* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CL_FactionDismissNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CL_FactionDismissNotify_descriptor_;
  metadata.reflection = CL_FactionDismissNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LC_FactionAddAttrReq::kFactionIdFieldNumber;
const int LC_FactionAddAttrReq::kExpFieldNumber;
const int LC_FactionAddAttrReq::kTributeFieldNumber;
#endif  // !_MSC_VER

LC_FactionAddAttrReq::LC_FactionAddAttrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LC_FactionAddAttrReq::InitAsDefaultInstance() {
}

LC_FactionAddAttrReq::LC_FactionAddAttrReq(const LC_FactionAddAttrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LC_FactionAddAttrReq::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  exp_ = 0u;
  tribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LC_FactionAddAttrReq::~LC_FactionAddAttrReq() {
  SharedDtor();
}

void LC_FactionAddAttrReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LC_FactionAddAttrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LC_FactionAddAttrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LC_FactionAddAttrReq_descriptor_;
}

const LC_FactionAddAttrReq& LC_FactionAddAttrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LC_FactionAddAttrReq* LC_FactionAddAttrReq::default_instance_ = NULL;

LC_FactionAddAttrReq* LC_FactionAddAttrReq::New() const {
  return new LC_FactionAddAttrReq;
}

void LC_FactionAddAttrReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    exp_ = 0u;
    tribute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LC_FactionAddAttrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tribute;
        break;
      }

      // optional int32 tribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tribute_)));
          set_has_tribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LC_FactionAddAttrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // optional int32 tribute = 3;
  if (has_tribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LC_FactionAddAttrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional uint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  // optional int32 tribute = 3;
  if (has_tribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LC_FactionAddAttrReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional int32 tribute = 3;
    if (has_tribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LC_FactionAddAttrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LC_FactionAddAttrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LC_FactionAddAttrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LC_FactionAddAttrReq::MergeFrom(const LC_FactionAddAttrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_tribute()) {
      set_tribute(from.tribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LC_FactionAddAttrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_FactionAddAttrReq::CopyFrom(const LC_FactionAddAttrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_FactionAddAttrReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LC_FactionAddAttrReq::Swap(LC_FactionAddAttrReq* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(exp_, other->exp_);
    std::swap(tribute_, other->tribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LC_FactionAddAttrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LC_FactionAddAttrReq_descriptor_;
  metadata.reflection = LC_FactionAddAttrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LS_FactionAnswerCount::kFactionIdFieldNumber;
const int LS_FactionAnswerCount::kFactionNameFieldNumber;
const int LS_FactionAnswerCount::kCountFieldNumber;
const int LS_FactionAnswerCount::kZidFieldNumber;
#endif  // !_MSC_VER

LS_FactionAnswerCount::LS_FactionAnswerCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LS_FactionAnswerCount::InitAsDefaultInstance() {
}

LS_FactionAnswerCount::LS_FactionAnswerCount(const LS_FactionAnswerCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LS_FactionAnswerCount::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0u;
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LS_FactionAnswerCount::~LS_FactionAnswerCount() {
  SharedDtor();
}

void LS_FactionAnswerCount::SharedDtor() {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete faction_name_;
  }
  if (this != default_instance_) {
  }
}

void LS_FactionAnswerCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LS_FactionAnswerCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LS_FactionAnswerCount_descriptor_;
}

const LS_FactionAnswerCount& LS_FactionAnswerCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LS_FactionAnswerCount* LS_FactionAnswerCount::default_instance_ = NULL;

LS_FactionAnswerCount* LS_FactionAnswerCount::New() const {
  return new LS_FactionAnswerCount;
}

void LS_FactionAnswerCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_faction_name()) {
      if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
        faction_name_->clear();
      }
    }
    count_ = 0u;
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LS_FactionAnswerCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_faction_name;
        break;
      }

      // required bytes faction_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faction_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_faction_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // required uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LS_FactionAnswerCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // required bytes faction_name = 2;
  if (has_faction_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->faction_name(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LS_FactionAnswerCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // required bytes faction_name = 2;
  if (has_faction_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->faction_name(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LS_FactionAnswerCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // required bytes faction_name = 2;
    if (has_faction_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->faction_name());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LS_FactionAnswerCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LS_FactionAnswerCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LS_FactionAnswerCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LS_FactionAnswerCount::MergeFrom(const LS_FactionAnswerCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_faction_name()) {
      set_faction_name(from.faction_name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LS_FactionAnswerCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LS_FactionAnswerCount::CopyFrom(const LS_FactionAnswerCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LS_FactionAnswerCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LS_FactionAnswerCount::Swap(LS_FactionAnswerCount* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(faction_name_, other->faction_name_);
    std::swap(count_, other->count_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LS_FactionAnswerCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LS_FactionAnswerCount_descriptor_;
  metadata.reflection = LS_FactionAnswerCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SL_FactionAnswerRank::kRankFieldNumber;
#endif  // !_MSC_VER

SL_FactionAnswerRank::SL_FactionAnswerRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SL_FactionAnswerRank::InitAsDefaultInstance() {
  rank_ = const_cast< ::proto_ff::FactionAnswerRankListProto*>(&::proto_ff::FactionAnswerRankListProto::default_instance());
}

SL_FactionAnswerRank::SL_FactionAnswerRank(const SL_FactionAnswerRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SL_FactionAnswerRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SL_FactionAnswerRank::~SL_FactionAnswerRank() {
  SharedDtor();
}

void SL_FactionAnswerRank::SharedDtor() {
  if (this != default_instance_) {
    delete rank_;
  }
}

void SL_FactionAnswerRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SL_FactionAnswerRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SL_FactionAnswerRank_descriptor_;
}

const SL_FactionAnswerRank& SL_FactionAnswerRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

SL_FactionAnswerRank* SL_FactionAnswerRank::default_instance_ = NULL;

SL_FactionAnswerRank* SL_FactionAnswerRank::New() const {
  return new SL_FactionAnswerRank;
}

void SL_FactionAnswerRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rank()) {
      if (rank_ != NULL) rank_->::proto_ff::FactionAnswerRankListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SL_FactionAnswerRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionAnswerRankListProto rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SL_FactionAnswerRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionAnswerRankListProto rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SL_FactionAnswerRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionAnswerRankListProto rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SL_FactionAnswerRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionAnswerRankListProto rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SL_FactionAnswerRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SL_FactionAnswerRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SL_FactionAnswerRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SL_FactionAnswerRank::MergeFrom(const SL_FactionAnswerRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      mutable_rank()->::proto_ff::FactionAnswerRankListProto::MergeFrom(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SL_FactionAnswerRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SL_FactionAnswerRank::CopyFrom(const SL_FactionAnswerRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SL_FactionAnswerRank::IsInitialized() const {

  return true;
}

void SL_FactionAnswerRank::Swap(SL_FactionAnswerRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SL_FactionAnswerRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SL_FactionAnswerRank_descriptor_;
  metadata.reflection = SL_FactionAnswerRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SL_FactionAnswerCurRankReq::kCidFieldNumber;
#endif  // !_MSC_VER

SL_FactionAnswerCurRankReq::SL_FactionAnswerCurRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SL_FactionAnswerCurRankReq::InitAsDefaultInstance() {
}

SL_FactionAnswerCurRankReq::SL_FactionAnswerCurRankReq(const SL_FactionAnswerCurRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SL_FactionAnswerCurRankReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SL_FactionAnswerCurRankReq::~SL_FactionAnswerCurRankReq() {
  SharedDtor();
}

void SL_FactionAnswerCurRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SL_FactionAnswerCurRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SL_FactionAnswerCurRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SL_FactionAnswerCurRankReq_descriptor_;
}

const SL_FactionAnswerCurRankReq& SL_FactionAnswerCurRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

SL_FactionAnswerCurRankReq* SL_FactionAnswerCurRankReq::default_instance_ = NULL;

SL_FactionAnswerCurRankReq* SL_FactionAnswerCurRankReq::New() const {
  return new SL_FactionAnswerCurRankReq;
}

void SL_FactionAnswerCurRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SL_FactionAnswerCurRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SL_FactionAnswerCurRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SL_FactionAnswerCurRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SL_FactionAnswerCurRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SL_FactionAnswerCurRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SL_FactionAnswerCurRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SL_FactionAnswerCurRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SL_FactionAnswerCurRankReq::MergeFrom(const SL_FactionAnswerCurRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SL_FactionAnswerCurRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SL_FactionAnswerCurRankReq::CopyFrom(const SL_FactionAnswerCurRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SL_FactionAnswerCurRankReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SL_FactionAnswerCurRankReq::Swap(SL_FactionAnswerCurRankReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SL_FactionAnswerCurRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SL_FactionAnswerCurRankReq_descriptor_;
  metadata.reflection = SL_FactionAnswerCurRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FactionAnswerRankRsp::kFactionidFieldNumber;
const int SC_FactionAnswerRankRsp::kRankFieldNumber;
#endif  // !_MSC_VER

SC_FactionAnswerRankRsp::SC_FactionAnswerRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FactionAnswerRankRsp::InitAsDefaultInstance() {
}

SC_FactionAnswerRankRsp::SC_FactionAnswerRankRsp(const SC_FactionAnswerRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FactionAnswerRankRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FactionAnswerRankRsp::~SC_FactionAnswerRankRsp() {
  SharedDtor();
}

void SC_FactionAnswerRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FactionAnswerRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FactionAnswerRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FactionAnswerRankRsp_descriptor_;
}

const SC_FactionAnswerRankRsp& SC_FactionAnswerRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

SC_FactionAnswerRankRsp* SC_FactionAnswerRankRsp::default_instance_ = NULL;

SC_FactionAnswerRankRsp* SC_FactionAnswerRankRsp::New() const {
  return new SC_FactionAnswerRankRsp;
}

void SC_FactionAnswerRankRsp::Clear() {
  factionid_.Clear();
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FactionAnswerRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_factionid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_factionid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_factionid;
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // repeated uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_rank())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rank())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FactionAnswerRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 factionid = 1;
  for (int i = 0; i < this->factionid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->factionid(i), output);
  }

  // repeated uint32 rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->rank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FactionAnswerRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 factionid = 1;
  for (int i = 0; i < this->factionid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->factionid(i), target);
  }

  // repeated uint32 rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->rank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FactionAnswerRankRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 factionid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->factionid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->factionid(i));
    }
    total_size += 1 * this->factionid_size() + data_size;
  }

  // repeated uint32 rank = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rank_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rank(i));
    }
    total_size += 1 * this->rank_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FactionAnswerRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FactionAnswerRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FactionAnswerRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FactionAnswerRankRsp::MergeFrom(const SC_FactionAnswerRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  factionid_.MergeFrom(from.factionid_);
  rank_.MergeFrom(from.rank_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FactionAnswerRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FactionAnswerRankRsp::CopyFrom(const SC_FactionAnswerRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FactionAnswerRankRsp::IsInitialized() const {

  return true;
}

void SC_FactionAnswerRankRsp::Swap(SC_FactionAnswerRankRsp* other) {
  if (other != this) {
    factionid_.Swap(&other->factionid_);
    rank_.Swap(&other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FactionAnswerRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FactionAnswerRankRsp_descriptor_;
  metadata.reflection = SC_FactionAnswerRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LS_FactionAnswerEndRsp::kFactionidFieldNumber;
const int LS_FactionAnswerEndRsp::kZidFieldNumber;
const int LS_FactionAnswerEndRsp::kEndtimeFieldNumber;
const int LS_FactionAnswerEndRsp::kCidFieldNumber;
const int LS_FactionAnswerEndRsp::kCountFieldNumber;
const int LS_FactionAnswerEndRsp::kPlayerNameFieldNumber;
const int LS_FactionAnswerEndRsp::kSecFieldNumber;
const int LS_FactionAnswerEndRsp::kFactionCountFieldNumber;
#endif  // !_MSC_VER

LS_FactionAnswerEndRsp::LS_FactionAnswerEndRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LS_FactionAnswerEndRsp::InitAsDefaultInstance() {
}

LS_FactionAnswerEndRsp::LS_FactionAnswerEndRsp(const LS_FactionAnswerEndRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LS_FactionAnswerEndRsp::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  zid_ = 0u;
  endtime_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sec_ = 0;
  faction_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LS_FactionAnswerEndRsp::~LS_FactionAnswerEndRsp() {
  SharedDtor();
}

void LS_FactionAnswerEndRsp::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void LS_FactionAnswerEndRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LS_FactionAnswerEndRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LS_FactionAnswerEndRsp_descriptor_;
}

const LS_FactionAnswerEndRsp& LS_FactionAnswerEndRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LS_FactionAnswerEndRsp* LS_FactionAnswerEndRsp::default_instance_ = NULL;

LS_FactionAnswerEndRsp* LS_FactionAnswerEndRsp::New() const {
  return new LS_FactionAnswerEndRsp;
}

void LS_FactionAnswerEndRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    zid_ = 0u;
    endtime_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    sec_ = 0;
    faction_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LS_FactionAnswerEndRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // required uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // required uint64 endtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cid;
        break;
      }

      // required uint64 cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // required uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_player_name;
        break;
      }

      // required bytes player_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sec;
        break;
      }

      // required int32 sec = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_faction_count;
        break;
      }

      // required uint32 faction_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_count_)));
          set_has_faction_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LS_FactionAnswerEndRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // required uint64 endtime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  // required uint64 cid = 4;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cid(), output);
  }

  // required uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  // required bytes player_name = 6;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->player_name(), output);
  }

  // required int32 sec = 7;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sec(), output);
  }

  // required uint32 faction_count = 8;
  if (has_faction_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->faction_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LS_FactionAnswerEndRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // required uint64 endtime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  // required uint64 cid = 4;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cid(), target);
  }

  // required uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  // required bytes player_name = 6;
  if (has_player_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->player_name(), target);
  }

  // required int32 sec = 7;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sec(), target);
  }

  // required uint32 faction_count = 8;
  if (has_faction_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->faction_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LS_FactionAnswerEndRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }

    // required uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required uint64 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // required uint64 cid = 4;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required bytes player_name = 6;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_name());
    }

    // required int32 sec = 7;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sec());
    }

    // required uint32 faction_count = 8;
    if (has_faction_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LS_FactionAnswerEndRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LS_FactionAnswerEndRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LS_FactionAnswerEndRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LS_FactionAnswerEndRsp::MergeFrom(const LS_FactionAnswerEndRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_faction_count()) {
      set_faction_count(from.faction_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LS_FactionAnswerEndRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LS_FactionAnswerEndRsp::CopyFrom(const LS_FactionAnswerEndRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LS_FactionAnswerEndRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void LS_FactionAnswerEndRsp::Swap(LS_FactionAnswerEndRsp* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(zid_, other->zid_);
    std::swap(endtime_, other->endtime_);
    std::swap(cid_, other->cid_);
    std::swap(count_, other->count_);
    std::swap(player_name_, other->player_name_);
    std::swap(sec_, other->sec_);
    std::swap(faction_count_, other->faction_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LS_FactionAnswerEndRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LS_FactionAnswerEndRsp_descriptor_;
  metadata.reflection = LS_FactionAnswerEndRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LC_FactionBeastFinishRsp::kFactionidFieldNumber;
const int LC_FactionBeastFinishRsp::kCidLstFieldNumber;
const int LC_FactionBeastFinishRsp::kHarmLstFieldNumber;
const int LC_FactionBeastFinishRsp::kStarFieldNumber;
const int LC_FactionBeastFinishRsp::kRewardFieldNumber;
#endif  // !_MSC_VER

LC_FactionBeastFinishRsp::LC_FactionBeastFinishRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LC_FactionBeastFinishRsp::InitAsDefaultInstance() {
}

LC_FactionBeastFinishRsp::LC_FactionBeastFinishRsp(const LC_FactionBeastFinishRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LC_FactionBeastFinishRsp::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LC_FactionBeastFinishRsp::~LC_FactionBeastFinishRsp() {
  SharedDtor();
}

void LC_FactionBeastFinishRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LC_FactionBeastFinishRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LC_FactionBeastFinishRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LC_FactionBeastFinishRsp_descriptor_;
}

const LC_FactionBeastFinishRsp& LC_FactionBeastFinishRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LC_FactionBeastFinishRsp* LC_FactionBeastFinishRsp::default_instance_ = NULL;

LC_FactionBeastFinishRsp* LC_FactionBeastFinishRsp::New() const {
  return new LC_FactionBeastFinishRsp;
}

void LC_FactionBeastFinishRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    star_ = 0;
  }
  cid_lst_.Clear();
  harm_lst_.Clear();
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LC_FactionBeastFinishRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid_lst;
        break;
      }

      // repeated uint64 cid_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_cid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid_lst;
        if (input->ExpectTag(24)) goto parse_harm_lst;
        break;
      }

      // repeated int64 harm_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_harm_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_harm_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_harm_lst;
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // optional int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ComItemBind reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LC_FactionBeastFinishRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }

  // repeated uint64 cid_lst = 2;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->cid_lst(i), output);
  }

  // repeated int64 harm_lst = 3;
  for (int i = 0; i < this->harm_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->harm_lst(i), output);
  }

  // optional int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

  // repeated .proto_ff.ComItemBind reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LC_FactionBeastFinishRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }

  // repeated uint64 cid_lst = 2;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->cid_lst(i), target);
  }

  // repeated int64 harm_lst = 3;
  for (int i = 0; i < this->harm_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->harm_lst(i), target);
  }

  // optional int32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star(), target);
  }

  // repeated .proto_ff.ComItemBind reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LC_FactionBeastFinishRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }

    // optional int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  // repeated uint64 cid_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_lst(i));
    }
    total_size += 1 * this->cid_lst_size() + data_size;
  }

  // repeated int64 harm_lst = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->harm_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->harm_lst(i));
    }
    total_size += 1 * this->harm_lst_size() + data_size;
  }

  // repeated .proto_ff.ComItemBind reward = 5;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LC_FactionBeastFinishRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LC_FactionBeastFinishRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LC_FactionBeastFinishRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LC_FactionBeastFinishRsp::MergeFrom(const LC_FactionBeastFinishRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_lst_.MergeFrom(from.cid_lst_);
  harm_lst_.MergeFrom(from.harm_lst_);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LC_FactionBeastFinishRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_FactionBeastFinishRsp::CopyFrom(const LC_FactionBeastFinishRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_FactionBeastFinishRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LC_FactionBeastFinishRsp::Swap(LC_FactionBeastFinishRsp* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    cid_lst_.Swap(&other->cid_lst_);
    harm_lst_.Swap(&other->harm_lst_);
    std::swap(star_, other->star_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LC_FactionBeastFinishRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LC_FactionBeastFinishRsp_descriptor_;
  metadata.reflection = LC_FactionBeastFinishRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionGuardData::kAccPersonExpFieldNumber;
const int FactionGuardData::kAccFactionContriFieldNumber;
const int FactionGuardData::kCurEncouragementGoldCountFieldNumber;
const int FactionGuardData::kCurEncouragementDiamondCountFieldNumber;
#endif  // !_MSC_VER

FactionGuardData::FactionGuardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionGuardData::InitAsDefaultInstance() {
}

FactionGuardData::FactionGuardData(const FactionGuardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionGuardData::SharedCtor() {
  _cached_size_ = 0;
  acc_person_exp_ = GOOGLE_ULONGLONG(0);
  acc_faction_contri_ = GOOGLE_ULONGLONG(0);
  cur_encouragement_gold_count_ = 0u;
  cur_encouragement_diamond_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionGuardData::~FactionGuardData() {
  SharedDtor();
}

void FactionGuardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionGuardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionGuardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionGuardData_descriptor_;
}

const FactionGuardData& FactionGuardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionGuardData* FactionGuardData::default_instance_ = NULL;

FactionGuardData* FactionGuardData::New() const {
  return new FactionGuardData;
}

void FactionGuardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    acc_person_exp_ = GOOGLE_ULONGLONG(0);
    acc_faction_contri_ = GOOGLE_ULONGLONG(0);
    cur_encouragement_gold_count_ = 0u;
    cur_encouragement_diamond_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionGuardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 acc_person_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acc_person_exp_)));
          set_has_acc_person_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_acc_faction_contri;
        break;
      }

      // optional uint64 acc_faction_contri = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acc_faction_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acc_faction_contri_)));
          set_has_acc_faction_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_encouragement_gold_count;
        break;
      }

      // optional uint32 cur_encouragement_gold_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_encouragement_gold_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_encouragement_gold_count_)));
          set_has_cur_encouragement_gold_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_encouragement_diamond_count;
        break;
      }

      // optional uint32 cur_encouragement_diamond_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_encouragement_diamond_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_encouragement_diamond_count_)));
          set_has_cur_encouragement_diamond_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionGuardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 acc_person_exp = 1;
  if (has_acc_person_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->acc_person_exp(), output);
  }

  // optional uint64 acc_faction_contri = 2;
  if (has_acc_faction_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->acc_faction_contri(), output);
  }

  // optional uint32 cur_encouragement_gold_count = 3;
  if (has_cur_encouragement_gold_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_encouragement_gold_count(), output);
  }

  // optional uint32 cur_encouragement_diamond_count = 4;
  if (has_cur_encouragement_diamond_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_encouragement_diamond_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionGuardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 acc_person_exp = 1;
  if (has_acc_person_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->acc_person_exp(), target);
  }

  // optional uint64 acc_faction_contri = 2;
  if (has_acc_faction_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->acc_faction_contri(), target);
  }

  // optional uint32 cur_encouragement_gold_count = 3;
  if (has_cur_encouragement_gold_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_encouragement_gold_count(), target);
  }

  // optional uint32 cur_encouragement_diamond_count = 4;
  if (has_cur_encouragement_diamond_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_encouragement_diamond_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionGuardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 acc_person_exp = 1;
    if (has_acc_person_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acc_person_exp());
    }

    // optional uint64 acc_faction_contri = 2;
    if (has_acc_faction_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acc_faction_contri());
    }

    // optional uint32 cur_encouragement_gold_count = 3;
    if (has_cur_encouragement_gold_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_encouragement_gold_count());
    }

    // optional uint32 cur_encouragement_diamond_count = 4;
    if (has_cur_encouragement_diamond_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_encouragement_diamond_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionGuardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionGuardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionGuardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionGuardData::MergeFrom(const FactionGuardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_person_exp()) {
      set_acc_person_exp(from.acc_person_exp());
    }
    if (from.has_acc_faction_contri()) {
      set_acc_faction_contri(from.acc_faction_contri());
    }
    if (from.has_cur_encouragement_gold_count()) {
      set_cur_encouragement_gold_count(from.cur_encouragement_gold_count());
    }
    if (from.has_cur_encouragement_diamond_count()) {
      set_cur_encouragement_diamond_count(from.cur_encouragement_diamond_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionGuardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionGuardData::CopyFrom(const FactionGuardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionGuardData::IsInitialized() const {

  return true;
}

void FactionGuardData::Swap(FactionGuardData* other) {
  if (other != this) {
    std::swap(acc_person_exp_, other->acc_person_exp_);
    std::swap(acc_faction_contri_, other->acc_faction_contri_);
    std::swap(cur_encouragement_gold_count_, other->cur_encouragement_gold_count_);
    std::swap(cur_encouragement_diamond_count_, other->cur_encouragement_diamond_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionGuardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionGuardData_descriptor_;
  metadata.reflection = FactionGuardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_GuardSceneInfoReq::Faction_GuardSceneInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_GuardSceneInfoReq::InitAsDefaultInstance() {
}

Faction_GuardSceneInfoReq::Faction_GuardSceneInfoReq(const Faction_GuardSceneInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_GuardSceneInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_GuardSceneInfoReq::~Faction_GuardSceneInfoReq() {
  SharedDtor();
}

void Faction_GuardSceneInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_GuardSceneInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_GuardSceneInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_GuardSceneInfoReq_descriptor_;
}

const Faction_GuardSceneInfoReq& Faction_GuardSceneInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_GuardSceneInfoReq* Faction_GuardSceneInfoReq::default_instance_ = NULL;

Faction_GuardSceneInfoReq* Faction_GuardSceneInfoReq::New() const {
  return new Faction_GuardSceneInfoReq;
}

void Faction_GuardSceneInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_GuardSceneInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_GuardSceneInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_GuardSceneInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_GuardSceneInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_GuardSceneInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_GuardSceneInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_GuardSceneInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_GuardSceneInfoReq::MergeFrom(const Faction_GuardSceneInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_GuardSceneInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_GuardSceneInfoReq::CopyFrom(const Faction_GuardSceneInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_GuardSceneInfoReq::IsInitialized() const {

  return true;
}

void Faction_GuardSceneInfoReq::Swap(Faction_GuardSceneInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_GuardSceneInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_GuardSceneInfoReq_descriptor_;
  metadata.reflection = Faction_GuardSceneInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_GuardSceneInfoRsp::kDataFieldNumber;
const int Faction_GuardSceneInfoRsp::kCurGuardEncouragementGoldCountFieldNumber;
const int Faction_GuardSceneInfoRsp::kCurGuardEncouragementDiamondCountFieldNumber;
#endif  // !_MSC_VER

Faction_GuardSceneInfoRsp::Faction_GuardSceneInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_GuardSceneInfoRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FactionGuardData*>(&::proto_ff::FactionGuardData::default_instance());
}

Faction_GuardSceneInfoRsp::Faction_GuardSceneInfoRsp(const Faction_GuardSceneInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_GuardSceneInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  cur_guard_encouragement_gold_count_ = 0u;
  cur_guard_encouragement_diamond_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_GuardSceneInfoRsp::~Faction_GuardSceneInfoRsp() {
  SharedDtor();
}

void Faction_GuardSceneInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Faction_GuardSceneInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_GuardSceneInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_GuardSceneInfoRsp_descriptor_;
}

const Faction_GuardSceneInfoRsp& Faction_GuardSceneInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_GuardSceneInfoRsp* Faction_GuardSceneInfoRsp::default_instance_ = NULL;

Faction_GuardSceneInfoRsp* Faction_GuardSceneInfoRsp::New() const {
  return new Faction_GuardSceneInfoRsp;
}

void Faction_GuardSceneInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FactionGuardData::Clear();
    }
    cur_guard_encouragement_gold_count_ = 0u;
    cur_guard_encouragement_diamond_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_GuardSceneInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionGuardData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_guard_encouragement_gold_count;
        break;
      }

      // optional uint32 cur_guard_encouragement_gold_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_guard_encouragement_gold_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_guard_encouragement_gold_count_)));
          set_has_cur_guard_encouragement_gold_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_guard_encouragement_diamond_count;
        break;
      }

      // optional uint32 cur_guard_encouragement_diamond_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_guard_encouragement_diamond_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_guard_encouragement_diamond_count_)));
          set_has_cur_guard_encouragement_diamond_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_GuardSceneInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionGuardData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional uint32 cur_guard_encouragement_gold_count = 2;
  if (has_cur_guard_encouragement_gold_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_guard_encouragement_gold_count(), output);
  }

  // optional uint32 cur_guard_encouragement_diamond_count = 3;
  if (has_cur_guard_encouragement_diamond_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_guard_encouragement_diamond_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_GuardSceneInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionGuardData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional uint32 cur_guard_encouragement_gold_count = 2;
  if (has_cur_guard_encouragement_gold_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_guard_encouragement_gold_count(), target);
  }

  // optional uint32 cur_guard_encouragement_diamond_count = 3;
  if (has_cur_guard_encouragement_diamond_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_guard_encouragement_diamond_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_GuardSceneInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionGuardData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint32 cur_guard_encouragement_gold_count = 2;
    if (has_cur_guard_encouragement_gold_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_guard_encouragement_gold_count());
    }

    // optional uint32 cur_guard_encouragement_diamond_count = 3;
    if (has_cur_guard_encouragement_diamond_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_guard_encouragement_diamond_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_GuardSceneInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_GuardSceneInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_GuardSceneInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_GuardSceneInfoRsp::MergeFrom(const Faction_GuardSceneInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::FactionGuardData::MergeFrom(from.data());
    }
    if (from.has_cur_guard_encouragement_gold_count()) {
      set_cur_guard_encouragement_gold_count(from.cur_guard_encouragement_gold_count());
    }
    if (from.has_cur_guard_encouragement_diamond_count()) {
      set_cur_guard_encouragement_diamond_count(from.cur_guard_encouragement_diamond_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_GuardSceneInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_GuardSceneInfoRsp::CopyFrom(const Faction_GuardSceneInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_GuardSceneInfoRsp::IsInitialized() const {

  return true;
}

void Faction_GuardSceneInfoRsp::Swap(Faction_GuardSceneInfoRsp* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(cur_guard_encouragement_gold_count_, other->cur_guard_encouragement_gold_count_);
    std::swap(cur_guard_encouragement_diamond_count_, other->cur_guard_encouragement_diamond_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_GuardSceneInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_GuardSceneInfoRsp_descriptor_;
  metadata.reflection = Faction_GuardSceneInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionGuardRankProto::kRankFieldNumber;
const int FactionGuardRankProto::kCidFieldNumber;
const int FactionGuardRankProto::kNameFieldNumber;
const int FactionGuardRankProto::kHarmFieldNumber;
#endif  // !_MSC_VER

FactionGuardRankProto::FactionGuardRankProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionGuardRankProto::InitAsDefaultInstance() {
}

FactionGuardRankProto::FactionGuardRankProto(const FactionGuardRankProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionGuardRankProto::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  harm_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionGuardRankProto::~FactionGuardRankProto() {
  SharedDtor();
}

void FactionGuardRankProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionGuardRankProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionGuardRankProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionGuardRankProto_descriptor_;
}

const FactionGuardRankProto& FactionGuardRankProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionGuardRankProto* FactionGuardRankProto::default_instance_ = NULL;

FactionGuardRankProto* FactionGuardRankProto::New() const {
  return new FactionGuardRankProto;
}

void FactionGuardRankProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    harm_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionGuardRankProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_harm;
        break;
      }

      // optional int64 harm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionGuardRankProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int64 harm = 4;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionGuardRankProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int64 harm = 4;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionGuardRankProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int64 harm = 4;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->harm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionGuardRankProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionGuardRankProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionGuardRankProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionGuardRankProto::MergeFrom(const FactionGuardRankProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionGuardRankProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionGuardRankProto::CopyFrom(const FactionGuardRankProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionGuardRankProto::IsInitialized() const {

  return true;
}

void FactionGuardRankProto::Swap(FactionGuardRankProto* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(harm_, other->harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionGuardRankProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionGuardRankProto_descriptor_;
  metadata.reflection = FactionGuardRankProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionGuardRankListProto::kLstFieldNumber;
#endif  // !_MSC_VER

FactionGuardRankListProto::FactionGuardRankListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionGuardRankListProto::InitAsDefaultInstance() {
}

FactionGuardRankListProto::FactionGuardRankListProto(const FactionGuardRankListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionGuardRankListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionGuardRankListProto::~FactionGuardRankListProto() {
  SharedDtor();
}

void FactionGuardRankListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionGuardRankListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionGuardRankListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionGuardRankListProto_descriptor_;
}

const FactionGuardRankListProto& FactionGuardRankListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionGuardRankListProto* FactionGuardRankListProto::default_instance_ = NULL;

FactionGuardRankListProto* FactionGuardRankListProto::New() const {
  return new FactionGuardRankListProto;
}

void FactionGuardRankListProto::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionGuardRankListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionGuardRankProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionGuardRankListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionGuardRankProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionGuardRankListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionGuardRankProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionGuardRankListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionGuardRankProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionGuardRankListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionGuardRankListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionGuardRankListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionGuardRankListProto::MergeFrom(const FactionGuardRankListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionGuardRankListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionGuardRankListProto::CopyFrom(const FactionGuardRankListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionGuardRankListProto::IsInitialized() const {

  return true;
}

void FactionGuardRankListProto::Swap(FactionGuardRankListProto* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionGuardRankListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionGuardRankListProto_descriptor_;
  metadata.reflection = FactionGuardRankListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_GuardPersonRankInfoReq::Faction_GuardPersonRankInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_GuardPersonRankInfoReq::InitAsDefaultInstance() {
}

Faction_GuardPersonRankInfoReq::Faction_GuardPersonRankInfoReq(const Faction_GuardPersonRankInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_GuardPersonRankInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_GuardPersonRankInfoReq::~Faction_GuardPersonRankInfoReq() {
  SharedDtor();
}

void Faction_GuardPersonRankInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_GuardPersonRankInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_GuardPersonRankInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_GuardPersonRankInfoReq_descriptor_;
}

const Faction_GuardPersonRankInfoReq& Faction_GuardPersonRankInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_GuardPersonRankInfoReq* Faction_GuardPersonRankInfoReq::default_instance_ = NULL;

Faction_GuardPersonRankInfoReq* Faction_GuardPersonRankInfoReq::New() const {
  return new Faction_GuardPersonRankInfoReq;
}

void Faction_GuardPersonRankInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_GuardPersonRankInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_GuardPersonRankInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_GuardPersonRankInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_GuardPersonRankInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_GuardPersonRankInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_GuardPersonRankInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_GuardPersonRankInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_GuardPersonRankInfoReq::MergeFrom(const Faction_GuardPersonRankInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_GuardPersonRankInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_GuardPersonRankInfoReq::CopyFrom(const Faction_GuardPersonRankInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_GuardPersonRankInfoReq::IsInitialized() const {

  return true;
}

void Faction_GuardPersonRankInfoReq::Swap(Faction_GuardPersonRankInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_GuardPersonRankInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_GuardPersonRankInfoReq_descriptor_;
  metadata.reflection = Faction_GuardPersonRankInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_GuardPersonRankInfoRsp::kRetFieldNumber;
const int Faction_GuardPersonRankInfoRsp::kRankFieldNumber;
const int Faction_GuardPersonRankInfoRsp::kMyrankFieldNumber;
const int Faction_GuardPersonRankInfoRsp::kMyharmFieldNumber;
#endif  // !_MSC_VER

Faction_GuardPersonRankInfoRsp::Faction_GuardPersonRankInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_GuardPersonRankInfoRsp::InitAsDefaultInstance() {
  rank_ = const_cast< ::proto_ff::FactionGuardRankListProto*>(&::proto_ff::FactionGuardRankListProto::default_instance());
}

Faction_GuardPersonRankInfoRsp::Faction_GuardPersonRankInfoRsp(const Faction_GuardPersonRankInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_GuardPersonRankInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  rank_ = NULL;
  myrank_ = 0u;
  myharm_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_GuardPersonRankInfoRsp::~Faction_GuardPersonRankInfoRsp() {
  SharedDtor();
}

void Faction_GuardPersonRankInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rank_;
  }
}

void Faction_GuardPersonRankInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_GuardPersonRankInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_GuardPersonRankInfoRsp_descriptor_;
}

const Faction_GuardPersonRankInfoRsp& Faction_GuardPersonRankInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_GuardPersonRankInfoRsp* Faction_GuardPersonRankInfoRsp::default_instance_ = NULL;

Faction_GuardPersonRankInfoRsp* Faction_GuardPersonRankInfoRsp::New() const {
  return new Faction_GuardPersonRankInfoRsp;
}

void Faction_GuardPersonRankInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_rank()) {
      if (rank_ != NULL) rank_->::proto_ff::FactionGuardRankListProto::Clear();
    }
    myrank_ = 0u;
    myharm_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_GuardPersonRankInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        break;
      }

      // optional .proto_ff.FactionGuardRankListProto rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_myrank;
        break;
      }

      // optional uint32 myrank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_myharm;
        break;
      }

      // optional int64 myharm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myharm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &myharm_)));
          set_has_myharm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_GuardPersonRankInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionGuardRankListProto rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank(), output);
  }

  // optional uint32 myrank = 3;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->myrank(), output);
  }

  // optional int64 myharm = 4;
  if (has_myharm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->myharm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_GuardPersonRankInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionGuardRankListProto rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank(), target);
  }

  // optional uint32 myrank = 3;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->myrank(), target);
  }

  // optional int64 myharm = 4;
  if (has_myharm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->myharm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_GuardPersonRankInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionGuardRankListProto rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

    // optional uint32 myrank = 3;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

    // optional int64 myharm = 4;
    if (has_myharm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->myharm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_GuardPersonRankInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_GuardPersonRankInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_GuardPersonRankInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_GuardPersonRankInfoRsp::MergeFrom(const Faction_GuardPersonRankInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_rank()) {
      mutable_rank()->::proto_ff::FactionGuardRankListProto::MergeFrom(from.rank());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_myharm()) {
      set_myharm(from.myharm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_GuardPersonRankInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_GuardPersonRankInfoRsp::CopyFrom(const Faction_GuardPersonRankInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_GuardPersonRankInfoRsp::IsInitialized() const {

  return true;
}

void Faction_GuardPersonRankInfoRsp::Swap(Faction_GuardPersonRankInfoRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(rank_, other->rank_);
    std::swap(myrank_, other->myrank_);
    std::swap(myharm_, other->myharm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_GuardPersonRankInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_GuardPersonRankInfoRsp_descriptor_;
  metadata.reflection = Faction_GuardPersonRankInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionGuardSocialRankProto::kFactionidFieldNumber;
const int FactionGuardSocialRankProto::kNameFieldNumber;
const int FactionGuardSocialRankProto::kCountFieldNumber;
const int FactionGuardSocialRankProto::kZidFieldNumber;
const int FactionGuardSocialRankProto::kTimeFieldNumber;
const int FactionGuardSocialRankProto::kRankFieldNumber;
const int FactionGuardSocialRankProto::kHarmFieldNumber;
#endif  // !_MSC_VER

FactionGuardSocialRankProto::FactionGuardSocialRankProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionGuardSocialRankProto::InitAsDefaultInstance() {
}

FactionGuardSocialRankProto::FactionGuardSocialRankProto(const FactionGuardSocialRankProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionGuardSocialRankProto::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  harm_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionGuardSocialRankProto::~FactionGuardSocialRankProto() {
  SharedDtor();
}

void FactionGuardSocialRankProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionGuardSocialRankProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionGuardSocialRankProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionGuardSocialRankProto_descriptor_;
}

const FactionGuardSocialRankProto& FactionGuardSocialRankProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionGuardSocialRankProto* FactionGuardSocialRankProto::default_instance_ = NULL;

FactionGuardSocialRankProto* FactionGuardSocialRankProto::New() const {
  return new FactionGuardSocialRankProto;
}

void FactionGuardSocialRankProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    count_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
    rank_ = 0u;
    harm_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionGuardSocialRankProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint64 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_harm;
        break;
      }

      // optional int64 harm = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionGuardSocialRankProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint64 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->count(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time(), output);
  }

  // optional uint32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rank(), output);
  }

  // optional int64 harm = 7;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionGuardSocialRankProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint64 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->count(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time(), target);
  }

  // optional uint32 rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rank(), target);
  }

  // optional int64 harm = 7;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionGuardSocialRankProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional int64 harm = 7;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->harm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionGuardSocialRankProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionGuardSocialRankProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionGuardSocialRankProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionGuardSocialRankProto::MergeFrom(const FactionGuardSocialRankProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionGuardSocialRankProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionGuardSocialRankProto::CopyFrom(const FactionGuardSocialRankProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionGuardSocialRankProto::IsInitialized() const {

  return true;
}

void FactionGuardSocialRankProto::Swap(FactionGuardSocialRankProto* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(name_, other->name_);
    std::swap(count_, other->count_);
    std::swap(zid_, other->zid_);
    std::swap(time_, other->time_);
    std::swap(rank_, other->rank_);
    std::swap(harm_, other->harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionGuardSocialRankProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionGuardSocialRankProto_descriptor_;
  metadata.reflection = FactionGuardSocialRankProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionGuardSocialRankListProto::kLstFieldNumber;
#endif  // !_MSC_VER

FactionGuardSocialRankListProto::FactionGuardSocialRankListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionGuardSocialRankListProto::InitAsDefaultInstance() {
}

FactionGuardSocialRankListProto::FactionGuardSocialRankListProto(const FactionGuardSocialRankListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionGuardSocialRankListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionGuardSocialRankListProto::~FactionGuardSocialRankListProto() {
  SharedDtor();
}

void FactionGuardSocialRankListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionGuardSocialRankListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionGuardSocialRankListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionGuardSocialRankListProto_descriptor_;
}

const FactionGuardSocialRankListProto& FactionGuardSocialRankListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionGuardSocialRankListProto* FactionGuardSocialRankListProto::default_instance_ = NULL;

FactionGuardSocialRankListProto* FactionGuardSocialRankListProto::New() const {
  return new FactionGuardSocialRankListProto;
}

void FactionGuardSocialRankListProto::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionGuardSocialRankListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionGuardSocialRankProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionGuardSocialRankListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionGuardSocialRankProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionGuardSocialRankListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionGuardSocialRankProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionGuardSocialRankListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionGuardSocialRankProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionGuardSocialRankListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionGuardSocialRankListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionGuardSocialRankListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionGuardSocialRankListProto::MergeFrom(const FactionGuardSocialRankListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionGuardSocialRankListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionGuardSocialRankListProto::CopyFrom(const FactionGuardSocialRankListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionGuardSocialRankListProto::IsInitialized() const {

  return true;
}

void FactionGuardSocialRankListProto::Swap(FactionGuardSocialRankListProto* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionGuardSocialRankListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionGuardSocialRankListProto_descriptor_;
  metadata.reflection = FactionGuardSocialRankListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_GuardSocialRankListReq::Faction_GuardSocialRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_GuardSocialRankListReq::InitAsDefaultInstance() {
}

Faction_GuardSocialRankListReq::Faction_GuardSocialRankListReq(const Faction_GuardSocialRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_GuardSocialRankListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_GuardSocialRankListReq::~Faction_GuardSocialRankListReq() {
  SharedDtor();
}

void Faction_GuardSocialRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_GuardSocialRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_GuardSocialRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_GuardSocialRankListReq_descriptor_;
}

const Faction_GuardSocialRankListReq& Faction_GuardSocialRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_GuardSocialRankListReq* Faction_GuardSocialRankListReq::default_instance_ = NULL;

Faction_GuardSocialRankListReq* Faction_GuardSocialRankListReq::New() const {
  return new Faction_GuardSocialRankListReq;
}

void Faction_GuardSocialRankListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_GuardSocialRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_GuardSocialRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_GuardSocialRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_GuardSocialRankListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_GuardSocialRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_GuardSocialRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_GuardSocialRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_GuardSocialRankListReq::MergeFrom(const Faction_GuardSocialRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_GuardSocialRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_GuardSocialRankListReq::CopyFrom(const Faction_GuardSocialRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_GuardSocialRankListReq::IsInitialized() const {

  return true;
}

void Faction_GuardSocialRankListReq::Swap(Faction_GuardSocialRankListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_GuardSocialRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_GuardSocialRankListReq_descriptor_;
  metadata.reflection = Faction_GuardSocialRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_GuardSocialRankListRsp::kRetFieldNumber;
const int Faction_GuardSocialRankListRsp::kRankFieldNumber;
const int Faction_GuardSocialRankListRsp::kCountFieldNumber;
#endif  // !_MSC_VER

Faction_GuardSocialRankListRsp::Faction_GuardSocialRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_GuardSocialRankListRsp::InitAsDefaultInstance() {
  rank_ = const_cast< ::proto_ff::FactionGuardSocialRankListProto*>(&::proto_ff::FactionGuardSocialRankListProto::default_instance());
}

Faction_GuardSocialRankListRsp::Faction_GuardSocialRankListRsp(const Faction_GuardSocialRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_GuardSocialRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  rank_ = NULL;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_GuardSocialRankListRsp::~Faction_GuardSocialRankListRsp() {
  SharedDtor();
}

void Faction_GuardSocialRankListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rank_;
  }
}

void Faction_GuardSocialRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_GuardSocialRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_GuardSocialRankListRsp_descriptor_;
}

const Faction_GuardSocialRankListRsp& Faction_GuardSocialRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_GuardSocialRankListRsp* Faction_GuardSocialRankListRsp::default_instance_ = NULL;

Faction_GuardSocialRankListRsp* Faction_GuardSocialRankListRsp::New() const {
  return new Faction_GuardSocialRankListRsp;
}

void Faction_GuardSocialRankListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_rank()) {
      if (rank_ != NULL) rank_->::proto_ff::FactionGuardSocialRankListProto::Clear();
    }
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_GuardSocialRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        break;
      }

      // optional .proto_ff.FactionGuardSocialRankListProto rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_GuardSocialRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionGuardSocialRankListProto rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_GuardSocialRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionGuardSocialRankListProto rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_GuardSocialRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionGuardSocialRankListProto rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_GuardSocialRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_GuardSocialRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_GuardSocialRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_GuardSocialRankListRsp::MergeFrom(const Faction_GuardSocialRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_rank()) {
      mutable_rank()->::proto_ff::FactionGuardSocialRankListProto::MergeFrom(from.rank());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_GuardSocialRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_GuardSocialRankListRsp::CopyFrom(const Faction_GuardSocialRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_GuardSocialRankListRsp::IsInitialized() const {

  return true;
}

void Faction_GuardSocialRankListRsp::Swap(Faction_GuardSocialRankListRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(rank_, other->rank_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_GuardSocialRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_GuardSocialRankListRsp_descriptor_;
  metadata.reflection = Faction_GuardSocialRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuardMonInfo::kMonIdFieldNumber;
const int GuardMonInfo::kCidFieldNumber;
const int GuardMonInfo::kHpFieldNumber;
const int GuardMonInfo::kMaxHpFieldNumber;
const int GuardMonInfo::kPosFieldNumber;
const int GuardMonInfo::kIsTargetFieldNumber;
const int GuardMonInfo::kIsBattleFieldNumber;
#endif  // !_MSC_VER

GuardMonInfo::GuardMonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuardMonInfo::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

GuardMonInfo::GuardMonInfo(const GuardMonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuardMonInfo::SharedCtor() {
  _cached_size_ = 0;
  mon_id_ = GOOGLE_LONGLONG(0);
  cid_ = GOOGLE_LONGLONG(0);
  hp_ = GOOGLE_LONGLONG(0);
  max_hp_ = GOOGLE_LONGLONG(0);
  pos_ = NULL;
  is_target_ = 0;
  is_battle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuardMonInfo::~GuardMonInfo() {
  SharedDtor();
}

void GuardMonInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void GuardMonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuardMonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuardMonInfo_descriptor_;
}

const GuardMonInfo& GuardMonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

GuardMonInfo* GuardMonInfo::default_instance_ = NULL;

GuardMonInfo* GuardMonInfo::New() const {
  return new GuardMonInfo;
}

void GuardMonInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mon_id_ = GOOGLE_LONGLONG(0);
    cid_ = GOOGLE_LONGLONG(0);
    hp_ = GOOGLE_LONGLONG(0);
    max_hp_ = GOOGLE_LONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    is_target_ = 0;
    is_battle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuardMonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mon_id_)));
          set_has_mon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional int64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // optional int64 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_hp;
        break;
      }

      // optional int64 max_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_target;
        break;
      }

      // optional int32 is_target = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_target_)));
          set_has_is_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_battle;
        break;
      }

      // optional int32 is_battle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_battle_)));
          set_has_is_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuardMonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mon_id = 1;
  if (has_mon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mon_id(), output);
  }

  // optional int64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cid(), output);
  }

  // optional int64 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hp(), output);
  }

  // optional int64 max_hp = 4;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_hp(), output);
  }

  // optional .proto_ff.Vector3PB pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  // optional int32 is_target = 6;
  if (has_is_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_target(), output);
  }

  // optional int32 is_battle = 7;
  if (has_is_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_battle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuardMonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 mon_id = 1;
  if (has_mon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mon_id(), target);
  }

  // optional int64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cid(), target);
  }

  // optional int64 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hp(), target);
  }

  // optional int64 max_hp = 4;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->max_hp(), target);
  }

  // optional .proto_ff.Vector3PB pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  // optional int32 is_target = 6;
  if (has_is_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_target(), target);
  }

  // optional int32 is_battle = 7;
  if (has_is_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_battle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuardMonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mon_id = 1;
    if (has_mon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mon_id());
    }

    // optional int64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional int64 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional int64 max_hp = 4;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_hp());
    }

    // optional .proto_ff.Vector3PB pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional int32 is_target = 6;
    if (has_is_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_target());
    }

    // optional int32 is_battle = 7;
    if (has_is_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_battle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuardMonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuardMonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuardMonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuardMonInfo::MergeFrom(const GuardMonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mon_id()) {
      set_mon_id(from.mon_id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_is_target()) {
      set_is_target(from.is_target());
    }
    if (from.has_is_battle()) {
      set_is_battle(from.is_battle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuardMonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuardMonInfo::CopyFrom(const GuardMonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardMonInfo::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void GuardMonInfo::Swap(GuardMonInfo* other) {
  if (other != this) {
    std::swap(mon_id_, other->mon_id_);
    std::swap(cid_, other->cid_);
    std::swap(hp_, other->hp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(pos_, other->pos_);
    std::swap(is_target_, other->is_target_);
    std::swap(is_battle_, other->is_battle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuardMonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuardMonInfo_descriptor_;
  metadata.reflection = GuardMonInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_GuardMonsterInfo::kMonsFieldNumber;
#endif  // !_MSC_VER

Faction_GuardMonsterInfo::Faction_GuardMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_GuardMonsterInfo::InitAsDefaultInstance() {
}

Faction_GuardMonsterInfo::Faction_GuardMonsterInfo(const Faction_GuardMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_GuardMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_GuardMonsterInfo::~Faction_GuardMonsterInfo() {
  SharedDtor();
}

void Faction_GuardMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_GuardMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_GuardMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_GuardMonsterInfo_descriptor_;
}

const Faction_GuardMonsterInfo& Faction_GuardMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_GuardMonsterInfo* Faction_GuardMonsterInfo::default_instance_ = NULL;

Faction_GuardMonsterInfo* Faction_GuardMonsterInfo::New() const {
  return new Faction_GuardMonsterInfo;
}

void Faction_GuardMonsterInfo::Clear() {
  mons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_GuardMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GuardMonInfo mons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mons;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_GuardMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GuardMonInfo mons = 1;
  for (int i = 0; i < this->mons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mons(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_GuardMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GuardMonInfo mons = 1;
  for (int i = 0; i < this->mons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mons(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_GuardMonsterInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GuardMonInfo mons = 1;
  total_size += 1 * this->mons_size();
  for (int i = 0; i < this->mons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mons(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_GuardMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_GuardMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_GuardMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_GuardMonsterInfo::MergeFrom(const Faction_GuardMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mons_.MergeFrom(from.mons_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_GuardMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_GuardMonsterInfo::CopyFrom(const Faction_GuardMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_GuardMonsterInfo::IsInitialized() const {

  for (int i = 0; i < mons_size(); i++) {
    if (!this->mons(i).IsInitialized()) return false;
  }
  return true;
}

void Faction_GuardMonsterInfo::Swap(Faction_GuardMonsterInfo* other) {
  if (other != this) {
    mons_.Swap(&other->mons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_GuardMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_GuardMonsterInfo_descriptor_;
  metadata.reflection = Faction_GuardMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_GuardMonsterInfoNotify::kMonsFieldNumber;
const int Faction_GuardMonsterInfoNotify::kTypeFieldNumber;
#endif  // !_MSC_VER

Faction_GuardMonsterInfoNotify::Faction_GuardMonsterInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_GuardMonsterInfoNotify::InitAsDefaultInstance() {
  mons_ = const_cast< ::proto_ff::Faction_GuardMonsterInfo*>(&::proto_ff::Faction_GuardMonsterInfo::default_instance());
}

Faction_GuardMonsterInfoNotify::Faction_GuardMonsterInfoNotify(const Faction_GuardMonsterInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_GuardMonsterInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  mons_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_GuardMonsterInfoNotify::~Faction_GuardMonsterInfoNotify() {
  SharedDtor();
}

void Faction_GuardMonsterInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete mons_;
  }
}

void Faction_GuardMonsterInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_GuardMonsterInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_GuardMonsterInfoNotify_descriptor_;
}

const Faction_GuardMonsterInfoNotify& Faction_GuardMonsterInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_GuardMonsterInfoNotify* Faction_GuardMonsterInfoNotify::default_instance_ = NULL;

Faction_GuardMonsterInfoNotify* Faction_GuardMonsterInfoNotify::New() const {
  return new Faction_GuardMonsterInfoNotify;
}

void Faction_GuardMonsterInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mons()) {
      if (mons_ != NULL) mons_->::proto_ff::Faction_GuardMonsterInfo::Clear();
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_GuardMonsterInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.Faction_GuardMonsterInfo mons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_GuardMonsterInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.Faction_GuardMonsterInfo mons = 1;
  if (has_mons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mons(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_GuardMonsterInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.Faction_GuardMonsterInfo mons = 1;
  if (has_mons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mons(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_GuardMonsterInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.Faction_GuardMonsterInfo mons = 1;
    if (has_mons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mons());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_GuardMonsterInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_GuardMonsterInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_GuardMonsterInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_GuardMonsterInfoNotify::MergeFrom(const Faction_GuardMonsterInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mons()) {
      mutable_mons()->::proto_ff::Faction_GuardMonsterInfo::MergeFrom(from.mons());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_GuardMonsterInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_GuardMonsterInfoNotify::CopyFrom(const Faction_GuardMonsterInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_GuardMonsterInfoNotify::IsInitialized() const {

  if (has_mons()) {
    if (!this->mons().IsInitialized()) return false;
  }
  return true;
}

void Faction_GuardMonsterInfoNotify::Swap(Faction_GuardMonsterInfoNotify* other) {
  if (other != this) {
    std::swap(mons_, other->mons_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_GuardMonsterInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_GuardMonsterInfoNotify_descriptor_;
  metadata.reflection = Faction_GuardMonsterInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_GuardWaveReward::kWaveFieldNumber;
const int Faction_GuardWaveReward::kRewardFieldNumber;
#endif  // !_MSC_VER

Faction_GuardWaveReward::Faction_GuardWaveReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_GuardWaveReward::InitAsDefaultInstance() {
}

Faction_GuardWaveReward::Faction_GuardWaveReward(const Faction_GuardWaveReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_GuardWaveReward::SharedCtor() {
  _cached_size_ = 0;
  wave_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_GuardWaveReward::~Faction_GuardWaveReward() {
  SharedDtor();
}

void Faction_GuardWaveReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_GuardWaveReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_GuardWaveReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_GuardWaveReward_descriptor_;
}

const Faction_GuardWaveReward& Faction_GuardWaveReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_GuardWaveReward* Faction_GuardWaveReward::default_instance_ = NULL;

Faction_GuardWaveReward* Faction_GuardWaveReward::New() const {
  return new Faction_GuardWaveReward;
}

void Faction_GuardWaveReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wave_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_GuardWaveReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ComItem reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_GuardWaveReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wave = 1;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wave(), output);
  }

  // repeated .proto_ff.ComItem reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_GuardWaveReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wave = 1;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wave(), target);
  }

  // repeated .proto_ff.ComItem reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_GuardWaveReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wave = 1;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }

  }
  // repeated .proto_ff.ComItem reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_GuardWaveReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_GuardWaveReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_GuardWaveReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_GuardWaveReward::MergeFrom(const Faction_GuardWaveReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wave()) {
      set_wave(from.wave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_GuardWaveReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_GuardWaveReward::CopyFrom(const Faction_GuardWaveReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_GuardWaveReward::IsInitialized() const {

  return true;
}

void Faction_GuardWaveReward::Swap(Faction_GuardWaveReward* other) {
  if (other != this) {
    std::swap(wave_, other->wave_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_GuardWaveReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_GuardWaveReward_descriptor_;
  metadata.reflection = Faction_GuardWaveReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_GuardFinishRsp::kResultFieldNumber;
const int Faction_GuardFinishRsp::kSecFieldNumber;
const int Faction_GuardFinishRsp::kHarmFieldNumber;
const int Faction_GuardFinishRsp::kRankFieldNumber;
const int Faction_GuardFinishRsp::kFationRankFieldNumber;
const int Faction_GuardFinishRsp::kFationCountFieldNumber;
const int Faction_GuardFinishRsp::kRewardFieldNumber;
const int Faction_GuardFinishRsp::kFactionRewardFieldNumber;
const int Faction_GuardFinishRsp::kWaveRewardFieldNumber;
#endif  // !_MSC_VER

Faction_GuardFinishRsp::Faction_GuardFinishRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_GuardFinishRsp::InitAsDefaultInstance() {
}

Faction_GuardFinishRsp::Faction_GuardFinishRsp(const Faction_GuardFinishRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_GuardFinishRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  sec_ = 0;
  harm_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  fation_rank_ = GOOGLE_ULONGLONG(0);
  fation_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_GuardFinishRsp::~Faction_GuardFinishRsp() {
  SharedDtor();
}

void Faction_GuardFinishRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_GuardFinishRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_GuardFinishRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_GuardFinishRsp_descriptor_;
}

const Faction_GuardFinishRsp& Faction_GuardFinishRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_GuardFinishRsp* Faction_GuardFinishRsp::default_instance_ = NULL;

Faction_GuardFinishRsp* Faction_GuardFinishRsp::New() const {
  return new Faction_GuardFinishRsp;
}

void Faction_GuardFinishRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    sec_ = 0;
    harm_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
    fation_rank_ = GOOGLE_ULONGLONG(0);
    fation_count_ = 0u;
  }
  reward_.Clear();
  faction_reward_.Clear();
  wave_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_GuardFinishRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sec;
        break;
      }

      // optional int32 sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_harm;
        break;
      }

      // optional int64 harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fation_rank;
        break;
      }

      // optional uint64 fation_rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fation_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fation_rank_)));
          set_has_fation_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fation_count;
        break;
      }

      // optional uint32 fation_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fation_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fation_count_)));
          set_has_fation_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ComItem reward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_reward;
        if (input->ExpectTag(74)) goto parse_faction_reward;
        break;
      }

      // repeated .proto_ff.ComItem faction_reward = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faction_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faction_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_faction_reward;
        if (input->ExpectTag(82)) goto parse_wave_reward;
        break;
      }

      // repeated .proto_ff.Faction_GuardWaveReward wave_reward = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wave_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wave_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_wave_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_GuardFinishRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 sec = 2;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sec(), output);
  }

  // optional int64 harm = 3;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->harm(), output);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // optional uint64 fation_rank = 5;
  if (has_fation_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fation_rank(), output);
  }

  // optional uint32 fation_count = 6;
  if (has_fation_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fation_count(), output);
  }

  // repeated .proto_ff.ComItem reward = 8;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->reward(i), output);
  }

  // repeated .proto_ff.ComItem faction_reward = 9;
  for (int i = 0; i < this->faction_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->faction_reward(i), output);
  }

  // repeated .proto_ff.Faction_GuardWaveReward wave_reward = 10;
  for (int i = 0; i < this->wave_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->wave_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_GuardFinishRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 sec = 2;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sec(), target);
  }

  // optional int64 harm = 3;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->harm(), target);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // optional uint64 fation_rank = 5;
  if (has_fation_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fation_rank(), target);
  }

  // optional uint32 fation_count = 6;
  if (has_fation_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fation_count(), target);
  }

  // repeated .proto_ff.ComItem reward = 8;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->reward(i), target);
  }

  // repeated .proto_ff.ComItem faction_reward = 9;
  for (int i = 0; i < this->faction_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->faction_reward(i), target);
  }

  // repeated .proto_ff.Faction_GuardWaveReward wave_reward = 10;
  for (int i = 0; i < this->wave_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->wave_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_GuardFinishRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 sec = 2;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sec());
    }

    // optional int64 harm = 3;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->harm());
    }

    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 fation_rank = 5;
    if (has_fation_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fation_rank());
    }

    // optional uint32 fation_count = 6;
    if (has_fation_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fation_count());
    }

  }
  // repeated .proto_ff.ComItem reward = 8;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .proto_ff.ComItem faction_reward = 9;
  total_size += 1 * this->faction_reward_size();
  for (int i = 0; i < this->faction_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faction_reward(i));
  }

  // repeated .proto_ff.Faction_GuardWaveReward wave_reward = 10;
  total_size += 1 * this->wave_reward_size();
  for (int i = 0; i < this->wave_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wave_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_GuardFinishRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_GuardFinishRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_GuardFinishRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_GuardFinishRsp::MergeFrom(const Faction_GuardFinishRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  faction_reward_.MergeFrom(from.faction_reward_);
  wave_reward_.MergeFrom(from.wave_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_fation_rank()) {
      set_fation_rank(from.fation_rank());
    }
    if (from.has_fation_count()) {
      set_fation_count(from.fation_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_GuardFinishRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_GuardFinishRsp::CopyFrom(const Faction_GuardFinishRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_GuardFinishRsp::IsInitialized() const {

  return true;
}

void Faction_GuardFinishRsp::Swap(Faction_GuardFinishRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(sec_, other->sec_);
    std::swap(harm_, other->harm_);
    std::swap(rank_, other->rank_);
    std::swap(fation_rank_, other->fation_rank_);
    std::swap(fation_count_, other->fation_count_);
    reward_.Swap(&other->reward_);
    faction_reward_.Swap(&other->faction_reward_);
    wave_reward_.Swap(&other->wave_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_GuardFinishRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_GuardFinishRsp_descriptor_;
  metadata.reflection = Faction_GuardFinishRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_GuardEncouragementReq::kTypeFieldNumber;
#endif  // !_MSC_VER

Faction_GuardEncouragementReq::Faction_GuardEncouragementReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_GuardEncouragementReq::InitAsDefaultInstance() {
}

Faction_GuardEncouragementReq::Faction_GuardEncouragementReq(const Faction_GuardEncouragementReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_GuardEncouragementReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_GuardEncouragementReq::~Faction_GuardEncouragementReq() {
  SharedDtor();
}

void Faction_GuardEncouragementReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_GuardEncouragementReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_GuardEncouragementReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_GuardEncouragementReq_descriptor_;
}

const Faction_GuardEncouragementReq& Faction_GuardEncouragementReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_GuardEncouragementReq* Faction_GuardEncouragementReq::default_instance_ = NULL;

Faction_GuardEncouragementReq* Faction_GuardEncouragementReq::New() const {
  return new Faction_GuardEncouragementReq;
}

void Faction_GuardEncouragementReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_GuardEncouragementReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_GuardEncouragementReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_GuardEncouragementReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_GuardEncouragementReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_GuardEncouragementReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_GuardEncouragementReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_GuardEncouragementReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_GuardEncouragementReq::MergeFrom(const Faction_GuardEncouragementReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_GuardEncouragementReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_GuardEncouragementReq::CopyFrom(const Faction_GuardEncouragementReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_GuardEncouragementReq::IsInitialized() const {

  return true;
}

void Faction_GuardEncouragementReq::Swap(Faction_GuardEncouragementReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_GuardEncouragementReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_GuardEncouragementReq_descriptor_;
  metadata.reflection = Faction_GuardEncouragementReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_GuardEncouragementRsp::kRetCodeFieldNumber;
const int Faction_GuardEncouragementRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

Faction_GuardEncouragementRsp::Faction_GuardEncouragementRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_GuardEncouragementRsp::InitAsDefaultInstance() {
}

Faction_GuardEncouragementRsp::Faction_GuardEncouragementRsp(const Faction_GuardEncouragementRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_GuardEncouragementRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_GuardEncouragementRsp::~Faction_GuardEncouragementRsp() {
  SharedDtor();
}

void Faction_GuardEncouragementRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_GuardEncouragementRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_GuardEncouragementRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_GuardEncouragementRsp_descriptor_;
}

const Faction_GuardEncouragementRsp& Faction_GuardEncouragementRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_GuardEncouragementRsp* Faction_GuardEncouragementRsp::default_instance_ = NULL;

Faction_GuardEncouragementRsp* Faction_GuardEncouragementRsp::New() const {
  return new Faction_GuardEncouragementRsp;
}

void Faction_GuardEncouragementRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_GuardEncouragementRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_GuardEncouragementRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_GuardEncouragementRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_GuardEncouragementRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_GuardEncouragementRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_GuardEncouragementRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_GuardEncouragementRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_GuardEncouragementRsp::MergeFrom(const Faction_GuardEncouragementRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_GuardEncouragementRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_GuardEncouragementRsp::CopyFrom(const Faction_GuardEncouragementRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_GuardEncouragementRsp::IsInitialized() const {

  return true;
}

void Faction_GuardEncouragementRsp::Swap(Faction_GuardEncouragementRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_GuardEncouragementRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_GuardEncouragementRsp_descriptor_;
  metadata.reflection = Faction_GuardEncouragementRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LS_FactionGuardCount::kFactionIdFieldNumber;
const int LS_FactionGuardCount::kFactionNameFieldNumber;
const int LS_FactionGuardCount::kCountFieldNumber;
const int LS_FactionGuardCount::kZidFieldNumber;
const int LS_FactionGuardCount::kHarmFieldNumber;
const int LS_FactionGuardCount::kTimeFieldNumber;
#endif  // !_MSC_VER

LS_FactionGuardCount::LS_FactionGuardCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LS_FactionGuardCount::InitAsDefaultInstance() {
}

LS_FactionGuardCount::LS_FactionGuardCount(const LS_FactionGuardCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LS_FactionGuardCount::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0u;
  zid_ = 0u;
  harm_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LS_FactionGuardCount::~LS_FactionGuardCount() {
  SharedDtor();
}

void LS_FactionGuardCount::SharedDtor() {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete faction_name_;
  }
  if (this != default_instance_) {
  }
}

void LS_FactionGuardCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LS_FactionGuardCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LS_FactionGuardCount_descriptor_;
}

const LS_FactionGuardCount& LS_FactionGuardCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LS_FactionGuardCount* LS_FactionGuardCount::default_instance_ = NULL;

LS_FactionGuardCount* LS_FactionGuardCount::New() const {
  return new LS_FactionGuardCount;
}

void LS_FactionGuardCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_faction_name()) {
      if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
        faction_name_->clear();
      }
    }
    count_ = 0u;
    zid_ = 0u;
    harm_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LS_FactionGuardCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_faction_name;
        break;
      }

      // required bytes faction_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faction_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_faction_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // required uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_harm;
        break;
      }

      // required uint64 harm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // required uint64 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LS_FactionGuardCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // required bytes faction_name = 2;
  if (has_faction_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->faction_name(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  // required uint64 harm = 5;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->harm(), output);
  }

  // required uint64 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LS_FactionGuardCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // required bytes faction_name = 2;
  if (has_faction_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->faction_name(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  // required uint64 harm = 5;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->harm(), target);
  }

  // required uint64 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LS_FactionGuardCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // required bytes faction_name = 2;
    if (has_faction_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->faction_name());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required uint64 harm = 5;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm());
    }

    // required uint64 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LS_FactionGuardCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LS_FactionGuardCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LS_FactionGuardCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LS_FactionGuardCount::MergeFrom(const LS_FactionGuardCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_faction_name()) {
      set_faction_name(from.faction_name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LS_FactionGuardCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LS_FactionGuardCount::CopyFrom(const LS_FactionGuardCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LS_FactionGuardCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void LS_FactionGuardCount::Swap(LS_FactionGuardCount* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(faction_name_, other->faction_name_);
    std::swap(count_, other->count_);
    std::swap(zid_, other->zid_);
    std::swap(harm_, other->harm_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LS_FactionGuardCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LS_FactionGuardCount_descriptor_;
  metadata.reflection = LS_FactionGuardCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SL_FactionGuardRank::kRankFieldNumber;
#endif  // !_MSC_VER

SL_FactionGuardRank::SL_FactionGuardRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SL_FactionGuardRank::InitAsDefaultInstance() {
  rank_ = const_cast< ::proto_ff::FactionGuardSocialRankListProto*>(&::proto_ff::FactionGuardSocialRankListProto::default_instance());
}

SL_FactionGuardRank::SL_FactionGuardRank(const SL_FactionGuardRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SL_FactionGuardRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SL_FactionGuardRank::~SL_FactionGuardRank() {
  SharedDtor();
}

void SL_FactionGuardRank::SharedDtor() {
  if (this != default_instance_) {
    delete rank_;
  }
}

void SL_FactionGuardRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SL_FactionGuardRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SL_FactionGuardRank_descriptor_;
}

const SL_FactionGuardRank& SL_FactionGuardRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

SL_FactionGuardRank* SL_FactionGuardRank::default_instance_ = NULL;

SL_FactionGuardRank* SL_FactionGuardRank::New() const {
  return new SL_FactionGuardRank;
}

void SL_FactionGuardRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rank()) {
      if (rank_ != NULL) rank_->::proto_ff::FactionGuardSocialRankListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SL_FactionGuardRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionGuardSocialRankListProto rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SL_FactionGuardRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionGuardSocialRankListProto rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SL_FactionGuardRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionGuardSocialRankListProto rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SL_FactionGuardRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionGuardSocialRankListProto rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SL_FactionGuardRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SL_FactionGuardRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SL_FactionGuardRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SL_FactionGuardRank::MergeFrom(const SL_FactionGuardRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      mutable_rank()->::proto_ff::FactionGuardSocialRankListProto::MergeFrom(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SL_FactionGuardRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SL_FactionGuardRank::CopyFrom(const SL_FactionGuardRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SL_FactionGuardRank::IsInitialized() const {

  return true;
}

void SL_FactionGuardRank::Swap(SL_FactionGuardRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SL_FactionGuardRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SL_FactionGuardRank_descriptor_;
  metadata.reflection = SL_FactionGuardRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SL_FactionGuardCurRankReq::kCidFieldNumber;
#endif  // !_MSC_VER

SL_FactionGuardCurRankReq::SL_FactionGuardCurRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SL_FactionGuardCurRankReq::InitAsDefaultInstance() {
}

SL_FactionGuardCurRankReq::SL_FactionGuardCurRankReq(const SL_FactionGuardCurRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SL_FactionGuardCurRankReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SL_FactionGuardCurRankReq::~SL_FactionGuardCurRankReq() {
  SharedDtor();
}

void SL_FactionGuardCurRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SL_FactionGuardCurRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SL_FactionGuardCurRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SL_FactionGuardCurRankReq_descriptor_;
}

const SL_FactionGuardCurRankReq& SL_FactionGuardCurRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

SL_FactionGuardCurRankReq* SL_FactionGuardCurRankReq::default_instance_ = NULL;

SL_FactionGuardCurRankReq* SL_FactionGuardCurRankReq::New() const {
  return new SL_FactionGuardCurRankReq;
}

void SL_FactionGuardCurRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SL_FactionGuardCurRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SL_FactionGuardCurRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SL_FactionGuardCurRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SL_FactionGuardCurRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SL_FactionGuardCurRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SL_FactionGuardCurRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SL_FactionGuardCurRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SL_FactionGuardCurRankReq::MergeFrom(const SL_FactionGuardCurRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SL_FactionGuardCurRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SL_FactionGuardCurRankReq::CopyFrom(const SL_FactionGuardCurRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SL_FactionGuardCurRankReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SL_FactionGuardCurRankReq::Swap(SL_FactionGuardCurRankReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SL_FactionGuardCurRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SL_FactionGuardCurRankReq_descriptor_;
  metadata.reflection = SL_FactionGuardCurRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FactionGuardRankResultNotify::kRankFieldNumber;
#endif  // !_MSC_VER

SC_FactionGuardRankResultNotify::SC_FactionGuardRankResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FactionGuardRankResultNotify::InitAsDefaultInstance() {
  rank_ = const_cast< ::proto_ff::FactionGuardSocialRankProto*>(&::proto_ff::FactionGuardSocialRankProto::default_instance());
}

SC_FactionGuardRankResultNotify::SC_FactionGuardRankResultNotify(const SC_FactionGuardRankResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FactionGuardRankResultNotify::SharedCtor() {
  _cached_size_ = 0;
  rank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FactionGuardRankResultNotify::~SC_FactionGuardRankResultNotify() {
  SharedDtor();
}

void SC_FactionGuardRankResultNotify::SharedDtor() {
  if (this != default_instance_) {
    delete rank_;
  }
}

void SC_FactionGuardRankResultNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FactionGuardRankResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FactionGuardRankResultNotify_descriptor_;
}

const SC_FactionGuardRankResultNotify& SC_FactionGuardRankResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

SC_FactionGuardRankResultNotify* SC_FactionGuardRankResultNotify::default_instance_ = NULL;

SC_FactionGuardRankResultNotify* SC_FactionGuardRankResultNotify::New() const {
  return new SC_FactionGuardRankResultNotify;
}

void SC_FactionGuardRankResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rank()) {
      if (rank_ != NULL) rank_->::proto_ff::FactionGuardSocialRankProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FactionGuardRankResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionGuardSocialRankProto rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FactionGuardRankResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionGuardSocialRankProto rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FactionGuardRankResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionGuardSocialRankProto rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FactionGuardRankResultNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionGuardSocialRankProto rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FactionGuardRankResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FactionGuardRankResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FactionGuardRankResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FactionGuardRankResultNotify::MergeFrom(const SC_FactionGuardRankResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      mutable_rank()->::proto_ff::FactionGuardSocialRankProto::MergeFrom(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FactionGuardRankResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FactionGuardRankResultNotify::CopyFrom(const SC_FactionGuardRankResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FactionGuardRankResultNotify::IsInitialized() const {

  return true;
}

void SC_FactionGuardRankResultNotify::Swap(SC_FactionGuardRankResultNotify* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FactionGuardRankResultNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FactionGuardRankResultNotify_descriptor_;
  metadata.reflection = SC_FactionGuardRankResultNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LS_FactionGuardEndRsp::kFactionidFieldNumber;
const int LS_FactionGuardEndRsp::kZidFieldNumber;
const int LS_FactionGuardEndRsp::kEndtimeFieldNumber;
#endif  // !_MSC_VER

LS_FactionGuardEndRsp::LS_FactionGuardEndRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LS_FactionGuardEndRsp::InitAsDefaultInstance() {
}

LS_FactionGuardEndRsp::LS_FactionGuardEndRsp(const LS_FactionGuardEndRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LS_FactionGuardEndRsp::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  zid_ = 0u;
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LS_FactionGuardEndRsp::~LS_FactionGuardEndRsp() {
  SharedDtor();
}

void LS_FactionGuardEndRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LS_FactionGuardEndRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LS_FactionGuardEndRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LS_FactionGuardEndRsp_descriptor_;
}

const LS_FactionGuardEndRsp& LS_FactionGuardEndRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LS_FactionGuardEndRsp* LS_FactionGuardEndRsp::default_instance_ = NULL;

LS_FactionGuardEndRsp* LS_FactionGuardEndRsp::New() const {
  return new LS_FactionGuardEndRsp;
}

void LS_FactionGuardEndRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    zid_ = 0u;
    endtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LS_FactionGuardEndRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // required uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // required uint64 endtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LS_FactionGuardEndRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // required uint64 endtime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LS_FactionGuardEndRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // required uint64 endtime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LS_FactionGuardEndRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }

    // required uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required uint64 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LS_FactionGuardEndRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LS_FactionGuardEndRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LS_FactionGuardEndRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LS_FactionGuardEndRsp::MergeFrom(const LS_FactionGuardEndRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LS_FactionGuardEndRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LS_FactionGuardEndRsp::CopyFrom(const LS_FactionGuardEndRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LS_FactionGuardEndRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LS_FactionGuardEndRsp::Swap(LS_FactionGuardEndRsp* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(zid_, other->zid_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LS_FactionGuardEndRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LS_FactionGuardEndRsp_descriptor_;
  metadata.reflection = LS_FactionGuardEndRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LC_FactionGuardEndRsp::kFactionidFieldNumber;
const int LC_FactionGuardEndRsp::kCidLstFieldNumber;
const int LC_FactionGuardEndRsp::kRewardFieldNumber;
#endif  // !_MSC_VER

LC_FactionGuardEndRsp::LC_FactionGuardEndRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LC_FactionGuardEndRsp::InitAsDefaultInstance() {
}

LC_FactionGuardEndRsp::LC_FactionGuardEndRsp(const LC_FactionGuardEndRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LC_FactionGuardEndRsp::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LC_FactionGuardEndRsp::~LC_FactionGuardEndRsp() {
  SharedDtor();
}

void LC_FactionGuardEndRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LC_FactionGuardEndRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LC_FactionGuardEndRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LC_FactionGuardEndRsp_descriptor_;
}

const LC_FactionGuardEndRsp& LC_FactionGuardEndRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LC_FactionGuardEndRsp* LC_FactionGuardEndRsp::default_instance_ = NULL;

LC_FactionGuardEndRsp* LC_FactionGuardEndRsp::New() const {
  return new LC_FactionGuardEndRsp;
}

void LC_FactionGuardEndRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
  }
  cid_lst_.Clear();
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LC_FactionGuardEndRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid_lst;
        break;
      }

      // repeated uint64 cid_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_cid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid_lst;
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ComItemBind reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LC_FactionGuardEndRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }

  // repeated uint64 cid_lst = 2;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->cid_lst(i), output);
  }

  // repeated .proto_ff.ComItemBind reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LC_FactionGuardEndRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }

  // repeated uint64 cid_lst = 2;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->cid_lst(i), target);
  }

  // repeated .proto_ff.ComItemBind reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LC_FactionGuardEndRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }

  }
  // repeated uint64 cid_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_lst(i));
    }
    total_size += 1 * this->cid_lst_size() + data_size;
  }

  // repeated .proto_ff.ComItemBind reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LC_FactionGuardEndRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LC_FactionGuardEndRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LC_FactionGuardEndRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LC_FactionGuardEndRsp::MergeFrom(const LC_FactionGuardEndRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_lst_.MergeFrom(from.cid_lst_);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LC_FactionGuardEndRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_FactionGuardEndRsp::CopyFrom(const LC_FactionGuardEndRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_FactionGuardEndRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LC_FactionGuardEndRsp::Swap(LC_FactionGuardEndRsp* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    cid_lst_.Swap(&other->cid_lst_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LC_FactionGuardEndRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LC_FactionGuardEndRsp_descriptor_;
  metadata.reflection = LC_FactionGuardEndRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuardPlayerHarm::kCidFieldNumber;
const int GuardPlayerHarm::kHarmFieldNumber;
#endif  // !_MSC_VER

GuardPlayerHarm::GuardPlayerHarm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuardPlayerHarm::InitAsDefaultInstance() {
}

GuardPlayerHarm::GuardPlayerHarm(const GuardPlayerHarm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuardPlayerHarm::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  harm_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuardPlayerHarm::~GuardPlayerHarm() {
  SharedDtor();
}

void GuardPlayerHarm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuardPlayerHarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuardPlayerHarm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuardPlayerHarm_descriptor_;
}

const GuardPlayerHarm& GuardPlayerHarm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

GuardPlayerHarm* GuardPlayerHarm::default_instance_ = NULL;

GuardPlayerHarm* GuardPlayerHarm::New() const {
  return new GuardPlayerHarm;
}

void GuardPlayerHarm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    harm_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuardPlayerHarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_harm;
        break;
      }

      // required uint64 harm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuardPlayerHarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint64 harm = 2;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuardPlayerHarm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint64 harm = 2;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuardPlayerHarm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint64 harm = 2;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuardPlayerHarm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuardPlayerHarm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuardPlayerHarm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuardPlayerHarm::MergeFrom(const GuardPlayerHarm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuardPlayerHarm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuardPlayerHarm::CopyFrom(const GuardPlayerHarm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardPlayerHarm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuardPlayerHarm::Swap(GuardPlayerHarm* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(harm_, other->harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuardPlayerHarm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuardPlayerHarm_descriptor_;
  metadata.reflection = GuardPlayerHarm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LC_FactionGuardPlayerHarm::kPlayersFieldNumber;
const int LC_FactionGuardPlayerHarm::kLogicidFieldNumber;
const int LC_FactionGuardPlayerHarm::kFactionIdFieldNumber;
const int LC_FactionGuardPlayerHarm::kSceneIdFieldNumber;
#endif  // !_MSC_VER

LC_FactionGuardPlayerHarm::LC_FactionGuardPlayerHarm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LC_FactionGuardPlayerHarm::InitAsDefaultInstance() {
}

LC_FactionGuardPlayerHarm::LC_FactionGuardPlayerHarm(const LC_FactionGuardPlayerHarm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LC_FactionGuardPlayerHarm::SharedCtor() {
  _cached_size_ = 0;
  logicid_ = 0u;
  faction_id_ = 0u;
  scene_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LC_FactionGuardPlayerHarm::~LC_FactionGuardPlayerHarm() {
  SharedDtor();
}

void LC_FactionGuardPlayerHarm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LC_FactionGuardPlayerHarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LC_FactionGuardPlayerHarm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LC_FactionGuardPlayerHarm_descriptor_;
}

const LC_FactionGuardPlayerHarm& LC_FactionGuardPlayerHarm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LC_FactionGuardPlayerHarm* LC_FactionGuardPlayerHarm::default_instance_ = NULL;

LC_FactionGuardPlayerHarm* LC_FactionGuardPlayerHarm::New() const {
  return new LC_FactionGuardPlayerHarm;
}

void LC_FactionGuardPlayerHarm::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    logicid_ = 0u;
    faction_id_ = 0u;
    scene_id_ = GOOGLE_ULONGLONG(0);
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LC_FactionGuardPlayerHarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GuardPlayerHarm players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_logicid;
        break;
      }

      // required uint32 logicid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_faction_id;
        break;
      }

      // required uint32 faction_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // required uint64 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LC_FactionGuardPlayerHarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GuardPlayerHarm players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // required uint32 logicid = 2;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logicid(), output);
  }

  // required uint32 faction_id = 3;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->faction_id(), output);
  }

  // required uint64 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LC_FactionGuardPlayerHarm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GuardPlayerHarm players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // required uint32 logicid = 2;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logicid(), target);
  }

  // required uint32 faction_id = 3;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->faction_id(), target);
  }

  // required uint64 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LC_FactionGuardPlayerHarm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 logicid = 2;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicid());
    }

    // required uint32 faction_id = 3;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // required uint64 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

  }
  // repeated .proto_ff.GuardPlayerHarm players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LC_FactionGuardPlayerHarm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LC_FactionGuardPlayerHarm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LC_FactionGuardPlayerHarm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LC_FactionGuardPlayerHarm::MergeFrom(const LC_FactionGuardPlayerHarm& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LC_FactionGuardPlayerHarm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_FactionGuardPlayerHarm::CopyFrom(const LC_FactionGuardPlayerHarm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_FactionGuardPlayerHarm::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void LC_FactionGuardPlayerHarm::Swap(LC_FactionGuardPlayerHarm* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(logicid_, other->logicid_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LC_FactionGuardPlayerHarm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LC_FactionGuardPlayerHarm_descriptor_;
  metadata.reflection = LC_FactionGuardPlayerHarm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FactionAnswerFinalRsp::kFinalFieldNumber;
#endif  // !_MSC_VER

SC_FactionAnswerFinalRsp::SC_FactionAnswerFinalRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FactionAnswerFinalRsp::InitAsDefaultInstance() {
}

SC_FactionAnswerFinalRsp::SC_FactionAnswerFinalRsp(const SC_FactionAnswerFinalRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FactionAnswerFinalRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FactionAnswerFinalRsp::~SC_FactionAnswerFinalRsp() {
  SharedDtor();
}

void SC_FactionAnswerFinalRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FactionAnswerFinalRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FactionAnswerFinalRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FactionAnswerFinalRsp_descriptor_;
}

const SC_FactionAnswerFinalRsp& SC_FactionAnswerFinalRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

SC_FactionAnswerFinalRsp* SC_FactionAnswerFinalRsp::default_instance_ = NULL;

SC_FactionAnswerFinalRsp* SC_FactionAnswerFinalRsp::New() const {
  return new SC_FactionAnswerFinalRsp;
}

void SC_FactionAnswerFinalRsp::Clear() {
  final_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FactionAnswerFinalRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionAnswerFinalProto final = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_final:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_final()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_final;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FactionAnswerFinalRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionAnswerFinalProto final = 1;
  for (int i = 0; i < this->final_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->final(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FactionAnswerFinalRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionAnswerFinalProto final = 1;
  for (int i = 0; i < this->final_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->final(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FactionAnswerFinalRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionAnswerFinalProto final = 1;
  total_size += 1 * this->final_size();
  for (int i = 0; i < this->final_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->final(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FactionAnswerFinalRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FactionAnswerFinalRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FactionAnswerFinalRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FactionAnswerFinalRsp::MergeFrom(const SC_FactionAnswerFinalRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  final_.MergeFrom(from.final_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FactionAnswerFinalRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FactionAnswerFinalRsp::CopyFrom(const SC_FactionAnswerFinalRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FactionAnswerFinalRsp::IsInitialized() const {

  return true;
}

void SC_FactionAnswerFinalRsp::Swap(SC_FactionAnswerFinalRsp* other) {
  if (other != this) {
    final_.Swap(&other->final_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FactionAnswerFinalRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FactionAnswerFinalRsp_descriptor_;
  metadata.reflection = SC_FactionAnswerFinalRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CL_FactionAnswerQuestionRsp::kCidFieldNumber;
const int CL_FactionAnswerQuestionRsp::kFirstFieldNumber;
const int CL_FactionAnswerQuestionRsp::kCurnumFieldNumber;
const int CL_FactionAnswerQuestionRsp::kContentFieldNumber;
#endif  // !_MSC_VER

CL_FactionAnswerQuestionRsp::CL_FactionAnswerQuestionRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CL_FactionAnswerQuestionRsp::InitAsDefaultInstance() {
}

CL_FactionAnswerQuestionRsp::CL_FactionAnswerQuestionRsp(const CL_FactionAnswerQuestionRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CL_FactionAnswerQuestionRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  first_ = 0;
  curnum_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CL_FactionAnswerQuestionRsp::~CL_FactionAnswerQuestionRsp() {
  SharedDtor();
}

void CL_FactionAnswerQuestionRsp::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void CL_FactionAnswerQuestionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CL_FactionAnswerQuestionRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CL_FactionAnswerQuestionRsp_descriptor_;
}

const CL_FactionAnswerQuestionRsp& CL_FactionAnswerQuestionRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

CL_FactionAnswerQuestionRsp* CL_FactionAnswerQuestionRsp::default_instance_ = NULL;

CL_FactionAnswerQuestionRsp* CL_FactionAnswerQuestionRsp::New() const {
  return new CL_FactionAnswerQuestionRsp;
}

void CL_FactionAnswerQuestionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    first_ = 0;
    curnum_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CL_FactionAnswerQuestionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first;
        break;
      }

      // required int32 first = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curnum;
        break;
      }

      // required int32 curnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curnum_)));
          set_has_curnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required bytes content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CL_FactionAnswerQuestionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required int32 first = 2;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->first(), output);
  }

  // required int32 curnum = 3;
  if (has_curnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curnum(), output);
  }

  // required bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CL_FactionAnswerQuestionRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required int32 first = 2;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->first(), target);
  }

  // required int32 curnum = 3;
  if (has_curnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curnum(), target);
  }

  // required bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CL_FactionAnswerQuestionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required int32 first = 2;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first());
    }

    // required int32 curnum = 3;
    if (has_curnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curnum());
    }

    // required bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CL_FactionAnswerQuestionRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CL_FactionAnswerQuestionRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CL_FactionAnswerQuestionRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CL_FactionAnswerQuestionRsp::MergeFrom(const CL_FactionAnswerQuestionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_curnum()) {
      set_curnum(from.curnum());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CL_FactionAnswerQuestionRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CL_FactionAnswerQuestionRsp::CopyFrom(const CL_FactionAnswerQuestionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CL_FactionAnswerQuestionRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CL_FactionAnswerQuestionRsp::Swap(CL_FactionAnswerQuestionRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(first_, other->first_);
    std::swap(curnum_, other->curnum_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CL_FactionAnswerQuestionRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CL_FactionAnswerQuestionRsp_descriptor_;
  metadata.reflection = CL_FactionAnswerQuestionRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMoyuRankEntry::kIdFieldNumber;
const int FactionMoyuRankEntry::kNameFieldNumber;
const int FactionMoyuRankEntry::kZidFieldNumber;
const int FactionMoyuRankEntry::kHarmFieldNumber;
const int FactionMoyuRankEntry::kRankFieldNumber;
#endif  // !_MSC_VER

FactionMoyuRankEntry::FactionMoyuRankEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMoyuRankEntry::InitAsDefaultInstance() {
}

FactionMoyuRankEntry::FactionMoyuRankEntry(const FactionMoyuRankEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMoyuRankEntry::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0;
  harm_ = GOOGLE_ULONGLONG(0);
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMoyuRankEntry::~FactionMoyuRankEntry() {
  SharedDtor();
}

void FactionMoyuRankEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionMoyuRankEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMoyuRankEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMoyuRankEntry_descriptor_;
}

const FactionMoyuRankEntry& FactionMoyuRankEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMoyuRankEntry* FactionMoyuRankEntry::default_instance_ = NULL;

FactionMoyuRankEntry* FactionMoyuRankEntry::New() const {
  return new FactionMoyuRankEntry;
}

void FactionMoyuRankEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0;
    harm_ = GOOGLE_ULONGLONG(0);
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMoyuRankEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional int32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_harm;
        break;
      }

      // optional uint64 harm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // optional int32 rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMoyuRankEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zid(), output);
  }

  // optional uint64 harm = 4;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->harm(), output);
  }

  // optional int32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMoyuRankEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zid(), target);
  }

  // optional uint64 harm = 4;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->harm(), target);
  }

  // optional int32 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMoyuRankEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional uint64 harm = 4;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm());
    }

    // optional int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMoyuRankEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMoyuRankEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMoyuRankEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMoyuRankEntry::MergeFrom(const FactionMoyuRankEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMoyuRankEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMoyuRankEntry::CopyFrom(const FactionMoyuRankEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMoyuRankEntry::IsInitialized() const {

  return true;
}

void FactionMoyuRankEntry::Swap(FactionMoyuRankEntry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(harm_, other->harm_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMoyuRankEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMoyuRankEntry_descriptor_;
  metadata.reflection = FactionMoyuRankEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMoyuRankReq::kTypeFieldNumber;
#endif  // !_MSC_VER

FactionMoyuRankReq::FactionMoyuRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMoyuRankReq::InitAsDefaultInstance() {
}

FactionMoyuRankReq::FactionMoyuRankReq(const FactionMoyuRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMoyuRankReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMoyuRankReq::~FactionMoyuRankReq() {
  SharedDtor();
}

void FactionMoyuRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMoyuRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMoyuRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMoyuRankReq_descriptor_;
}

const FactionMoyuRankReq& FactionMoyuRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMoyuRankReq* FactionMoyuRankReq::default_instance_ = NULL;

FactionMoyuRankReq* FactionMoyuRankReq::New() const {
  return new FactionMoyuRankReq;
}

void FactionMoyuRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMoyuRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMoyuRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMoyuRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMoyuRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMoyuRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMoyuRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMoyuRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMoyuRankReq::MergeFrom(const FactionMoyuRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMoyuRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMoyuRankReq::CopyFrom(const FactionMoyuRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMoyuRankReq::IsInitialized() const {

  return true;
}

void FactionMoyuRankReq::Swap(FactionMoyuRankReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMoyuRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMoyuRankReq_descriptor_;
  metadata.reflection = FactionMoyuRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtFactionMoyuRank::kTypeFieldNumber;
const int NtFactionMoyuRank::kInfosFieldNumber;
const int NtFactionMoyuRank::kHarmFieldNumber;
const int NtFactionMoyuRank::kRankFieldNumber;
#endif  // !_MSC_VER

NtFactionMoyuRank::NtFactionMoyuRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NtFactionMoyuRank::InitAsDefaultInstance() {
}

NtFactionMoyuRank::NtFactionMoyuRank(const NtFactionMoyuRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NtFactionMoyuRank::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  harm_ = GOOGLE_ULONGLONG(0);
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtFactionMoyuRank::~NtFactionMoyuRank() {
  SharedDtor();
}

void NtFactionMoyuRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtFactionMoyuRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtFactionMoyuRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtFactionMoyuRank_descriptor_;
}

const NtFactionMoyuRank& NtFactionMoyuRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

NtFactionMoyuRank* NtFactionMoyuRank::default_instance_ = NULL;

NtFactionMoyuRank* NtFactionMoyuRank::New() const {
  return new NtFactionMoyuRank;
}

void NtFactionMoyuRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    harm_ = GOOGLE_ULONGLONG(0);
    rank_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtFactionMoyuRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.FactionMoyuRankEntry infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(24)) goto parse_harm;
        break;
      }

      // optional uint64 harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NtFactionMoyuRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.FactionMoyuRankEntry infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional uint64 harm = 3;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->harm(), output);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NtFactionMoyuRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.FactionMoyuRankEntry infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // optional uint64 harm = 3;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->harm(), target);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NtFactionMoyuRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 harm = 3;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm());
    }

    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  // repeated .proto_ff.FactionMoyuRankEntry infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtFactionMoyuRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtFactionMoyuRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtFactionMoyuRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtFactionMoyuRank::MergeFrom(const NtFactionMoyuRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtFactionMoyuRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtFactionMoyuRank::CopyFrom(const NtFactionMoyuRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtFactionMoyuRank::IsInitialized() const {

  return true;
}

void NtFactionMoyuRank::Swap(NtFactionMoyuRank* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(harm_, other->harm_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtFactionMoyuRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtFactionMoyuRank_descriptor_;
  metadata.reflection = NtFactionMoyuRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMoyuRecvReq::kLayeridFieldNumber;
#endif  // !_MSC_VER

FactionMoyuRecvReq::FactionMoyuRecvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMoyuRecvReq::InitAsDefaultInstance() {
}

FactionMoyuRecvReq::FactionMoyuRecvReq(const FactionMoyuRecvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMoyuRecvReq::SharedCtor() {
  _cached_size_ = 0;
  layerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMoyuRecvReq::~FactionMoyuRecvReq() {
  SharedDtor();
}

void FactionMoyuRecvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMoyuRecvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMoyuRecvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMoyuRecvReq_descriptor_;
}

const FactionMoyuRecvReq& FactionMoyuRecvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMoyuRecvReq* FactionMoyuRecvReq::default_instance_ = NULL;

FactionMoyuRecvReq* FactionMoyuRecvReq::New() const {
  return new FactionMoyuRecvReq;
}

void FactionMoyuRecvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMoyuRecvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMoyuRecvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 layerid = 1;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMoyuRecvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 layerid = 1;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMoyuRecvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 layerid = 1;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMoyuRecvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMoyuRecvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMoyuRecvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMoyuRecvReq::MergeFrom(const FactionMoyuRecvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMoyuRecvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMoyuRecvReq::CopyFrom(const FactionMoyuRecvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMoyuRecvReq::IsInitialized() const {

  return true;
}

void FactionMoyuRecvReq::Swap(FactionMoyuRecvReq* other) {
  if (other != this) {
    std::swap(layerid_, other->layerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMoyuRecvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMoyuRecvReq_descriptor_;
  metadata.reflection = FactionMoyuRecvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMoyuRecvRsp::kRetFieldNumber;
const int FactionMoyuRecvRsp::kLayeridFieldNumber;
#endif  // !_MSC_VER

FactionMoyuRecvRsp::FactionMoyuRecvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMoyuRecvRsp::InitAsDefaultInstance() {
}

FactionMoyuRecvRsp::FactionMoyuRecvRsp(const FactionMoyuRecvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMoyuRecvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  layerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMoyuRecvRsp::~FactionMoyuRecvRsp() {
  SharedDtor();
}

void FactionMoyuRecvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMoyuRecvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMoyuRecvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMoyuRecvRsp_descriptor_;
}

const FactionMoyuRecvRsp& FactionMoyuRecvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMoyuRecvRsp* FactionMoyuRecvRsp::default_instance_ = NULL;

FactionMoyuRecvRsp* FactionMoyuRecvRsp::New() const {
  return new FactionMoyuRecvRsp;
}

void FactionMoyuRecvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    layerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMoyuRecvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_layerid;
        break;
      }

      // optional int32 layerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMoyuRecvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 layerid = 2;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->layerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMoyuRecvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 layerid = 2;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->layerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMoyuRecvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 layerid = 2;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMoyuRecvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMoyuRecvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMoyuRecvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMoyuRecvRsp::MergeFrom(const FactionMoyuRecvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMoyuRecvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMoyuRecvRsp::CopyFrom(const FactionMoyuRecvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMoyuRecvRsp::IsInitialized() const {

  return true;
}

void FactionMoyuRecvRsp::Swap(FactionMoyuRecvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(layerid_, other->layerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMoyuRecvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMoyuRecvRsp_descriptor_;
  metadata.reflection = FactionMoyuRecvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyFactionMoyuDup::kTargetCidFieldNumber;
const int NotifyFactionMoyuDup::kMaxHpFieldNumber;
const int NotifyFactionMoyuDup::kCurHpFieldNumber;
#endif  // !_MSC_VER

NotifyFactionMoyuDup::NotifyFactionMoyuDup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyFactionMoyuDup::InitAsDefaultInstance() {
}

NotifyFactionMoyuDup::NotifyFactionMoyuDup(const NotifyFactionMoyuDup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyFactionMoyuDup::SharedCtor() {
  _cached_size_ = 0;
  target_cid_ = GOOGLE_ULONGLONG(0);
  max_hp_ = GOOGLE_ULONGLONG(0);
  cur_hp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyFactionMoyuDup::~NotifyFactionMoyuDup() {
  SharedDtor();
}

void NotifyFactionMoyuDup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyFactionMoyuDup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyFactionMoyuDup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFactionMoyuDup_descriptor_;
}

const NotifyFactionMoyuDup& NotifyFactionMoyuDup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

NotifyFactionMoyuDup* NotifyFactionMoyuDup::default_instance_ = NULL;

NotifyFactionMoyuDup* NotifyFactionMoyuDup::New() const {
  return new NotifyFactionMoyuDup;
}

void NotifyFactionMoyuDup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_cid_ = GOOGLE_ULONGLONG(0);
    max_hp_ = GOOGLE_ULONGLONG(0);
    cur_hp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyFactionMoyuDup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 target_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_cid_)));
          set_has_target_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_hp;
        break;
      }

      // optional uint64 max_hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_hp;
        break;
      }

      // optional uint64 cur_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyFactionMoyuDup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 target_cid = 1;
  if (has_target_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->target_cid(), output);
  }

  // optional uint64 max_hp = 2;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->max_hp(), output);
  }

  // optional uint64 cur_hp = 3;
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cur_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyFactionMoyuDup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 target_cid = 1;
  if (has_target_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->target_cid(), target);
  }

  // optional uint64 max_hp = 2;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->max_hp(), target);
  }

  // optional uint64 cur_hp = 3;
  if (has_cur_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cur_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyFactionMoyuDup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 target_cid = 1;
    if (has_target_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_cid());
    }

    // optional uint64 max_hp = 2;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_hp());
    }

    // optional uint64 cur_hp = 3;
    if (has_cur_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyFactionMoyuDup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyFactionMoyuDup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyFactionMoyuDup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyFactionMoyuDup::MergeFrom(const NotifyFactionMoyuDup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_cid()) {
      set_target_cid(from.target_cid());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyFactionMoyuDup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyFactionMoyuDup::CopyFrom(const NotifyFactionMoyuDup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFactionMoyuDup::IsInitialized() const {

  return true;
}

void NotifyFactionMoyuDup::Swap(NotifyFactionMoyuDup* other) {
  if (other != this) {
    std::swap(target_cid_, other->target_cid_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyFactionMoyuDup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyFactionMoyuDup_descriptor_;
  metadata.reflection = NotifyFactionMoyuDup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMoyuTeam::kInfoFieldNumber;
const int FactionMoyuTeam::kHarmFieldNumber;
const int FactionMoyuTeam::kStateFieldNumber;
const int FactionMoyuTeam::kMaxHpFieldNumber;
const int FactionMoyuTeam::kRewaditemFieldNumber;
#endif  // !_MSC_VER

FactionMoyuTeam::FactionMoyuTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMoyuTeam::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

FactionMoyuTeam::FactionMoyuTeam(const FactionMoyuTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMoyuTeam::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  harm_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  max_hp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMoyuTeam::~FactionMoyuTeam() {
  SharedDtor();
}

void FactionMoyuTeam::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void FactionMoyuTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMoyuTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMoyuTeam_descriptor_;
}

const FactionMoyuTeam& FactionMoyuTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMoyuTeam* FactionMoyuTeam::default_instance_ = NULL;

FactionMoyuTeam* FactionMoyuTeam::New() const {
  return new FactionMoyuTeam;
}

void FactionMoyuTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    harm_ = GOOGLE_ULONGLONG(0);
    state_ = 0u;
    max_hp_ = GOOGLE_ULONGLONG(0);
  }
  rewaditem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMoyuTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_harm;
        break;
      }

      // optional uint64 harm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_hp;
        break;
      }

      // optional uint64 max_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rewaditem;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo rewaditem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewaditem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewaditem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rewaditem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMoyuTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional uint64 harm = 2;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->harm(), output);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // optional uint64 max_hp = 4;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_hp(), output);
  }

  // repeated .proto_ff.ItemProtoInfo rewaditem = 5;
  for (int i = 0; i < this->rewaditem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewaditem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMoyuTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional uint64 harm = 2;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->harm(), target);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  // optional uint64 max_hp = 4;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_hp(), target);
  }

  // repeated .proto_ff.ItemProtoInfo rewaditem = 5;
  for (int i = 0; i < this->rewaditem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewaditem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMoyuTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint64 harm = 2;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm());
    }

    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint64 max_hp = 4;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_hp());
    }

  }
  // repeated .proto_ff.ItemProtoInfo rewaditem = 5;
  total_size += 1 * this->rewaditem_size();
  for (int i = 0; i < this->rewaditem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewaditem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMoyuTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMoyuTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMoyuTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMoyuTeam::MergeFrom(const FactionMoyuTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewaditem_.MergeFrom(from.rewaditem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.info());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMoyuTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMoyuTeam::CopyFrom(const FactionMoyuTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMoyuTeam::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  for (int i = 0; i < rewaditem_size(); i++) {
    if (!this->rewaditem(i).IsInitialized()) return false;
  }
  return true;
}

void FactionMoyuTeam::Swap(FactionMoyuTeam* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(harm_, other->harm_);
    std::swap(state_, other->state_);
    std::swap(max_hp_, other->max_hp_);
    rewaditem_.Swap(&other->rewaditem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMoyuTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMoyuTeam_descriptor_;
  metadata.reflection = FactionMoyuTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMoyuEndRsp::kDupidFieldNumber;
const int FactionMoyuEndRsp::kMemFieldNumber;
#endif  // !_MSC_VER

FactionMoyuEndRsp::FactionMoyuEndRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMoyuEndRsp::InitAsDefaultInstance() {
}

FactionMoyuEndRsp::FactionMoyuEndRsp(const FactionMoyuEndRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMoyuEndRsp::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMoyuEndRsp::~FactionMoyuEndRsp() {
  SharedDtor();
}

void FactionMoyuEndRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMoyuEndRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMoyuEndRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMoyuEndRsp_descriptor_;
}

const FactionMoyuEndRsp& FactionMoyuEndRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMoyuEndRsp* FactionMoyuEndRsp::default_instance_ = NULL;

FactionMoyuEndRsp* FactionMoyuEndRsp::New() const {
  return new FactionMoyuEndRsp;
}

void FactionMoyuEndRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = GOOGLE_ULONGLONG(0);
  }
  mem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMoyuEndRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mem;
        break;
      }

      // repeated .proto_ff.FactionMoyuTeam mem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMoyuEndRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dupid = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dupid(), output);
  }

  // repeated .proto_ff.FactionMoyuTeam mem = 2;
  for (int i = 0; i < this->mem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMoyuEndRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dupid = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dupid(), target);
  }

  // repeated .proto_ff.FactionMoyuTeam mem = 2;
  for (int i = 0; i < this->mem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMoyuEndRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dupid = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

  }
  // repeated .proto_ff.FactionMoyuTeam mem = 2;
  total_size += 1 * this->mem_size();
  for (int i = 0; i < this->mem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMoyuEndRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMoyuEndRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMoyuEndRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMoyuEndRsp::MergeFrom(const FactionMoyuEndRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mem_.MergeFrom(from.mem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMoyuEndRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMoyuEndRsp::CopyFrom(const FactionMoyuEndRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMoyuEndRsp::IsInitialized() const {

  for (int i = 0; i < mem_size(); i++) {
    if (!this->mem(i).IsInitialized()) return false;
  }
  return true;
}

void FactionMoyuEndRsp::Swap(FactionMoyuEndRsp* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    mem_.Swap(&other->mem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMoyuEndRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMoyuEndRsp_descriptor_;
  metadata.reflection = FactionMoyuEndRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FactionMoyuReq::FactionMoyuReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMoyuReq::InitAsDefaultInstance() {
}

FactionMoyuReq::FactionMoyuReq(const FactionMoyuReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMoyuReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMoyuReq::~FactionMoyuReq() {
  SharedDtor();
}

void FactionMoyuReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMoyuReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMoyuReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMoyuReq_descriptor_;
}

const FactionMoyuReq& FactionMoyuReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMoyuReq* FactionMoyuReq::default_instance_ = NULL;

FactionMoyuReq* FactionMoyuReq::New() const {
  return new FactionMoyuReq;
}

void FactionMoyuReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMoyuReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FactionMoyuReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMoyuReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMoyuReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMoyuReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMoyuReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMoyuReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMoyuReq::MergeFrom(const FactionMoyuReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMoyuReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMoyuReq::CopyFrom(const FactionMoyuReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMoyuReq::IsInitialized() const {

  return true;
}

void FactionMoyuReq::Swap(FactionMoyuReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMoyuReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMoyuReq_descriptor_;
  metadata.reflection = FactionMoyuReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtFactionMoyuHarm::kMemFieldNumber;
#endif  // !_MSC_VER

NtFactionMoyuHarm::NtFactionMoyuHarm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NtFactionMoyuHarm::InitAsDefaultInstance() {
}

NtFactionMoyuHarm::NtFactionMoyuHarm(const NtFactionMoyuHarm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NtFactionMoyuHarm::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtFactionMoyuHarm::~NtFactionMoyuHarm() {
  SharedDtor();
}

void NtFactionMoyuHarm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtFactionMoyuHarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtFactionMoyuHarm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtFactionMoyuHarm_descriptor_;
}

const NtFactionMoyuHarm& NtFactionMoyuHarm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

NtFactionMoyuHarm* NtFactionMoyuHarm::default_instance_ = NULL;

NtFactionMoyuHarm* NtFactionMoyuHarm::New() const {
  return new NtFactionMoyuHarm;
}

void NtFactionMoyuHarm::Clear() {
  mem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtFactionMoyuHarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionMoyuTeam mem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NtFactionMoyuHarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionMoyuTeam mem = 1;
  for (int i = 0; i < this->mem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NtFactionMoyuHarm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionMoyuTeam mem = 1;
  for (int i = 0; i < this->mem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NtFactionMoyuHarm::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionMoyuTeam mem = 1;
  total_size += 1 * this->mem_size();
  for (int i = 0; i < this->mem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtFactionMoyuHarm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtFactionMoyuHarm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtFactionMoyuHarm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtFactionMoyuHarm::MergeFrom(const NtFactionMoyuHarm& from) {
  GOOGLE_CHECK_NE(&from, this);
  mem_.MergeFrom(from.mem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtFactionMoyuHarm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtFactionMoyuHarm::CopyFrom(const NtFactionMoyuHarm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtFactionMoyuHarm::IsInitialized() const {

  for (int i = 0; i < mem_size(); i++) {
    if (!this->mem(i).IsInitialized()) return false;
  }
  return true;
}

void NtFactionMoyuHarm::Swap(NtFactionMoyuHarm* other) {
  if (other != this) {
    mem_.Swap(&other->mem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtFactionMoyuHarm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtFactionMoyuHarm_descriptor_;
  metadata.reflection = NtFactionMoyuHarm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtFactionMoyuDupKill::kEndtimeFieldNumber;
#endif  // !_MSC_VER

NtFactionMoyuDupKill::NtFactionMoyuDupKill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NtFactionMoyuDupKill::InitAsDefaultInstance() {
}

NtFactionMoyuDupKill::NtFactionMoyuDupKill(const NtFactionMoyuDupKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NtFactionMoyuDupKill::SharedCtor() {
  _cached_size_ = 0;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtFactionMoyuDupKill::~NtFactionMoyuDupKill() {
  SharedDtor();
}

void NtFactionMoyuDupKill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtFactionMoyuDupKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtFactionMoyuDupKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtFactionMoyuDupKill_descriptor_;
}

const NtFactionMoyuDupKill& NtFactionMoyuDupKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

NtFactionMoyuDupKill* NtFactionMoyuDupKill::default_instance_ = NULL;

NtFactionMoyuDupKill* NtFactionMoyuDupKill::New() const {
  return new NtFactionMoyuDupKill;
}

void NtFactionMoyuDupKill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    endtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtFactionMoyuDupKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 endtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NtFactionMoyuDupKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 endtime = 1;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NtFactionMoyuDupKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 endtime = 1;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NtFactionMoyuDupKill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 endtime = 1;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtFactionMoyuDupKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtFactionMoyuDupKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtFactionMoyuDupKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtFactionMoyuDupKill::MergeFrom(const NtFactionMoyuDupKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtFactionMoyuDupKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtFactionMoyuDupKill::CopyFrom(const NtFactionMoyuDupKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtFactionMoyuDupKill::IsInitialized() const {

  return true;
}

void NtFactionMoyuDupKill::Swap(NtFactionMoyuDupKill* other) {
  if (other != this) {
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtFactionMoyuDupKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtFactionMoyuDupKill_descriptor_;
  metadata.reflection = NtFactionMoyuDupKill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtFactionMoyu::kCurLayerFieldNumber;
const int NtFactionMoyu::kCurHpFieldNumber;
const int NtFactionMoyu::kMaxHpFieldNumber;
const int NtFactionMoyu::kPassLayerFieldNumber;
#endif  // !_MSC_VER

NtFactionMoyu::NtFactionMoyu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NtFactionMoyu::InitAsDefaultInstance() {
}

NtFactionMoyu::NtFactionMoyu(const NtFactionMoyu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NtFactionMoyu::SharedCtor() {
  _cached_size_ = 0;
  cur_layer_ = 0;
  cur_hp_ = GOOGLE_ULONGLONG(0);
  max_hp_ = GOOGLE_ULONGLONG(0);
  pass_layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtFactionMoyu::~NtFactionMoyu() {
  SharedDtor();
}

void NtFactionMoyu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtFactionMoyu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtFactionMoyu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtFactionMoyu_descriptor_;
}

const NtFactionMoyu& NtFactionMoyu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

NtFactionMoyu* NtFactionMoyu::default_instance_ = NULL;

NtFactionMoyu* NtFactionMoyu::New() const {
  return new NtFactionMoyu;
}

void NtFactionMoyu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_layer_ = 0;
    cur_hp_ = GOOGLE_ULONGLONG(0);
    max_hp_ = GOOGLE_ULONGLONG(0);
    pass_layer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtFactionMoyu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_layer_)));
          set_has_cur_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_hp;
        break;
      }

      // optional uint64 cur_hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_hp;
        break;
      }

      // optional uint64 max_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pass_layer;
        break;
      }

      // optional int32 pass_layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_layer_)));
          set_has_pass_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NtFactionMoyu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cur_layer = 1;
  if (has_cur_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_layer(), output);
  }

  // optional uint64 cur_hp = 2;
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cur_hp(), output);
  }

  // optional uint64 max_hp = 3;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->max_hp(), output);
  }

  // optional int32 pass_layer = 4;
  if (has_pass_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pass_layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NtFactionMoyu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cur_layer = 1;
  if (has_cur_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_layer(), target);
  }

  // optional uint64 cur_hp = 2;
  if (has_cur_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cur_hp(), target);
  }

  // optional uint64 max_hp = 3;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->max_hp(), target);
  }

  // optional int32 pass_layer = 4;
  if (has_pass_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pass_layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NtFactionMoyu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cur_layer = 1;
    if (has_cur_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_layer());
    }

    // optional uint64 cur_hp = 2;
    if (has_cur_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_hp());
    }

    // optional uint64 max_hp = 3;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_hp());
    }

    // optional int32 pass_layer = 4;
    if (has_pass_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtFactionMoyu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtFactionMoyu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtFactionMoyu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtFactionMoyu::MergeFrom(const NtFactionMoyu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_layer()) {
      set_cur_layer(from.cur_layer());
    }
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_pass_layer()) {
      set_pass_layer(from.pass_layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtFactionMoyu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtFactionMoyu::CopyFrom(const NtFactionMoyu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtFactionMoyu::IsInitialized() const {

  return true;
}

void NtFactionMoyu::Swap(NtFactionMoyu* other) {
  if (other != this) {
    std::swap(cur_layer_, other->cur_layer_);
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(pass_layer_, other->pass_layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtFactionMoyu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtFactionMoyu_descriptor_;
  metadata.reflection = NtFactionMoyu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMoyuRewardReq::kFactionIdFieldNumber;
const int FactionMoyuRewardReq::kBoxidFieldNumber;
const int FactionMoyuRewardReq::kRankFieldNumber;
#endif  // !_MSC_VER

FactionMoyuRewardReq::FactionMoyuRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMoyuRewardReq::InitAsDefaultInstance() {
}

FactionMoyuRewardReq::FactionMoyuRewardReq(const FactionMoyuRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMoyuRewardReq::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = GOOGLE_ULONGLONG(0);
  boxid_ = GOOGLE_ULONGLONG(0);
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMoyuRewardReq::~FactionMoyuRewardReq() {
  SharedDtor();
}

void FactionMoyuRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMoyuRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMoyuRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMoyuRewardReq_descriptor_;
}

const FactionMoyuRewardReq& FactionMoyuRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMoyuRewardReq* FactionMoyuRewardReq::default_instance_ = NULL;

FactionMoyuRewardReq* FactionMoyuRewardReq::New() const {
  return new FactionMoyuRewardReq;
}

void FactionMoyuRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = GOOGLE_ULONGLONG(0);
    boxid_ = GOOGLE_ULONGLONG(0);
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMoyuRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 factionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxid;
        break;
      }

      // optional uint64 boxid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMoyuRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 factionId = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->factionid(), output);
  }

  // optional uint64 boxid = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->boxid(), output);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMoyuRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 factionId = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->factionid(), target);
  }

  // optional uint64 boxid = 2;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->boxid(), target);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMoyuRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 factionId = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->factionid());
    }

    // optional uint64 boxid = 2;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->boxid());
    }

    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMoyuRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMoyuRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMoyuRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMoyuRewardReq::MergeFrom(const FactionMoyuRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMoyuRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMoyuRewardReq::CopyFrom(const FactionMoyuRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMoyuRewardReq::IsInitialized() const {

  return true;
}

void FactionMoyuRewardReq::Swap(FactionMoyuRewardReq* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(boxid_, other->boxid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMoyuRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMoyuRewardReq_descriptor_;
  metadata.reflection = FactionMoyuRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMoyuUpdateReq::kTypeFieldNumber;
const int FactionMoyuUpdateReq::kOptFieldNumber;
const int FactionMoyuUpdateReq::kIdFieldNumber;
const int FactionMoyuUpdateReq::kNameFieldNumber;
const int FactionMoyuUpdateReq::kZidFieldNumber;
const int FactionMoyuUpdateReq::kHarmFieldNumber;
const int FactionMoyuUpdateReq::kHarmTimeFieldNumber;
#endif  // !_MSC_VER

FactionMoyuUpdateReq::FactionMoyuUpdateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMoyuUpdateReq::InitAsDefaultInstance() {
}

FactionMoyuUpdateReq::FactionMoyuUpdateReq(const FactionMoyuUpdateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMoyuUpdateReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  opt_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0;
  harm_ = GOOGLE_ULONGLONG(0);
  harm_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMoyuUpdateReq::~FactionMoyuUpdateReq() {
  SharedDtor();
}

void FactionMoyuUpdateReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionMoyuUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMoyuUpdateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMoyuUpdateReq_descriptor_;
}

const FactionMoyuUpdateReq& FactionMoyuUpdateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMoyuUpdateReq* FactionMoyuUpdateReq::default_instance_ = NULL;

FactionMoyuUpdateReq* FactionMoyuUpdateReq::New() const {
  return new FactionMoyuUpdateReq;
}

void FactionMoyuUpdateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    opt_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0;
    harm_ = GOOGLE_ULONGLONG(0);
    harm_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMoyuUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // optional int32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zid;
        break;
      }

      // optional int32 zid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_harm;
        break;
      }

      // optional uint64 harm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_harm_time;
        break;
      }

      // optional uint64 harm_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_time_)));
          set_has_harm_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMoyuUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // optional int32 zid = 5;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zid(), output);
  }

  // optional uint64 harm = 6;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->harm(), output);
  }

  // optional uint64 harm_time = 7;
  if (has_harm_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->harm_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMoyuUpdateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // optional int32 zid = 5;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zid(), target);
  }

  // optional uint64 harm = 6;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->harm(), target);
  }

  // optional uint64 harm_time = 7;
  if (has_harm_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->harm_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMoyuUpdateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 zid = 5;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional uint64 harm = 6;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm());
    }

    // optional uint64 harm_time = 7;
    if (has_harm_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMoyuUpdateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMoyuUpdateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMoyuUpdateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMoyuUpdateReq::MergeFrom(const FactionMoyuUpdateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_harm_time()) {
      set_harm_time(from.harm_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMoyuUpdateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMoyuUpdateReq::CopyFrom(const FactionMoyuUpdateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMoyuUpdateReq::IsInitialized() const {

  return true;
}

void FactionMoyuUpdateReq::Swap(FactionMoyuUpdateReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(opt_, other->opt_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(harm_, other->harm_);
    std::swap(harm_time_, other->harm_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMoyuUpdateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMoyuUpdateReq_descriptor_;
  metadata.reflection = FactionMoyuUpdateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMoyuAddHarmReq::kFactionidFieldNumber;
const int FactionMoyuAddHarmReq::kAddHarmFieldNumber;
#endif  // !_MSC_VER

FactionMoyuAddHarmReq::FactionMoyuAddHarmReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMoyuAddHarmReq::InitAsDefaultInstance() {
}

FactionMoyuAddHarmReq::FactionMoyuAddHarmReq(const FactionMoyuAddHarmReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMoyuAddHarmReq::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = GOOGLE_ULONGLONG(0);
  add_harm_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMoyuAddHarmReq::~FactionMoyuAddHarmReq() {
  SharedDtor();
}

void FactionMoyuAddHarmReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMoyuAddHarmReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMoyuAddHarmReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMoyuAddHarmReq_descriptor_;
}

const FactionMoyuAddHarmReq& FactionMoyuAddHarmReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMoyuAddHarmReq* FactionMoyuAddHarmReq::default_instance_ = NULL;

FactionMoyuAddHarmReq* FactionMoyuAddHarmReq::New() const {
  return new FactionMoyuAddHarmReq;
}

void FactionMoyuAddHarmReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = GOOGLE_ULONGLONG(0);
    add_harm_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMoyuAddHarmReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_harm;
        break;
      }

      // optional uint64 add_harm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_harm_)));
          set_has_add_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMoyuAddHarmReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->factionid(), output);
  }

  // optional uint64 add_harm = 2;
  if (has_add_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->add_harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMoyuAddHarmReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->factionid(), target);
  }

  // optional uint64 add_harm = 2;
  if (has_add_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->add_harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMoyuAddHarmReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->factionid());
    }

    // optional uint64 add_harm = 2;
    if (has_add_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_harm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMoyuAddHarmReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMoyuAddHarmReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMoyuAddHarmReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMoyuAddHarmReq::MergeFrom(const FactionMoyuAddHarmReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_add_harm()) {
      set_add_harm(from.add_harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMoyuAddHarmReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMoyuAddHarmReq::CopyFrom(const FactionMoyuAddHarmReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMoyuAddHarmReq::IsInitialized() const {

  return true;
}

void FactionMoyuAddHarmReq::Swap(FactionMoyuAddHarmReq* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(add_harm_, other->add_harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMoyuAddHarmReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMoyuAddHarmReq_descriptor_;
  metadata.reflection = FactionMoyuAddHarmReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionSynMoyuReq::kFactionidFieldNumber;
const int FactionSynMoyuReq::kCurLayerFieldNumber;
const int FactionSynMoyuReq::kCurHpFieldNumber;
#endif  // !_MSC_VER

FactionSynMoyuReq::FactionSynMoyuReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionSynMoyuReq::InitAsDefaultInstance() {
}

FactionSynMoyuReq::FactionSynMoyuReq(const FactionSynMoyuReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionSynMoyuReq::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = GOOGLE_ULONGLONG(0);
  cur_layer_ = 0;
  cur_hp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionSynMoyuReq::~FactionSynMoyuReq() {
  SharedDtor();
}

void FactionSynMoyuReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionSynMoyuReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionSynMoyuReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionSynMoyuReq_descriptor_;
}

const FactionSynMoyuReq& FactionSynMoyuReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionSynMoyuReq* FactionSynMoyuReq::default_instance_ = NULL;

FactionSynMoyuReq* FactionSynMoyuReq::New() const {
  return new FactionSynMoyuReq;
}

void FactionSynMoyuReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = GOOGLE_ULONGLONG(0);
    cur_layer_ = 0;
    cur_hp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionSynMoyuReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_layer;
        break;
      }

      // optional int32 cur_layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_layer_)));
          set_has_cur_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_hp;
        break;
      }

      // optional uint64 cur_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionSynMoyuReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->factionid(), output);
  }

  // optional int32 cur_layer = 2;
  if (has_cur_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_layer(), output);
  }

  // optional uint64 cur_hp = 3;
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cur_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionSynMoyuReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->factionid(), target);
  }

  // optional int32 cur_layer = 2;
  if (has_cur_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_layer(), target);
  }

  // optional uint64 cur_hp = 3;
  if (has_cur_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cur_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionSynMoyuReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->factionid());
    }

    // optional int32 cur_layer = 2;
    if (has_cur_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_layer());
    }

    // optional uint64 cur_hp = 3;
    if (has_cur_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionSynMoyuReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionSynMoyuReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionSynMoyuReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionSynMoyuReq::MergeFrom(const FactionSynMoyuReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_cur_layer()) {
      set_cur_layer(from.cur_layer());
    }
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionSynMoyuReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionSynMoyuReq::CopyFrom(const FactionSynMoyuReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionSynMoyuReq::IsInitialized() const {

  return true;
}

void FactionSynMoyuReq::Swap(FactionSynMoyuReq* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(cur_layer_, other->cur_layer_);
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionSynMoyuReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionSynMoyuReq_descriptor_;
  metadata.reflection = FactionSynMoyuReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMoyuPassReq::kFactionidFieldNumber;
const int FactionMoyuPassReq::kLayeridFieldNumber;
#endif  // !_MSC_VER

FactionMoyuPassReq::FactionMoyuPassReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMoyuPassReq::InitAsDefaultInstance() {
}

FactionMoyuPassReq::FactionMoyuPassReq(const FactionMoyuPassReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMoyuPassReq::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = GOOGLE_ULONGLONG(0);
  layerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMoyuPassReq::~FactionMoyuPassReq() {
  SharedDtor();
}

void FactionMoyuPassReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMoyuPassReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMoyuPassReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMoyuPassReq_descriptor_;
}

const FactionMoyuPassReq& FactionMoyuPassReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMoyuPassReq* FactionMoyuPassReq::default_instance_ = NULL;

FactionMoyuPassReq* FactionMoyuPassReq::New() const {
  return new FactionMoyuPassReq;
}

void FactionMoyuPassReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = GOOGLE_ULONGLONG(0);
    layerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMoyuPassReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_layerid;
        break;
      }

      // optional uint32 layerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMoyuPassReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->factionid(), output);
  }

  // optional uint32 layerid = 2;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMoyuPassReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->factionid(), target);
  }

  // optional uint32 layerid = 2;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMoyuPassReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->factionid());
    }

    // optional uint32 layerid = 2;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMoyuPassReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMoyuPassReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMoyuPassReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMoyuPassReq::MergeFrom(const FactionMoyuPassReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMoyuPassReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMoyuPassReq::CopyFrom(const FactionMoyuPassReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMoyuPassReq::IsInitialized() const {

  return true;
}

void FactionMoyuPassReq::Swap(FactionMoyuPassReq* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(layerid_, other->layerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMoyuPassReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMoyuPassReq_descriptor_;
  metadata.reflection = FactionMoyuPassReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCFactionMoyuRankReq::kFactionidFieldNumber;
const int LCFactionMoyuRankReq::kIdFieldNumber;
const int LCFactionMoyuRankReq::kHarmFieldNumber;
const int LCFactionMoyuRankReq::kTypeFieldNumber;
const int LCFactionMoyuRankReq::kZidFieldNumber;
#endif  // !_MSC_VER

LCFactionMoyuRankReq::LCFactionMoyuRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCFactionMoyuRankReq::InitAsDefaultInstance() {
}

LCFactionMoyuRankReq::LCFactionMoyuRankReq(const LCFactionMoyuRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCFactionMoyuRankReq::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  harm_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  zid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCFactionMoyuRankReq::~LCFactionMoyuRankReq() {
  SharedDtor();
}

void LCFactionMoyuRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCFactionMoyuRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCFactionMoyuRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCFactionMoyuRankReq_descriptor_;
}

const LCFactionMoyuRankReq& LCFactionMoyuRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LCFactionMoyuRankReq* LCFactionMoyuRankReq::default_instance_ = NULL;

LCFactionMoyuRankReq* LCFactionMoyuRankReq::New() const {
  return new LCFactionMoyuRankReq;
}

void LCFactionMoyuRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = GOOGLE_ULONGLONG(0);
    id_ = GOOGLE_ULONGLONG(0);
    harm_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    zid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCFactionMoyuRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_harm;
        break;
      }

      // optional uint64 harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zid;
        break;
      }

      // optional int32 zid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCFactionMoyuRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->factionid(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint64 harm = 3;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->harm(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 zid = 5;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCFactionMoyuRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->factionid(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint64 harm = 3;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->harm(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 zid = 5;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCFactionMoyuRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->factionid());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 harm = 3;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 zid = 5;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCFactionMoyuRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCFactionMoyuRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCFactionMoyuRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCFactionMoyuRankReq::MergeFrom(const LCFactionMoyuRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCFactionMoyuRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCFactionMoyuRankReq::CopyFrom(const LCFactionMoyuRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCFactionMoyuRankReq::IsInitialized() const {

  return true;
}

void LCFactionMoyuRankReq::Swap(LCFactionMoyuRankReq* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(id_, other->id_);
    std::swap(harm_, other->harm_);
    std::swap(type_, other->type_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCFactionMoyuRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCFactionMoyuRankReq_descriptor_;
  metadata.reflection = LCFactionMoyuRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLFactionMoyuRecvReq::kLayeridFieldNumber;
const int CLFactionMoyuRecvReq::kCidFieldNumber;
#endif  // !_MSC_VER

CLFactionMoyuRecvReq::CLFactionMoyuRecvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLFactionMoyuRecvReq::InitAsDefaultInstance() {
}

CLFactionMoyuRecvReq::CLFactionMoyuRecvReq(const CLFactionMoyuRecvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLFactionMoyuRecvReq::SharedCtor() {
  _cached_size_ = 0;
  layerid_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLFactionMoyuRecvReq::~CLFactionMoyuRecvReq() {
  SharedDtor();
}

void CLFactionMoyuRecvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLFactionMoyuRecvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLFactionMoyuRecvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLFactionMoyuRecvReq_descriptor_;
}

const CLFactionMoyuRecvReq& CLFactionMoyuRecvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

CLFactionMoyuRecvReq* CLFactionMoyuRecvReq::default_instance_ = NULL;

CLFactionMoyuRecvReq* CLFactionMoyuRecvReq::New() const {
  return new CLFactionMoyuRecvReq;
}

void CLFactionMoyuRecvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layerid_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLFactionMoyuRecvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLFactionMoyuRecvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 layerid = 1;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layerid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLFactionMoyuRecvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 layerid = 1;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layerid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLFactionMoyuRecvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 layerid = 1;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layerid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLFactionMoyuRecvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLFactionMoyuRecvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLFactionMoyuRecvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLFactionMoyuRecvReq::MergeFrom(const CLFactionMoyuRecvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLFactionMoyuRecvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLFactionMoyuRecvReq::CopyFrom(const CLFactionMoyuRecvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLFactionMoyuRecvReq::IsInitialized() const {

  return true;
}

void CLFactionMoyuRecvReq::Swap(CLFactionMoyuRecvReq* other) {
  if (other != this) {
    std::swap(layerid_, other->layerid_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLFactionMoyuRecvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLFactionMoyuRecvReq_descriptor_;
  metadata.reflection = CLFactionMoyuRecvReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
