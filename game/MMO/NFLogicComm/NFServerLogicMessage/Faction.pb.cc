// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Faction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Faction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* FactionListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMemProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMemListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMemListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionApplyProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionApplyProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionApplyListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionApplyListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMemSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMemSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMemSimpleListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMemSimpleListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionRecordProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionRecordProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionRecordListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionRecordListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SyncLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SyncLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SyncInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SyncInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_InfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_InfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_InfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_InfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_InfoListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_InfoListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_InfoListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_InfoListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SimpleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SimpleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SimpleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SimpleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_MemListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_MemListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_MemListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_MemListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_CreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_CreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_CreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_CreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ApplyListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ApplyListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ApplyListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ApplyListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ApplyJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ApplyJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ApplyJoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ApplyJoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ApplyOperateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ApplyOperateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ApplyOperateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ApplyOperateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_KickReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_KickReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_KickRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_KickRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_QuitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_QuitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_QuitRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_QuitRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_AppointReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_AppointReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_AppointRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_AppointRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ChgNoticeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ChgNoticeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ChgNoticeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ChgNoticeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SetApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SetApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_SetApplyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_SetApplyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_OneKeyApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_OneKeyApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_OneKeyApplyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_OneKeyApplyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ChgNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ChgNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_ChgNameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_ChgNameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_NewApplyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_NewApplyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_InviteJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_InviteJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_InviteJoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_InviteJoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_IviteJoinNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_IviteJoinNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_RecordListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_RecordListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Faction_RecordListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Faction_RecordListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CL_FactionRoleUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CL_FactionRoleUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LC_FactionCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LC_FactionCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CL_FactionCreateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CL_FactionCreateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* LC_FactionChgName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LC_FactionChgName_reflection_ = NULL;
const ::google::protobuf::Descriptor* CL_FactionChgNameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CL_FactionChgNameResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Faction_2eproto() {
  protobuf_AddDesc_Faction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Faction.proto");
  GOOGLE_CHECK(file != NULL);
  FactionListProto_descriptor_ = file->message_type(0);
  static const int FactionListProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, leader_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, mem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, already_apply_),
  };
  FactionListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionListProto_descriptor_,
      FactionListProto::default_instance_,
      FactionListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionListProto));
  FactionProto_descriptor_ = file->message_type(1);
  static const int FactionProto_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, mem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, leader_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, apply_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, apply_minlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, apply_fight_),
  };
  FactionProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionProto_descriptor_,
      FactionProto::default_instance_,
      FactionProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionProto));
  FactionMemProto_descriptor_ = file->message_type(2);
  static const int FactionMemProto_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, total_contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, logout_time_),
  };
  FactionMemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMemProto_descriptor_,
      FactionMemProto::default_instance_,
      FactionMemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMemProto));
  FactionMemListProto_descriptor_ = file->message_type(3);
  static const int FactionMemListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemListProto, mem_lst_),
  };
  FactionMemListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMemListProto_descriptor_,
      FactionMemListProto::default_instance_,
      FactionMemListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMemListProto));
  FactionApplyProto_descriptor_ = file->message_type(4);
  static const int FactionApplyProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyProto, fight_),
  };
  FactionApplyProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionApplyProto_descriptor_,
      FactionApplyProto::default_instance_,
      FactionApplyProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionApplyProto));
  FactionApplyListProto_descriptor_ = file->message_type(5);
  static const int FactionApplyListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyListProto, apply_lst_),
  };
  FactionApplyListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionApplyListProto_descriptor_,
      FactionApplyListProto::default_instance_,
      FactionApplyListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionApplyListProto));
  FactionMemSimpleProto_descriptor_ = file->message_type(6);
  static const int FactionMemSimpleProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, fight_),
  };
  FactionMemSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMemSimpleProto_descriptor_,
      FactionMemSimpleProto::default_instance_,
      FactionMemSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMemSimpleProto));
  FactionMemSimpleListProto_descriptor_ = file->message_type(7);
  static const int FactionMemSimpleListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleListProto, simple_lst_),
  };
  FactionMemSimpleListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMemSimpleListProto_descriptor_,
      FactionMemSimpleListProto::default_instance_,
      FactionMemSimpleListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemSimpleListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMemSimpleListProto));
  FactionSimpleProto_descriptor_ = file->message_type(8);
  static const int FactionSimpleProto_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, leader_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, mem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, apply_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, apply_minlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, apply_fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, mem_),
  };
  FactionSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionSimpleProto_descriptor_,
      FactionSimpleProto::default_instance_,
      FactionSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionSimpleProto));
  FactionRecordProto_descriptor_ = file->message_type(9);
  static const int FactionRecordProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordProto, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordProto, param1_),
  };
  FactionRecordProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionRecordProto_descriptor_,
      FactionRecordProto::default_instance_,
      FactionRecordProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionRecordProto));
  FactionRecordListProto_descriptor_ = file->message_type(10);
  static const int FactionRecordListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordListProto, record_lst_),
  };
  FactionRecordListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionRecordListProto_descriptor_,
      FactionRecordListProto::default_instance_,
      FactionRecordListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionRecordListProto));
  Faction_SyncLoginRsp_descriptor_ = file->message_type(11);
  static const int Faction_SyncLoginRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncLoginRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncLoginRsp, duty_),
  };
  Faction_SyncLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SyncLoginRsp_descriptor_,
      Faction_SyncLoginRsp::default_instance_,
      Faction_SyncLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SyncLoginRsp));
  Faction_SyncInfoRsp_descriptor_ = file->message_type(12);
  static const int Faction_SyncInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncInfoRsp, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncInfoRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncInfoRsp, duty_),
  };
  Faction_SyncInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SyncInfoRsp_descriptor_,
      Faction_SyncInfoRsp::default_instance_,
      Faction_SyncInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SyncInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SyncInfoRsp));
  Faction_InfoReq_descriptor_ = file->message_type(13);
  static const int Faction_InfoReq_offsets_[1] = {
  };
  Faction_InfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_InfoReq_descriptor_,
      Faction_InfoReq::default_instance_,
      Faction_InfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_InfoReq));
  Faction_InfoRsp_descriptor_ = file->message_type(14);
  static const int Faction_InfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoRsp, info_),
  };
  Faction_InfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_InfoRsp_descriptor_,
      Faction_InfoRsp::default_instance_,
      Faction_InfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_InfoRsp));
  Faction_InfoListReq_descriptor_ = file->message_type(15);
  static const int Faction_InfoListReq_offsets_[1] = {
  };
  Faction_InfoListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_InfoListReq_descriptor_,
      Faction_InfoListReq::default_instance_,
      Faction_InfoListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_InfoListReq));
  Faction_InfoListRsp_descriptor_ = file->message_type(16);
  static const int Faction_InfoListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoListRsp, info_lst_),
  };
  Faction_InfoListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_InfoListRsp_descriptor_,
      Faction_InfoListRsp::default_instance_,
      Faction_InfoListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InfoListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_InfoListRsp));
  Faction_SimpleReq_descriptor_ = file->message_type(17);
  static const int Faction_SimpleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleReq, faction_id_),
  };
  Faction_SimpleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SimpleReq_descriptor_,
      Faction_SimpleReq::default_instance_,
      Faction_SimpleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SimpleReq));
  Faction_SimpleRsp_descriptor_ = file->message_type(18);
  static const int Faction_SimpleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleRsp, simple_),
  };
  Faction_SimpleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SimpleRsp_descriptor_,
      Faction_SimpleRsp::default_instance_,
      Faction_SimpleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SimpleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SimpleRsp));
  Faction_MemListReq_descriptor_ = file->message_type(19);
  static const int Faction_MemListReq_offsets_[1] = {
  };
  Faction_MemListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_MemListReq_descriptor_,
      Faction_MemListReq::default_instance_,
      Faction_MemListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_MemListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_MemListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_MemListReq));
  Faction_MemListRsp_descriptor_ = file->message_type(20);
  static const int Faction_MemListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_MemListRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_MemListRsp, mem_lst_),
  };
  Faction_MemListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_MemListRsp_descriptor_,
      Faction_MemListRsp::default_instance_,
      Faction_MemListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_MemListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_MemListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_MemListRsp));
  Faction_CreateReq_descriptor_ = file->message_type(21);
  static const int Faction_CreateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateReq, notice_),
  };
  Faction_CreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_CreateReq_descriptor_,
      Faction_CreateReq::default_instance_,
      Faction_CreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_CreateReq));
  Faction_CreateRsp_descriptor_ = file->message_type(22);
  static const int Faction_CreateRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateRsp, info_),
  };
  Faction_CreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_CreateRsp_descriptor_,
      Faction_CreateRsp::default_instance_,
      Faction_CreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_CreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_CreateRsp));
  Faction_ApplyListReq_descriptor_ = file->message_type(23);
  static const int Faction_ApplyListReq_offsets_[1] = {
  };
  Faction_ApplyListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ApplyListReq_descriptor_,
      Faction_ApplyListReq::default_instance_,
      Faction_ApplyListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ApplyListReq));
  Faction_ApplyListRsp_descriptor_ = file->message_type(24);
  static const int Faction_ApplyListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyListRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyListRsp, info_),
  };
  Faction_ApplyListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ApplyListRsp_descriptor_,
      Faction_ApplyListRsp::default_instance_,
      Faction_ApplyListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ApplyListRsp));
  Faction_ApplyJoinReq_descriptor_ = file->message_type(25);
  static const int Faction_ApplyJoinReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinReq, faction_id_),
  };
  Faction_ApplyJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ApplyJoinReq_descriptor_,
      Faction_ApplyJoinReq::default_instance_,
      Faction_ApplyJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ApplyJoinReq));
  Faction_ApplyJoinRsp_descriptor_ = file->message_type(26);
  static const int Faction_ApplyJoinRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinRsp, faction_id_),
  };
  Faction_ApplyJoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ApplyJoinRsp_descriptor_,
      Faction_ApplyJoinRsp::default_instance_,
      Faction_ApplyJoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyJoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ApplyJoinRsp));
  Faction_ApplyOperateReq_descriptor_ = file->message_type(27);
  static const int Faction_ApplyOperateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateReq, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateReq, cid_),
  };
  Faction_ApplyOperateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ApplyOperateReq_descriptor_,
      Faction_ApplyOperateReq::default_instance_,
      Faction_ApplyOperateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ApplyOperateReq));
  Faction_ApplyOperateRsp_descriptor_ = file->message_type(28);
  static const int Faction_ApplyOperateRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateRsp, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateRsp, mem_lst_),
  };
  Faction_ApplyOperateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ApplyOperateRsp_descriptor_,
      Faction_ApplyOperateRsp::default_instance_,
      Faction_ApplyOperateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ApplyOperateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ApplyOperateRsp));
  Faction_KickReq_descriptor_ = file->message_type(29);
  static const int Faction_KickReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickReq, cid_lst_),
  };
  Faction_KickReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_KickReq_descriptor_,
      Faction_KickReq::default_instance_,
      Faction_KickReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_KickReq));
  Faction_KickRsp_descriptor_ = file->message_type(30);
  static const int Faction_KickRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickRsp, cid_lst_),
  };
  Faction_KickRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_KickRsp_descriptor_,
      Faction_KickRsp::default_instance_,
      Faction_KickRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_KickRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_KickRsp));
  Faction_QuitReq_descriptor_ = file->message_type(31);
  static const int Faction_QuitReq_offsets_[1] = {
  };
  Faction_QuitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_QuitReq_descriptor_,
      Faction_QuitReq::default_instance_,
      Faction_QuitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_QuitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_QuitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_QuitReq));
  Faction_QuitRsp_descriptor_ = file->message_type(32);
  static const int Faction_QuitRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_QuitRsp, ret_),
  };
  Faction_QuitRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_QuitRsp_descriptor_,
      Faction_QuitRsp::default_instance_,
      Faction_QuitRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_QuitRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_QuitRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_QuitRsp));
  Faction_AppointReq_descriptor_ = file->message_type(33);
  static const int Faction_AppointReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointReq, duty_),
  };
  Faction_AppointReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_AppointReq_descriptor_,
      Faction_AppointReq::default_instance_,
      Faction_AppointReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_AppointReq));
  Faction_AppointRsp_descriptor_ = file->message_type(34);
  static const int Faction_AppointRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointRsp, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointRsp, self_duty_),
  };
  Faction_AppointRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_AppointRsp_descriptor_,
      Faction_AppointRsp::default_instance_,
      Faction_AppointRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_AppointRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_AppointRsp));
  Faction_ChgNoticeReq_descriptor_ = file->message_type(35);
  static const int Faction_ChgNoticeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeReq, notice_),
  };
  Faction_ChgNoticeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ChgNoticeReq_descriptor_,
      Faction_ChgNoticeReq::default_instance_,
      Faction_ChgNoticeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ChgNoticeReq));
  Faction_ChgNoticeRsp_descriptor_ = file->message_type(36);
  static const int Faction_ChgNoticeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeRsp, notice_),
  };
  Faction_ChgNoticeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ChgNoticeRsp_descriptor_,
      Faction_ChgNoticeRsp::default_instance_,
      Faction_ChgNoticeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNoticeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ChgNoticeRsp));
  Faction_SetApplyReq_descriptor_ = file->message_type(37);
  static const int Faction_SetApplyReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyReq, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyReq, fight_),
  };
  Faction_SetApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SetApplyReq_descriptor_,
      Faction_SetApplyReq::default_instance_,
      Faction_SetApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SetApplyReq));
  Faction_SetApplyRsp_descriptor_ = file->message_type(38);
  static const int Faction_SetApplyRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyRsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyRsp, fight_),
  };
  Faction_SetApplyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_SetApplyRsp_descriptor_,
      Faction_SetApplyRsp::default_instance_,
      Faction_SetApplyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_SetApplyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_SetApplyRsp));
  Faction_OneKeyApplyReq_descriptor_ = file->message_type(39);
  static const int Faction_OneKeyApplyReq_offsets_[1] = {
  };
  Faction_OneKeyApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_OneKeyApplyReq_descriptor_,
      Faction_OneKeyApplyReq::default_instance_,
      Faction_OneKeyApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_OneKeyApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_OneKeyApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_OneKeyApplyReq));
  Faction_OneKeyApplyRsp_descriptor_ = file->message_type(40);
  static const int Faction_OneKeyApplyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_OneKeyApplyRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_OneKeyApplyRsp, id_lst_),
  };
  Faction_OneKeyApplyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_OneKeyApplyRsp_descriptor_,
      Faction_OneKeyApplyRsp::default_instance_,
      Faction_OneKeyApplyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_OneKeyApplyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_OneKeyApplyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_OneKeyApplyRsp));
  Faction_ChgNameReq_descriptor_ = file->message_type(41);
  static const int Faction_ChgNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameReq, name_),
  };
  Faction_ChgNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ChgNameReq_descriptor_,
      Faction_ChgNameReq::default_instance_,
      Faction_ChgNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ChgNameReq));
  Faction_ChgNameRsp_descriptor_ = file->message_type(42);
  static const int Faction_ChgNameRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameRsp, name_),
  };
  Faction_ChgNameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_ChgNameRsp_descriptor_,
      Faction_ChgNameRsp::default_instance_,
      Faction_ChgNameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_ChgNameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_ChgNameRsp));
  Faction_NewApplyNotify_descriptor_ = file->message_type(43);
  static const int Faction_NewApplyNotify_offsets_[1] = {
  };
  Faction_NewApplyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_NewApplyNotify_descriptor_,
      Faction_NewApplyNotify::default_instance_,
      Faction_NewApplyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_NewApplyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_NewApplyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_NewApplyNotify));
  Faction_InviteJoinReq_descriptor_ = file->message_type(44);
  static const int Faction_InviteJoinReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InviteJoinReq, cid_),
  };
  Faction_InviteJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_InviteJoinReq_descriptor_,
      Faction_InviteJoinReq::default_instance_,
      Faction_InviteJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InviteJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InviteJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_InviteJoinReq));
  Faction_InviteJoinRsp_descriptor_ = file->message_type(45);
  static const int Faction_InviteJoinRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InviteJoinRsp, ret_),
  };
  Faction_InviteJoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_InviteJoinRsp_descriptor_,
      Faction_InviteJoinRsp::default_instance_,
      Faction_InviteJoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InviteJoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_InviteJoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_InviteJoinRsp));
  Faction_IviteJoinNotify_descriptor_ = file->message_type(46);
  static const int Faction_IviteJoinNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_IviteJoinNotify, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_IviteJoinNotify, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_IviteJoinNotify, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_IviteJoinNotify, faction_name_),
  };
  Faction_IviteJoinNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_IviteJoinNotify_descriptor_,
      Faction_IviteJoinNotify::default_instance_,
      Faction_IviteJoinNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_IviteJoinNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_IviteJoinNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_IviteJoinNotify));
  Faction_RecordListReq_descriptor_ = file->message_type(47);
  static const int Faction_RecordListReq_offsets_[1] = {
  };
  Faction_RecordListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_RecordListReq_descriptor_,
      Faction_RecordListReq::default_instance_,
      Faction_RecordListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_RecordListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_RecordListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_RecordListReq));
  Faction_RecordListRsp_descriptor_ = file->message_type(48);
  static const int Faction_RecordListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_RecordListRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_RecordListRsp, lst_),
  };
  Faction_RecordListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Faction_RecordListRsp_descriptor_,
      Faction_RecordListRsp::default_instance_,
      Faction_RecordListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_RecordListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Faction_RecordListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Faction_RecordListRsp));
  CL_FactionRoleUpdateRsp_descriptor_ = file->message_type(49);
  static const int CL_FactionRoleUpdateRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, leader_),
  };
  CL_FactionRoleUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CL_FactionRoleUpdateRsp_descriptor_,
      CL_FactionRoleUpdateRsp::default_instance_,
      CL_FactionRoleUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionRoleUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CL_FactionRoleUpdateRsp));
  LC_FactionCreate_descriptor_ = file->message_type(50);
  static const int LC_FactionCreate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionCreate, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionCreate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionCreate, notice_),
  };
  LC_FactionCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LC_FactionCreate_descriptor_,
      LC_FactionCreate::default_instance_,
      LC_FactionCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LC_FactionCreate));
  CL_FactionCreateResult_descriptor_ = file->message_type(51);
  static const int CL_FactionCreateResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionCreateResult, cid_),
  };
  CL_FactionCreateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CL_FactionCreateResult_descriptor_,
      CL_FactionCreateResult::default_instance_,
      CL_FactionCreateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionCreateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionCreateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CL_FactionCreateResult));
  LC_FactionChgName_descriptor_ = file->message_type(52);
  static const int LC_FactionChgName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionChgName, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionChgName, name_),
  };
  LC_FactionChgName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LC_FactionChgName_descriptor_,
      LC_FactionChgName::default_instance_,
      LC_FactionChgName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionChgName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_FactionChgName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LC_FactionChgName));
  CL_FactionChgNameResult_descriptor_ = file->message_type(53);
  static const int CL_FactionChgNameResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionChgNameResult, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionChgNameResult, cid_),
  };
  CL_FactionChgNameResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CL_FactionChgNameResult_descriptor_,
      CL_FactionChgNameResult::default_instance_,
      CL_FactionChgNameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionChgNameResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_FactionChgNameResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CL_FactionChgNameResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Faction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionListProto_descriptor_, &FactionListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionProto_descriptor_, &FactionProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMemProto_descriptor_, &FactionMemProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMemListProto_descriptor_, &FactionMemListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionApplyProto_descriptor_, &FactionApplyProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionApplyListProto_descriptor_, &FactionApplyListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMemSimpleProto_descriptor_, &FactionMemSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMemSimpleListProto_descriptor_, &FactionMemSimpleListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionSimpleProto_descriptor_, &FactionSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionRecordProto_descriptor_, &FactionRecordProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionRecordListProto_descriptor_, &FactionRecordListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SyncLoginRsp_descriptor_, &Faction_SyncLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SyncInfoRsp_descriptor_, &Faction_SyncInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_InfoReq_descriptor_, &Faction_InfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_InfoRsp_descriptor_, &Faction_InfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_InfoListReq_descriptor_, &Faction_InfoListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_InfoListRsp_descriptor_, &Faction_InfoListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SimpleReq_descriptor_, &Faction_SimpleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SimpleRsp_descriptor_, &Faction_SimpleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_MemListReq_descriptor_, &Faction_MemListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_MemListRsp_descriptor_, &Faction_MemListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_CreateReq_descriptor_, &Faction_CreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_CreateRsp_descriptor_, &Faction_CreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ApplyListReq_descriptor_, &Faction_ApplyListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ApplyListRsp_descriptor_, &Faction_ApplyListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ApplyJoinReq_descriptor_, &Faction_ApplyJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ApplyJoinRsp_descriptor_, &Faction_ApplyJoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ApplyOperateReq_descriptor_, &Faction_ApplyOperateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ApplyOperateRsp_descriptor_, &Faction_ApplyOperateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_KickReq_descriptor_, &Faction_KickReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_KickRsp_descriptor_, &Faction_KickRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_QuitReq_descriptor_, &Faction_QuitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_QuitRsp_descriptor_, &Faction_QuitRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_AppointReq_descriptor_, &Faction_AppointReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_AppointRsp_descriptor_, &Faction_AppointRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ChgNoticeReq_descriptor_, &Faction_ChgNoticeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ChgNoticeRsp_descriptor_, &Faction_ChgNoticeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SetApplyReq_descriptor_, &Faction_SetApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_SetApplyRsp_descriptor_, &Faction_SetApplyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_OneKeyApplyReq_descriptor_, &Faction_OneKeyApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_OneKeyApplyRsp_descriptor_, &Faction_OneKeyApplyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ChgNameReq_descriptor_, &Faction_ChgNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_ChgNameRsp_descriptor_, &Faction_ChgNameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_NewApplyNotify_descriptor_, &Faction_NewApplyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_InviteJoinReq_descriptor_, &Faction_InviteJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_InviteJoinRsp_descriptor_, &Faction_InviteJoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_IviteJoinNotify_descriptor_, &Faction_IviteJoinNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_RecordListReq_descriptor_, &Faction_RecordListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Faction_RecordListRsp_descriptor_, &Faction_RecordListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CL_FactionRoleUpdateRsp_descriptor_, &CL_FactionRoleUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LC_FactionCreate_descriptor_, &LC_FactionCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CL_FactionCreateResult_descriptor_, &CL_FactionCreateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LC_FactionChgName_descriptor_, &LC_FactionChgName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CL_FactionChgNameResult_descriptor_, &CL_FactionChgNameResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Faction_2eproto() {
  delete FactionListProto::default_instance_;
  delete FactionListProto_reflection_;
  delete FactionProto::default_instance_;
  delete FactionProto_reflection_;
  delete FactionMemProto::default_instance_;
  delete FactionMemProto_reflection_;
  delete FactionMemListProto::default_instance_;
  delete FactionMemListProto_reflection_;
  delete FactionApplyProto::default_instance_;
  delete FactionApplyProto_reflection_;
  delete FactionApplyListProto::default_instance_;
  delete FactionApplyListProto_reflection_;
  delete FactionMemSimpleProto::default_instance_;
  delete FactionMemSimpleProto_reflection_;
  delete FactionMemSimpleListProto::default_instance_;
  delete FactionMemSimpleListProto_reflection_;
  delete FactionSimpleProto::default_instance_;
  delete FactionSimpleProto_reflection_;
  delete FactionRecordProto::default_instance_;
  delete FactionRecordProto_reflection_;
  delete FactionRecordListProto::default_instance_;
  delete FactionRecordListProto_reflection_;
  delete Faction_SyncLoginRsp::default_instance_;
  delete Faction_SyncLoginRsp_reflection_;
  delete Faction_SyncInfoRsp::default_instance_;
  delete Faction_SyncInfoRsp_reflection_;
  delete Faction_InfoReq::default_instance_;
  delete Faction_InfoReq_reflection_;
  delete Faction_InfoRsp::default_instance_;
  delete Faction_InfoRsp_reflection_;
  delete Faction_InfoListReq::default_instance_;
  delete Faction_InfoListReq_reflection_;
  delete Faction_InfoListRsp::default_instance_;
  delete Faction_InfoListRsp_reflection_;
  delete Faction_SimpleReq::default_instance_;
  delete Faction_SimpleReq_reflection_;
  delete Faction_SimpleRsp::default_instance_;
  delete Faction_SimpleRsp_reflection_;
  delete Faction_MemListReq::default_instance_;
  delete Faction_MemListReq_reflection_;
  delete Faction_MemListRsp::default_instance_;
  delete Faction_MemListRsp_reflection_;
  delete Faction_CreateReq::default_instance_;
  delete Faction_CreateReq_reflection_;
  delete Faction_CreateRsp::default_instance_;
  delete Faction_CreateRsp_reflection_;
  delete Faction_ApplyListReq::default_instance_;
  delete Faction_ApplyListReq_reflection_;
  delete Faction_ApplyListRsp::default_instance_;
  delete Faction_ApplyListRsp_reflection_;
  delete Faction_ApplyJoinReq::default_instance_;
  delete Faction_ApplyJoinReq_reflection_;
  delete Faction_ApplyJoinRsp::default_instance_;
  delete Faction_ApplyJoinRsp_reflection_;
  delete Faction_ApplyOperateReq::default_instance_;
  delete Faction_ApplyOperateReq_reflection_;
  delete Faction_ApplyOperateRsp::default_instance_;
  delete Faction_ApplyOperateRsp_reflection_;
  delete Faction_KickReq::default_instance_;
  delete Faction_KickReq_reflection_;
  delete Faction_KickRsp::default_instance_;
  delete Faction_KickRsp_reflection_;
  delete Faction_QuitReq::default_instance_;
  delete Faction_QuitReq_reflection_;
  delete Faction_QuitRsp::default_instance_;
  delete Faction_QuitRsp_reflection_;
  delete Faction_AppointReq::default_instance_;
  delete Faction_AppointReq_reflection_;
  delete Faction_AppointRsp::default_instance_;
  delete Faction_AppointRsp_reflection_;
  delete Faction_ChgNoticeReq::default_instance_;
  delete Faction_ChgNoticeReq_reflection_;
  delete Faction_ChgNoticeRsp::default_instance_;
  delete Faction_ChgNoticeRsp_reflection_;
  delete Faction_SetApplyReq::default_instance_;
  delete Faction_SetApplyReq_reflection_;
  delete Faction_SetApplyRsp::default_instance_;
  delete Faction_SetApplyRsp_reflection_;
  delete Faction_OneKeyApplyReq::default_instance_;
  delete Faction_OneKeyApplyReq_reflection_;
  delete Faction_OneKeyApplyRsp::default_instance_;
  delete Faction_OneKeyApplyRsp_reflection_;
  delete Faction_ChgNameReq::default_instance_;
  delete Faction_ChgNameReq_reflection_;
  delete Faction_ChgNameRsp::default_instance_;
  delete Faction_ChgNameRsp_reflection_;
  delete Faction_NewApplyNotify::default_instance_;
  delete Faction_NewApplyNotify_reflection_;
  delete Faction_InviteJoinReq::default_instance_;
  delete Faction_InviteJoinReq_reflection_;
  delete Faction_InviteJoinRsp::default_instance_;
  delete Faction_InviteJoinRsp_reflection_;
  delete Faction_IviteJoinNotify::default_instance_;
  delete Faction_IviteJoinNotify_reflection_;
  delete Faction_RecordListReq::default_instance_;
  delete Faction_RecordListReq_reflection_;
  delete Faction_RecordListRsp::default_instance_;
  delete Faction_RecordListRsp_reflection_;
  delete CL_FactionRoleUpdateRsp::default_instance_;
  delete CL_FactionRoleUpdateRsp_reflection_;
  delete LC_FactionCreate::default_instance_;
  delete LC_FactionCreate_reflection_;
  delete CL_FactionCreateResult::default_instance_;
  delete CL_FactionCreateResult_reflection_;
  delete LC_FactionChgName::default_instance_;
  delete LC_FactionChgName_reflection_;
  delete CL_FactionChgNameResult::default_instance_;
  delete CL_FactionChgNameResult_reflection_;
}

void protobuf_AddDesc_Faction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rFaction.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\032\022common_logic.proto\032\tCom.proto\""
    "\263\001\n\020FactionListProto\022\022\n\nfaction_id\030\001 \001(\r"
    "\022\014\n\004name\030\002 \001(\014\022\014\n\004rank\030\003 \001(\005\022\022\n\nleader_c"
    "id\030\004 \001(\004\022\023\n\013leader_name\030\005 \001(\014\022\r\n\005level\030\006"
    " \001(\005\022\021\n\tmem_count\030\007 \001(\005\022\r\n\005fight\030\010 \001(\004\022\025"
    "\n\ralready_apply\030\t \001(\005\"\256\002\n\014FactionProto\022\022"
    "\n\nfaction_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\r\n\005leve"
    "l\030\003 \001(\005\022\014\n\004rank\030\004 \001(\005\022\021\n\tmem_count\030\005 \001(\005"
    "\022\r\n\005fight\030\006 \001(\004\022\r\n\005grade\030\007 \001(\005\022\013\n\003exp\030\010 "
    "\001(\004\022\016\n\006notice\030\t \001(\t\022\022\n\nleader_cid\030\n \001(\004\022"
    "\023\n\013leader_name\030\013 \001(\014\022)\n\006facade\030\014 \001(\0132\031.p"
    "roto_ff.RoleFacadeProto\022\022\n\napply_type\030\r "
    "\001(\005\022\024\n\014apply_minlev\030\016 \001(\005\022\023\n\013apply_fight"
    "\030\017 \001(\004\"\267\001\n\017FactionMemProto\022\013\n\003cid\030\001 \001(\004\022"
    "\014\n\004name\030\002 \001(\014\022\014\n\004prof\030\003 \001(\005\022\021\n\tvip_level"
    "\030\004 \001(\005\022\r\n\005level\030\005 \001(\005\022\014\n\004duty\030\006 \001(\005\022\r\n\005f"
    "ight\030\007 \001(\004\022\024\n\014total_contri\030\010 \001(\004\022\021\n\tis_o"
    "nline\030\t \001(\005\022\023\n\013logout_time\030\n \001(\004\"A\n\023Fact"
    "ionMemListProto\022*\n\007mem_lst\030\001 \003(\0132\031.proto"
    "_ff.FactionMemProto\"L\n\021FactionApplyProto"
    "\022\013\n\003cid\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\r\n\005level\030\003 \001"
    "(\005\022\r\n\005fight\030\004 \001(\004\"G\n\025FactionApplyListPro"
    "to\022.\n\tapply_lst\030\001 \003(\0132\033.proto_ff.Faction"
    "ApplyProto\"^\n\025FactionMemSimpleProto\022\013\n\003c"
    "id\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\r\n\005level\030\003 \001(\005\022\014\n"
    "\004duty\030\004 \001(\005\022\r\n\005fight\030\005 \001(\004\"P\n\031FactionMem"
    "SimpleListProto\0223\n\nsimple_lst\030\001 \003(\0132\037.pr"
    "oto_ff.FactionMemSimpleProto\"\217\002\n\022Faction"
    "SimpleProto\022\022\n\nfaction_id\030\001 \001(\r\022\014\n\004name\030"
    "\002 \001(\014\022\014\n\004rank\030\003 \001(\005\022\022\n\nleader_cid\030\004 \001(\004\022"
    "\023\n\013leader_name\030\005 \001(\014\022\r\n\005level\030\006 \001(\005\022\021\n\tm"
    "em_count\030\007 \001(\005\022\r\n\005fight\030\010 \001(\004\022\022\n\napply_t"
    "ype\030\t \001(\005\022\024\n\014apply_minlev\030\n \001(\005\022\023\n\013apply"
    "_fight\030\013 \001(\004\0220\n\003mem\030\014 \001(\0132#.proto_ff.Fac"
    "tionMemSimpleListProto\"L\n\022FactionRecordP"
    "roto\022\014\n\004name\030\001 \001(\014\022\014\n\004time\030\002 \001(\004\022\n\n\002op\030\003"
    " \001(\005\022\016\n\006param1\030\004 \001(\003\"J\n\026FactionRecordLis"
    "tProto\0220\n\nrecord_lst\030\001 \003(\0132\034.proto_ff.Fa"
    "ctionRecordProto\"J\n\024Faction_SyncLoginRsp"
    "\022$\n\004info\030\001 \001(\0132\026.proto_ff.FactionProto\022\014"
    "\n\004duty\030\002 \001(\005\"E\n\023Faction_SyncInfoRsp\022\022\n\nf"
    "action_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\014\n\004duty\030\003 "
    "\001(\005\"\021\n\017Faction_InfoReq\"D\n\017Faction_InfoRs"
    "p\022\013\n\003ret\030\001 \002(\005\022$\n\004info\030\002 \001(\0132\026.proto_ff."
    "FactionProto\"\025\n\023Faction_InfoListReq\"C\n\023F"
    "action_InfoListRsp\022,\n\010info_lst\030\001 \003(\0132\032.p"
    "roto_ff.FactionListProto\"\'\n\021Faction_Simp"
    "leReq\022\022\n\nfaction_id\030\001 \001(\r\"N\n\021Faction_Sim"
    "pleRsp\022\013\n\003ret\030\001 \002(\005\022,\n\006simple\030\002 \001(\0132\034.pr"
    "oto_ff.FactionSimpleProto\"\024\n\022Faction_Mem"
    "ListReq\"Q\n\022Faction_MemListRsp\022\013\n\003ret\030\001 \002"
    "(\005\022.\n\007mem_lst\030\002 \001(\0132\035.proto_ff.FactionMe"
    "mListProto\"1\n\021Faction_CreateReq\022\014\n\004name\030"
    "\001 \001(\014\022\016\n\006notice\030\002 \001(\014\"F\n\021Faction_CreateR"
    "sp\022\013\n\003ret\030\001 \002(\005\022$\n\004info\030\002 \001(\0132\026.proto_ff"
    ".FactionProto\"\026\n\024Faction_ApplyListReq\"R\n"
    "\024Faction_ApplyListRsp\022\013\n\003ret\030\001 \002(\005\022-\n\004in"
    "fo\030\002 \001(\0132\037.proto_ff.FactionApplyListProt"
    "o\"*\n\024Faction_ApplyJoinReq\022\022\n\nfaction_id\030"
    "\001 \001(\r\"7\n\024Faction_ApplyJoinRsp\022\013\n\003ret\030\001 \002"
    "(\005\022\022\n\nfaction_id\030\002 \001(\r\"2\n\027Faction_ApplyO"
    "perateReq\022\n\n\002op\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004\"o\n\027Fa"
    "ction_ApplyOperateRsp\022\013\n\003ret\030\001 \002(\005\022\n\n\002op"
    "\030\002 \001(\005\022\013\n\003cid\030\003 \001(\004\022.\n\007mem_lst\030\004 \001(\0132\035.p"
    "roto_ff.FactionMemListProto\"\"\n\017Faction_K"
    "ickReq\022\017\n\007cid_lst\030\001 \003(\004\"/\n\017Faction_KickR"
    "sp\022\013\n\003ret\030\001 \002(\005\022\017\n\007cid_lst\030\002 \003(\004\"\021\n\017Fact"
    "ion_QuitReq\"\036\n\017Faction_QuitRsp\022\013\n\003ret\030\001 "
    "\002(\005\"/\n\022Faction_AppointReq\022\013\n\003cid\030\001 \001(\004\022\014"
    "\n\004duty\030\002 \001(\005\"O\n\022Faction_AppointRsp\022\013\n\003re"
    "t\030\001 \002(\005\022\013\n\003cid\030\002 \001(\004\022\014\n\004duty\030\003 \001(\005\022\021\n\tse"
    "lf_duty\030\004 \001(\005\"&\n\024Faction_ChgNoticeReq\022\016\n"
    "\006notice\030\001 \001(\014\"3\n\024Faction_ChgNoticeRsp\022\013\n"
    "\003ret\030\001 \002(\005\022\016\n\006notice\030\002 \001(\014\"A\n\023Faction_Se"
    "tApplyReq\022\014\n\004type\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\r"
    "\n\005fight\030\003 \001(\004\"N\n\023Faction_SetApplyRsp\022\013\n\003"
    "ret\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\022\r"
    "\n\005fight\030\004 \001(\004\"\030\n\026Faction_OneKeyApplyReq\""
    "5\n\026Faction_OneKeyApplyRsp\022\013\n\003ret\030\001 \002(\005\022\016"
    "\n\006id_lst\030\002 \003(\r\"\"\n\022Faction_ChgNameReq\022\014\n\004"
    "name\030\001 \001(\014\"/\n\022Faction_ChgNameRsp\022\013\n\003ret\030"
    "\001 \002(\005\022\014\n\004name\030\002 \001(\014\"\030\n\026Faction_NewApplyN"
    "otify\"$\n\025Faction_InviteJoinReq\022\013\n\003cid\030\002 "
    "\001(\004\"$\n\025Faction_InviteJoinRsp\022\013\n\003ret\030\001 \002("
    "\005\"^\n\027Faction_IviteJoinNotify\022\013\n\003cid\030\001 \002("
    "\004\022\014\n\004name\030\002 \002(\014\022\022\n\nfaction_id\030\003 \002(\r\022\024\n\014f"
    "action_name\030\004 \002(\014\"\027\n\025Faction_RecordListR"
    "eq\"S\n\025Faction_RecordListRsp\022\013\n\003ret\030\001 \002(\005"
    "\022-\n\003lst\030\002 \001(\0132 .proto_ff.FactionRecordLi"
    "stProto\"u\n\027CL_FactionRoleUpdateRsp\022\013\n\003ci"
    "d\030\001 \002(\004\022\022\n\nfaction_id\030\002 \002(\r\022\014\n\004name\030\003 \002("
    "\014\022\014\n\004duty\030\004 \002(\005\022\r\n\005level\030\005 \002(\005\022\016\n\006leader"
    "\030\006 \002(\004\"=\n\020LC_FactionCreate\022\013\n\003cid\030\001 \002(\004\022"
    "\014\n\004name\030\002 \002(\014\022\016\n\006notice\030\003 \002(\014\"%\n\026CL_Fact"
    "ionCreateResult\022\013\n\003cid\030\001 \002(\004\".\n\021LC_Facti"
    "onChgName\022\013\n\003cid\030\001 \002(\004\022\014\n\004name\030\002 \002(\014\"3\n\027"
    "CL_FactionChgNameResult\022\013\n\003ret\030\001 \002(\005\022\013\n\003"
    "cid\030\002 \002(\004", 3929);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Faction.proto", &protobuf_RegisterTypes);
  FactionListProto::default_instance_ = new FactionListProto();
  FactionProto::default_instance_ = new FactionProto();
  FactionMemProto::default_instance_ = new FactionMemProto();
  FactionMemListProto::default_instance_ = new FactionMemListProto();
  FactionApplyProto::default_instance_ = new FactionApplyProto();
  FactionApplyListProto::default_instance_ = new FactionApplyListProto();
  FactionMemSimpleProto::default_instance_ = new FactionMemSimpleProto();
  FactionMemSimpleListProto::default_instance_ = new FactionMemSimpleListProto();
  FactionSimpleProto::default_instance_ = new FactionSimpleProto();
  FactionRecordProto::default_instance_ = new FactionRecordProto();
  FactionRecordListProto::default_instance_ = new FactionRecordListProto();
  Faction_SyncLoginRsp::default_instance_ = new Faction_SyncLoginRsp();
  Faction_SyncInfoRsp::default_instance_ = new Faction_SyncInfoRsp();
  Faction_InfoReq::default_instance_ = new Faction_InfoReq();
  Faction_InfoRsp::default_instance_ = new Faction_InfoRsp();
  Faction_InfoListReq::default_instance_ = new Faction_InfoListReq();
  Faction_InfoListRsp::default_instance_ = new Faction_InfoListRsp();
  Faction_SimpleReq::default_instance_ = new Faction_SimpleReq();
  Faction_SimpleRsp::default_instance_ = new Faction_SimpleRsp();
  Faction_MemListReq::default_instance_ = new Faction_MemListReq();
  Faction_MemListRsp::default_instance_ = new Faction_MemListRsp();
  Faction_CreateReq::default_instance_ = new Faction_CreateReq();
  Faction_CreateRsp::default_instance_ = new Faction_CreateRsp();
  Faction_ApplyListReq::default_instance_ = new Faction_ApplyListReq();
  Faction_ApplyListRsp::default_instance_ = new Faction_ApplyListRsp();
  Faction_ApplyJoinReq::default_instance_ = new Faction_ApplyJoinReq();
  Faction_ApplyJoinRsp::default_instance_ = new Faction_ApplyJoinRsp();
  Faction_ApplyOperateReq::default_instance_ = new Faction_ApplyOperateReq();
  Faction_ApplyOperateRsp::default_instance_ = new Faction_ApplyOperateRsp();
  Faction_KickReq::default_instance_ = new Faction_KickReq();
  Faction_KickRsp::default_instance_ = new Faction_KickRsp();
  Faction_QuitReq::default_instance_ = new Faction_QuitReq();
  Faction_QuitRsp::default_instance_ = new Faction_QuitRsp();
  Faction_AppointReq::default_instance_ = new Faction_AppointReq();
  Faction_AppointRsp::default_instance_ = new Faction_AppointRsp();
  Faction_ChgNoticeReq::default_instance_ = new Faction_ChgNoticeReq();
  Faction_ChgNoticeRsp::default_instance_ = new Faction_ChgNoticeRsp();
  Faction_SetApplyReq::default_instance_ = new Faction_SetApplyReq();
  Faction_SetApplyRsp::default_instance_ = new Faction_SetApplyRsp();
  Faction_OneKeyApplyReq::default_instance_ = new Faction_OneKeyApplyReq();
  Faction_OneKeyApplyRsp::default_instance_ = new Faction_OneKeyApplyRsp();
  Faction_ChgNameReq::default_instance_ = new Faction_ChgNameReq();
  Faction_ChgNameRsp::default_instance_ = new Faction_ChgNameRsp();
  Faction_NewApplyNotify::default_instance_ = new Faction_NewApplyNotify();
  Faction_InviteJoinReq::default_instance_ = new Faction_InviteJoinReq();
  Faction_InviteJoinRsp::default_instance_ = new Faction_InviteJoinRsp();
  Faction_IviteJoinNotify::default_instance_ = new Faction_IviteJoinNotify();
  Faction_RecordListReq::default_instance_ = new Faction_RecordListReq();
  Faction_RecordListRsp::default_instance_ = new Faction_RecordListRsp();
  CL_FactionRoleUpdateRsp::default_instance_ = new CL_FactionRoleUpdateRsp();
  LC_FactionCreate::default_instance_ = new LC_FactionCreate();
  CL_FactionCreateResult::default_instance_ = new CL_FactionCreateResult();
  LC_FactionChgName::default_instance_ = new LC_FactionChgName();
  CL_FactionChgNameResult::default_instance_ = new CL_FactionChgNameResult();
  FactionListProto::default_instance_->InitAsDefaultInstance();
  FactionProto::default_instance_->InitAsDefaultInstance();
  FactionMemProto::default_instance_->InitAsDefaultInstance();
  FactionMemListProto::default_instance_->InitAsDefaultInstance();
  FactionApplyProto::default_instance_->InitAsDefaultInstance();
  FactionApplyListProto::default_instance_->InitAsDefaultInstance();
  FactionMemSimpleProto::default_instance_->InitAsDefaultInstance();
  FactionMemSimpleListProto::default_instance_->InitAsDefaultInstance();
  FactionSimpleProto::default_instance_->InitAsDefaultInstance();
  FactionRecordProto::default_instance_->InitAsDefaultInstance();
  FactionRecordListProto::default_instance_->InitAsDefaultInstance();
  Faction_SyncLoginRsp::default_instance_->InitAsDefaultInstance();
  Faction_SyncInfoRsp::default_instance_->InitAsDefaultInstance();
  Faction_InfoReq::default_instance_->InitAsDefaultInstance();
  Faction_InfoRsp::default_instance_->InitAsDefaultInstance();
  Faction_InfoListReq::default_instance_->InitAsDefaultInstance();
  Faction_InfoListRsp::default_instance_->InitAsDefaultInstance();
  Faction_SimpleReq::default_instance_->InitAsDefaultInstance();
  Faction_SimpleRsp::default_instance_->InitAsDefaultInstance();
  Faction_MemListReq::default_instance_->InitAsDefaultInstance();
  Faction_MemListRsp::default_instance_->InitAsDefaultInstance();
  Faction_CreateReq::default_instance_->InitAsDefaultInstance();
  Faction_CreateRsp::default_instance_->InitAsDefaultInstance();
  Faction_ApplyListReq::default_instance_->InitAsDefaultInstance();
  Faction_ApplyListRsp::default_instance_->InitAsDefaultInstance();
  Faction_ApplyJoinReq::default_instance_->InitAsDefaultInstance();
  Faction_ApplyJoinRsp::default_instance_->InitAsDefaultInstance();
  Faction_ApplyOperateReq::default_instance_->InitAsDefaultInstance();
  Faction_ApplyOperateRsp::default_instance_->InitAsDefaultInstance();
  Faction_KickReq::default_instance_->InitAsDefaultInstance();
  Faction_KickRsp::default_instance_->InitAsDefaultInstance();
  Faction_QuitReq::default_instance_->InitAsDefaultInstance();
  Faction_QuitRsp::default_instance_->InitAsDefaultInstance();
  Faction_AppointReq::default_instance_->InitAsDefaultInstance();
  Faction_AppointRsp::default_instance_->InitAsDefaultInstance();
  Faction_ChgNoticeReq::default_instance_->InitAsDefaultInstance();
  Faction_ChgNoticeRsp::default_instance_->InitAsDefaultInstance();
  Faction_SetApplyReq::default_instance_->InitAsDefaultInstance();
  Faction_SetApplyRsp::default_instance_->InitAsDefaultInstance();
  Faction_OneKeyApplyReq::default_instance_->InitAsDefaultInstance();
  Faction_OneKeyApplyRsp::default_instance_->InitAsDefaultInstance();
  Faction_ChgNameReq::default_instance_->InitAsDefaultInstance();
  Faction_ChgNameRsp::default_instance_->InitAsDefaultInstance();
  Faction_NewApplyNotify::default_instance_->InitAsDefaultInstance();
  Faction_InviteJoinReq::default_instance_->InitAsDefaultInstance();
  Faction_InviteJoinRsp::default_instance_->InitAsDefaultInstance();
  Faction_IviteJoinNotify::default_instance_->InitAsDefaultInstance();
  Faction_RecordListReq::default_instance_->InitAsDefaultInstance();
  Faction_RecordListRsp::default_instance_->InitAsDefaultInstance();
  CL_FactionRoleUpdateRsp::default_instance_->InitAsDefaultInstance();
  LC_FactionCreate::default_instance_->InitAsDefaultInstance();
  CL_FactionCreateResult::default_instance_->InitAsDefaultInstance();
  LC_FactionChgName::default_instance_->InitAsDefaultInstance();
  CL_FactionChgNameResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Faction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Faction_2eproto {
  StaticDescriptorInitializer_Faction_2eproto() {
    protobuf_AddDesc_Faction_2eproto();
  }
} static_descriptor_initializer_Faction_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FactionListProto::kFactionIdFieldNumber;
const int FactionListProto::kNameFieldNumber;
const int FactionListProto::kRankFieldNumber;
const int FactionListProto::kLeaderCidFieldNumber;
const int FactionListProto::kLeaderNameFieldNumber;
const int FactionListProto::kLevelFieldNumber;
const int FactionListProto::kMemCountFieldNumber;
const int FactionListProto::kFightFieldNumber;
const int FactionListProto::kAlreadyApplyFieldNumber;
#endif  // !_MSC_VER

FactionListProto::FactionListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionListProto::InitAsDefaultInstance() {
}

FactionListProto::FactionListProto(const FactionListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionListProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  leader_cid_ = GOOGLE_ULONGLONG(0);
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  mem_count_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  already_apply_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionListProto::~FactionListProto() {
  SharedDtor();
}

void FactionListProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
  }
}

void FactionListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionListProto_descriptor_;
}

const FactionListProto& FactionListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionListProto* FactionListProto::default_instance_ = NULL;

FactionListProto* FactionListProto::New() const {
  return new FactionListProto;
}

void FactionListProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rank_ = 0;
    leader_cid_ = GOOGLE_ULONGLONG(0);
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    level_ = 0;
    mem_count_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    already_apply_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leader_cid;
        break;
      }

      // optional uint64 leader_cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_cid_)));
          set_has_leader_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_leader_name;
        break;
      }

      // optional bytes leader_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mem_count;
        break;
      }

      // optional int32 mem_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_count_)));
          set_has_mem_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_already_apply;
        break;
      }

      // optional int32 already_apply = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_apply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &already_apply_)));
          set_has_already_apply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // optional uint64 leader_cid = 4;
  if (has_leader_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->leader_cid(), output);
  }

  // optional bytes leader_name = 5;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->leader_name(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 mem_count = 7;
  if (has_mem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mem_count(), output);
  }

  // optional uint64 fight = 8;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fight(), output);
  }

  // optional int32 already_apply = 9;
  if (has_already_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->already_apply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // optional uint64 leader_cid = 4;
  if (has_leader_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->leader_cid(), target);
  }

  // optional bytes leader_name = 5;
  if (has_leader_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->leader_name(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 mem_count = 7;
  if (has_mem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mem_count(), target);
  }

  // optional uint64 fight = 8;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fight(), target);
  }

  // optional int32 already_apply = 9;
  if (has_already_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->already_apply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionListProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 leader_cid = 4;
    if (has_leader_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_cid());
    }

    // optional bytes leader_name = 5;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_name());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 mem_count = 7;
    if (has_mem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mem_count());
    }

    // optional uint64 fight = 8;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 already_apply = 9;
    if (has_already_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->already_apply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionListProto::MergeFrom(const FactionListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_leader_cid()) {
      set_leader_cid(from.leader_cid());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_mem_count()) {
      set_mem_count(from.mem_count());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_already_apply()) {
      set_already_apply(from.already_apply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionListProto::CopyFrom(const FactionListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionListProto::IsInitialized() const {

  return true;
}

void FactionListProto::Swap(FactionListProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(rank_, other->rank_);
    std::swap(leader_cid_, other->leader_cid_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(level_, other->level_);
    std::swap(mem_count_, other->mem_count_);
    std::swap(fight_, other->fight_);
    std::swap(already_apply_, other->already_apply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionListProto_descriptor_;
  metadata.reflection = FactionListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionProto::kFactionIdFieldNumber;
const int FactionProto::kNameFieldNumber;
const int FactionProto::kLevelFieldNumber;
const int FactionProto::kRankFieldNumber;
const int FactionProto::kMemCountFieldNumber;
const int FactionProto::kFightFieldNumber;
const int FactionProto::kGradeFieldNumber;
const int FactionProto::kExpFieldNumber;
const int FactionProto::kNoticeFieldNumber;
const int FactionProto::kLeaderCidFieldNumber;
const int FactionProto::kLeaderNameFieldNumber;
const int FactionProto::kFacadeFieldNumber;
const int FactionProto::kApplyTypeFieldNumber;
const int FactionProto::kApplyMinlevFieldNumber;
const int FactionProto::kApplyFightFieldNumber;
#endif  // !_MSC_VER

FactionProto::FactionProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionProto::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

FactionProto::FactionProto(const FactionProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  rank_ = 0;
  mem_count_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  grade_ = 0;
  exp_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_cid_ = GOOGLE_ULONGLONG(0);
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facade_ = NULL;
  apply_type_ = 0;
  apply_minlev_ = 0;
  apply_fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionProto::~FactionProto() {
  SharedDtor();
}

void FactionProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void FactionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionProto_descriptor_;
}

const FactionProto& FactionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionProto* FactionProto::default_instance_ = NULL;

FactionProto* FactionProto::New() const {
  return new FactionProto;
}

void FactionProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    rank_ = 0;
    mem_count_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
    grade_ = 0;
    exp_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    leader_cid_ = GOOGLE_ULONGLONG(0);
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    apply_type_ = 0;
    apply_minlev_ = 0;
    apply_fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mem_count;
        break;
      }

      // optional int32 mem_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_count_)));
          set_has_mem_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_grade;
        break;
      }

      // optional int32 grade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_notice;
        break;
      }

      // optional string notice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_leader_cid;
        break;
      }

      // optional uint64 leader_cid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_cid_)));
          set_has_leader_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_leader_name;
        break;
      }

      // optional bytes leader_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_apply_type;
        break;
      }

      // optional int32 apply_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_type_)));
          set_has_apply_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_apply_minlev;
        break;
      }

      // optional int32 apply_minlev = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_minlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_minlev_)));
          set_has_apply_minlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_apply_fight;
        break;
      }

      // optional uint64 apply_fight = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_fight_)));
          set_has_apply_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // optional int32 mem_count = 5;
  if (has_mem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mem_count(), output);
  }

  // optional uint64 fight = 6;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fight(), output);
  }

  // optional int32 grade = 7;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->grade(), output);
  }

  // optional uint64 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->exp(), output);
  }

  // optional string notice = 9;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->notice(), output);
  }

  // optional uint64 leader_cid = 10;
  if (has_leader_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->leader_cid(), output);
  }

  // optional bytes leader_name = 11;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->leader_name(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 12;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->facade(), output);
  }

  // optional int32 apply_type = 13;
  if (has_apply_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->apply_type(), output);
  }

  // optional int32 apply_minlev = 14;
  if (has_apply_minlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->apply_minlev(), output);
  }

  // optional uint64 apply_fight = 15;
  if (has_apply_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->apply_fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // optional int32 mem_count = 5;
  if (has_mem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mem_count(), target);
  }

  // optional uint64 fight = 6;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fight(), target);
  }

  // optional int32 grade = 7;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->grade(), target);
  }

  // optional uint64 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->exp(), target);
  }

  // optional string notice = 9;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->notice(), target);
  }

  // optional uint64 leader_cid = 10;
  if (has_leader_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->leader_cid(), target);
  }

  // optional bytes leader_name = 11;
  if (has_leader_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->leader_name(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 12;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->facade(), target);
  }

  // optional int32 apply_type = 13;
  if (has_apply_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->apply_type(), target);
  }

  // optional int32 apply_minlev = 14;
  if (has_apply_minlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->apply_minlev(), target);
  }

  // optional uint64 apply_fight = 15;
  if (has_apply_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->apply_fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 mem_count = 5;
    if (has_mem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mem_count());
    }

    // optional uint64 fight = 6;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional int32 grade = 7;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional uint64 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string notice = 9;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional uint64 leader_cid = 10;
    if (has_leader_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_cid());
    }

    // optional bytes leader_name = 11;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_name());
    }

    // optional .proto_ff.RoleFacadeProto facade = 12;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional int32 apply_type = 13;
    if (has_apply_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_type());
    }

    // optional int32 apply_minlev = 14;
    if (has_apply_minlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_minlev());
    }

    // optional uint64 apply_fight = 15;
    if (has_apply_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionProto::MergeFrom(const FactionProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_mem_count()) {
      set_mem_count(from.mem_count());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_leader_cid()) {
      set_leader_cid(from.leader_cid());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_apply_type()) {
      set_apply_type(from.apply_type());
    }
    if (from.has_apply_minlev()) {
      set_apply_minlev(from.apply_minlev());
    }
    if (from.has_apply_fight()) {
      set_apply_fight(from.apply_fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionProto::CopyFrom(const FactionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionProto::IsInitialized() const {

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void FactionProto::Swap(FactionProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(rank_, other->rank_);
    std::swap(mem_count_, other->mem_count_);
    std::swap(fight_, other->fight_);
    std::swap(grade_, other->grade_);
    std::swap(exp_, other->exp_);
    std::swap(notice_, other->notice_);
    std::swap(leader_cid_, other->leader_cid_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(facade_, other->facade_);
    std::swap(apply_type_, other->apply_type_);
    std::swap(apply_minlev_, other->apply_minlev_);
    std::swap(apply_fight_, other->apply_fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionProto_descriptor_;
  metadata.reflection = FactionProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMemProto::kCidFieldNumber;
const int FactionMemProto::kNameFieldNumber;
const int FactionMemProto::kProfFieldNumber;
const int FactionMemProto::kVipLevelFieldNumber;
const int FactionMemProto::kLevelFieldNumber;
const int FactionMemProto::kDutyFieldNumber;
const int FactionMemProto::kFightFieldNumber;
const int FactionMemProto::kTotalContriFieldNumber;
const int FactionMemProto::kIsOnlineFieldNumber;
const int FactionMemProto::kLogoutTimeFieldNumber;
#endif  // !_MSC_VER

FactionMemProto::FactionMemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMemProto::InitAsDefaultInstance() {
}

FactionMemProto::FactionMemProto(const FactionMemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMemProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0;
  vip_level_ = 0;
  level_ = 0;
  duty_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  total_contri_ = GOOGLE_ULONGLONG(0);
  is_online_ = 0;
  logout_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMemProto::~FactionMemProto() {
  SharedDtor();
}

void FactionMemProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionMemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMemProto_descriptor_;
}

const FactionMemProto& FactionMemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMemProto* FactionMemProto::default_instance_ = NULL;

FactionMemProto* FactionMemProto::New() const {
  return new FactionMemProto;
}

void FactionMemProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0;
    vip_level_ = 0;
    level_ = 0;
    duty_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
    total_contri_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_online_ = 0;
    logout_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // optional int32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_duty;
        break;
      }

      // optional int32 duty = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_total_contri;
        break;
      }

      // optional uint64 total_contri = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_contri_)));
          set_has_total_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_online;
        break;
      }

      // optional int32 is_online = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_logout_time;
        break;
      }

      // optional uint64 logout_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logout_time_)));
          set_has_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prof(), output);
  }

  // optional int32 vip_level = 4;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip_level(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 duty = 6;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->duty(), output);
  }

  // optional uint64 fight = 7;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->fight(), output);
  }

  // optional uint64 total_contri = 8;
  if (has_total_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->total_contri(), output);
  }

  // optional int32 is_online = 9;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->is_online(), output);
  }

  // optional uint64 logout_time = 10;
  if (has_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->logout_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prof(), target);
  }

  // optional int32 vip_level = 4;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip_level(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 duty = 6;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->duty(), target);
  }

  // optional uint64 fight = 7;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->fight(), target);
  }

  // optional uint64 total_contri = 8;
  if (has_total_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->total_contri(), target);
  }

  // optional int32 is_online = 9;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->is_online(), target);
  }

  // optional uint64 logout_time = 10;
  if (has_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->logout_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 vip_level = 4;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 duty = 6;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

    // optional uint64 fight = 7;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint64 total_contri = 8;
    if (has_total_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_contri());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 is_online = 9;
    if (has_is_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_online());
    }

    // optional uint64 logout_time = 10;
    if (has_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logout_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMemProto::MergeFrom(const FactionMemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_total_contri()) {
      set_total_contri(from.total_contri());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_logout_time()) {
      set_logout_time(from.logout_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMemProto::CopyFrom(const FactionMemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMemProto::IsInitialized() const {

  return true;
}

void FactionMemProto::Swap(FactionMemProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(level_, other->level_);
    std::swap(duty_, other->duty_);
    std::swap(fight_, other->fight_);
    std::swap(total_contri_, other->total_contri_);
    std::swap(is_online_, other->is_online_);
    std::swap(logout_time_, other->logout_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMemProto_descriptor_;
  metadata.reflection = FactionMemProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMemListProto::kMemLstFieldNumber;
#endif  // !_MSC_VER

FactionMemListProto::FactionMemListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMemListProto::InitAsDefaultInstance() {
}

FactionMemListProto::FactionMemListProto(const FactionMemListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMemListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMemListProto::~FactionMemListProto() {
  SharedDtor();
}

void FactionMemListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMemListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMemListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMemListProto_descriptor_;
}

const FactionMemListProto& FactionMemListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMemListProto* FactionMemListProto::default_instance_ = NULL;

FactionMemListProto* FactionMemListProto::New() const {
  return new FactionMemListProto;
}

void FactionMemListProto::Clear() {
  mem_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMemListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionMemProto mem_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mem_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMemListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionMemProto mem_lst = 1;
  for (int i = 0; i < this->mem_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mem_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMemListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionMemProto mem_lst = 1;
  for (int i = 0; i < this->mem_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mem_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMemListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionMemProto mem_lst = 1;
  total_size += 1 * this->mem_lst_size();
  for (int i = 0; i < this->mem_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMemListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMemListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMemListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMemListProto::MergeFrom(const FactionMemListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mem_lst_.MergeFrom(from.mem_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMemListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMemListProto::CopyFrom(const FactionMemListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMemListProto::IsInitialized() const {

  return true;
}

void FactionMemListProto::Swap(FactionMemListProto* other) {
  if (other != this) {
    mem_lst_.Swap(&other->mem_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMemListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMemListProto_descriptor_;
  metadata.reflection = FactionMemListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionApplyProto::kCidFieldNumber;
const int FactionApplyProto::kNameFieldNumber;
const int FactionApplyProto::kLevelFieldNumber;
const int FactionApplyProto::kFightFieldNumber;
#endif  // !_MSC_VER

FactionApplyProto::FactionApplyProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionApplyProto::InitAsDefaultInstance() {
}

FactionApplyProto::FactionApplyProto(const FactionApplyProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionApplyProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionApplyProto::~FactionApplyProto() {
  SharedDtor();
}

void FactionApplyProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionApplyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionApplyProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionApplyProto_descriptor_;
}

const FactionApplyProto& FactionApplyProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionApplyProto* FactionApplyProto::default_instance_ = NULL;

FactionApplyProto* FactionApplyProto::New() const {
  return new FactionApplyProto;
}

void FactionApplyProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionApplyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionApplyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionApplyProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionApplyProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionApplyProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionApplyProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionApplyProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionApplyProto::MergeFrom(const FactionApplyProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionApplyProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionApplyProto::CopyFrom(const FactionApplyProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionApplyProto::IsInitialized() const {

  return true;
}

void FactionApplyProto::Swap(FactionApplyProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionApplyProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionApplyProto_descriptor_;
  metadata.reflection = FactionApplyProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionApplyListProto::kApplyLstFieldNumber;
#endif  // !_MSC_VER

FactionApplyListProto::FactionApplyListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionApplyListProto::InitAsDefaultInstance() {
}

FactionApplyListProto::FactionApplyListProto(const FactionApplyListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionApplyListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionApplyListProto::~FactionApplyListProto() {
  SharedDtor();
}

void FactionApplyListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionApplyListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionApplyListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionApplyListProto_descriptor_;
}

const FactionApplyListProto& FactionApplyListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionApplyListProto* FactionApplyListProto::default_instance_ = NULL;

FactionApplyListProto* FactionApplyListProto::New() const {
  return new FactionApplyListProto;
}

void FactionApplyListProto::Clear() {
  apply_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionApplyListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionApplyProto apply_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_apply_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionApplyListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionApplyProto apply_lst = 1;
  for (int i = 0; i < this->apply_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->apply_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionApplyListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionApplyProto apply_lst = 1;
  for (int i = 0; i < this->apply_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->apply_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionApplyListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionApplyProto apply_lst = 1;
  total_size += 1 * this->apply_lst_size();
  for (int i = 0; i < this->apply_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionApplyListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionApplyListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionApplyListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionApplyListProto::MergeFrom(const FactionApplyListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_lst_.MergeFrom(from.apply_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionApplyListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionApplyListProto::CopyFrom(const FactionApplyListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionApplyListProto::IsInitialized() const {

  return true;
}

void FactionApplyListProto::Swap(FactionApplyListProto* other) {
  if (other != this) {
    apply_lst_.Swap(&other->apply_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionApplyListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionApplyListProto_descriptor_;
  metadata.reflection = FactionApplyListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMemSimpleProto::kCidFieldNumber;
const int FactionMemSimpleProto::kNameFieldNumber;
const int FactionMemSimpleProto::kLevelFieldNumber;
const int FactionMemSimpleProto::kDutyFieldNumber;
const int FactionMemSimpleProto::kFightFieldNumber;
#endif  // !_MSC_VER

FactionMemSimpleProto::FactionMemSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMemSimpleProto::InitAsDefaultInstance() {
}

FactionMemSimpleProto::FactionMemSimpleProto(const FactionMemSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMemSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  duty_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMemSimpleProto::~FactionMemSimpleProto() {
  SharedDtor();
}

void FactionMemSimpleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionMemSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMemSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMemSimpleProto_descriptor_;
}

const FactionMemSimpleProto& FactionMemSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMemSimpleProto* FactionMemSimpleProto::default_instance_ = NULL;

FactionMemSimpleProto* FactionMemSimpleProto::New() const {
  return new FactionMemSimpleProto;
}

void FactionMemSimpleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    duty_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMemSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duty;
        break;
      }

      // optional int32 duty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMemSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 duty = 4;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duty(), output);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMemSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 duty = 4;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duty(), target);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMemSimpleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 duty = 4;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

    // optional uint64 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMemSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMemSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMemSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMemSimpleProto::MergeFrom(const FactionMemSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMemSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMemSimpleProto::CopyFrom(const FactionMemSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMemSimpleProto::IsInitialized() const {

  return true;
}

void FactionMemSimpleProto::Swap(FactionMemSimpleProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(duty_, other->duty_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMemSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMemSimpleProto_descriptor_;
  metadata.reflection = FactionMemSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMemSimpleListProto::kSimpleLstFieldNumber;
#endif  // !_MSC_VER

FactionMemSimpleListProto::FactionMemSimpleListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMemSimpleListProto::InitAsDefaultInstance() {
}

FactionMemSimpleListProto::FactionMemSimpleListProto(const FactionMemSimpleListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMemSimpleListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMemSimpleListProto::~FactionMemSimpleListProto() {
  SharedDtor();
}

void FactionMemSimpleListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMemSimpleListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMemSimpleListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMemSimpleListProto_descriptor_;
}

const FactionMemSimpleListProto& FactionMemSimpleListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionMemSimpleListProto* FactionMemSimpleListProto::default_instance_ = NULL;

FactionMemSimpleListProto* FactionMemSimpleListProto::New() const {
  return new FactionMemSimpleListProto;
}

void FactionMemSimpleListProto::Clear() {
  simple_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMemSimpleListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionMemSimpleProto simple_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simple_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_simple_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMemSimpleListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionMemSimpleProto simple_lst = 1;
  for (int i = 0; i < this->simple_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->simple_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMemSimpleListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionMemSimpleProto simple_lst = 1;
  for (int i = 0; i < this->simple_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->simple_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMemSimpleListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionMemSimpleProto simple_lst = 1;
  total_size += 1 * this->simple_lst_size();
  for (int i = 0; i < this->simple_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simple_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMemSimpleListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMemSimpleListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMemSimpleListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMemSimpleListProto::MergeFrom(const FactionMemSimpleListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  simple_lst_.MergeFrom(from.simple_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMemSimpleListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMemSimpleListProto::CopyFrom(const FactionMemSimpleListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMemSimpleListProto::IsInitialized() const {

  return true;
}

void FactionMemSimpleListProto::Swap(FactionMemSimpleListProto* other) {
  if (other != this) {
    simple_lst_.Swap(&other->simple_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMemSimpleListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMemSimpleListProto_descriptor_;
  metadata.reflection = FactionMemSimpleListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionSimpleProto::kFactionIdFieldNumber;
const int FactionSimpleProto::kNameFieldNumber;
const int FactionSimpleProto::kRankFieldNumber;
const int FactionSimpleProto::kLeaderCidFieldNumber;
const int FactionSimpleProto::kLeaderNameFieldNumber;
const int FactionSimpleProto::kLevelFieldNumber;
const int FactionSimpleProto::kMemCountFieldNumber;
const int FactionSimpleProto::kFightFieldNumber;
const int FactionSimpleProto::kApplyTypeFieldNumber;
const int FactionSimpleProto::kApplyMinlevFieldNumber;
const int FactionSimpleProto::kApplyFightFieldNumber;
const int FactionSimpleProto::kMemFieldNumber;
#endif  // !_MSC_VER

FactionSimpleProto::FactionSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionSimpleProto::InitAsDefaultInstance() {
  mem_ = const_cast< ::proto_ff::FactionMemSimpleListProto*>(&::proto_ff::FactionMemSimpleListProto::default_instance());
}

FactionSimpleProto::FactionSimpleProto(const FactionSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  leader_cid_ = GOOGLE_ULONGLONG(0);
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  mem_count_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  apply_type_ = 0;
  apply_minlev_ = 0;
  apply_fight_ = GOOGLE_ULONGLONG(0);
  mem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionSimpleProto::~FactionSimpleProto() {
  SharedDtor();
}

void FactionSimpleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
    delete mem_;
  }
}

void FactionSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionSimpleProto_descriptor_;
}

const FactionSimpleProto& FactionSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionSimpleProto* FactionSimpleProto::default_instance_ = NULL;

FactionSimpleProto* FactionSimpleProto::New() const {
  return new FactionSimpleProto;
}

void FactionSimpleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rank_ = 0;
    leader_cid_ = GOOGLE_ULONGLONG(0);
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    level_ = 0;
    mem_count_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    apply_type_ = 0;
    apply_minlev_ = 0;
    apply_fight_ = GOOGLE_ULONGLONG(0);
    if (has_mem()) {
      if (mem_ != NULL) mem_->::proto_ff::FactionMemSimpleListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leader_cid;
        break;
      }

      // optional uint64 leader_cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_cid_)));
          set_has_leader_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_leader_name;
        break;
      }

      // optional bytes leader_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mem_count;
        break;
      }

      // optional int32 mem_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_count_)));
          set_has_mem_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_apply_type;
        break;
      }

      // optional int32 apply_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_type_)));
          set_has_apply_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_apply_minlev;
        break;
      }

      // optional int32 apply_minlev = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_minlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_minlev_)));
          set_has_apply_minlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_apply_fight;
        break;
      }

      // optional uint64 apply_fight = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_fight_)));
          set_has_apply_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_mem;
        break;
      }

      // optional .proto_ff.FactionMemSimpleListProto mem = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // optional uint64 leader_cid = 4;
  if (has_leader_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->leader_cid(), output);
  }

  // optional bytes leader_name = 5;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->leader_name(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 mem_count = 7;
  if (has_mem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mem_count(), output);
  }

  // optional uint64 fight = 8;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fight(), output);
  }

  // optional int32 apply_type = 9;
  if (has_apply_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->apply_type(), output);
  }

  // optional int32 apply_minlev = 10;
  if (has_apply_minlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->apply_minlev(), output);
  }

  // optional uint64 apply_fight = 11;
  if (has_apply_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->apply_fight(), output);
  }

  // optional .proto_ff.FactionMemSimpleListProto mem = 12;
  if (has_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->mem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // optional uint64 leader_cid = 4;
  if (has_leader_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->leader_cid(), target);
  }

  // optional bytes leader_name = 5;
  if (has_leader_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->leader_name(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 mem_count = 7;
  if (has_mem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mem_count(), target);
  }

  // optional uint64 fight = 8;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fight(), target);
  }

  // optional int32 apply_type = 9;
  if (has_apply_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->apply_type(), target);
  }

  // optional int32 apply_minlev = 10;
  if (has_apply_minlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->apply_minlev(), target);
  }

  // optional uint64 apply_fight = 11;
  if (has_apply_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->apply_fight(), target);
  }

  // optional .proto_ff.FactionMemSimpleListProto mem = 12;
  if (has_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->mem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionSimpleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 leader_cid = 4;
    if (has_leader_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_cid());
    }

    // optional bytes leader_name = 5;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_name());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 mem_count = 7;
    if (has_mem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mem_count());
    }

    // optional uint64 fight = 8;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 apply_type = 9;
    if (has_apply_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_type());
    }

    // optional int32 apply_minlev = 10;
    if (has_apply_minlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_minlev());
    }

    // optional uint64 apply_fight = 11;
    if (has_apply_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_fight());
    }

    // optional .proto_ff.FactionMemSimpleListProto mem = 12;
    if (has_mem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionSimpleProto::MergeFrom(const FactionSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_leader_cid()) {
      set_leader_cid(from.leader_cid());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_mem_count()) {
      set_mem_count(from.mem_count());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_apply_type()) {
      set_apply_type(from.apply_type());
    }
    if (from.has_apply_minlev()) {
      set_apply_minlev(from.apply_minlev());
    }
    if (from.has_apply_fight()) {
      set_apply_fight(from.apply_fight());
    }
    if (from.has_mem()) {
      mutable_mem()->::proto_ff::FactionMemSimpleListProto::MergeFrom(from.mem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionSimpleProto::CopyFrom(const FactionSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionSimpleProto::IsInitialized() const {

  return true;
}

void FactionSimpleProto::Swap(FactionSimpleProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(rank_, other->rank_);
    std::swap(leader_cid_, other->leader_cid_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(level_, other->level_);
    std::swap(mem_count_, other->mem_count_);
    std::swap(fight_, other->fight_);
    std::swap(apply_type_, other->apply_type_);
    std::swap(apply_minlev_, other->apply_minlev_);
    std::swap(apply_fight_, other->apply_fight_);
    std::swap(mem_, other->mem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionSimpleProto_descriptor_;
  metadata.reflection = FactionSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionRecordProto::kNameFieldNumber;
const int FactionRecordProto::kTimeFieldNumber;
const int FactionRecordProto::kOpFieldNumber;
const int FactionRecordProto::kParam1FieldNumber;
#endif  // !_MSC_VER

FactionRecordProto::FactionRecordProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionRecordProto::InitAsDefaultInstance() {
}

FactionRecordProto::FactionRecordProto(const FactionRecordProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionRecordProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  op_ = 0;
  param1_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionRecordProto::~FactionRecordProto() {
  SharedDtor();
}

void FactionRecordProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionRecordProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionRecordProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionRecordProto_descriptor_;
}

const FactionRecordProto& FactionRecordProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionRecordProto* FactionRecordProto::default_instance_ = NULL;

FactionRecordProto* FactionRecordProto::New() const {
  return new FactionRecordProto;
}

void FactionRecordProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    op_ = 0;
    param1_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionRecordProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }

      // optional int32 op = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param1;
        break;
      }

      // optional int64 param1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionRecordProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional int32 op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->op(), output);
  }

  // optional int64 param1 = 4;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->param1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionRecordProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional int32 op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->op(), target);
  }

  // optional int64 param1 = 4;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->param1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionRecordProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional int32 op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional int64 param1 = 4;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionRecordProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionRecordProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionRecordProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionRecordProto::MergeFrom(const FactionRecordProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionRecordProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionRecordProto::CopyFrom(const FactionRecordProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionRecordProto::IsInitialized() const {

  return true;
}

void FactionRecordProto::Swap(FactionRecordProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(op_, other->op_);
    std::swap(param1_, other->param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionRecordProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionRecordProto_descriptor_;
  metadata.reflection = FactionRecordProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionRecordListProto::kRecordLstFieldNumber;
#endif  // !_MSC_VER

FactionRecordListProto::FactionRecordListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionRecordListProto::InitAsDefaultInstance() {
}

FactionRecordListProto::FactionRecordListProto(const FactionRecordListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionRecordListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionRecordListProto::~FactionRecordListProto() {
  SharedDtor();
}

void FactionRecordListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionRecordListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionRecordListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionRecordListProto_descriptor_;
}

const FactionRecordListProto& FactionRecordListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

FactionRecordListProto* FactionRecordListProto::default_instance_ = NULL;

FactionRecordListProto* FactionRecordListProto::New() const {
  return new FactionRecordListProto;
}

void FactionRecordListProto::Clear() {
  record_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionRecordListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionRecordProto record_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionRecordListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionRecordProto record_lst = 1;
  for (int i = 0; i < this->record_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionRecordListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionRecordProto record_lst = 1;
  for (int i = 0; i < this->record_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionRecordListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionRecordProto record_lst = 1;
  total_size += 1 * this->record_lst_size();
  for (int i = 0; i < this->record_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionRecordListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionRecordListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionRecordListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionRecordListProto::MergeFrom(const FactionRecordListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_lst_.MergeFrom(from.record_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionRecordListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionRecordListProto::CopyFrom(const FactionRecordListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionRecordListProto::IsInitialized() const {

  return true;
}

void FactionRecordListProto::Swap(FactionRecordListProto* other) {
  if (other != this) {
    record_lst_.Swap(&other->record_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionRecordListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionRecordListProto_descriptor_;
  metadata.reflection = FactionRecordListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SyncLoginRsp::kInfoFieldNumber;
const int Faction_SyncLoginRsp::kDutyFieldNumber;
#endif  // !_MSC_VER

Faction_SyncLoginRsp::Faction_SyncLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SyncLoginRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::FactionProto*>(&::proto_ff::FactionProto::default_instance());
}

Faction_SyncLoginRsp::Faction_SyncLoginRsp(const Faction_SyncLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SyncLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  duty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SyncLoginRsp::~Faction_SyncLoginRsp() {
  SharedDtor();
}

void Faction_SyncLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Faction_SyncLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SyncLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SyncLoginRsp_descriptor_;
}

const Faction_SyncLoginRsp& Faction_SyncLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SyncLoginRsp* Faction_SyncLoginRsp::default_instance_ = NULL;

Faction_SyncLoginRsp* Faction_SyncLoginRsp::New() const {
  return new Faction_SyncLoginRsp;
}

void Faction_SyncLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::FactionProto::Clear();
    }
    duty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SyncLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duty;
        break;
      }

      // optional int32 duty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SyncLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional int32 duty = 2;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SyncLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional int32 duty = 2;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SyncLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 duty = 2;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SyncLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SyncLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SyncLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SyncLoginRsp::MergeFrom(const Faction_SyncLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::FactionProto::MergeFrom(from.info());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SyncLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SyncLoginRsp::CopyFrom(const Faction_SyncLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SyncLoginRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void Faction_SyncLoginRsp::Swap(Faction_SyncLoginRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(duty_, other->duty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SyncLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SyncLoginRsp_descriptor_;
  metadata.reflection = Faction_SyncLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SyncInfoRsp::kFactionIdFieldNumber;
const int Faction_SyncInfoRsp::kNameFieldNumber;
const int Faction_SyncInfoRsp::kDutyFieldNumber;
#endif  // !_MSC_VER

Faction_SyncInfoRsp::Faction_SyncInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SyncInfoRsp::InitAsDefaultInstance() {
}

Faction_SyncInfoRsp::Faction_SyncInfoRsp(const Faction_SyncInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SyncInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SyncInfoRsp::~Faction_SyncInfoRsp() {
  SharedDtor();
}

void Faction_SyncInfoRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Faction_SyncInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SyncInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SyncInfoRsp_descriptor_;
}

const Faction_SyncInfoRsp& Faction_SyncInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SyncInfoRsp* Faction_SyncInfoRsp::default_instance_ = NULL;

Faction_SyncInfoRsp* Faction_SyncInfoRsp::New() const {
  return new Faction_SyncInfoRsp;
}

void Faction_SyncInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    duty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SyncInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duty;
        break;
      }

      // optional int32 duty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SyncInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 duty = 3;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SyncInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 duty = 3;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SyncInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 duty = 3;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SyncInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SyncInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SyncInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SyncInfoRsp::MergeFrom(const Faction_SyncInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SyncInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SyncInfoRsp::CopyFrom(const Faction_SyncInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SyncInfoRsp::IsInitialized() const {

  return true;
}

void Faction_SyncInfoRsp::Swap(Faction_SyncInfoRsp* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(duty_, other->duty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SyncInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SyncInfoRsp_descriptor_;
  metadata.reflection = Faction_SyncInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_InfoReq::Faction_InfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_InfoReq::InitAsDefaultInstance() {
}

Faction_InfoReq::Faction_InfoReq(const Faction_InfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_InfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_InfoReq::~Faction_InfoReq() {
  SharedDtor();
}

void Faction_InfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_InfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_InfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_InfoReq_descriptor_;
}

const Faction_InfoReq& Faction_InfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_InfoReq* Faction_InfoReq::default_instance_ = NULL;

Faction_InfoReq* Faction_InfoReq::New() const {
  return new Faction_InfoReq;
}

void Faction_InfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_InfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_InfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_InfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_InfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_InfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_InfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_InfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_InfoReq::MergeFrom(const Faction_InfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_InfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_InfoReq::CopyFrom(const Faction_InfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_InfoReq::IsInitialized() const {

  return true;
}

void Faction_InfoReq::Swap(Faction_InfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_InfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_InfoReq_descriptor_;
  metadata.reflection = Faction_InfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_InfoRsp::kRetFieldNumber;
const int Faction_InfoRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Faction_InfoRsp::Faction_InfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_InfoRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::FactionProto*>(&::proto_ff::FactionProto::default_instance());
}

Faction_InfoRsp::Faction_InfoRsp(const Faction_InfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_InfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_InfoRsp::~Faction_InfoRsp() {
  SharedDtor();
}

void Faction_InfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Faction_InfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_InfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_InfoRsp_descriptor_;
}

const Faction_InfoRsp& Faction_InfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_InfoRsp* Faction_InfoRsp::default_instance_ = NULL;

Faction_InfoRsp* Faction_InfoRsp::New() const {
  return new Faction_InfoRsp;
}

void Faction_InfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::FactionProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_InfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.FactionProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_InfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_InfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_InfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_InfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_InfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_InfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_InfoRsp::MergeFrom(const Faction_InfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::FactionProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_InfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_InfoRsp::CopyFrom(const Faction_InfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_InfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void Faction_InfoRsp::Swap(Faction_InfoRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_InfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_InfoRsp_descriptor_;
  metadata.reflection = Faction_InfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_InfoListReq::Faction_InfoListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_InfoListReq::InitAsDefaultInstance() {
}

Faction_InfoListReq::Faction_InfoListReq(const Faction_InfoListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_InfoListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_InfoListReq::~Faction_InfoListReq() {
  SharedDtor();
}

void Faction_InfoListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_InfoListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_InfoListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_InfoListReq_descriptor_;
}

const Faction_InfoListReq& Faction_InfoListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_InfoListReq* Faction_InfoListReq::default_instance_ = NULL;

Faction_InfoListReq* Faction_InfoListReq::New() const {
  return new Faction_InfoListReq;
}

void Faction_InfoListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_InfoListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_InfoListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_InfoListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_InfoListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_InfoListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_InfoListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_InfoListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_InfoListReq::MergeFrom(const Faction_InfoListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_InfoListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_InfoListReq::CopyFrom(const Faction_InfoListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_InfoListReq::IsInitialized() const {

  return true;
}

void Faction_InfoListReq::Swap(Faction_InfoListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_InfoListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_InfoListReq_descriptor_;
  metadata.reflection = Faction_InfoListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_InfoListRsp::kInfoLstFieldNumber;
#endif  // !_MSC_VER

Faction_InfoListRsp::Faction_InfoListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_InfoListRsp::InitAsDefaultInstance() {
}

Faction_InfoListRsp::Faction_InfoListRsp(const Faction_InfoListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_InfoListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_InfoListRsp::~Faction_InfoListRsp() {
  SharedDtor();
}

void Faction_InfoListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_InfoListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_InfoListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_InfoListRsp_descriptor_;
}

const Faction_InfoListRsp& Faction_InfoListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_InfoListRsp* Faction_InfoListRsp::default_instance_ = NULL;

Faction_InfoListRsp* Faction_InfoListRsp::New() const {
  return new Faction_InfoListRsp;
}

void Faction_InfoListRsp::Clear() {
  info_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_InfoListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionListProto info_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_InfoListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionListProto info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_InfoListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionListProto info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_InfoListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionListProto info_lst = 1;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_InfoListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_InfoListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_InfoListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_InfoListRsp::MergeFrom(const Faction_InfoListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_InfoListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_InfoListRsp::CopyFrom(const Faction_InfoListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_InfoListRsp::IsInitialized() const {

  return true;
}

void Faction_InfoListRsp::Swap(Faction_InfoListRsp* other) {
  if (other != this) {
    info_lst_.Swap(&other->info_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_InfoListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_InfoListRsp_descriptor_;
  metadata.reflection = Faction_InfoListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SimpleReq::kFactionIdFieldNumber;
#endif  // !_MSC_VER

Faction_SimpleReq::Faction_SimpleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SimpleReq::InitAsDefaultInstance() {
}

Faction_SimpleReq::Faction_SimpleReq(const Faction_SimpleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SimpleReq::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SimpleReq::~Faction_SimpleReq() {
  SharedDtor();
}

void Faction_SimpleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_SimpleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SimpleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SimpleReq_descriptor_;
}

const Faction_SimpleReq& Faction_SimpleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SimpleReq* Faction_SimpleReq::default_instance_ = NULL;

Faction_SimpleReq* Faction_SimpleReq::New() const {
  return new Faction_SimpleReq;
}

void Faction_SimpleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SimpleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SimpleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SimpleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SimpleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SimpleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SimpleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SimpleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SimpleReq::MergeFrom(const Faction_SimpleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SimpleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SimpleReq::CopyFrom(const Faction_SimpleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SimpleReq::IsInitialized() const {

  return true;
}

void Faction_SimpleReq::Swap(Faction_SimpleReq* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SimpleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SimpleReq_descriptor_;
  metadata.reflection = Faction_SimpleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SimpleRsp::kRetFieldNumber;
const int Faction_SimpleRsp::kSimpleFieldNumber;
#endif  // !_MSC_VER

Faction_SimpleRsp::Faction_SimpleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SimpleRsp::InitAsDefaultInstance() {
  simple_ = const_cast< ::proto_ff::FactionSimpleProto*>(&::proto_ff::FactionSimpleProto::default_instance());
}

Faction_SimpleRsp::Faction_SimpleRsp(const Faction_SimpleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SimpleRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  simple_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SimpleRsp::~Faction_SimpleRsp() {
  SharedDtor();
}

void Faction_SimpleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete simple_;
  }
}

void Faction_SimpleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SimpleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SimpleRsp_descriptor_;
}

const Faction_SimpleRsp& Faction_SimpleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SimpleRsp* Faction_SimpleRsp::default_instance_ = NULL;

Faction_SimpleRsp* Faction_SimpleRsp::New() const {
  return new Faction_SimpleRsp;
}

void Faction_SimpleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_simple()) {
      if (simple_ != NULL) simple_->::proto_ff::FactionSimpleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SimpleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple;
        break;
      }

      // optional .proto_ff.FactionSimpleProto simple = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SimpleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionSimpleProto simple = 2;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->simple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SimpleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionSimpleProto simple = 2;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SimpleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionSimpleProto simple = 2;
    if (has_simple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SimpleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SimpleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SimpleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SimpleRsp::MergeFrom(const Faction_SimpleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_simple()) {
      mutable_simple()->::proto_ff::FactionSimpleProto::MergeFrom(from.simple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SimpleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SimpleRsp::CopyFrom(const Faction_SimpleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SimpleRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_SimpleRsp::Swap(Faction_SimpleRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(simple_, other->simple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SimpleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SimpleRsp_descriptor_;
  metadata.reflection = Faction_SimpleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_MemListReq::Faction_MemListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_MemListReq::InitAsDefaultInstance() {
}

Faction_MemListReq::Faction_MemListReq(const Faction_MemListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_MemListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_MemListReq::~Faction_MemListReq() {
  SharedDtor();
}

void Faction_MemListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_MemListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_MemListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_MemListReq_descriptor_;
}

const Faction_MemListReq& Faction_MemListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_MemListReq* Faction_MemListReq::default_instance_ = NULL;

Faction_MemListReq* Faction_MemListReq::New() const {
  return new Faction_MemListReq;
}

void Faction_MemListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_MemListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_MemListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_MemListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_MemListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_MemListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_MemListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_MemListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_MemListReq::MergeFrom(const Faction_MemListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_MemListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_MemListReq::CopyFrom(const Faction_MemListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_MemListReq::IsInitialized() const {

  return true;
}

void Faction_MemListReq::Swap(Faction_MemListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_MemListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_MemListReq_descriptor_;
  metadata.reflection = Faction_MemListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_MemListRsp::kRetFieldNumber;
const int Faction_MemListRsp::kMemLstFieldNumber;
#endif  // !_MSC_VER

Faction_MemListRsp::Faction_MemListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_MemListRsp::InitAsDefaultInstance() {
  mem_lst_ = const_cast< ::proto_ff::FactionMemListProto*>(&::proto_ff::FactionMemListProto::default_instance());
}

Faction_MemListRsp::Faction_MemListRsp(const Faction_MemListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_MemListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  mem_lst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_MemListRsp::~Faction_MemListRsp() {
  SharedDtor();
}

void Faction_MemListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete mem_lst_;
  }
}

void Faction_MemListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_MemListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_MemListRsp_descriptor_;
}

const Faction_MemListRsp& Faction_MemListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_MemListRsp* Faction_MemListRsp::default_instance_ = NULL;

Faction_MemListRsp* Faction_MemListRsp::New() const {
  return new Faction_MemListRsp;
}

void Faction_MemListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_mem_lst()) {
      if (mem_lst_ != NULL) mem_lst_->::proto_ff::FactionMemListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_MemListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mem_lst;
        break;
      }

      // optional .proto_ff.FactionMemListProto mem_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_MemListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionMemListProto mem_lst = 2;
  if (has_mem_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mem_lst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_MemListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionMemListProto mem_lst = 2;
  if (has_mem_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mem_lst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_MemListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionMemListProto mem_lst = 2;
    if (has_mem_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mem_lst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_MemListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_MemListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_MemListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_MemListRsp::MergeFrom(const Faction_MemListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mem_lst()) {
      mutable_mem_lst()->::proto_ff::FactionMemListProto::MergeFrom(from.mem_lst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_MemListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_MemListRsp::CopyFrom(const Faction_MemListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_MemListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_MemListRsp::Swap(Faction_MemListRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mem_lst_, other->mem_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_MemListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_MemListRsp_descriptor_;
  metadata.reflection = Faction_MemListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_CreateReq::kNameFieldNumber;
const int Faction_CreateReq::kNoticeFieldNumber;
#endif  // !_MSC_VER

Faction_CreateReq::Faction_CreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_CreateReq::InitAsDefaultInstance() {
}

Faction_CreateReq::Faction_CreateReq(const Faction_CreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_CreateReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_CreateReq::~Faction_CreateReq() {
  SharedDtor();
}

void Faction_CreateReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void Faction_CreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_CreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_CreateReq_descriptor_;
}

const Faction_CreateReq& Faction_CreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_CreateReq* Faction_CreateReq::default_instance_ = NULL;

Faction_CreateReq* Faction_CreateReq::New() const {
  return new Faction_CreateReq;
}

void Faction_CreateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_CreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notice;
        break;
      }

      // optional bytes notice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_CreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional bytes notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_CreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes notice = 2;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_CreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes notice = 2;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_CreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_CreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_CreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_CreateReq::MergeFrom(const Faction_CreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_CreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_CreateReq::CopyFrom(const Faction_CreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_CreateReq::IsInitialized() const {

  return true;
}

void Faction_CreateReq::Swap(Faction_CreateReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_CreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_CreateReq_descriptor_;
  metadata.reflection = Faction_CreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_CreateRsp::kRetFieldNumber;
const int Faction_CreateRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Faction_CreateRsp::Faction_CreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_CreateRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::FactionProto*>(&::proto_ff::FactionProto::default_instance());
}

Faction_CreateRsp::Faction_CreateRsp(const Faction_CreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_CreateRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_CreateRsp::~Faction_CreateRsp() {
  SharedDtor();
}

void Faction_CreateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Faction_CreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_CreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_CreateRsp_descriptor_;
}

const Faction_CreateRsp& Faction_CreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_CreateRsp* Faction_CreateRsp::default_instance_ = NULL;

Faction_CreateRsp* Faction_CreateRsp::New() const {
  return new Faction_CreateRsp;
}

void Faction_CreateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::FactionProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_CreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.FactionProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_CreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_CreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_CreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_CreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_CreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_CreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_CreateRsp::MergeFrom(const Faction_CreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::FactionProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_CreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_CreateRsp::CopyFrom(const Faction_CreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_CreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void Faction_CreateRsp::Swap(Faction_CreateRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_CreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_CreateRsp_descriptor_;
  metadata.reflection = Faction_CreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_ApplyListReq::Faction_ApplyListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ApplyListReq::InitAsDefaultInstance() {
}

Faction_ApplyListReq::Faction_ApplyListReq(const Faction_ApplyListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ApplyListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ApplyListReq::~Faction_ApplyListReq() {
  SharedDtor();
}

void Faction_ApplyListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_ApplyListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ApplyListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ApplyListReq_descriptor_;
}

const Faction_ApplyListReq& Faction_ApplyListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ApplyListReq* Faction_ApplyListReq::default_instance_ = NULL;

Faction_ApplyListReq* Faction_ApplyListReq::New() const {
  return new Faction_ApplyListReq;
}

void Faction_ApplyListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ApplyListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_ApplyListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ApplyListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ApplyListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ApplyListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ApplyListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ApplyListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ApplyListReq::MergeFrom(const Faction_ApplyListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ApplyListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ApplyListReq::CopyFrom(const Faction_ApplyListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ApplyListReq::IsInitialized() const {

  return true;
}

void Faction_ApplyListReq::Swap(Faction_ApplyListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ApplyListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ApplyListReq_descriptor_;
  metadata.reflection = Faction_ApplyListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ApplyListRsp::kRetFieldNumber;
const int Faction_ApplyListRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Faction_ApplyListRsp::Faction_ApplyListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ApplyListRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::FactionApplyListProto*>(&::proto_ff::FactionApplyListProto::default_instance());
}

Faction_ApplyListRsp::Faction_ApplyListRsp(const Faction_ApplyListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ApplyListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ApplyListRsp::~Faction_ApplyListRsp() {
  SharedDtor();
}

void Faction_ApplyListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Faction_ApplyListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ApplyListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ApplyListRsp_descriptor_;
}

const Faction_ApplyListRsp& Faction_ApplyListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ApplyListRsp* Faction_ApplyListRsp::default_instance_ = NULL;

Faction_ApplyListRsp* Faction_ApplyListRsp::New() const {
  return new Faction_ApplyListRsp;
}

void Faction_ApplyListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::FactionApplyListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ApplyListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.FactionApplyListProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ApplyListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionApplyListProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ApplyListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionApplyListProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ApplyListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionApplyListProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ApplyListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ApplyListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ApplyListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ApplyListRsp::MergeFrom(const Faction_ApplyListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::FactionApplyListProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ApplyListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ApplyListRsp::CopyFrom(const Faction_ApplyListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ApplyListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_ApplyListRsp::Swap(Faction_ApplyListRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ApplyListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ApplyListRsp_descriptor_;
  metadata.reflection = Faction_ApplyListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ApplyJoinReq::kFactionIdFieldNumber;
#endif  // !_MSC_VER

Faction_ApplyJoinReq::Faction_ApplyJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ApplyJoinReq::InitAsDefaultInstance() {
}

Faction_ApplyJoinReq::Faction_ApplyJoinReq(const Faction_ApplyJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ApplyJoinReq::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ApplyJoinReq::~Faction_ApplyJoinReq() {
  SharedDtor();
}

void Faction_ApplyJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_ApplyJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ApplyJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ApplyJoinReq_descriptor_;
}

const Faction_ApplyJoinReq& Faction_ApplyJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ApplyJoinReq* Faction_ApplyJoinReq::default_instance_ = NULL;

Faction_ApplyJoinReq* Faction_ApplyJoinReq::New() const {
  return new Faction_ApplyJoinReq;
}

void Faction_ApplyJoinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ApplyJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ApplyJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ApplyJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ApplyJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ApplyJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ApplyJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ApplyJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ApplyJoinReq::MergeFrom(const Faction_ApplyJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ApplyJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ApplyJoinReq::CopyFrom(const Faction_ApplyJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ApplyJoinReq::IsInitialized() const {

  return true;
}

void Faction_ApplyJoinReq::Swap(Faction_ApplyJoinReq* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ApplyJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ApplyJoinReq_descriptor_;
  metadata.reflection = Faction_ApplyJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ApplyJoinRsp::kRetFieldNumber;
const int Faction_ApplyJoinRsp::kFactionIdFieldNumber;
#endif  // !_MSC_VER

Faction_ApplyJoinRsp::Faction_ApplyJoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ApplyJoinRsp::InitAsDefaultInstance() {
}

Faction_ApplyJoinRsp::Faction_ApplyJoinRsp(const Faction_ApplyJoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ApplyJoinRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ApplyJoinRsp::~Faction_ApplyJoinRsp() {
  SharedDtor();
}

void Faction_ApplyJoinRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_ApplyJoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ApplyJoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ApplyJoinRsp_descriptor_;
}

const Faction_ApplyJoinRsp& Faction_ApplyJoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ApplyJoinRsp* Faction_ApplyJoinRsp::default_instance_ = NULL;

Faction_ApplyJoinRsp* Faction_ApplyJoinRsp::New() const {
  return new Faction_ApplyJoinRsp;
}

void Faction_ApplyJoinRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    faction_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ApplyJoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faction_id;
        break;
      }

      // optional uint32 faction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ApplyJoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ApplyJoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ApplyJoinRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint32 faction_id = 2;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ApplyJoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ApplyJoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ApplyJoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ApplyJoinRsp::MergeFrom(const Faction_ApplyJoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ApplyJoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ApplyJoinRsp::CopyFrom(const Faction_ApplyJoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ApplyJoinRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_ApplyJoinRsp::Swap(Faction_ApplyJoinRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ApplyJoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ApplyJoinRsp_descriptor_;
  metadata.reflection = Faction_ApplyJoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ApplyOperateReq::kOpFieldNumber;
const int Faction_ApplyOperateReq::kCidFieldNumber;
#endif  // !_MSC_VER

Faction_ApplyOperateReq::Faction_ApplyOperateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ApplyOperateReq::InitAsDefaultInstance() {
}

Faction_ApplyOperateReq::Faction_ApplyOperateReq(const Faction_ApplyOperateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ApplyOperateReq::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ApplyOperateReq::~Faction_ApplyOperateReq() {
  SharedDtor();
}

void Faction_ApplyOperateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_ApplyOperateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ApplyOperateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ApplyOperateReq_descriptor_;
}

const Faction_ApplyOperateReq& Faction_ApplyOperateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ApplyOperateReq* Faction_ApplyOperateReq::default_instance_ = NULL;

Faction_ApplyOperateReq* Faction_ApplyOperateReq::New() const {
  return new Faction_ApplyOperateReq;
}

void Faction_ApplyOperateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ApplyOperateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ApplyOperateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ApplyOperateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ApplyOperateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ApplyOperateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ApplyOperateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ApplyOperateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ApplyOperateReq::MergeFrom(const Faction_ApplyOperateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ApplyOperateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ApplyOperateReq::CopyFrom(const Faction_ApplyOperateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ApplyOperateReq::IsInitialized() const {

  return true;
}

void Faction_ApplyOperateReq::Swap(Faction_ApplyOperateReq* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ApplyOperateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ApplyOperateReq_descriptor_;
  metadata.reflection = Faction_ApplyOperateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ApplyOperateRsp::kRetFieldNumber;
const int Faction_ApplyOperateRsp::kOpFieldNumber;
const int Faction_ApplyOperateRsp::kCidFieldNumber;
const int Faction_ApplyOperateRsp::kMemLstFieldNumber;
#endif  // !_MSC_VER

Faction_ApplyOperateRsp::Faction_ApplyOperateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ApplyOperateRsp::InitAsDefaultInstance() {
  mem_lst_ = const_cast< ::proto_ff::FactionMemListProto*>(&::proto_ff::FactionMemListProto::default_instance());
}

Faction_ApplyOperateRsp::Faction_ApplyOperateRsp(const Faction_ApplyOperateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ApplyOperateRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  op_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  mem_lst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ApplyOperateRsp::~Faction_ApplyOperateRsp() {
  SharedDtor();
}

void Faction_ApplyOperateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete mem_lst_;
  }
}

void Faction_ApplyOperateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ApplyOperateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ApplyOperateRsp_descriptor_;
}

const Faction_ApplyOperateRsp& Faction_ApplyOperateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ApplyOperateRsp* Faction_ApplyOperateRsp::default_instance_ = NULL;

Faction_ApplyOperateRsp* Faction_ApplyOperateRsp::New() const {
  return new Faction_ApplyOperateRsp;
}

void Faction_ApplyOperateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    op_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_mem_lst()) {
      if (mem_lst_ != NULL) mem_lst_->::proto_ff::FactionMemListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ApplyOperateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op;
        break;
      }

      // optional int32 op = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mem_lst;
        break;
      }

      // optional .proto_ff.FactionMemListProto mem_lst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ApplyOperateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 op = 2;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->op(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  // optional .proto_ff.FactionMemListProto mem_lst = 4;
  if (has_mem_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mem_lst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ApplyOperateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 op = 2;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->op(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  // optional .proto_ff.FactionMemListProto mem_lst = 4;
  if (has_mem_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mem_lst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ApplyOperateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 op = 2;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.FactionMemListProto mem_lst = 4;
    if (has_mem_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mem_lst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ApplyOperateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ApplyOperateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ApplyOperateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ApplyOperateRsp::MergeFrom(const Faction_ApplyOperateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_mem_lst()) {
      mutable_mem_lst()->::proto_ff::FactionMemListProto::MergeFrom(from.mem_lst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ApplyOperateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ApplyOperateRsp::CopyFrom(const Faction_ApplyOperateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ApplyOperateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_ApplyOperateRsp::Swap(Faction_ApplyOperateRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(op_, other->op_);
    std::swap(cid_, other->cid_);
    std::swap(mem_lst_, other->mem_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ApplyOperateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ApplyOperateRsp_descriptor_;
  metadata.reflection = Faction_ApplyOperateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_KickReq::kCidLstFieldNumber;
#endif  // !_MSC_VER

Faction_KickReq::Faction_KickReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_KickReq::InitAsDefaultInstance() {
}

Faction_KickReq::Faction_KickReq(const Faction_KickReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_KickReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_KickReq::~Faction_KickReq() {
  SharedDtor();
}

void Faction_KickReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_KickReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_KickReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_KickReq_descriptor_;
}

const Faction_KickReq& Faction_KickReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_KickReq* Faction_KickReq::default_instance_ = NULL;

Faction_KickReq* Faction_KickReq::New() const {
  return new Faction_KickReq;
}

void Faction_KickReq::Clear() {
  cid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_KickReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 cid_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_cid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cid_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_KickReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 cid_lst = 1;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->cid_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_KickReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 cid_lst = 1;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->cid_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_KickReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 cid_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_lst(i));
    }
    total_size += 1 * this->cid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_KickReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_KickReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_KickReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_KickReq::MergeFrom(const Faction_KickReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_lst_.MergeFrom(from.cid_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_KickReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_KickReq::CopyFrom(const Faction_KickReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_KickReq::IsInitialized() const {

  return true;
}

void Faction_KickReq::Swap(Faction_KickReq* other) {
  if (other != this) {
    cid_lst_.Swap(&other->cid_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_KickReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_KickReq_descriptor_;
  metadata.reflection = Faction_KickReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_KickRsp::kRetFieldNumber;
const int Faction_KickRsp::kCidLstFieldNumber;
#endif  // !_MSC_VER

Faction_KickRsp::Faction_KickRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_KickRsp::InitAsDefaultInstance() {
}

Faction_KickRsp::Faction_KickRsp(const Faction_KickRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_KickRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_KickRsp::~Faction_KickRsp() {
  SharedDtor();
}

void Faction_KickRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_KickRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_KickRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_KickRsp_descriptor_;
}

const Faction_KickRsp& Faction_KickRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_KickRsp* Faction_KickRsp::default_instance_ = NULL;

Faction_KickRsp* Faction_KickRsp::New() const {
  return new Faction_KickRsp;
}

void Faction_KickRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  cid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_KickRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid_lst;
        break;
      }

      // repeated uint64 cid_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_cid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_KickRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated uint64 cid_lst = 2;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->cid_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_KickRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated uint64 cid_lst = 2;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->cid_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_KickRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated uint64 cid_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_lst(i));
    }
    total_size += 1 * this->cid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_KickRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_KickRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_KickRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_KickRsp::MergeFrom(const Faction_KickRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_lst_.MergeFrom(from.cid_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_KickRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_KickRsp::CopyFrom(const Faction_KickRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_KickRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_KickRsp::Swap(Faction_KickRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    cid_lst_.Swap(&other->cid_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_KickRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_KickRsp_descriptor_;
  metadata.reflection = Faction_KickRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_QuitReq::Faction_QuitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_QuitReq::InitAsDefaultInstance() {
}

Faction_QuitReq::Faction_QuitReq(const Faction_QuitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_QuitReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_QuitReq::~Faction_QuitReq() {
  SharedDtor();
}

void Faction_QuitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_QuitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_QuitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_QuitReq_descriptor_;
}

const Faction_QuitReq& Faction_QuitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_QuitReq* Faction_QuitReq::default_instance_ = NULL;

Faction_QuitReq* Faction_QuitReq::New() const {
  return new Faction_QuitReq;
}

void Faction_QuitReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_QuitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_QuitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_QuitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_QuitReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_QuitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_QuitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_QuitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_QuitReq::MergeFrom(const Faction_QuitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_QuitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_QuitReq::CopyFrom(const Faction_QuitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_QuitReq::IsInitialized() const {

  return true;
}

void Faction_QuitReq::Swap(Faction_QuitReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_QuitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_QuitReq_descriptor_;
  metadata.reflection = Faction_QuitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_QuitRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Faction_QuitRsp::Faction_QuitRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_QuitRsp::InitAsDefaultInstance() {
}

Faction_QuitRsp::Faction_QuitRsp(const Faction_QuitRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_QuitRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_QuitRsp::~Faction_QuitRsp() {
  SharedDtor();
}

void Faction_QuitRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_QuitRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_QuitRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_QuitRsp_descriptor_;
}

const Faction_QuitRsp& Faction_QuitRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_QuitRsp* Faction_QuitRsp::default_instance_ = NULL;

Faction_QuitRsp* Faction_QuitRsp::New() const {
  return new Faction_QuitRsp;
}

void Faction_QuitRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_QuitRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_QuitRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_QuitRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_QuitRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_QuitRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_QuitRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_QuitRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_QuitRsp::MergeFrom(const Faction_QuitRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_QuitRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_QuitRsp::CopyFrom(const Faction_QuitRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_QuitRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_QuitRsp::Swap(Faction_QuitRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_QuitRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_QuitRsp_descriptor_;
  metadata.reflection = Faction_QuitRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_AppointReq::kCidFieldNumber;
const int Faction_AppointReq::kDutyFieldNumber;
#endif  // !_MSC_VER

Faction_AppointReq::Faction_AppointReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_AppointReq::InitAsDefaultInstance() {
}

Faction_AppointReq::Faction_AppointReq(const Faction_AppointReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_AppointReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  duty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_AppointReq::~Faction_AppointReq() {
  SharedDtor();
}

void Faction_AppointReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_AppointReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_AppointReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_AppointReq_descriptor_;
}

const Faction_AppointReq& Faction_AppointReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_AppointReq* Faction_AppointReq::default_instance_ = NULL;

Faction_AppointReq* Faction_AppointReq::New() const {
  return new Faction_AppointReq;
}

void Faction_AppointReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    duty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_AppointReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duty;
        break;
      }

      // optional int32 duty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_AppointReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 duty = 2;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_AppointReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 duty = 2;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_AppointReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 duty = 2;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_AppointReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_AppointReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_AppointReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_AppointReq::MergeFrom(const Faction_AppointReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_AppointReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_AppointReq::CopyFrom(const Faction_AppointReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_AppointReq::IsInitialized() const {

  return true;
}

void Faction_AppointReq::Swap(Faction_AppointReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(duty_, other->duty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_AppointReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_AppointReq_descriptor_;
  metadata.reflection = Faction_AppointReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_AppointRsp::kRetFieldNumber;
const int Faction_AppointRsp::kCidFieldNumber;
const int Faction_AppointRsp::kDutyFieldNumber;
const int Faction_AppointRsp::kSelfDutyFieldNumber;
#endif  // !_MSC_VER

Faction_AppointRsp::Faction_AppointRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_AppointRsp::InitAsDefaultInstance() {
}

Faction_AppointRsp::Faction_AppointRsp(const Faction_AppointRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_AppointRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  duty_ = 0;
  self_duty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_AppointRsp::~Faction_AppointRsp() {
  SharedDtor();
}

void Faction_AppointRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_AppointRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_AppointRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_AppointRsp_descriptor_;
}

const Faction_AppointRsp& Faction_AppointRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_AppointRsp* Faction_AppointRsp::default_instance_ = NULL;

Faction_AppointRsp* Faction_AppointRsp::New() const {
  return new Faction_AppointRsp;
}

void Faction_AppointRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    duty_ = 0;
    self_duty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_AppointRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duty;
        break;
      }

      // optional int32 duty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_self_duty;
        break;
      }

      // optional int32 self_duty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_duty_)));
          set_has_self_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_AppointRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional int32 duty = 3;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duty(), output);
  }

  // optional int32 self_duty = 4;
  if (has_self_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->self_duty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_AppointRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional int32 duty = 3;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duty(), target);
  }

  // optional int32 self_duty = 4;
  if (has_self_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->self_duty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_AppointRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 duty = 3;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

    // optional int32 self_duty = 4;
    if (has_self_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->self_duty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_AppointRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_AppointRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_AppointRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_AppointRsp::MergeFrom(const Faction_AppointRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
    if (from.has_self_duty()) {
      set_self_duty(from.self_duty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_AppointRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_AppointRsp::CopyFrom(const Faction_AppointRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_AppointRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_AppointRsp::Swap(Faction_AppointRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cid_, other->cid_);
    std::swap(duty_, other->duty_);
    std::swap(self_duty_, other->self_duty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_AppointRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_AppointRsp_descriptor_;
  metadata.reflection = Faction_AppointRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ChgNoticeReq::kNoticeFieldNumber;
#endif  // !_MSC_VER

Faction_ChgNoticeReq::Faction_ChgNoticeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ChgNoticeReq::InitAsDefaultInstance() {
}

Faction_ChgNoticeReq::Faction_ChgNoticeReq(const Faction_ChgNoticeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ChgNoticeReq::SharedCtor() {
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ChgNoticeReq::~Faction_ChgNoticeReq() {
  SharedDtor();
}

void Faction_ChgNoticeReq::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void Faction_ChgNoticeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ChgNoticeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ChgNoticeReq_descriptor_;
}

const Faction_ChgNoticeReq& Faction_ChgNoticeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ChgNoticeReq* Faction_ChgNoticeReq::default_instance_ = NULL;

Faction_ChgNoticeReq* Faction_ChgNoticeReq::New() const {
  return new Faction_ChgNoticeReq;
}

void Faction_ChgNoticeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ChgNoticeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ChgNoticeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ChgNoticeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes notice = 1;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ChgNoticeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ChgNoticeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ChgNoticeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ChgNoticeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ChgNoticeReq::MergeFrom(const Faction_ChgNoticeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ChgNoticeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ChgNoticeReq::CopyFrom(const Faction_ChgNoticeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ChgNoticeReq::IsInitialized() const {

  return true;
}

void Faction_ChgNoticeReq::Swap(Faction_ChgNoticeReq* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ChgNoticeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ChgNoticeReq_descriptor_;
  metadata.reflection = Faction_ChgNoticeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ChgNoticeRsp::kRetFieldNumber;
const int Faction_ChgNoticeRsp::kNoticeFieldNumber;
#endif  // !_MSC_VER

Faction_ChgNoticeRsp::Faction_ChgNoticeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ChgNoticeRsp::InitAsDefaultInstance() {
}

Faction_ChgNoticeRsp::Faction_ChgNoticeRsp(const Faction_ChgNoticeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ChgNoticeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ChgNoticeRsp::~Faction_ChgNoticeRsp() {
  SharedDtor();
}

void Faction_ChgNoticeRsp::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void Faction_ChgNoticeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ChgNoticeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ChgNoticeRsp_descriptor_;
}

const Faction_ChgNoticeRsp& Faction_ChgNoticeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ChgNoticeRsp* Faction_ChgNoticeRsp::default_instance_ = NULL;

Faction_ChgNoticeRsp* Faction_ChgNoticeRsp::New() const {
  return new Faction_ChgNoticeRsp;
}

void Faction_ChgNoticeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ChgNoticeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notice;
        break;
      }

      // optional bytes notice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ChgNoticeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional bytes notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ChgNoticeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional bytes notice = 2;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ChgNoticeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional bytes notice = 2;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ChgNoticeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ChgNoticeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ChgNoticeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ChgNoticeRsp::MergeFrom(const Faction_ChgNoticeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ChgNoticeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ChgNoticeRsp::CopyFrom(const Faction_ChgNoticeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ChgNoticeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_ChgNoticeRsp::Swap(Faction_ChgNoticeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ChgNoticeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ChgNoticeRsp_descriptor_;
  metadata.reflection = Faction_ChgNoticeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SetApplyReq::kTypeFieldNumber;
const int Faction_SetApplyReq::kLevelFieldNumber;
const int Faction_SetApplyReq::kFightFieldNumber;
#endif  // !_MSC_VER

Faction_SetApplyReq::Faction_SetApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SetApplyReq::InitAsDefaultInstance() {
}

Faction_SetApplyReq::Faction_SetApplyReq(const Faction_SetApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SetApplyReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SetApplyReq::~Faction_SetApplyReq() {
  SharedDtor();
}

void Faction_SetApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_SetApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SetApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SetApplyReq_descriptor_;
}

const Faction_SetApplyReq& Faction_SetApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SetApplyReq* Faction_SetApplyReq::default_instance_ = NULL;

Faction_SetApplyReq* Faction_SetApplyReq::New() const {
  return new Faction_SetApplyReq;
}

void Faction_SetApplyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SetApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SetApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional uint64 fight = 3;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SetApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional uint64 fight = 3;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SetApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 fight = 3;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SetApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SetApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SetApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SetApplyReq::MergeFrom(const Faction_SetApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SetApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SetApplyReq::CopyFrom(const Faction_SetApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SetApplyReq::IsInitialized() const {

  return true;
}

void Faction_SetApplyReq::Swap(Faction_SetApplyReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SetApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SetApplyReq_descriptor_;
  metadata.reflection = Faction_SetApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_SetApplyRsp::kRetFieldNumber;
const int Faction_SetApplyRsp::kTypeFieldNumber;
const int Faction_SetApplyRsp::kLevelFieldNumber;
const int Faction_SetApplyRsp::kFightFieldNumber;
#endif  // !_MSC_VER

Faction_SetApplyRsp::Faction_SetApplyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_SetApplyRsp::InitAsDefaultInstance() {
}

Faction_SetApplyRsp::Faction_SetApplyRsp(const Faction_SetApplyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_SetApplyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  level_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_SetApplyRsp::~Faction_SetApplyRsp() {
  SharedDtor();
}

void Faction_SetApplyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_SetApplyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_SetApplyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_SetApplyRsp_descriptor_;
}

const Faction_SetApplyRsp& Faction_SetApplyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_SetApplyRsp* Faction_SetApplyRsp::default_instance_ = NULL;

Faction_SetApplyRsp* Faction_SetApplyRsp::New() const {
  return new Faction_SetApplyRsp;
}

void Faction_SetApplyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
    level_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_SetApplyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_SetApplyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_SetApplyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_SetApplyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_SetApplyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_SetApplyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_SetApplyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_SetApplyRsp::MergeFrom(const Faction_SetApplyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_SetApplyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_SetApplyRsp::CopyFrom(const Faction_SetApplyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_SetApplyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_SetApplyRsp::Swap(Faction_SetApplyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_SetApplyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_SetApplyRsp_descriptor_;
  metadata.reflection = Faction_SetApplyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_OneKeyApplyReq::Faction_OneKeyApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_OneKeyApplyReq::InitAsDefaultInstance() {
}

Faction_OneKeyApplyReq::Faction_OneKeyApplyReq(const Faction_OneKeyApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_OneKeyApplyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_OneKeyApplyReq::~Faction_OneKeyApplyReq() {
  SharedDtor();
}

void Faction_OneKeyApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_OneKeyApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_OneKeyApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_OneKeyApplyReq_descriptor_;
}

const Faction_OneKeyApplyReq& Faction_OneKeyApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_OneKeyApplyReq* Faction_OneKeyApplyReq::default_instance_ = NULL;

Faction_OneKeyApplyReq* Faction_OneKeyApplyReq::New() const {
  return new Faction_OneKeyApplyReq;
}

void Faction_OneKeyApplyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_OneKeyApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_OneKeyApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_OneKeyApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_OneKeyApplyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_OneKeyApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_OneKeyApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_OneKeyApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_OneKeyApplyReq::MergeFrom(const Faction_OneKeyApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_OneKeyApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_OneKeyApplyReq::CopyFrom(const Faction_OneKeyApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_OneKeyApplyReq::IsInitialized() const {

  return true;
}

void Faction_OneKeyApplyReq::Swap(Faction_OneKeyApplyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_OneKeyApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_OneKeyApplyReq_descriptor_;
  metadata.reflection = Faction_OneKeyApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_OneKeyApplyRsp::kRetFieldNumber;
const int Faction_OneKeyApplyRsp::kIdLstFieldNumber;
#endif  // !_MSC_VER

Faction_OneKeyApplyRsp::Faction_OneKeyApplyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_OneKeyApplyRsp::InitAsDefaultInstance() {
}

Faction_OneKeyApplyRsp::Faction_OneKeyApplyRsp(const Faction_OneKeyApplyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_OneKeyApplyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_OneKeyApplyRsp::~Faction_OneKeyApplyRsp() {
  SharedDtor();
}

void Faction_OneKeyApplyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_OneKeyApplyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_OneKeyApplyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_OneKeyApplyRsp_descriptor_;
}

const Faction_OneKeyApplyRsp& Faction_OneKeyApplyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_OneKeyApplyRsp* Faction_OneKeyApplyRsp::default_instance_ = NULL;

Faction_OneKeyApplyRsp* Faction_OneKeyApplyRsp::New() const {
  return new Faction_OneKeyApplyRsp;
}

void Faction_OneKeyApplyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  id_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_OneKeyApplyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_lst;
        break;
      }

      // repeated uint32 id_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_id_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_OneKeyApplyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated uint32 id_lst = 2;
  for (int i = 0; i < this->id_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->id_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_OneKeyApplyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated uint32 id_lst = 2;
  for (int i = 0; i < this->id_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->id_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_OneKeyApplyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated uint32 id_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id_lst(i));
    }
    total_size += 1 * this->id_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_OneKeyApplyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_OneKeyApplyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_OneKeyApplyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_OneKeyApplyRsp::MergeFrom(const Faction_OneKeyApplyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lst_.MergeFrom(from.id_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_OneKeyApplyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_OneKeyApplyRsp::CopyFrom(const Faction_OneKeyApplyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_OneKeyApplyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_OneKeyApplyRsp::Swap(Faction_OneKeyApplyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    id_lst_.Swap(&other->id_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_OneKeyApplyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_OneKeyApplyRsp_descriptor_;
  metadata.reflection = Faction_OneKeyApplyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ChgNameReq::kNameFieldNumber;
#endif  // !_MSC_VER

Faction_ChgNameReq::Faction_ChgNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ChgNameReq::InitAsDefaultInstance() {
}

Faction_ChgNameReq::Faction_ChgNameReq(const Faction_ChgNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ChgNameReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ChgNameReq::~Faction_ChgNameReq() {
  SharedDtor();
}

void Faction_ChgNameReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Faction_ChgNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ChgNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ChgNameReq_descriptor_;
}

const Faction_ChgNameReq& Faction_ChgNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ChgNameReq* Faction_ChgNameReq::default_instance_ = NULL;

Faction_ChgNameReq* Faction_ChgNameReq::New() const {
  return new Faction_ChgNameReq;
}

void Faction_ChgNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ChgNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ChgNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ChgNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ChgNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ChgNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ChgNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ChgNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ChgNameReq::MergeFrom(const Faction_ChgNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ChgNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ChgNameReq::CopyFrom(const Faction_ChgNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ChgNameReq::IsInitialized() const {

  return true;
}

void Faction_ChgNameReq::Swap(Faction_ChgNameReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ChgNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ChgNameReq_descriptor_;
  metadata.reflection = Faction_ChgNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_ChgNameRsp::kRetFieldNumber;
const int Faction_ChgNameRsp::kNameFieldNumber;
#endif  // !_MSC_VER

Faction_ChgNameRsp::Faction_ChgNameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_ChgNameRsp::InitAsDefaultInstance() {
}

Faction_ChgNameRsp::Faction_ChgNameRsp(const Faction_ChgNameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_ChgNameRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_ChgNameRsp::~Faction_ChgNameRsp() {
  SharedDtor();
}

void Faction_ChgNameRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Faction_ChgNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_ChgNameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_ChgNameRsp_descriptor_;
}

const Faction_ChgNameRsp& Faction_ChgNameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_ChgNameRsp* Faction_ChgNameRsp::default_instance_ = NULL;

Faction_ChgNameRsp* Faction_ChgNameRsp::New() const {
  return new Faction_ChgNameRsp;
}

void Faction_ChgNameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_ChgNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_ChgNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_ChgNameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_ChgNameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_ChgNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_ChgNameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_ChgNameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_ChgNameRsp::MergeFrom(const Faction_ChgNameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_ChgNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_ChgNameRsp::CopyFrom(const Faction_ChgNameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_ChgNameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_ChgNameRsp::Swap(Faction_ChgNameRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_ChgNameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_ChgNameRsp_descriptor_;
  metadata.reflection = Faction_ChgNameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_NewApplyNotify::Faction_NewApplyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_NewApplyNotify::InitAsDefaultInstance() {
}

Faction_NewApplyNotify::Faction_NewApplyNotify(const Faction_NewApplyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_NewApplyNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_NewApplyNotify::~Faction_NewApplyNotify() {
  SharedDtor();
}

void Faction_NewApplyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_NewApplyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_NewApplyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_NewApplyNotify_descriptor_;
}

const Faction_NewApplyNotify& Faction_NewApplyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_NewApplyNotify* Faction_NewApplyNotify::default_instance_ = NULL;

Faction_NewApplyNotify* Faction_NewApplyNotify::New() const {
  return new Faction_NewApplyNotify;
}

void Faction_NewApplyNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_NewApplyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_NewApplyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_NewApplyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_NewApplyNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_NewApplyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_NewApplyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_NewApplyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_NewApplyNotify::MergeFrom(const Faction_NewApplyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_NewApplyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_NewApplyNotify::CopyFrom(const Faction_NewApplyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_NewApplyNotify::IsInitialized() const {

  return true;
}

void Faction_NewApplyNotify::Swap(Faction_NewApplyNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_NewApplyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_NewApplyNotify_descriptor_;
  metadata.reflection = Faction_NewApplyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_InviteJoinReq::kCidFieldNumber;
#endif  // !_MSC_VER

Faction_InviteJoinReq::Faction_InviteJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_InviteJoinReq::InitAsDefaultInstance() {
}

Faction_InviteJoinReq::Faction_InviteJoinReq(const Faction_InviteJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_InviteJoinReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_InviteJoinReq::~Faction_InviteJoinReq() {
  SharedDtor();
}

void Faction_InviteJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_InviteJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_InviteJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_InviteJoinReq_descriptor_;
}

const Faction_InviteJoinReq& Faction_InviteJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_InviteJoinReq* Faction_InviteJoinReq::default_instance_ = NULL;

Faction_InviteJoinReq* Faction_InviteJoinReq::New() const {
  return new Faction_InviteJoinReq;
}

void Faction_InviteJoinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_InviteJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_InviteJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_InviteJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_InviteJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_InviteJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_InviteJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_InviteJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_InviteJoinReq::MergeFrom(const Faction_InviteJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_InviteJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_InviteJoinReq::CopyFrom(const Faction_InviteJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_InviteJoinReq::IsInitialized() const {

  return true;
}

void Faction_InviteJoinReq::Swap(Faction_InviteJoinReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_InviteJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_InviteJoinReq_descriptor_;
  metadata.reflection = Faction_InviteJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_InviteJoinRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Faction_InviteJoinRsp::Faction_InviteJoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_InviteJoinRsp::InitAsDefaultInstance() {
}

Faction_InviteJoinRsp::Faction_InviteJoinRsp(const Faction_InviteJoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_InviteJoinRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_InviteJoinRsp::~Faction_InviteJoinRsp() {
  SharedDtor();
}

void Faction_InviteJoinRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_InviteJoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_InviteJoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_InviteJoinRsp_descriptor_;
}

const Faction_InviteJoinRsp& Faction_InviteJoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_InviteJoinRsp* Faction_InviteJoinRsp::default_instance_ = NULL;

Faction_InviteJoinRsp* Faction_InviteJoinRsp::New() const {
  return new Faction_InviteJoinRsp;
}

void Faction_InviteJoinRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_InviteJoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_InviteJoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_InviteJoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_InviteJoinRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_InviteJoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_InviteJoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_InviteJoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_InviteJoinRsp::MergeFrom(const Faction_InviteJoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_InviteJoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_InviteJoinRsp::CopyFrom(const Faction_InviteJoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_InviteJoinRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_InviteJoinRsp::Swap(Faction_InviteJoinRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_InviteJoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_InviteJoinRsp_descriptor_;
  metadata.reflection = Faction_InviteJoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_IviteJoinNotify::kCidFieldNumber;
const int Faction_IviteJoinNotify::kNameFieldNumber;
const int Faction_IviteJoinNotify::kFactionIdFieldNumber;
const int Faction_IviteJoinNotify::kFactionNameFieldNumber;
#endif  // !_MSC_VER

Faction_IviteJoinNotify::Faction_IviteJoinNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_IviteJoinNotify::InitAsDefaultInstance() {
}

Faction_IviteJoinNotify::Faction_IviteJoinNotify(const Faction_IviteJoinNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_IviteJoinNotify::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  faction_id_ = 0u;
  faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_IviteJoinNotify::~Faction_IviteJoinNotify() {
  SharedDtor();
}

void Faction_IviteJoinNotify::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete faction_name_;
  }
  if (this != default_instance_) {
  }
}

void Faction_IviteJoinNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_IviteJoinNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_IviteJoinNotify_descriptor_;
}

const Faction_IviteJoinNotify& Faction_IviteJoinNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_IviteJoinNotify* Faction_IviteJoinNotify::default_instance_ = NULL;

Faction_IviteJoinNotify* Faction_IviteJoinNotify::New() const {
  return new Faction_IviteJoinNotify;
}

void Faction_IviteJoinNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    faction_id_ = 0u;
    if (has_faction_name()) {
      if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
        faction_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_IviteJoinNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_faction_id;
        break;
      }

      // required uint32 faction_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_faction_name;
        break;
      }

      // required bytes faction_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faction_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_faction_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_IviteJoinNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required uint32 faction_id = 3;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->faction_id(), output);
  }

  // required bytes faction_name = 4;
  if (has_faction_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->faction_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_IviteJoinNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required uint32 faction_id = 3;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->faction_id(), target);
  }

  // required bytes faction_name = 4;
  if (has_faction_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->faction_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_IviteJoinNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 faction_id = 3;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // required bytes faction_name = 4;
    if (has_faction_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->faction_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_IviteJoinNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_IviteJoinNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_IviteJoinNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_IviteJoinNotify::MergeFrom(const Faction_IviteJoinNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_faction_name()) {
      set_faction_name(from.faction_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_IviteJoinNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_IviteJoinNotify::CopyFrom(const Faction_IviteJoinNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_IviteJoinNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Faction_IviteJoinNotify::Swap(Faction_IviteJoinNotify* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(faction_name_, other->faction_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_IviteJoinNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_IviteJoinNotify_descriptor_;
  metadata.reflection = Faction_IviteJoinNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Faction_RecordListReq::Faction_RecordListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_RecordListReq::InitAsDefaultInstance() {
}

Faction_RecordListReq::Faction_RecordListReq(const Faction_RecordListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_RecordListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_RecordListReq::~Faction_RecordListReq() {
  SharedDtor();
}

void Faction_RecordListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Faction_RecordListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_RecordListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_RecordListReq_descriptor_;
}

const Faction_RecordListReq& Faction_RecordListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_RecordListReq* Faction_RecordListReq::default_instance_ = NULL;

Faction_RecordListReq* Faction_RecordListReq::New() const {
  return new Faction_RecordListReq;
}

void Faction_RecordListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_RecordListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Faction_RecordListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_RecordListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_RecordListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_RecordListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_RecordListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_RecordListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_RecordListReq::MergeFrom(const Faction_RecordListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_RecordListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_RecordListReq::CopyFrom(const Faction_RecordListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_RecordListReq::IsInitialized() const {

  return true;
}

void Faction_RecordListReq::Swap(Faction_RecordListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_RecordListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_RecordListReq_descriptor_;
  metadata.reflection = Faction_RecordListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Faction_RecordListRsp::kRetFieldNumber;
const int Faction_RecordListRsp::kLstFieldNumber;
#endif  // !_MSC_VER

Faction_RecordListRsp::Faction_RecordListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Faction_RecordListRsp::InitAsDefaultInstance() {
  lst_ = const_cast< ::proto_ff::FactionRecordListProto*>(&::proto_ff::FactionRecordListProto::default_instance());
}

Faction_RecordListRsp::Faction_RecordListRsp(const Faction_RecordListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Faction_RecordListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  lst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Faction_RecordListRsp::~Faction_RecordListRsp() {
  SharedDtor();
}

void Faction_RecordListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete lst_;
  }
}

void Faction_RecordListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Faction_RecordListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Faction_RecordListRsp_descriptor_;
}

const Faction_RecordListRsp& Faction_RecordListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

Faction_RecordListRsp* Faction_RecordListRsp::default_instance_ = NULL;

Faction_RecordListRsp* Faction_RecordListRsp::New() const {
  return new Faction_RecordListRsp;
}

void Faction_RecordListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_lst()) {
      if (lst_ != NULL) lst_->::proto_ff::FactionRecordListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Faction_RecordListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lst;
        break;
      }

      // optional .proto_ff.FactionRecordListProto lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Faction_RecordListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.FactionRecordListProto lst = 2;
  if (has_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Faction_RecordListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.FactionRecordListProto lst = 2;
  if (has_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Faction_RecordListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.FactionRecordListProto lst = 2;
    if (has_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Faction_RecordListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Faction_RecordListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Faction_RecordListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Faction_RecordListRsp::MergeFrom(const Faction_RecordListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_lst()) {
      mutable_lst()->::proto_ff::FactionRecordListProto::MergeFrom(from.lst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Faction_RecordListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Faction_RecordListRsp::CopyFrom(const Faction_RecordListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Faction_RecordListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Faction_RecordListRsp::Swap(Faction_RecordListRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(lst_, other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Faction_RecordListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Faction_RecordListRsp_descriptor_;
  metadata.reflection = Faction_RecordListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CL_FactionRoleUpdateRsp::kCidFieldNumber;
const int CL_FactionRoleUpdateRsp::kFactionIdFieldNumber;
const int CL_FactionRoleUpdateRsp::kNameFieldNumber;
const int CL_FactionRoleUpdateRsp::kDutyFieldNumber;
const int CL_FactionRoleUpdateRsp::kLevelFieldNumber;
const int CL_FactionRoleUpdateRsp::kLeaderFieldNumber;
#endif  // !_MSC_VER

CL_FactionRoleUpdateRsp::CL_FactionRoleUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CL_FactionRoleUpdateRsp::InitAsDefaultInstance() {
}

CL_FactionRoleUpdateRsp::CL_FactionRoleUpdateRsp(const CL_FactionRoleUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CL_FactionRoleUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duty_ = 0;
  level_ = 0;
  leader_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CL_FactionRoleUpdateRsp::~CL_FactionRoleUpdateRsp() {
  SharedDtor();
}

void CL_FactionRoleUpdateRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CL_FactionRoleUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CL_FactionRoleUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CL_FactionRoleUpdateRsp_descriptor_;
}

const CL_FactionRoleUpdateRsp& CL_FactionRoleUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

CL_FactionRoleUpdateRsp* CL_FactionRoleUpdateRsp::default_instance_ = NULL;

CL_FactionRoleUpdateRsp* CL_FactionRoleUpdateRsp::New() const {
  return new CL_FactionRoleUpdateRsp;
}

void CL_FactionRoleUpdateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    duty_ = 0;
    level_ = 0;
    leader_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CL_FactionRoleUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faction_id;
        break;
      }

      // required uint32 faction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duty;
        break;
      }

      // required int32 duty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leader;
        break;
      }

      // required uint64 leader = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CL_FactionRoleUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 faction_id = 2;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->faction_id(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // required int32 duty = 4;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duty(), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // required uint64 leader = 6;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CL_FactionRoleUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 faction_id = 2;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->faction_id(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int32 duty = 4;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duty(), target);
  }

  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // required uint64 leader = 6;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CL_FactionRoleUpdateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 faction_id = 2;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 duty = 4;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required uint64 leader = 6;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CL_FactionRoleUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CL_FactionRoleUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CL_FactionRoleUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CL_FactionRoleUpdateRsp::MergeFrom(const CL_FactionRoleUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CL_FactionRoleUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CL_FactionRoleUpdateRsp::CopyFrom(const CL_FactionRoleUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CL_FactionRoleUpdateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CL_FactionRoleUpdateRsp::Swap(CL_FactionRoleUpdateRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(duty_, other->duty_);
    std::swap(level_, other->level_);
    std::swap(leader_, other->leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CL_FactionRoleUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CL_FactionRoleUpdateRsp_descriptor_;
  metadata.reflection = CL_FactionRoleUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LC_FactionCreate::kCidFieldNumber;
const int LC_FactionCreate::kNameFieldNumber;
const int LC_FactionCreate::kNoticeFieldNumber;
#endif  // !_MSC_VER

LC_FactionCreate::LC_FactionCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LC_FactionCreate::InitAsDefaultInstance() {
}

LC_FactionCreate::LC_FactionCreate(const LC_FactionCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LC_FactionCreate::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LC_FactionCreate::~LC_FactionCreate() {
  SharedDtor();
}

void LC_FactionCreate::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void LC_FactionCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LC_FactionCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LC_FactionCreate_descriptor_;
}

const LC_FactionCreate& LC_FactionCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LC_FactionCreate* LC_FactionCreate::default_instance_ = NULL;

LC_FactionCreate* LC_FactionCreate::New() const {
  return new LC_FactionCreate;
}

void LC_FactionCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LC_FactionCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notice;
        break;
      }

      // required bytes notice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LC_FactionCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required bytes notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LC_FactionCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes notice = 3;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LC_FactionCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes notice = 3;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LC_FactionCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LC_FactionCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LC_FactionCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LC_FactionCreate::MergeFrom(const LC_FactionCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LC_FactionCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_FactionCreate::CopyFrom(const LC_FactionCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_FactionCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LC_FactionCreate::Swap(LC_FactionCreate* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LC_FactionCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LC_FactionCreate_descriptor_;
  metadata.reflection = LC_FactionCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CL_FactionCreateResult::kCidFieldNumber;
#endif  // !_MSC_VER

CL_FactionCreateResult::CL_FactionCreateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CL_FactionCreateResult::InitAsDefaultInstance() {
}

CL_FactionCreateResult::CL_FactionCreateResult(const CL_FactionCreateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CL_FactionCreateResult::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CL_FactionCreateResult::~CL_FactionCreateResult() {
  SharedDtor();
}

void CL_FactionCreateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CL_FactionCreateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CL_FactionCreateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CL_FactionCreateResult_descriptor_;
}

const CL_FactionCreateResult& CL_FactionCreateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

CL_FactionCreateResult* CL_FactionCreateResult::default_instance_ = NULL;

CL_FactionCreateResult* CL_FactionCreateResult::New() const {
  return new CL_FactionCreateResult;
}

void CL_FactionCreateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CL_FactionCreateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CL_FactionCreateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CL_FactionCreateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CL_FactionCreateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CL_FactionCreateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CL_FactionCreateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CL_FactionCreateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CL_FactionCreateResult::MergeFrom(const CL_FactionCreateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CL_FactionCreateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CL_FactionCreateResult::CopyFrom(const CL_FactionCreateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CL_FactionCreateResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CL_FactionCreateResult::Swap(CL_FactionCreateResult* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CL_FactionCreateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CL_FactionCreateResult_descriptor_;
  metadata.reflection = CL_FactionCreateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LC_FactionChgName::kCidFieldNumber;
const int LC_FactionChgName::kNameFieldNumber;
#endif  // !_MSC_VER

LC_FactionChgName::LC_FactionChgName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LC_FactionChgName::InitAsDefaultInstance() {
}

LC_FactionChgName::LC_FactionChgName(const LC_FactionChgName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LC_FactionChgName::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LC_FactionChgName::~LC_FactionChgName() {
  SharedDtor();
}

void LC_FactionChgName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LC_FactionChgName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LC_FactionChgName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LC_FactionChgName_descriptor_;
}

const LC_FactionChgName& LC_FactionChgName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

LC_FactionChgName* LC_FactionChgName::default_instance_ = NULL;

LC_FactionChgName* LC_FactionChgName::New() const {
  return new LC_FactionChgName;
}

void LC_FactionChgName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LC_FactionChgName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LC_FactionChgName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LC_FactionChgName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LC_FactionChgName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LC_FactionChgName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LC_FactionChgName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LC_FactionChgName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LC_FactionChgName::MergeFrom(const LC_FactionChgName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LC_FactionChgName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_FactionChgName::CopyFrom(const LC_FactionChgName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_FactionChgName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LC_FactionChgName::Swap(LC_FactionChgName* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LC_FactionChgName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LC_FactionChgName_descriptor_;
  metadata.reflection = LC_FactionChgName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CL_FactionChgNameResult::kRetFieldNumber;
const int CL_FactionChgNameResult::kCidFieldNumber;
#endif  // !_MSC_VER

CL_FactionChgNameResult::CL_FactionChgNameResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CL_FactionChgNameResult::InitAsDefaultInstance() {
}

CL_FactionChgNameResult::CL_FactionChgNameResult(const CL_FactionChgNameResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CL_FactionChgNameResult::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CL_FactionChgNameResult::~CL_FactionChgNameResult() {
  SharedDtor();
}

void CL_FactionChgNameResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CL_FactionChgNameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CL_FactionChgNameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CL_FactionChgNameResult_descriptor_;
}

const CL_FactionChgNameResult& CL_FactionChgNameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();
  return *default_instance_;
}

CL_FactionChgNameResult* CL_FactionChgNameResult::default_instance_ = NULL;

CL_FactionChgNameResult* CL_FactionChgNameResult::New() const {
  return new CL_FactionChgNameResult;
}

void CL_FactionChgNameResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CL_FactionChgNameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CL_FactionChgNameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CL_FactionChgNameResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CL_FactionChgNameResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CL_FactionChgNameResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CL_FactionChgNameResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CL_FactionChgNameResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CL_FactionChgNameResult::MergeFrom(const CL_FactionChgNameResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CL_FactionChgNameResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CL_FactionChgNameResult::CopyFrom(const CL_FactionChgNameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CL_FactionChgNameResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CL_FactionChgNameResult::Swap(CL_FactionChgNameResult* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CL_FactionChgNameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CL_FactionChgNameResult_descriptor_;
  metadata.reflection = CL_FactionChgNameResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
