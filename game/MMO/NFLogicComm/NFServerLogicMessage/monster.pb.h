// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monster.proto

#ifndef PROTOBUF_monster_2eproto__INCLUDED
#define PROTOBUF_monster_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_monster_2eproto();
void protobuf_AssignDesc_monster_2eproto();
void protobuf_ShutdownFile_monster_2eproto();

class E_MonsterMonster;
class Sheet_MonsterMonster;
class E_MonsterDisplaySkillDesc;
class E_MonsterDisplay;
class Sheet_MonsterDisplay;
class E_MonsterValue;
class Sheet_MonsterValue;
class E_MonsterValueparam;
class Sheet_MonsterValueparam;
class E_MonsterDrop;
class Sheet_MonsterDrop;

// ===================================================================

class E_MonsterMonster : public ::google::protobuf::Message {
 public:
  E_MonsterMonster();
  virtual ~E_MonsterMonster();

  E_MonsterMonster(const E_MonsterMonster& from);

  inline E_MonsterMonster& operator=(const E_MonsterMonster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MonsterMonster& default_instance();

  void Swap(E_MonsterMonster* other);

  // implements Message ----------------------------------------------

  E_MonsterMonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MonsterMonster& from);
  void MergeFrom(const E_MonsterMonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_monsterid = 1;
  inline bool has_m_monsterid() const;
  inline void clear_m_monsterid();
  static const int kMMonsteridFieldNumber = 1;
  inline ::google::protobuf::int64 m_monsterid() const;
  inline void set_m_monsterid(::google::protobuf::int64 value);

  // optional string m_monstername = 2;
  inline bool has_m_monstername() const;
  inline void clear_m_monstername();
  static const int kMMonsternameFieldNumber = 2;
  inline const ::std::string& m_monstername() const;
  inline void set_m_monstername(const ::std::string& value);
  inline void set_m_monstername(const char* value);
  inline void set_m_monstername(const char* value, size_t size);
  inline ::std::string* mutable_m_monstername();
  inline ::std::string* release_m_monstername();
  inline void set_allocated_m_monstername(::std::string* m_monstername);

  // optional int32 m_functiontype = 3;
  inline bool has_m_functiontype() const;
  inline void clear_m_functiontype();
  static const int kMFunctiontypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_functiontype() const;
  inline void set_m_functiontype(::google::protobuf::int32 value);

  // optional int64 m_functionvalue = 4;
  inline bool has_m_functionvalue() const;
  inline void clear_m_functionvalue();
  static const int kMFunctionvalueFieldNumber = 4;
  inline ::google::protobuf::int64 m_functionvalue() const;
  inline void set_m_functionvalue(::google::protobuf::int64 value);

  // optional int32 m_profession = 5;
  inline bool has_m_profession() const;
  inline void clear_m_profession();
  static const int kMProfessionFieldNumber = 5;
  inline ::google::protobuf::int32 m_profession() const;
  inline void set_m_profession(::google::protobuf::int32 value);

  // optional int32 m_damageaddtype = 6;
  inline bool has_m_damageaddtype() const;
  inline void clear_m_damageaddtype();
  static const int kMDamageaddtypeFieldNumber = 6;
  inline ::google::protobuf::int32 m_damageaddtype() const;
  inline void set_m_damageaddtype(::google::protobuf::int32 value);

  // optional int32 m_monsterlv = 7;
  inline bool has_m_monsterlv() const;
  inline void clear_m_monsterlv();
  static const int kMMonsterlvFieldNumber = 7;
  inline ::google::protobuf::int32 m_monsterlv() const;
  inline void set_m_monsterlv(::google::protobuf::int32 value);

  // optional int32 m_droplimit = 8;
  inline bool has_m_droplimit() const;
  inline void clear_m_droplimit();
  static const int kMDroplimitFieldNumber = 8;
  inline ::google::protobuf::int32 m_droplimit() const;
  inline void set_m_droplimit(::google::protobuf::int32 value);

  // optional int64 m_displayid = 9;
  inline bool has_m_displayid() const;
  inline void clear_m_displayid();
  static const int kMDisplayidFieldNumber = 9;
  inline ::google::protobuf::int64 m_displayid() const;
  inline void set_m_displayid(::google::protobuf::int64 value);

  // optional int64 m_valuetype = 10;
  inline bool has_m_valuetype() const;
  inline void clear_m_valuetype();
  static const int kMValuetypeFieldNumber = 10;
  inline ::google::protobuf::int64 m_valuetype() const;
  inline void set_m_valuetype(::google::protobuf::int64 value);

  // optional int32 m_valueparam = 11;
  inline bool has_m_valueparam() const;
  inline void clear_m_valueparam();
  static const int kMValueparamFieldNumber = 11;
  inline ::google::protobuf::int32 m_valueparam() const;
  inline void set_m_valueparam(::google::protobuf::int32 value);

  // optional int64 m_aiid = 12;
  inline bool has_m_aiid() const;
  inline void clear_m_aiid();
  static const int kMAiidFieldNumber = 12;
  inline ::google::protobuf::int64 m_aiid() const;
  inline void set_m_aiid(::google::protobuf::int64 value);

  // optional int32 m_hpsectionnum = 13;
  inline bool has_m_hpsectionnum() const;
  inline void clear_m_hpsectionnum();
  static const int kMHpsectionnumFieldNumber = 13;
  inline ::google::protobuf::int32 m_hpsectionnum() const;
  inline void set_m_hpsectionnum(::google::protobuf::int32 value);

  // optional int32 m_breedprob = 14;
  inline bool has_m_breedprob() const;
  inline void clear_m_breedprob();
  static const int kMBreedprobFieldNumber = 14;
  inline ::google::protobuf::int32 m_breedprob() const;
  inline void set_m_breedprob(::google::protobuf::int32 value);

  // optional int64 m_breedmonid = 15;
  inline bool has_m_breedmonid() const;
  inline void clear_m_breedmonid();
  static const int kMBreedmonidFieldNumber = 15;
  inline ::google::protobuf::int64 m_breedmonid() const;
  inline void set_m_breedmonid(::google::protobuf::int64 value);

  // optional int32 m_breedmonlive = 16;
  inline bool has_m_breedmonlive() const;
  inline void clear_m_breedmonlive();
  static const int kMBreedmonliveFieldNumber = 16;
  inline ::google::protobuf::int32 m_breedmonlive() const;
  inline void set_m_breedmonlive(::google::protobuf::int32 value);

  // optional string m_itemcost = 17;
  inline bool has_m_itemcost() const;
  inline void clear_m_itemcost();
  static const int kMItemcostFieldNumber = 17;
  inline const ::std::string& m_itemcost() const;
  inline void set_m_itemcost(const ::std::string& value);
  inline void set_m_itemcost(const char* value);
  inline void set_m_itemcost(const char* value, size_t size);
  inline ::std::string* mutable_m_itemcost();
  inline ::std::string* release_m_itemcost();
  inline void set_allocated_m_itemcost(::std::string* m_itemcost);

  // optional int32 m_isbornactionon = 18;
  inline bool has_m_isbornactionon() const;
  inline void clear_m_isbornactionon();
  static const int kMIsbornactiononFieldNumber = 18;
  inline ::google::protobuf::int32 m_isbornactionon() const;
  inline void set_m_isbornactionon(::google::protobuf::int32 value);

  // optional int32 m_belongshow = 19;
  inline bool has_m_belongshow() const;
  inline void clear_m_belongshow();
  static const int kMBelongshowFieldNumber = 19;
  inline ::google::protobuf::int32 m_belongshow() const;
  inline void set_m_belongshow(::google::protobuf::int32 value);

  // optional int32 m_dropgroupid = 20;
  inline bool has_m_dropgroupid() const;
  inline void clear_m_dropgroupid();
  static const int kMDropgroupidFieldNumber = 20;
  inline ::google::protobuf::int32 m_dropgroupid() const;
  inline void set_m_dropgroupid(::google::protobuf::int32 value);

  // optional int32 m_harmdrop_type = 21;
  inline bool has_m_harmdrop_type() const;
  inline void clear_m_harmdrop_type();
  static const int kMHarmdropTypeFieldNumber = 21;
  inline ::google::protobuf::int32 m_harmdrop_type() const;
  inline void set_m_harmdrop_type(::google::protobuf::int32 value);

  // optional int32 m_joninper = 22;
  inline bool has_m_joninper() const;
  inline void clear_m_joninper();
  static const int kMJoninperFieldNumber = 22;
  inline ::google::protobuf::int32 m_joninper() const;
  inline void set_m_joninper(::google::protobuf::int32 value);

  // optional int32 m_btnrange = 23;
  inline bool has_m_btnrange() const;
  inline void clear_m_btnrange();
  static const int kMBtnrangeFieldNumber = 23;
  inline ::google::protobuf::int32 m_btnrange() const;
  inline void set_m_btnrange(::google::protobuf::int32 value);

  // optional int64 m_btnid = 24;
  inline bool has_m_btnid() const;
  inline void clear_m_btnid();
  static const int kMBtnidFieldNumber = 24;
  inline ::google::protobuf::int64 m_btnid() const;
  inline void set_m_btnid(::google::protobuf::int64 value);

  // optional int32 m_drivepoint = 25;
  inline bool has_m_drivepoint() const;
  inline void clear_m_drivepoint();
  static const int kMDrivepointFieldNumber = 25;
  inline ::google::protobuf::int32 m_drivepoint() const;
  inline void set_m_drivepoint(::google::protobuf::int32 value);

  // optional int32 m_corpseid = 26;
  inline bool has_m_corpseid() const;
  inline void clear_m_corpseid();
  static const int kMCorpseidFieldNumber = 26;
  inline ::google::protobuf::int32 m_corpseid() const;
  inline void set_m_corpseid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MonsterMonster)
 private:
  inline void set_has_m_monsterid();
  inline void clear_has_m_monsterid();
  inline void set_has_m_monstername();
  inline void clear_has_m_monstername();
  inline void set_has_m_functiontype();
  inline void clear_has_m_functiontype();
  inline void set_has_m_functionvalue();
  inline void clear_has_m_functionvalue();
  inline void set_has_m_profession();
  inline void clear_has_m_profession();
  inline void set_has_m_damageaddtype();
  inline void clear_has_m_damageaddtype();
  inline void set_has_m_monsterlv();
  inline void clear_has_m_monsterlv();
  inline void set_has_m_droplimit();
  inline void clear_has_m_droplimit();
  inline void set_has_m_displayid();
  inline void clear_has_m_displayid();
  inline void set_has_m_valuetype();
  inline void clear_has_m_valuetype();
  inline void set_has_m_valueparam();
  inline void clear_has_m_valueparam();
  inline void set_has_m_aiid();
  inline void clear_has_m_aiid();
  inline void set_has_m_hpsectionnum();
  inline void clear_has_m_hpsectionnum();
  inline void set_has_m_breedprob();
  inline void clear_has_m_breedprob();
  inline void set_has_m_breedmonid();
  inline void clear_has_m_breedmonid();
  inline void set_has_m_breedmonlive();
  inline void clear_has_m_breedmonlive();
  inline void set_has_m_itemcost();
  inline void clear_has_m_itemcost();
  inline void set_has_m_isbornactionon();
  inline void clear_has_m_isbornactionon();
  inline void set_has_m_belongshow();
  inline void clear_has_m_belongshow();
  inline void set_has_m_dropgroupid();
  inline void clear_has_m_dropgroupid();
  inline void set_has_m_harmdrop_type();
  inline void clear_has_m_harmdrop_type();
  inline void set_has_m_joninper();
  inline void clear_has_m_joninper();
  inline void set_has_m_btnrange();
  inline void clear_has_m_btnrange();
  inline void set_has_m_btnid();
  inline void clear_has_m_btnid();
  inline void set_has_m_drivepoint();
  inline void clear_has_m_drivepoint();
  inline void set_has_m_corpseid();
  inline void clear_has_m_corpseid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_monsterid_;
  ::std::string* m_monstername_;
  ::google::protobuf::int32 m_functiontype_;
  ::google::protobuf::int32 m_profession_;
  ::google::protobuf::int64 m_functionvalue_;
  ::google::protobuf::int32 m_damageaddtype_;
  ::google::protobuf::int32 m_monsterlv_;
  ::google::protobuf::int64 m_displayid_;
  ::google::protobuf::int32 m_droplimit_;
  ::google::protobuf::int32 m_valueparam_;
  ::google::protobuf::int64 m_valuetype_;
  ::google::protobuf::int64 m_aiid_;
  ::google::protobuf::int32 m_hpsectionnum_;
  ::google::protobuf::int32 m_breedprob_;
  ::google::protobuf::int64 m_breedmonid_;
  ::std::string* m_itemcost_;
  ::google::protobuf::int32 m_breedmonlive_;
  ::google::protobuf::int32 m_isbornactionon_;
  ::google::protobuf::int32 m_belongshow_;
  ::google::protobuf::int32 m_dropgroupid_;
  ::google::protobuf::int32 m_harmdrop_type_;
  ::google::protobuf::int32 m_joninper_;
  ::google::protobuf::int64 m_btnid_;
  ::google::protobuf::int32 m_btnrange_;
  ::google::protobuf::int32 m_drivepoint_;
  ::google::protobuf::int32 m_corpseid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static E_MonsterMonster* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MonsterMonster : public ::google::protobuf::Message {
 public:
  Sheet_MonsterMonster();
  virtual ~Sheet_MonsterMonster();

  Sheet_MonsterMonster(const Sheet_MonsterMonster& from);

  inline Sheet_MonsterMonster& operator=(const Sheet_MonsterMonster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MonsterMonster& default_instance();

  void Swap(Sheet_MonsterMonster* other);

  // implements Message ----------------------------------------------

  Sheet_MonsterMonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MonsterMonster& from);
  void MergeFrom(const Sheet_MonsterMonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MonsterMonster E_MonsterMonster_List = 1;
  inline int e_monstermonster_list_size() const;
  inline void clear_e_monstermonster_list();
  static const int kEMonsterMonsterListFieldNumber = 1;
  inline const ::proto_ff::E_MonsterMonster& e_monstermonster_list(int index) const;
  inline ::proto_ff::E_MonsterMonster* mutable_e_monstermonster_list(int index);
  inline ::proto_ff::E_MonsterMonster* add_e_monstermonster_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterMonster >&
      e_monstermonster_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterMonster >*
      mutable_e_monstermonster_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MonsterMonster)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterMonster > e_monstermonster_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MonsterMonster* default_instance_;
};
// -------------------------------------------------------------------

class E_MonsterDisplaySkillDesc : public ::google::protobuf::Message {
 public:
  E_MonsterDisplaySkillDesc();
  virtual ~E_MonsterDisplaySkillDesc();

  E_MonsterDisplaySkillDesc(const E_MonsterDisplaySkillDesc& from);

  inline E_MonsterDisplaySkillDesc& operator=(const E_MonsterDisplaySkillDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MonsterDisplaySkillDesc& default_instance();

  void Swap(E_MonsterDisplaySkillDesc* other);

  // implements Message ----------------------------------------------

  E_MonsterDisplaySkillDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MonsterDisplaySkillDesc& from);
  void MergeFrom(const E_MonsterDisplaySkillDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MonsterDisplaySkillDesc)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static E_MonsterDisplaySkillDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MonsterDisplay : public ::google::protobuf::Message {
 public:
  E_MonsterDisplay();
  virtual ~E_MonsterDisplay();

  E_MonsterDisplay(const E_MonsterDisplay& from);

  inline E_MonsterDisplay& operator=(const E_MonsterDisplay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MonsterDisplay& default_instance();

  void Swap(E_MonsterDisplay* other);

  // implements Message ----------------------------------------------

  E_MonsterDisplay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MonsterDisplay& from);
  void MergeFrom(const E_MonsterDisplay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_displayid = 1;
  inline bool has_m_displayid() const;
  inline void clear_m_displayid();
  static const int kMDisplayidFieldNumber = 1;
  inline ::google::protobuf::int64 m_displayid() const;
  inline void set_m_displayid(::google::protobuf::int64 value);

  // optional int32 m_modeloffsetsx = 2;
  inline bool has_m_modeloffsetsx() const;
  inline void clear_m_modeloffsetsx();
  static const int kMModeloffsetsxFieldNumber = 2;
  inline ::google::protobuf::int32 m_modeloffsetsx() const;
  inline void set_m_modeloffsetsx(::google::protobuf::int32 value);

  // optional int32 m_modeloffsetsy = 3;
  inline bool has_m_modeloffsetsy() const;
  inline void clear_m_modeloffsetsy();
  static const int kMModeloffsetsyFieldNumber = 3;
  inline ::google::protobuf::int32 m_modeloffsetsy() const;
  inline void set_m_modeloffsetsy(::google::protobuf::int32 value);

  // optional int32 m_modelscale = 4;
  inline bool has_m_modelscale() const;
  inline void clear_m_modelscale();
  static const int kMModelscaleFieldNumber = 4;
  inline ::google::protobuf::int32 m_modelscale() const;
  inline void set_m_modelscale(::google::protobuf::int32 value);

  // optional int32 m_modelradius = 5;
  inline bool has_m_modelradius() const;
  inline void clear_m_modelradius();
  static const int kMModelradiusFieldNumber = 5;
  inline ::google::protobuf::int32 m_modelradius() const;
  inline void set_m_modelradius(::google::protobuf::int32 value);

  // optional int32 m_pathradius = 6;
  inline bool has_m_pathradius() const;
  inline void clear_m_pathradius();
  static const int kMPathradiusFieldNumber = 6;
  inline ::google::protobuf::int32 m_pathradius() const;
  inline void set_m_pathradius(::google::protobuf::int32 value);

  // optional int32 m_collisionradius = 7;
  inline bool has_m_collisionradius() const;
  inline void clear_m_collisionradius();
  static const int kMCollisionradiusFieldNumber = 7;
  inline ::google::protobuf::int32 m_collisionradius() const;
  inline void set_m_collisionradius(::google::protobuf::int32 value);

  // optional int32 m_rspeed = 8;
  inline bool has_m_rspeed() const;
  inline void clear_m_rspeed();
  static const int kMRspeedFieldNumber = 8;
  inline ::google::protobuf::int32 m_rspeed() const;
  inline void set_m_rspeed(::google::protobuf::int32 value);

  // repeated .proto_ff.E_MonsterDisplaySkillDesc m_skill = 9;
  inline int m_skill_size() const;
  inline void clear_m_skill();
  static const int kMSkillFieldNumber = 9;
  inline const ::proto_ff::E_MonsterDisplaySkillDesc& m_skill(int index) const;
  inline ::proto_ff::E_MonsterDisplaySkillDesc* mutable_m_skill(int index);
  inline ::proto_ff::E_MonsterDisplaySkillDesc* add_m_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDisplaySkillDesc >&
      m_skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDisplaySkillDesc >*
      mutable_m_skill();

  // @@protoc_insertion_point(class_scope:proto_ff.E_MonsterDisplay)
 private:
  inline void set_has_m_displayid();
  inline void clear_has_m_displayid();
  inline void set_has_m_modeloffsetsx();
  inline void clear_has_m_modeloffsetsx();
  inline void set_has_m_modeloffsetsy();
  inline void clear_has_m_modeloffsetsy();
  inline void set_has_m_modelscale();
  inline void clear_has_m_modelscale();
  inline void set_has_m_modelradius();
  inline void clear_has_m_modelradius();
  inline void set_has_m_pathradius();
  inline void clear_has_m_pathradius();
  inline void set_has_m_collisionradius();
  inline void clear_has_m_collisionradius();
  inline void set_has_m_rspeed();
  inline void clear_has_m_rspeed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_displayid_;
  ::google::protobuf::int32 m_modeloffsetsx_;
  ::google::protobuf::int32 m_modeloffsetsy_;
  ::google::protobuf::int32 m_modelscale_;
  ::google::protobuf::int32 m_modelradius_;
  ::google::protobuf::int32 m_pathradius_;
  ::google::protobuf::int32 m_collisionradius_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDisplaySkillDesc > m_skill_;
  ::google::protobuf::int32 m_rspeed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static E_MonsterDisplay* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MonsterDisplay : public ::google::protobuf::Message {
 public:
  Sheet_MonsterDisplay();
  virtual ~Sheet_MonsterDisplay();

  Sheet_MonsterDisplay(const Sheet_MonsterDisplay& from);

  inline Sheet_MonsterDisplay& operator=(const Sheet_MonsterDisplay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MonsterDisplay& default_instance();

  void Swap(Sheet_MonsterDisplay* other);

  // implements Message ----------------------------------------------

  Sheet_MonsterDisplay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MonsterDisplay& from);
  void MergeFrom(const Sheet_MonsterDisplay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MonsterDisplay E_MonsterDisplay_List = 1;
  inline int e_monsterdisplay_list_size() const;
  inline void clear_e_monsterdisplay_list();
  static const int kEMonsterDisplayListFieldNumber = 1;
  inline const ::proto_ff::E_MonsterDisplay& e_monsterdisplay_list(int index) const;
  inline ::proto_ff::E_MonsterDisplay* mutable_e_monsterdisplay_list(int index);
  inline ::proto_ff::E_MonsterDisplay* add_e_monsterdisplay_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDisplay >&
      e_monsterdisplay_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDisplay >*
      mutable_e_monsterdisplay_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MonsterDisplay)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDisplay > e_monsterdisplay_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MonsterDisplay* default_instance_;
};
// -------------------------------------------------------------------

class E_MonsterValue : public ::google::protobuf::Message {
 public:
  E_MonsterValue();
  virtual ~E_MonsterValue();

  E_MonsterValue(const E_MonsterValue& from);

  inline E_MonsterValue& operator=(const E_MonsterValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MonsterValue& default_instance();

  void Swap(E_MonsterValue* other);

  // implements Message ----------------------------------------------

  E_MonsterValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MonsterValue& from);
  void MergeFrom(const E_MonsterValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional int32 m_monsterlv = 3;
  inline bool has_m_monsterlv() const;
  inline void clear_m_monsterlv();
  static const int kMMonsterlvFieldNumber = 3;
  inline ::google::protobuf::int32 m_monsterlv() const;
  inline void set_m_monsterlv(::google::protobuf::int32 value);

  // optional int64 m_max_hp = 4;
  inline bool has_m_max_hp() const;
  inline void clear_m_max_hp();
  static const int kMMaxHpFieldNumber = 4;
  inline ::google::protobuf::int64 m_max_hp() const;
  inline void set_m_max_hp(::google::protobuf::int64 value);

  // optional int64 m_atk = 5;
  inline bool has_m_atk() const;
  inline void clear_m_atk();
  static const int kMAtkFieldNumber = 5;
  inline ::google::protobuf::int64 m_atk() const;
  inline void set_m_atk(::google::protobuf::int64 value);

  // optional int64 m_def = 6;
  inline bool has_m_def() const;
  inline void clear_m_def();
  static const int kMDefFieldNumber = 6;
  inline ::google::protobuf::int64 m_def() const;
  inline void set_m_def(::google::protobuf::int64 value);

  // optional int64 m_brk_armor = 7;
  inline bool has_m_brk_armor() const;
  inline void clear_m_brk_armor();
  static const int kMBrkArmorFieldNumber = 7;
  inline ::google::protobuf::int64 m_brk_armor() const;
  inline void set_m_brk_armor(::google::protobuf::int64 value);

  // optional int64 m_five_dam = 8;
  inline bool has_m_five_dam() const;
  inline void clear_m_five_dam();
  static const int kMFiveDamFieldNumber = 8;
  inline ::google::protobuf::int64 m_five_dam() const;
  inline void set_m_five_dam(::google::protobuf::int64 value);

  // optional int64 m_five_armor = 9;
  inline bool has_m_five_armor() const;
  inline void clear_m_five_armor();
  static const int kMFiveArmorFieldNumber = 9;
  inline ::google::protobuf::int64 m_five_armor() const;
  inline void set_m_five_armor(::google::protobuf::int64 value);

  // optional int64 m_thump_rate = 10;
  inline bool has_m_thump_rate() const;
  inline void clear_m_thump_rate();
  static const int kMThumpRateFieldNumber = 10;
  inline ::google::protobuf::int64 m_thump_rate() const;
  inline void set_m_thump_rate(::google::protobuf::int64 value);

  // optional int64 m_thump_resist = 11;
  inline bool has_m_thump_resist() const;
  inline void clear_m_thump_resist();
  static const int kMThumpResistFieldNumber = 11;
  inline ::google::protobuf::int64 m_thump_resist() const;
  inline void set_m_thump_resist(::google::protobuf::int64 value);

  // optional int64 m_sky = 12;
  inline bool has_m_sky() const;
  inline void clear_m_sky();
  static const int kMSkyFieldNumber = 12;
  inline ::google::protobuf::int64 m_sky() const;
  inline void set_m_sky(::google::protobuf::int64 value);

  // optional int64 m_sky_dam = 13;
  inline bool has_m_sky_dam() const;
  inline void clear_m_sky_dam();
  static const int kMSkyDamFieldNumber = 13;
  inline ::google::protobuf::int64 m_sky_dam() const;
  inline void set_m_sky_dam(::google::protobuf::int64 value);

  // optional int64 m_sky_redu_resist = 14;
  inline bool has_m_sky_redu_resist() const;
  inline void clear_m_sky_redu_resist();
  static const int kMSkyReduResistFieldNumber = 14;
  inline ::google::protobuf::int64 m_sky_redu_resist() const;
  inline void set_m_sky_redu_resist(::google::protobuf::int64 value);

  // optional int64 m_sky_resist = 15;
  inline bool has_m_sky_resist() const;
  inline void clear_m_sky_resist();
  static const int kMSkyResistFieldNumber = 15;
  inline ::google::protobuf::int64 m_sky_resist() const;
  inline void set_m_sky_resist(::google::protobuf::int64 value);

  // optional int64 m_kill_god = 16;
  inline bool has_m_kill_god() const;
  inline void clear_m_kill_god();
  static const int kMKillGodFieldNumber = 16;
  inline ::google::protobuf::int64 m_kill_god() const;
  inline void set_m_kill_god(::google::protobuf::int64 value);

  // optional int64 m_god_body = 17;
  inline bool has_m_god_body() const;
  inline void clear_m_god_body();
  static const int kMGodBodyFieldNumber = 17;
  inline ::google::protobuf::int64 m_god_body() const;
  inline void set_m_god_body(::google::protobuf::int64 value);

  // optional int64 m_mortal_rate = 18;
  inline bool has_m_mortal_rate() const;
  inline void clear_m_mortal_rate();
  static const int kMMortalRateFieldNumber = 18;
  inline ::google::protobuf::int64 m_mortal_rate() const;
  inline void set_m_mortal_rate(::google::protobuf::int64 value);

  // optional int64 m_mortal_resist = 19;
  inline bool has_m_mortal_resist() const;
  inline void clear_m_mortal_resist();
  static const int kMMortalResistFieldNumber = 19;
  inline ::google::protobuf::int64 m_mortal_resist() const;
  inline void set_m_mortal_resist(::google::protobuf::int64 value);

  // optional int64 m_fairy_rate = 20;
  inline bool has_m_fairy_rate() const;
  inline void clear_m_fairy_rate();
  static const int kMFairyRateFieldNumber = 20;
  inline ::google::protobuf::int64 m_fairy_rate() const;
  inline void set_m_fairy_rate(::google::protobuf::int64 value);

  // optional int64 m_fairy_resist = 21;
  inline bool has_m_fairy_resist() const;
  inline void clear_m_fairy_resist();
  static const int kMFairyResistFieldNumber = 21;
  inline ::google::protobuf::int64 m_fairy_resist() const;
  inline void set_m_fairy_resist(::google::protobuf::int64 value);

  // optional int64 m_god_rate = 22;
  inline bool has_m_god_rate() const;
  inline void clear_m_god_rate();
  static const int kMGodRateFieldNumber = 22;
  inline ::google::protobuf::int64 m_god_rate() const;
  inline void set_m_god_rate(::google::protobuf::int64 value);

  // optional int64 m_god_resist = 23;
  inline bool has_m_god_resist() const;
  inline void clear_m_god_resist();
  static const int kMGodResistFieldNumber = 23;
  inline ::google::protobuf::int64 m_god_resist() const;
  inline void set_m_god_resist(::google::protobuf::int64 value);

  // optional int64 m_crit_rate = 24;
  inline bool has_m_crit_rate() const;
  inline void clear_m_crit_rate();
  static const int kMCritRateFieldNumber = 24;
  inline ::google::protobuf::int64 m_crit_rate() const;
  inline void set_m_crit_rate(::google::protobuf::int64 value);

  // optional int64 m_crit_resit_rate = 25;
  inline bool has_m_crit_resit_rate() const;
  inline void clear_m_crit_resit_rate();
  static const int kMCritResitRateFieldNumber = 25;
  inline ::google::protobuf::int64 m_crit_resit_rate() const;
  inline void set_m_crit_resit_rate(::google::protobuf::int64 value);

  // optional int64 m_crit_dam = 26;
  inline bool has_m_crit_dam() const;
  inline void clear_m_crit_dam();
  static const int kMCritDamFieldNumber = 26;
  inline ::google::protobuf::int64 m_crit_dam() const;
  inline void set_m_crit_dam(::google::protobuf::int64 value);

  // optional int64 m_crit_redu = 27;
  inline bool has_m_crit_redu() const;
  inline void clear_m_crit_redu();
  static const int kMCritReduFieldNumber = 27;
  inline ::google::protobuf::int64 m_crit_redu() const;
  inline void set_m_crit_redu(::google::protobuf::int64 value);

  // optional int64 m_batter_rate = 28;
  inline bool has_m_batter_rate() const;
  inline void clear_m_batter_rate();
  static const int kMBatterRateFieldNumber = 28;
  inline ::google::protobuf::int64 m_batter_rate() const;
  inline void set_m_batter_rate(::google::protobuf::int64 value);

  // optional int64 m_batter_resist = 29;
  inline bool has_m_batter_resist() const;
  inline void clear_m_batter_resist();
  static const int kMBatterResistFieldNumber = 29;
  inline ::google::protobuf::int64 m_batter_resist() const;
  inline void set_m_batter_resist(::google::protobuf::int64 value);

  // optional int64 m_batter_dam = 30;
  inline bool has_m_batter_dam() const;
  inline void clear_m_batter_dam();
  static const int kMBatterDamFieldNumber = 30;
  inline ::google::protobuf::int64 m_batter_dam() const;
  inline void set_m_batter_dam(::google::protobuf::int64 value);

  // optional int64 m_batter_redu = 31;
  inline bool has_m_batter_redu() const;
  inline void clear_m_batter_redu();
  static const int kMBatterReduFieldNumber = 31;
  inline ::google::protobuf::int64 m_batter_redu() const;
  inline void set_m_batter_redu(::google::protobuf::int64 value);

  // optional int64 m_brkdown_rate = 32;
  inline bool has_m_brkdown_rate() const;
  inline void clear_m_brkdown_rate();
  static const int kMBrkdownRateFieldNumber = 32;
  inline ::google::protobuf::int64 m_brkdown_rate() const;
  inline void set_m_brkdown_rate(::google::protobuf::int64 value);

  // optional int64 m_brkdown_resist = 33;
  inline bool has_m_brkdown_resist() const;
  inline void clear_m_brkdown_resist();
  static const int kMBrkdownResistFieldNumber = 33;
  inline ::google::protobuf::int64 m_brkdown_resist() const;
  inline void set_m_brkdown_resist(::google::protobuf::int64 value);

  // optional int64 m_dam_add = 34;
  inline bool has_m_dam_add() const;
  inline void clear_m_dam_add();
  static const int kMDamAddFieldNumber = 34;
  inline ::google::protobuf::int64 m_dam_add() const;
  inline void set_m_dam_add(::google::protobuf::int64 value);

  // optional int64 m_dam_redu = 35;
  inline bool has_m_dam_redu() const;
  inline void clear_m_dam_redu();
  static const int kMDamReduFieldNumber = 35;
  inline ::google::protobuf::int64 m_dam_redu() const;
  inline void set_m_dam_redu(::google::protobuf::int64 value);

  // optional int64 m_all_add = 36;
  inline bool has_m_all_add() const;
  inline void clear_m_all_add();
  static const int kMAllAddFieldNumber = 36;
  inline ::google::protobuf::int64 m_all_add() const;
  inline void set_m_all_add(::google::protobuf::int64 value);

  // optional int64 m_all_redu = 37;
  inline bool has_m_all_redu() const;
  inline void clear_m_all_redu();
  static const int kMAllReduFieldNumber = 37;
  inline ::google::protobuf::int64 m_all_redu() const;
  inline void set_m_all_redu(::google::protobuf::int64 value);

  // optional int64 m_skill_add = 38;
  inline bool has_m_skill_add() const;
  inline void clear_m_skill_add();
  static const int kMSkillAddFieldNumber = 38;
  inline ::google::protobuf::int64 m_skill_add() const;
  inline void set_m_skill_add(::google::protobuf::int64 value);

  // optional int64 m_skill_redu = 39;
  inline bool has_m_skill_redu() const;
  inline void clear_m_skill_redu();
  static const int kMSkillReduFieldNumber = 39;
  inline ::google::protobuf::int64 m_skill_redu() const;
  inline void set_m_skill_redu(::google::protobuf::int64 value);

  // optional int64 m_rebound_dam = 40;
  inline bool has_m_rebound_dam() const;
  inline void clear_m_rebound_dam();
  static const int kMReboundDamFieldNumber = 40;
  inline ::google::protobuf::int64 m_rebound_dam() const;
  inline void set_m_rebound_dam(::google::protobuf::int64 value);

  // optional int64 m_hp_steal = 41;
  inline bool has_m_hp_steal() const;
  inline void clear_m_hp_steal();
  static const int kMHpStealFieldNumber = 41;
  inline ::google::protobuf::int64 m_hp_steal() const;
  inline void set_m_hp_steal(::google::protobuf::int64 value);

  // optional int64 m_dodge_rate = 42;
  inline bool has_m_dodge_rate() const;
  inline void clear_m_dodge_rate();
  static const int kMDodgeRateFieldNumber = 42;
  inline ::google::protobuf::int64 m_dodge_rate() const;
  inline void set_m_dodge_rate(::google::protobuf::int64 value);

  // optional int64 m_hit_rate = 43;
  inline bool has_m_hit_rate() const;
  inline void clear_m_hit_rate();
  static const int kMHitRateFieldNumber = 43;
  inline ::google::protobuf::int64 m_hit_rate() const;
  inline void set_m_hit_rate(::google::protobuf::int64 value);

  // optional int64 m_blk_rate = 44;
  inline bool has_m_blk_rate() const;
  inline void clear_m_blk_rate();
  static const int kMBlkRateFieldNumber = 44;
  inline ::google::protobuf::int64 m_blk_rate() const;
  inline void set_m_blk_rate(::google::protobuf::int64 value);

  // optional int64 m_brk_blk_rate = 45;
  inline bool has_m_brk_blk_rate() const;
  inline void clear_m_brk_blk_rate();
  static const int kMBrkBlkRateFieldNumber = 45;
  inline ::google::protobuf::int64 m_brk_blk_rate() const;
  inline void set_m_brk_blk_rate(::google::protobuf::int64 value);

  // optional int64 m_blk_free = 46;
  inline bool has_m_blk_free() const;
  inline void clear_m_blk_free();
  static const int kMBlkFreeFieldNumber = 46;
  inline ::google::protobuf::int64 m_blk_free() const;
  inline void set_m_blk_free(::google::protobuf::int64 value);

  // optional int64 m_blk_pierce = 47;
  inline bool has_m_blk_pierce() const;
  inline void clear_m_blk_pierce();
  static const int kMBlkPierceFieldNumber = 47;
  inline ::google::protobuf::int64 m_blk_pierce() const;
  inline void set_m_blk_pierce(::google::protobuf::int64 value);

  // optional int64 m_rel_armor = 48;
  inline bool has_m_rel_armor() const;
  inline void clear_m_rel_armor();
  static const int kMRelArmorFieldNumber = 48;
  inline ::google::protobuf::int64 m_rel_armor() const;
  inline void set_m_rel_armor(::google::protobuf::int64 value);

  // optional int64 m_rel_dam = 49;
  inline bool has_m_rel_dam() const;
  inline void clear_m_rel_dam();
  static const int kMRelDamFieldNumber = 49;
  inline ::google::protobuf::int64 m_rel_dam() const;
  inline void set_m_rel_dam(::google::protobuf::int64 value);

  // optional int64 m_five_resist = 50;
  inline bool has_m_five_resist() const;
  inline void clear_m_five_resist();
  static const int kMFiveResistFieldNumber = 50;
  inline ::google::protobuf::int64 m_five_resist() const;
  inline void set_m_five_resist(::google::protobuf::int64 value);

  // optional int64 m_five_resist_redu = 51;
  inline bool has_m_five_resist_redu() const;
  inline void clear_m_five_resist_redu();
  static const int kMFiveResistReduFieldNumber = 51;
  inline ::google::protobuf::int64 m_five_resist_redu() const;
  inline void set_m_five_resist_redu(::google::protobuf::int64 value);

  // optional int64 m_fire_add = 52;
  inline bool has_m_fire_add() const;
  inline void clear_m_fire_add();
  static const int kMFireAddFieldNumber = 52;
  inline ::google::protobuf::int64 m_fire_add() const;
  inline void set_m_fire_add(::google::protobuf::int64 value);

  // optional int64 m_fire_redu = 53;
  inline bool has_m_fire_redu() const;
  inline void clear_m_fire_redu();
  static const int kMFireReduFieldNumber = 53;
  inline ::google::protobuf::int64 m_fire_redu() const;
  inline void set_m_fire_redu(::google::protobuf::int64 value);

  // optional int64 m_ice_add = 54;
  inline bool has_m_ice_add() const;
  inline void clear_m_ice_add();
  static const int kMIceAddFieldNumber = 54;
  inline ::google::protobuf::int64 m_ice_add() const;
  inline void set_m_ice_add(::google::protobuf::int64 value);

  // optional int64 m_ice_redu = 55;
  inline bool has_m_ice_redu() const;
  inline void clear_m_ice_redu();
  static const int kMIceReduFieldNumber = 55;
  inline ::google::protobuf::int64 m_ice_redu() const;
  inline void set_m_ice_redu(::google::protobuf::int64 value);

  // optional int64 m_thunder_add = 56;
  inline bool has_m_thunder_add() const;
  inline void clear_m_thunder_add();
  static const int kMThunderAddFieldNumber = 56;
  inline ::google::protobuf::int64 m_thunder_add() const;
  inline void set_m_thunder_add(::google::protobuf::int64 value);

  // optional int64 m_thunder_rdu = 57;
  inline bool has_m_thunder_rdu() const;
  inline void clear_m_thunder_rdu();
  static const int kMThunderRduFieldNumber = 57;
  inline ::google::protobuf::int64 m_thunder_rdu() const;
  inline void set_m_thunder_rdu(::google::protobuf::int64 value);

  // optional int64 m_player_add = 58;
  inline bool has_m_player_add() const;
  inline void clear_m_player_add();
  static const int kMPlayerAddFieldNumber = 58;
  inline ::google::protobuf::int64 m_player_add() const;
  inline void set_m_player_add(::google::protobuf::int64 value);

  // optional int64 m_player_redu = 59;
  inline bool has_m_player_redu() const;
  inline void clear_m_player_redu();
  static const int kMPlayerReduFieldNumber = 59;
  inline ::google::protobuf::int64 m_player_redu() const;
  inline void set_m_player_redu(::google::protobuf::int64 value);

  // optional int64 m_leader_add = 60;
  inline bool has_m_leader_add() const;
  inline void clear_m_leader_add();
  static const int kMLeaderAddFieldNumber = 60;
  inline ::google::protobuf::int64 m_leader_add() const;
  inline void set_m_leader_add(::google::protobuf::int64 value);

  // optional int64 m_leader_redu = 61;
  inline bool has_m_leader_redu() const;
  inline void clear_m_leader_redu();
  static const int kMLeaderReduFieldNumber = 61;
  inline ::google::protobuf::int64 m_leader_redu() const;
  inline void set_m_leader_redu(::google::protobuf::int64 value);

  // optional int64 m_mon_add = 62;
  inline bool has_m_mon_add() const;
  inline void clear_m_mon_add();
  static const int kMMonAddFieldNumber = 62;
  inline ::google::protobuf::int64 m_mon_add() const;
  inline void set_m_mon_add(::google::protobuf::int64 value);

  // optional int64 m_mon_redu = 63;
  inline bool has_m_mon_redu() const;
  inline void clear_m_mon_redu();
  static const int kMMonReduFieldNumber = 63;
  inline ::google::protobuf::int64 m_mon_redu() const;
  inline void set_m_mon_redu(::google::protobuf::int64 value);

  // optional int64 m_var_redu = 64;
  inline bool has_m_var_redu() const;
  inline void clear_m_var_redu();
  static const int kMVarReduFieldNumber = 64;
  inline ::google::protobuf::int64 m_var_redu() const;
  inline void set_m_var_redu(::google::protobuf::int64 value);

  // optional int64 m_var_add = 65;
  inline bool has_m_var_add() const;
  inline void clear_m_var_add();
  static const int kMVarAddFieldNumber = 65;
  inline ::google::protobuf::int64 m_var_add() const;
  inline void set_m_var_add(::google::protobuf::int64 value);

  // optional int64 m_unusual_resist = 66;
  inline bool has_m_unusual_resist() const;
  inline void clear_m_unusual_resist();
  static const int kMUnusualResistFieldNumber = 66;
  inline ::google::protobuf::int64 m_unusual_resist() const;
  inline void set_m_unusual_resist(::google::protobuf::int64 value);

  // optional int64 m_unusual_hit = 67;
  inline bool has_m_unusual_hit() const;
  inline void clear_m_unusual_hit();
  static const int kMUnusualHitFieldNumber = 67;
  inline ::google::protobuf::int64 m_unusual_hit() const;
  inline void set_m_unusual_hit(::google::protobuf::int64 value);

  // optional int64 m_hp_recover = 68;
  inline bool has_m_hp_recover() const;
  inline void clear_m_hp_recover();
  static const int kMHpRecoverFieldNumber = 68;
  inline ::google::protobuf::int64 m_hp_recover() const;
  inline void set_m_hp_recover(::google::protobuf::int64 value);

  // optional int64 m_unusual_add = 69;
  inline bool has_m_unusual_add() const;
  inline void clear_m_unusual_add();
  static const int kMUnusualAddFieldNumber = 69;
  inline ::google::protobuf::int64 m_unusual_add() const;
  inline void set_m_unusual_add(::google::protobuf::int64 value);

  // optional int64 m_fix_recover = 70;
  inline bool has_m_fix_recover() const;
  inline void clear_m_fix_recover();
  static const int kMFixRecoverFieldNumber = 70;
  inline ::google::protobuf::int64 m_fix_recover() const;
  inline void set_m_fix_recover(::google::protobuf::int64 value);

  // optional int64 m_high_hp_add = 71;
  inline bool has_m_high_hp_add() const;
  inline void clear_m_high_hp_add();
  static const int kMHighHpAddFieldNumber = 71;
  inline ::google::protobuf::int64 m_high_hp_add() const;
  inline void set_m_high_hp_add(::google::protobuf::int64 value);

  // optional int64 m_recover_hp_add = 72;
  inline bool has_m_recover_hp_add() const;
  inline void clear_m_recover_hp_add();
  static const int kMRecoverHpAddFieldNumber = 72;
  inline ::google::protobuf::int64 m_recover_hp_add() const;
  inline void set_m_recover_hp_add(::google::protobuf::int64 value);

  // optional int64 m_week_add = 73;
  inline bool has_m_week_add() const;
  inline void clear_m_week_add();
  static const int kMWeekAddFieldNumber = 73;
  inline ::google::protobuf::int64 m_week_add() const;
  inline void set_m_week_add(::google::protobuf::int64 value);

  // optional int64 m_shield = 74;
  inline bool has_m_shield() const;
  inline void clear_m_shield();
  static const int kMShieldFieldNumber = 74;
  inline ::google::protobuf::int64 m_shield() const;
  inline void set_m_shield(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MonsterValue)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_monsterlv();
  inline void clear_has_m_monsterlv();
  inline void set_has_m_max_hp();
  inline void clear_has_m_max_hp();
  inline void set_has_m_atk();
  inline void clear_has_m_atk();
  inline void set_has_m_def();
  inline void clear_has_m_def();
  inline void set_has_m_brk_armor();
  inline void clear_has_m_brk_armor();
  inline void set_has_m_five_dam();
  inline void clear_has_m_five_dam();
  inline void set_has_m_five_armor();
  inline void clear_has_m_five_armor();
  inline void set_has_m_thump_rate();
  inline void clear_has_m_thump_rate();
  inline void set_has_m_thump_resist();
  inline void clear_has_m_thump_resist();
  inline void set_has_m_sky();
  inline void clear_has_m_sky();
  inline void set_has_m_sky_dam();
  inline void clear_has_m_sky_dam();
  inline void set_has_m_sky_redu_resist();
  inline void clear_has_m_sky_redu_resist();
  inline void set_has_m_sky_resist();
  inline void clear_has_m_sky_resist();
  inline void set_has_m_kill_god();
  inline void clear_has_m_kill_god();
  inline void set_has_m_god_body();
  inline void clear_has_m_god_body();
  inline void set_has_m_mortal_rate();
  inline void clear_has_m_mortal_rate();
  inline void set_has_m_mortal_resist();
  inline void clear_has_m_mortal_resist();
  inline void set_has_m_fairy_rate();
  inline void clear_has_m_fairy_rate();
  inline void set_has_m_fairy_resist();
  inline void clear_has_m_fairy_resist();
  inline void set_has_m_god_rate();
  inline void clear_has_m_god_rate();
  inline void set_has_m_god_resist();
  inline void clear_has_m_god_resist();
  inline void set_has_m_crit_rate();
  inline void clear_has_m_crit_rate();
  inline void set_has_m_crit_resit_rate();
  inline void clear_has_m_crit_resit_rate();
  inline void set_has_m_crit_dam();
  inline void clear_has_m_crit_dam();
  inline void set_has_m_crit_redu();
  inline void clear_has_m_crit_redu();
  inline void set_has_m_batter_rate();
  inline void clear_has_m_batter_rate();
  inline void set_has_m_batter_resist();
  inline void clear_has_m_batter_resist();
  inline void set_has_m_batter_dam();
  inline void clear_has_m_batter_dam();
  inline void set_has_m_batter_redu();
  inline void clear_has_m_batter_redu();
  inline void set_has_m_brkdown_rate();
  inline void clear_has_m_brkdown_rate();
  inline void set_has_m_brkdown_resist();
  inline void clear_has_m_brkdown_resist();
  inline void set_has_m_dam_add();
  inline void clear_has_m_dam_add();
  inline void set_has_m_dam_redu();
  inline void clear_has_m_dam_redu();
  inline void set_has_m_all_add();
  inline void clear_has_m_all_add();
  inline void set_has_m_all_redu();
  inline void clear_has_m_all_redu();
  inline void set_has_m_skill_add();
  inline void clear_has_m_skill_add();
  inline void set_has_m_skill_redu();
  inline void clear_has_m_skill_redu();
  inline void set_has_m_rebound_dam();
  inline void clear_has_m_rebound_dam();
  inline void set_has_m_hp_steal();
  inline void clear_has_m_hp_steal();
  inline void set_has_m_dodge_rate();
  inline void clear_has_m_dodge_rate();
  inline void set_has_m_hit_rate();
  inline void clear_has_m_hit_rate();
  inline void set_has_m_blk_rate();
  inline void clear_has_m_blk_rate();
  inline void set_has_m_brk_blk_rate();
  inline void clear_has_m_brk_blk_rate();
  inline void set_has_m_blk_free();
  inline void clear_has_m_blk_free();
  inline void set_has_m_blk_pierce();
  inline void clear_has_m_blk_pierce();
  inline void set_has_m_rel_armor();
  inline void clear_has_m_rel_armor();
  inline void set_has_m_rel_dam();
  inline void clear_has_m_rel_dam();
  inline void set_has_m_five_resist();
  inline void clear_has_m_five_resist();
  inline void set_has_m_five_resist_redu();
  inline void clear_has_m_five_resist_redu();
  inline void set_has_m_fire_add();
  inline void clear_has_m_fire_add();
  inline void set_has_m_fire_redu();
  inline void clear_has_m_fire_redu();
  inline void set_has_m_ice_add();
  inline void clear_has_m_ice_add();
  inline void set_has_m_ice_redu();
  inline void clear_has_m_ice_redu();
  inline void set_has_m_thunder_add();
  inline void clear_has_m_thunder_add();
  inline void set_has_m_thunder_rdu();
  inline void clear_has_m_thunder_rdu();
  inline void set_has_m_player_add();
  inline void clear_has_m_player_add();
  inline void set_has_m_player_redu();
  inline void clear_has_m_player_redu();
  inline void set_has_m_leader_add();
  inline void clear_has_m_leader_add();
  inline void set_has_m_leader_redu();
  inline void clear_has_m_leader_redu();
  inline void set_has_m_mon_add();
  inline void clear_has_m_mon_add();
  inline void set_has_m_mon_redu();
  inline void clear_has_m_mon_redu();
  inline void set_has_m_var_redu();
  inline void clear_has_m_var_redu();
  inline void set_has_m_var_add();
  inline void clear_has_m_var_add();
  inline void set_has_m_unusual_resist();
  inline void clear_has_m_unusual_resist();
  inline void set_has_m_unusual_hit();
  inline void clear_has_m_unusual_hit();
  inline void set_has_m_hp_recover();
  inline void clear_has_m_hp_recover();
  inline void set_has_m_unusual_add();
  inline void clear_has_m_unusual_add();
  inline void set_has_m_fix_recover();
  inline void clear_has_m_fix_recover();
  inline void set_has_m_high_hp_add();
  inline void clear_has_m_high_hp_add();
  inline void set_has_m_recover_hp_add();
  inline void clear_has_m_recover_hp_add();
  inline void set_has_m_week_add();
  inline void clear_has_m_week_add();
  inline void set_has_m_shield();
  inline void clear_has_m_shield();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::int32 m_monsterlv_;
  ::google::protobuf::int64 m_max_hp_;
  ::google::protobuf::int64 m_atk_;
  ::google::protobuf::int64 m_def_;
  ::google::protobuf::int64 m_brk_armor_;
  ::google::protobuf::int64 m_five_dam_;
  ::google::protobuf::int64 m_five_armor_;
  ::google::protobuf::int64 m_thump_rate_;
  ::google::protobuf::int64 m_thump_resist_;
  ::google::protobuf::int64 m_sky_;
  ::google::protobuf::int64 m_sky_dam_;
  ::google::protobuf::int64 m_sky_redu_resist_;
  ::google::protobuf::int64 m_sky_resist_;
  ::google::protobuf::int64 m_kill_god_;
  ::google::protobuf::int64 m_god_body_;
  ::google::protobuf::int64 m_mortal_rate_;
  ::google::protobuf::int64 m_mortal_resist_;
  ::google::protobuf::int64 m_fairy_rate_;
  ::google::protobuf::int64 m_fairy_resist_;
  ::google::protobuf::int64 m_god_rate_;
  ::google::protobuf::int64 m_god_resist_;
  ::google::protobuf::int64 m_crit_rate_;
  ::google::protobuf::int64 m_crit_resit_rate_;
  ::google::protobuf::int64 m_crit_dam_;
  ::google::protobuf::int64 m_crit_redu_;
  ::google::protobuf::int64 m_batter_rate_;
  ::google::protobuf::int64 m_batter_resist_;
  ::google::protobuf::int64 m_batter_dam_;
  ::google::protobuf::int64 m_batter_redu_;
  ::google::protobuf::int64 m_brkdown_rate_;
  ::google::protobuf::int64 m_brkdown_resist_;
  ::google::protobuf::int64 m_dam_add_;
  ::google::protobuf::int64 m_dam_redu_;
  ::google::protobuf::int64 m_all_add_;
  ::google::protobuf::int64 m_all_redu_;
  ::google::protobuf::int64 m_skill_add_;
  ::google::protobuf::int64 m_skill_redu_;
  ::google::protobuf::int64 m_rebound_dam_;
  ::google::protobuf::int64 m_hp_steal_;
  ::google::protobuf::int64 m_dodge_rate_;
  ::google::protobuf::int64 m_hit_rate_;
  ::google::protobuf::int64 m_blk_rate_;
  ::google::protobuf::int64 m_brk_blk_rate_;
  ::google::protobuf::int64 m_blk_free_;
  ::google::protobuf::int64 m_blk_pierce_;
  ::google::protobuf::int64 m_rel_armor_;
  ::google::protobuf::int64 m_rel_dam_;
  ::google::protobuf::int64 m_five_resist_;
  ::google::protobuf::int64 m_five_resist_redu_;
  ::google::protobuf::int64 m_fire_add_;
  ::google::protobuf::int64 m_fire_redu_;
  ::google::protobuf::int64 m_ice_add_;
  ::google::protobuf::int64 m_ice_redu_;
  ::google::protobuf::int64 m_thunder_add_;
  ::google::protobuf::int64 m_thunder_rdu_;
  ::google::protobuf::int64 m_player_add_;
  ::google::protobuf::int64 m_player_redu_;
  ::google::protobuf::int64 m_leader_add_;
  ::google::protobuf::int64 m_leader_redu_;
  ::google::protobuf::int64 m_mon_add_;
  ::google::protobuf::int64 m_mon_redu_;
  ::google::protobuf::int64 m_var_redu_;
  ::google::protobuf::int64 m_var_add_;
  ::google::protobuf::int64 m_unusual_resist_;
  ::google::protobuf::int64 m_unusual_hit_;
  ::google::protobuf::int64 m_hp_recover_;
  ::google::protobuf::int64 m_unusual_add_;
  ::google::protobuf::int64 m_fix_recover_;
  ::google::protobuf::int64 m_high_hp_add_;
  ::google::protobuf::int64 m_recover_hp_add_;
  ::google::protobuf::int64 m_week_add_;
  ::google::protobuf::int64 m_shield_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(74 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static E_MonsterValue* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MonsterValue : public ::google::protobuf::Message {
 public:
  Sheet_MonsterValue();
  virtual ~Sheet_MonsterValue();

  Sheet_MonsterValue(const Sheet_MonsterValue& from);

  inline Sheet_MonsterValue& operator=(const Sheet_MonsterValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MonsterValue& default_instance();

  void Swap(Sheet_MonsterValue* other);

  // implements Message ----------------------------------------------

  Sheet_MonsterValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MonsterValue& from);
  void MergeFrom(const Sheet_MonsterValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MonsterValue E_MonsterValue_List = 1;
  inline int e_monstervalue_list_size() const;
  inline void clear_e_monstervalue_list();
  static const int kEMonsterValueListFieldNumber = 1;
  inline const ::proto_ff::E_MonsterValue& e_monstervalue_list(int index) const;
  inline ::proto_ff::E_MonsterValue* mutable_e_monstervalue_list(int index);
  inline ::proto_ff::E_MonsterValue* add_e_monstervalue_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterValue >&
      e_monstervalue_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterValue >*
      mutable_e_monstervalue_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MonsterValue)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterValue > e_monstervalue_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MonsterValue* default_instance_;
};
// -------------------------------------------------------------------

class E_MonsterValueparam : public ::google::protobuf::Message {
 public:
  E_MonsterValueparam();
  virtual ~E_MonsterValueparam();

  E_MonsterValueparam(const E_MonsterValueparam& from);

  inline E_MonsterValueparam& operator=(const E_MonsterValueparam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MonsterValueparam& default_instance();

  void Swap(E_MonsterValueparam* other);

  // implements Message ----------------------------------------------

  E_MonsterValueparam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MonsterValueparam& from);
  void MergeFrom(const E_MonsterValueparam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_p_max_hp = 2;
  inline bool has_m_p_max_hp() const;
  inline void clear_m_p_max_hp();
  static const int kMPMaxHpFieldNumber = 2;
  inline ::google::protobuf::int32 m_p_max_hp() const;
  inline void set_m_p_max_hp(::google::protobuf::int32 value);

  // optional int32 m_p_atk = 3;
  inline bool has_m_p_atk() const;
  inline void clear_m_p_atk();
  static const int kMPAtkFieldNumber = 3;
  inline ::google::protobuf::int32 m_p_atk() const;
  inline void set_m_p_atk(::google::protobuf::int32 value);

  // optional int32 m_p_def = 4;
  inline bool has_m_p_def() const;
  inline void clear_m_p_def();
  static const int kMPDefFieldNumber = 4;
  inline ::google::protobuf::int32 m_p_def() const;
  inline void set_m_p_def(::google::protobuf::int32 value);

  // optional int32 m_p_brk_armor = 5;
  inline bool has_m_p_brk_armor() const;
  inline void clear_m_p_brk_armor();
  static const int kMPBrkArmorFieldNumber = 5;
  inline ::google::protobuf::int32 m_p_brk_armor() const;
  inline void set_m_p_brk_armor(::google::protobuf::int32 value);

  // optional int32 m_p_five_dam = 6;
  inline bool has_m_p_five_dam() const;
  inline void clear_m_p_five_dam();
  static const int kMPFiveDamFieldNumber = 6;
  inline ::google::protobuf::int32 m_p_five_dam() const;
  inline void set_m_p_five_dam(::google::protobuf::int32 value);

  // optional int32 m_p_five_armor = 7;
  inline bool has_m_p_five_armor() const;
  inline void clear_m_p_five_armor();
  static const int kMPFiveArmorFieldNumber = 7;
  inline ::google::protobuf::int32 m_p_five_armor() const;
  inline void set_m_p_five_armor(::google::protobuf::int32 value);

  // optional int32 m_p_thump_rate = 8;
  inline bool has_m_p_thump_rate() const;
  inline void clear_m_p_thump_rate();
  static const int kMPThumpRateFieldNumber = 8;
  inline ::google::protobuf::int32 m_p_thump_rate() const;
  inline void set_m_p_thump_rate(::google::protobuf::int32 value);

  // optional int32 m_p_thump_resist = 9;
  inline bool has_m_p_thump_resist() const;
  inline void clear_m_p_thump_resist();
  static const int kMPThumpResistFieldNumber = 9;
  inline ::google::protobuf::int32 m_p_thump_resist() const;
  inline void set_m_p_thump_resist(::google::protobuf::int32 value);

  // optional int32 m_p_sky = 10;
  inline bool has_m_p_sky() const;
  inline void clear_m_p_sky();
  static const int kMPSkyFieldNumber = 10;
  inline ::google::protobuf::int32 m_p_sky() const;
  inline void set_m_p_sky(::google::protobuf::int32 value);

  // optional int32 m_p_sky_dam = 11;
  inline bool has_m_p_sky_dam() const;
  inline void clear_m_p_sky_dam();
  static const int kMPSkyDamFieldNumber = 11;
  inline ::google::protobuf::int32 m_p_sky_dam() const;
  inline void set_m_p_sky_dam(::google::protobuf::int32 value);

  // optional int32 m_p_sky_redu_resist = 12;
  inline bool has_m_p_sky_redu_resist() const;
  inline void clear_m_p_sky_redu_resist();
  static const int kMPSkyReduResistFieldNumber = 12;
  inline ::google::protobuf::int32 m_p_sky_redu_resist() const;
  inline void set_m_p_sky_redu_resist(::google::protobuf::int32 value);

  // optional int32 m_p_sky_resist = 13;
  inline bool has_m_p_sky_resist() const;
  inline void clear_m_p_sky_resist();
  static const int kMPSkyResistFieldNumber = 13;
  inline ::google::protobuf::int32 m_p_sky_resist() const;
  inline void set_m_p_sky_resist(::google::protobuf::int32 value);

  // optional int32 m_p_kill_god = 14;
  inline bool has_m_p_kill_god() const;
  inline void clear_m_p_kill_god();
  static const int kMPKillGodFieldNumber = 14;
  inline ::google::protobuf::int32 m_p_kill_god() const;
  inline void set_m_p_kill_god(::google::protobuf::int32 value);

  // optional int32 m_p_god_body = 15;
  inline bool has_m_p_god_body() const;
  inline void clear_m_p_god_body();
  static const int kMPGodBodyFieldNumber = 15;
  inline ::google::protobuf::int32 m_p_god_body() const;
  inline void set_m_p_god_body(::google::protobuf::int32 value);

  // optional int32 m_p_mortal_rate = 16;
  inline bool has_m_p_mortal_rate() const;
  inline void clear_m_p_mortal_rate();
  static const int kMPMortalRateFieldNumber = 16;
  inline ::google::protobuf::int32 m_p_mortal_rate() const;
  inline void set_m_p_mortal_rate(::google::protobuf::int32 value);

  // optional int32 m_p_mortal_resist = 17;
  inline bool has_m_p_mortal_resist() const;
  inline void clear_m_p_mortal_resist();
  static const int kMPMortalResistFieldNumber = 17;
  inline ::google::protobuf::int32 m_p_mortal_resist() const;
  inline void set_m_p_mortal_resist(::google::protobuf::int32 value);

  // optional int32 m_p_fairy_rate = 18;
  inline bool has_m_p_fairy_rate() const;
  inline void clear_m_p_fairy_rate();
  static const int kMPFairyRateFieldNumber = 18;
  inline ::google::protobuf::int32 m_p_fairy_rate() const;
  inline void set_m_p_fairy_rate(::google::protobuf::int32 value);

  // optional int32 m_p_fairy_resist = 19;
  inline bool has_m_p_fairy_resist() const;
  inline void clear_m_p_fairy_resist();
  static const int kMPFairyResistFieldNumber = 19;
  inline ::google::protobuf::int32 m_p_fairy_resist() const;
  inline void set_m_p_fairy_resist(::google::protobuf::int32 value);

  // optional int32 m_p_god_rate = 20;
  inline bool has_m_p_god_rate() const;
  inline void clear_m_p_god_rate();
  static const int kMPGodRateFieldNumber = 20;
  inline ::google::protobuf::int32 m_p_god_rate() const;
  inline void set_m_p_god_rate(::google::protobuf::int32 value);

  // optional int32 m_p_god_resist = 21;
  inline bool has_m_p_god_resist() const;
  inline void clear_m_p_god_resist();
  static const int kMPGodResistFieldNumber = 21;
  inline ::google::protobuf::int32 m_p_god_resist() const;
  inline void set_m_p_god_resist(::google::protobuf::int32 value);

  // optional int32 m_p_crit_rate = 22;
  inline bool has_m_p_crit_rate() const;
  inline void clear_m_p_crit_rate();
  static const int kMPCritRateFieldNumber = 22;
  inline ::google::protobuf::int32 m_p_crit_rate() const;
  inline void set_m_p_crit_rate(::google::protobuf::int32 value);

  // optional int32 m_p_crit_resit_rate = 23;
  inline bool has_m_p_crit_resit_rate() const;
  inline void clear_m_p_crit_resit_rate();
  static const int kMPCritResitRateFieldNumber = 23;
  inline ::google::protobuf::int32 m_p_crit_resit_rate() const;
  inline void set_m_p_crit_resit_rate(::google::protobuf::int32 value);

  // optional int32 m_p_crit_dam = 24;
  inline bool has_m_p_crit_dam() const;
  inline void clear_m_p_crit_dam();
  static const int kMPCritDamFieldNumber = 24;
  inline ::google::protobuf::int32 m_p_crit_dam() const;
  inline void set_m_p_crit_dam(::google::protobuf::int32 value);

  // optional int32 m_p_crit_redu = 25;
  inline bool has_m_p_crit_redu() const;
  inline void clear_m_p_crit_redu();
  static const int kMPCritReduFieldNumber = 25;
  inline ::google::protobuf::int32 m_p_crit_redu() const;
  inline void set_m_p_crit_redu(::google::protobuf::int32 value);

  // optional int32 m_p_batter_rate = 26;
  inline bool has_m_p_batter_rate() const;
  inline void clear_m_p_batter_rate();
  static const int kMPBatterRateFieldNumber = 26;
  inline ::google::protobuf::int32 m_p_batter_rate() const;
  inline void set_m_p_batter_rate(::google::protobuf::int32 value);

  // optional int32 m_p_batter_resist = 27;
  inline bool has_m_p_batter_resist() const;
  inline void clear_m_p_batter_resist();
  static const int kMPBatterResistFieldNumber = 27;
  inline ::google::protobuf::int32 m_p_batter_resist() const;
  inline void set_m_p_batter_resist(::google::protobuf::int32 value);

  // optional int32 m_p_batter_dam = 28;
  inline bool has_m_p_batter_dam() const;
  inline void clear_m_p_batter_dam();
  static const int kMPBatterDamFieldNumber = 28;
  inline ::google::protobuf::int32 m_p_batter_dam() const;
  inline void set_m_p_batter_dam(::google::protobuf::int32 value);

  // optional int32 m_p_batter_redu = 29;
  inline bool has_m_p_batter_redu() const;
  inline void clear_m_p_batter_redu();
  static const int kMPBatterReduFieldNumber = 29;
  inline ::google::protobuf::int32 m_p_batter_redu() const;
  inline void set_m_p_batter_redu(::google::protobuf::int32 value);

  // optional int32 m_p_brkdown_rate = 30;
  inline bool has_m_p_brkdown_rate() const;
  inline void clear_m_p_brkdown_rate();
  static const int kMPBrkdownRateFieldNumber = 30;
  inline ::google::protobuf::int32 m_p_brkdown_rate() const;
  inline void set_m_p_brkdown_rate(::google::protobuf::int32 value);

  // optional int32 m_p_brkdown_resist = 31;
  inline bool has_m_p_brkdown_resist() const;
  inline void clear_m_p_brkdown_resist();
  static const int kMPBrkdownResistFieldNumber = 31;
  inline ::google::protobuf::int32 m_p_brkdown_resist() const;
  inline void set_m_p_brkdown_resist(::google::protobuf::int32 value);

  // optional int32 m_p_dam_add = 32;
  inline bool has_m_p_dam_add() const;
  inline void clear_m_p_dam_add();
  static const int kMPDamAddFieldNumber = 32;
  inline ::google::protobuf::int32 m_p_dam_add() const;
  inline void set_m_p_dam_add(::google::protobuf::int32 value);

  // optional int32 m_p_dam_redu = 33;
  inline bool has_m_p_dam_redu() const;
  inline void clear_m_p_dam_redu();
  static const int kMPDamReduFieldNumber = 33;
  inline ::google::protobuf::int32 m_p_dam_redu() const;
  inline void set_m_p_dam_redu(::google::protobuf::int32 value);

  // optional int32 m_p_all_add = 34;
  inline bool has_m_p_all_add() const;
  inline void clear_m_p_all_add();
  static const int kMPAllAddFieldNumber = 34;
  inline ::google::protobuf::int32 m_p_all_add() const;
  inline void set_m_p_all_add(::google::protobuf::int32 value);

  // optional int32 m_p_all_redu = 35;
  inline bool has_m_p_all_redu() const;
  inline void clear_m_p_all_redu();
  static const int kMPAllReduFieldNumber = 35;
  inline ::google::protobuf::int32 m_p_all_redu() const;
  inline void set_m_p_all_redu(::google::protobuf::int32 value);

  // optional int32 m_p_skill_add = 36;
  inline bool has_m_p_skill_add() const;
  inline void clear_m_p_skill_add();
  static const int kMPSkillAddFieldNumber = 36;
  inline ::google::protobuf::int32 m_p_skill_add() const;
  inline void set_m_p_skill_add(::google::protobuf::int32 value);

  // optional int32 m_p_skill_redu = 37;
  inline bool has_m_p_skill_redu() const;
  inline void clear_m_p_skill_redu();
  static const int kMPSkillReduFieldNumber = 37;
  inline ::google::protobuf::int32 m_p_skill_redu() const;
  inline void set_m_p_skill_redu(::google::protobuf::int32 value);

  // optional int32 m_p_rebound_dam = 38;
  inline bool has_m_p_rebound_dam() const;
  inline void clear_m_p_rebound_dam();
  static const int kMPReboundDamFieldNumber = 38;
  inline ::google::protobuf::int32 m_p_rebound_dam() const;
  inline void set_m_p_rebound_dam(::google::protobuf::int32 value);

  // optional int32 m_p_hp_steal = 39;
  inline bool has_m_p_hp_steal() const;
  inline void clear_m_p_hp_steal();
  static const int kMPHpStealFieldNumber = 39;
  inline ::google::protobuf::int32 m_p_hp_steal() const;
  inline void set_m_p_hp_steal(::google::protobuf::int32 value);

  // optional int32 m_p_dodge_rate = 40;
  inline bool has_m_p_dodge_rate() const;
  inline void clear_m_p_dodge_rate();
  static const int kMPDodgeRateFieldNumber = 40;
  inline ::google::protobuf::int32 m_p_dodge_rate() const;
  inline void set_m_p_dodge_rate(::google::protobuf::int32 value);

  // optional int32 m_p_hit_rate = 41;
  inline bool has_m_p_hit_rate() const;
  inline void clear_m_p_hit_rate();
  static const int kMPHitRateFieldNumber = 41;
  inline ::google::protobuf::int32 m_p_hit_rate() const;
  inline void set_m_p_hit_rate(::google::protobuf::int32 value);

  // optional int32 m_p_blk_rate = 42;
  inline bool has_m_p_blk_rate() const;
  inline void clear_m_p_blk_rate();
  static const int kMPBlkRateFieldNumber = 42;
  inline ::google::protobuf::int32 m_p_blk_rate() const;
  inline void set_m_p_blk_rate(::google::protobuf::int32 value);

  // optional int32 m_p_brk_blk_rate = 43;
  inline bool has_m_p_brk_blk_rate() const;
  inline void clear_m_p_brk_blk_rate();
  static const int kMPBrkBlkRateFieldNumber = 43;
  inline ::google::protobuf::int32 m_p_brk_blk_rate() const;
  inline void set_m_p_brk_blk_rate(::google::protobuf::int32 value);

  // optional int32 m_p_blk_free = 44;
  inline bool has_m_p_blk_free() const;
  inline void clear_m_p_blk_free();
  static const int kMPBlkFreeFieldNumber = 44;
  inline ::google::protobuf::int32 m_p_blk_free() const;
  inline void set_m_p_blk_free(::google::protobuf::int32 value);

  // optional int32 m_p_blk_pierce = 45;
  inline bool has_m_p_blk_pierce() const;
  inline void clear_m_p_blk_pierce();
  static const int kMPBlkPierceFieldNumber = 45;
  inline ::google::protobuf::int32 m_p_blk_pierce() const;
  inline void set_m_p_blk_pierce(::google::protobuf::int32 value);

  // optional int32 m_p_rel_armor = 46;
  inline bool has_m_p_rel_armor() const;
  inline void clear_m_p_rel_armor();
  static const int kMPRelArmorFieldNumber = 46;
  inline ::google::protobuf::int32 m_p_rel_armor() const;
  inline void set_m_p_rel_armor(::google::protobuf::int32 value);

  // optional int32 m_p_rel_dam = 47;
  inline bool has_m_p_rel_dam() const;
  inline void clear_m_p_rel_dam();
  static const int kMPRelDamFieldNumber = 47;
  inline ::google::protobuf::int32 m_p_rel_dam() const;
  inline void set_m_p_rel_dam(::google::protobuf::int32 value);

  // optional int32 m_p_five_resist = 48;
  inline bool has_m_p_five_resist() const;
  inline void clear_m_p_five_resist();
  static const int kMPFiveResistFieldNumber = 48;
  inline ::google::protobuf::int32 m_p_five_resist() const;
  inline void set_m_p_five_resist(::google::protobuf::int32 value);

  // optional int32 m_p_five_resist_redu = 49;
  inline bool has_m_p_five_resist_redu() const;
  inline void clear_m_p_five_resist_redu();
  static const int kMPFiveResistReduFieldNumber = 49;
  inline ::google::protobuf::int32 m_p_five_resist_redu() const;
  inline void set_m_p_five_resist_redu(::google::protobuf::int32 value);

  // optional int32 m_p_fire_add = 50;
  inline bool has_m_p_fire_add() const;
  inline void clear_m_p_fire_add();
  static const int kMPFireAddFieldNumber = 50;
  inline ::google::protobuf::int32 m_p_fire_add() const;
  inline void set_m_p_fire_add(::google::protobuf::int32 value);

  // optional int32 m_p_fire_redu = 51;
  inline bool has_m_p_fire_redu() const;
  inline void clear_m_p_fire_redu();
  static const int kMPFireReduFieldNumber = 51;
  inline ::google::protobuf::int32 m_p_fire_redu() const;
  inline void set_m_p_fire_redu(::google::protobuf::int32 value);

  // optional int32 m_p_ice_add = 52;
  inline bool has_m_p_ice_add() const;
  inline void clear_m_p_ice_add();
  static const int kMPIceAddFieldNumber = 52;
  inline ::google::protobuf::int32 m_p_ice_add() const;
  inline void set_m_p_ice_add(::google::protobuf::int32 value);

  // optional int32 m_p_ice_redu = 53;
  inline bool has_m_p_ice_redu() const;
  inline void clear_m_p_ice_redu();
  static const int kMPIceReduFieldNumber = 53;
  inline ::google::protobuf::int32 m_p_ice_redu() const;
  inline void set_m_p_ice_redu(::google::protobuf::int32 value);

  // optional int32 m_p_thunder_add = 54;
  inline bool has_m_p_thunder_add() const;
  inline void clear_m_p_thunder_add();
  static const int kMPThunderAddFieldNumber = 54;
  inline ::google::protobuf::int32 m_p_thunder_add() const;
  inline void set_m_p_thunder_add(::google::protobuf::int32 value);

  // optional int32 m_p_thunder_rdu = 55;
  inline bool has_m_p_thunder_rdu() const;
  inline void clear_m_p_thunder_rdu();
  static const int kMPThunderRduFieldNumber = 55;
  inline ::google::protobuf::int32 m_p_thunder_rdu() const;
  inline void set_m_p_thunder_rdu(::google::protobuf::int32 value);

  // optional int32 m_p_player_add = 56;
  inline bool has_m_p_player_add() const;
  inline void clear_m_p_player_add();
  static const int kMPPlayerAddFieldNumber = 56;
  inline ::google::protobuf::int32 m_p_player_add() const;
  inline void set_m_p_player_add(::google::protobuf::int32 value);

  // optional int32 m_p_player_redu = 57;
  inline bool has_m_p_player_redu() const;
  inline void clear_m_p_player_redu();
  static const int kMPPlayerReduFieldNumber = 57;
  inline ::google::protobuf::int32 m_p_player_redu() const;
  inline void set_m_p_player_redu(::google::protobuf::int32 value);

  // optional int32 m_p_leader_add = 58;
  inline bool has_m_p_leader_add() const;
  inline void clear_m_p_leader_add();
  static const int kMPLeaderAddFieldNumber = 58;
  inline ::google::protobuf::int32 m_p_leader_add() const;
  inline void set_m_p_leader_add(::google::protobuf::int32 value);

  // optional int32 m_p_leader_redu = 59;
  inline bool has_m_p_leader_redu() const;
  inline void clear_m_p_leader_redu();
  static const int kMPLeaderReduFieldNumber = 59;
  inline ::google::protobuf::int32 m_p_leader_redu() const;
  inline void set_m_p_leader_redu(::google::protobuf::int32 value);

  // optional int32 m_p_mon_add = 60;
  inline bool has_m_p_mon_add() const;
  inline void clear_m_p_mon_add();
  static const int kMPMonAddFieldNumber = 60;
  inline ::google::protobuf::int32 m_p_mon_add() const;
  inline void set_m_p_mon_add(::google::protobuf::int32 value);

  // optional int32 m_p_mon_redu = 61;
  inline bool has_m_p_mon_redu() const;
  inline void clear_m_p_mon_redu();
  static const int kMPMonReduFieldNumber = 61;
  inline ::google::protobuf::int32 m_p_mon_redu() const;
  inline void set_m_p_mon_redu(::google::protobuf::int32 value);

  // optional int32 m_p_var_redu = 62;
  inline bool has_m_p_var_redu() const;
  inline void clear_m_p_var_redu();
  static const int kMPVarReduFieldNumber = 62;
  inline ::google::protobuf::int32 m_p_var_redu() const;
  inline void set_m_p_var_redu(::google::protobuf::int32 value);

  // optional int32 m_p_var_add = 63;
  inline bool has_m_p_var_add() const;
  inline void clear_m_p_var_add();
  static const int kMPVarAddFieldNumber = 63;
  inline ::google::protobuf::int32 m_p_var_add() const;
  inline void set_m_p_var_add(::google::protobuf::int32 value);

  // optional int32 m_p_unusual_resist = 64;
  inline bool has_m_p_unusual_resist() const;
  inline void clear_m_p_unusual_resist();
  static const int kMPUnusualResistFieldNumber = 64;
  inline ::google::protobuf::int32 m_p_unusual_resist() const;
  inline void set_m_p_unusual_resist(::google::protobuf::int32 value);

  // optional int32 m_p_unusual_hit = 65;
  inline bool has_m_p_unusual_hit() const;
  inline void clear_m_p_unusual_hit();
  static const int kMPUnusualHitFieldNumber = 65;
  inline ::google::protobuf::int32 m_p_unusual_hit() const;
  inline void set_m_p_unusual_hit(::google::protobuf::int32 value);

  // optional int32 m_p_hp_recover = 66;
  inline bool has_m_p_hp_recover() const;
  inline void clear_m_p_hp_recover();
  static const int kMPHpRecoverFieldNumber = 66;
  inline ::google::protobuf::int32 m_p_hp_recover() const;
  inline void set_m_p_hp_recover(::google::protobuf::int32 value);

  // optional int32 m_p_unusual_add = 67;
  inline bool has_m_p_unusual_add() const;
  inline void clear_m_p_unusual_add();
  static const int kMPUnusualAddFieldNumber = 67;
  inline ::google::protobuf::int32 m_p_unusual_add() const;
  inline void set_m_p_unusual_add(::google::protobuf::int32 value);

  // optional int32 m_p_fix_recover = 68;
  inline bool has_m_p_fix_recover() const;
  inline void clear_m_p_fix_recover();
  static const int kMPFixRecoverFieldNumber = 68;
  inline ::google::protobuf::int32 m_p_fix_recover() const;
  inline void set_m_p_fix_recover(::google::protobuf::int32 value);

  // optional int32 m_p_high_hp_add = 69;
  inline bool has_m_p_high_hp_add() const;
  inline void clear_m_p_high_hp_add();
  static const int kMPHighHpAddFieldNumber = 69;
  inline ::google::protobuf::int32 m_p_high_hp_add() const;
  inline void set_m_p_high_hp_add(::google::protobuf::int32 value);

  // optional int32 m_p_recover_hp_add = 70;
  inline bool has_m_p_recover_hp_add() const;
  inline void clear_m_p_recover_hp_add();
  static const int kMPRecoverHpAddFieldNumber = 70;
  inline ::google::protobuf::int32 m_p_recover_hp_add() const;
  inline void set_m_p_recover_hp_add(::google::protobuf::int32 value);

  // optional int32 m_p_week_add = 71;
  inline bool has_m_p_week_add() const;
  inline void clear_m_p_week_add();
  static const int kMPWeekAddFieldNumber = 71;
  inline ::google::protobuf::int32 m_p_week_add() const;
  inline void set_m_p_week_add(::google::protobuf::int32 value);

  // optional int64 m_shield = 72;
  inline bool has_m_shield() const;
  inline void clear_m_shield();
  static const int kMShieldFieldNumber = 72;
  inline ::google::protobuf::int64 m_shield() const;
  inline void set_m_shield(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MonsterValueparam)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_p_max_hp();
  inline void clear_has_m_p_max_hp();
  inline void set_has_m_p_atk();
  inline void clear_has_m_p_atk();
  inline void set_has_m_p_def();
  inline void clear_has_m_p_def();
  inline void set_has_m_p_brk_armor();
  inline void clear_has_m_p_brk_armor();
  inline void set_has_m_p_five_dam();
  inline void clear_has_m_p_five_dam();
  inline void set_has_m_p_five_armor();
  inline void clear_has_m_p_five_armor();
  inline void set_has_m_p_thump_rate();
  inline void clear_has_m_p_thump_rate();
  inline void set_has_m_p_thump_resist();
  inline void clear_has_m_p_thump_resist();
  inline void set_has_m_p_sky();
  inline void clear_has_m_p_sky();
  inline void set_has_m_p_sky_dam();
  inline void clear_has_m_p_sky_dam();
  inline void set_has_m_p_sky_redu_resist();
  inline void clear_has_m_p_sky_redu_resist();
  inline void set_has_m_p_sky_resist();
  inline void clear_has_m_p_sky_resist();
  inline void set_has_m_p_kill_god();
  inline void clear_has_m_p_kill_god();
  inline void set_has_m_p_god_body();
  inline void clear_has_m_p_god_body();
  inline void set_has_m_p_mortal_rate();
  inline void clear_has_m_p_mortal_rate();
  inline void set_has_m_p_mortal_resist();
  inline void clear_has_m_p_mortal_resist();
  inline void set_has_m_p_fairy_rate();
  inline void clear_has_m_p_fairy_rate();
  inline void set_has_m_p_fairy_resist();
  inline void clear_has_m_p_fairy_resist();
  inline void set_has_m_p_god_rate();
  inline void clear_has_m_p_god_rate();
  inline void set_has_m_p_god_resist();
  inline void clear_has_m_p_god_resist();
  inline void set_has_m_p_crit_rate();
  inline void clear_has_m_p_crit_rate();
  inline void set_has_m_p_crit_resit_rate();
  inline void clear_has_m_p_crit_resit_rate();
  inline void set_has_m_p_crit_dam();
  inline void clear_has_m_p_crit_dam();
  inline void set_has_m_p_crit_redu();
  inline void clear_has_m_p_crit_redu();
  inline void set_has_m_p_batter_rate();
  inline void clear_has_m_p_batter_rate();
  inline void set_has_m_p_batter_resist();
  inline void clear_has_m_p_batter_resist();
  inline void set_has_m_p_batter_dam();
  inline void clear_has_m_p_batter_dam();
  inline void set_has_m_p_batter_redu();
  inline void clear_has_m_p_batter_redu();
  inline void set_has_m_p_brkdown_rate();
  inline void clear_has_m_p_brkdown_rate();
  inline void set_has_m_p_brkdown_resist();
  inline void clear_has_m_p_brkdown_resist();
  inline void set_has_m_p_dam_add();
  inline void clear_has_m_p_dam_add();
  inline void set_has_m_p_dam_redu();
  inline void clear_has_m_p_dam_redu();
  inline void set_has_m_p_all_add();
  inline void clear_has_m_p_all_add();
  inline void set_has_m_p_all_redu();
  inline void clear_has_m_p_all_redu();
  inline void set_has_m_p_skill_add();
  inline void clear_has_m_p_skill_add();
  inline void set_has_m_p_skill_redu();
  inline void clear_has_m_p_skill_redu();
  inline void set_has_m_p_rebound_dam();
  inline void clear_has_m_p_rebound_dam();
  inline void set_has_m_p_hp_steal();
  inline void clear_has_m_p_hp_steal();
  inline void set_has_m_p_dodge_rate();
  inline void clear_has_m_p_dodge_rate();
  inline void set_has_m_p_hit_rate();
  inline void clear_has_m_p_hit_rate();
  inline void set_has_m_p_blk_rate();
  inline void clear_has_m_p_blk_rate();
  inline void set_has_m_p_brk_blk_rate();
  inline void clear_has_m_p_brk_blk_rate();
  inline void set_has_m_p_blk_free();
  inline void clear_has_m_p_blk_free();
  inline void set_has_m_p_blk_pierce();
  inline void clear_has_m_p_blk_pierce();
  inline void set_has_m_p_rel_armor();
  inline void clear_has_m_p_rel_armor();
  inline void set_has_m_p_rel_dam();
  inline void clear_has_m_p_rel_dam();
  inline void set_has_m_p_five_resist();
  inline void clear_has_m_p_five_resist();
  inline void set_has_m_p_five_resist_redu();
  inline void clear_has_m_p_five_resist_redu();
  inline void set_has_m_p_fire_add();
  inline void clear_has_m_p_fire_add();
  inline void set_has_m_p_fire_redu();
  inline void clear_has_m_p_fire_redu();
  inline void set_has_m_p_ice_add();
  inline void clear_has_m_p_ice_add();
  inline void set_has_m_p_ice_redu();
  inline void clear_has_m_p_ice_redu();
  inline void set_has_m_p_thunder_add();
  inline void clear_has_m_p_thunder_add();
  inline void set_has_m_p_thunder_rdu();
  inline void clear_has_m_p_thunder_rdu();
  inline void set_has_m_p_player_add();
  inline void clear_has_m_p_player_add();
  inline void set_has_m_p_player_redu();
  inline void clear_has_m_p_player_redu();
  inline void set_has_m_p_leader_add();
  inline void clear_has_m_p_leader_add();
  inline void set_has_m_p_leader_redu();
  inline void clear_has_m_p_leader_redu();
  inline void set_has_m_p_mon_add();
  inline void clear_has_m_p_mon_add();
  inline void set_has_m_p_mon_redu();
  inline void clear_has_m_p_mon_redu();
  inline void set_has_m_p_var_redu();
  inline void clear_has_m_p_var_redu();
  inline void set_has_m_p_var_add();
  inline void clear_has_m_p_var_add();
  inline void set_has_m_p_unusual_resist();
  inline void clear_has_m_p_unusual_resist();
  inline void set_has_m_p_unusual_hit();
  inline void clear_has_m_p_unusual_hit();
  inline void set_has_m_p_hp_recover();
  inline void clear_has_m_p_hp_recover();
  inline void set_has_m_p_unusual_add();
  inline void clear_has_m_p_unusual_add();
  inline void set_has_m_p_fix_recover();
  inline void clear_has_m_p_fix_recover();
  inline void set_has_m_p_high_hp_add();
  inline void clear_has_m_p_high_hp_add();
  inline void set_has_m_p_recover_hp_add();
  inline void clear_has_m_p_recover_hp_add();
  inline void set_has_m_p_week_add();
  inline void clear_has_m_p_week_add();
  inline void set_has_m_shield();
  inline void clear_has_m_shield();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_p_max_hp_;
  ::google::protobuf::int32 m_p_atk_;
  ::google::protobuf::int32 m_p_def_;
  ::google::protobuf::int32 m_p_brk_armor_;
  ::google::protobuf::int32 m_p_five_dam_;
  ::google::protobuf::int32 m_p_five_armor_;
  ::google::protobuf::int32 m_p_thump_rate_;
  ::google::protobuf::int32 m_p_thump_resist_;
  ::google::protobuf::int32 m_p_sky_;
  ::google::protobuf::int32 m_p_sky_dam_;
  ::google::protobuf::int32 m_p_sky_redu_resist_;
  ::google::protobuf::int32 m_p_sky_resist_;
  ::google::protobuf::int32 m_p_kill_god_;
  ::google::protobuf::int32 m_p_god_body_;
  ::google::protobuf::int32 m_p_mortal_rate_;
  ::google::protobuf::int32 m_p_mortal_resist_;
  ::google::protobuf::int32 m_p_fairy_rate_;
  ::google::protobuf::int32 m_p_fairy_resist_;
  ::google::protobuf::int32 m_p_god_rate_;
  ::google::protobuf::int32 m_p_god_resist_;
  ::google::protobuf::int32 m_p_crit_rate_;
  ::google::protobuf::int32 m_p_crit_resit_rate_;
  ::google::protobuf::int32 m_p_crit_dam_;
  ::google::protobuf::int32 m_p_crit_redu_;
  ::google::protobuf::int32 m_p_batter_rate_;
  ::google::protobuf::int32 m_p_batter_resist_;
  ::google::protobuf::int32 m_p_batter_dam_;
  ::google::protobuf::int32 m_p_batter_redu_;
  ::google::protobuf::int32 m_p_brkdown_rate_;
  ::google::protobuf::int32 m_p_brkdown_resist_;
  ::google::protobuf::int32 m_p_dam_add_;
  ::google::protobuf::int32 m_p_dam_redu_;
  ::google::protobuf::int32 m_p_all_add_;
  ::google::protobuf::int32 m_p_all_redu_;
  ::google::protobuf::int32 m_p_skill_add_;
  ::google::protobuf::int32 m_p_skill_redu_;
  ::google::protobuf::int32 m_p_rebound_dam_;
  ::google::protobuf::int32 m_p_hp_steal_;
  ::google::protobuf::int32 m_p_dodge_rate_;
  ::google::protobuf::int32 m_p_hit_rate_;
  ::google::protobuf::int32 m_p_blk_rate_;
  ::google::protobuf::int32 m_p_brk_blk_rate_;
  ::google::protobuf::int32 m_p_blk_free_;
  ::google::protobuf::int32 m_p_blk_pierce_;
  ::google::protobuf::int32 m_p_rel_armor_;
  ::google::protobuf::int32 m_p_rel_dam_;
  ::google::protobuf::int32 m_p_five_resist_;
  ::google::protobuf::int32 m_p_five_resist_redu_;
  ::google::protobuf::int32 m_p_fire_add_;
  ::google::protobuf::int32 m_p_fire_redu_;
  ::google::protobuf::int32 m_p_ice_add_;
  ::google::protobuf::int32 m_p_ice_redu_;
  ::google::protobuf::int32 m_p_thunder_add_;
  ::google::protobuf::int32 m_p_thunder_rdu_;
  ::google::protobuf::int32 m_p_player_add_;
  ::google::protobuf::int32 m_p_player_redu_;
  ::google::protobuf::int32 m_p_leader_add_;
  ::google::protobuf::int32 m_p_leader_redu_;
  ::google::protobuf::int32 m_p_mon_add_;
  ::google::protobuf::int32 m_p_mon_redu_;
  ::google::protobuf::int32 m_p_var_redu_;
  ::google::protobuf::int32 m_p_var_add_;
  ::google::protobuf::int32 m_p_unusual_resist_;
  ::google::protobuf::int32 m_p_unusual_hit_;
  ::google::protobuf::int32 m_p_hp_recover_;
  ::google::protobuf::int32 m_p_unusual_add_;
  ::google::protobuf::int32 m_p_fix_recover_;
  ::google::protobuf::int32 m_p_high_hp_add_;
  ::google::protobuf::int32 m_p_recover_hp_add_;
  ::google::protobuf::int64 m_shield_;
  ::google::protobuf::int32 m_p_week_add_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(72 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static E_MonsterValueparam* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MonsterValueparam : public ::google::protobuf::Message {
 public:
  Sheet_MonsterValueparam();
  virtual ~Sheet_MonsterValueparam();

  Sheet_MonsterValueparam(const Sheet_MonsterValueparam& from);

  inline Sheet_MonsterValueparam& operator=(const Sheet_MonsterValueparam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MonsterValueparam& default_instance();

  void Swap(Sheet_MonsterValueparam* other);

  // implements Message ----------------------------------------------

  Sheet_MonsterValueparam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MonsterValueparam& from);
  void MergeFrom(const Sheet_MonsterValueparam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MonsterValueparam E_MonsterValueparam_List = 1;
  inline int e_monstervalueparam_list_size() const;
  inline void clear_e_monstervalueparam_list();
  static const int kEMonsterValueparamListFieldNumber = 1;
  inline const ::proto_ff::E_MonsterValueparam& e_monstervalueparam_list(int index) const;
  inline ::proto_ff::E_MonsterValueparam* mutable_e_monstervalueparam_list(int index);
  inline ::proto_ff::E_MonsterValueparam* add_e_monstervalueparam_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterValueparam >&
      e_monstervalueparam_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterValueparam >*
      mutable_e_monstervalueparam_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MonsterValueparam)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterValueparam > e_monstervalueparam_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MonsterValueparam* default_instance_;
};
// -------------------------------------------------------------------

class E_MonsterDrop : public ::google::protobuf::Message {
 public:
  E_MonsterDrop();
  virtual ~E_MonsterDrop();

  E_MonsterDrop(const E_MonsterDrop& from);

  inline E_MonsterDrop& operator=(const E_MonsterDrop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MonsterDrop& default_instance();

  void Swap(E_MonsterDrop* other);

  // implements Message ----------------------------------------------

  E_MonsterDrop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MonsterDrop& from);
  void MergeFrom(const E_MonsterDrop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_group = 2;
  inline bool has_m_group() const;
  inline void clear_m_group();
  static const int kMGroupFieldNumber = 2;
  inline ::google::protobuf::int32 m_group() const;
  inline void set_m_group(::google::protobuf::int32 value);

  // optional int32 m_own = 3;
  inline bool has_m_own() const;
  inline void clear_m_own();
  static const int kMOwnFieldNumber = 3;
  inline ::google::protobuf::int32 m_own() const;
  inline void set_m_own(::google::protobuf::int32 value);

  // optional int32 m_type = 4;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // repeated int64 m_boxid = 5;
  inline int m_boxid_size() const;
  inline void clear_m_boxid();
  static const int kMBoxidFieldNumber = 5;
  inline ::google::protobuf::int64 m_boxid(int index) const;
  inline void set_m_boxid(int index, ::google::protobuf::int64 value);
  inline void add_m_boxid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      m_boxid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_m_boxid();

  // @@protoc_insertion_point(class_scope:proto_ff.E_MonsterDrop)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_group();
  inline void clear_has_m_group();
  inline void set_has_m_own();
  inline void clear_has_m_own();
  inline void set_has_m_type();
  inline void clear_has_m_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_group_;
  ::google::protobuf::int32 m_own_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > m_boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static E_MonsterDrop* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MonsterDrop : public ::google::protobuf::Message {
 public:
  Sheet_MonsterDrop();
  virtual ~Sheet_MonsterDrop();

  Sheet_MonsterDrop(const Sheet_MonsterDrop& from);

  inline Sheet_MonsterDrop& operator=(const Sheet_MonsterDrop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MonsterDrop& default_instance();

  void Swap(Sheet_MonsterDrop* other);

  // implements Message ----------------------------------------------

  Sheet_MonsterDrop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MonsterDrop& from);
  void MergeFrom(const Sheet_MonsterDrop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MonsterDrop E_MonsterDrop_List = 1;
  inline int e_monsterdrop_list_size() const;
  inline void clear_e_monsterdrop_list();
  static const int kEMonsterDropListFieldNumber = 1;
  inline const ::proto_ff::E_MonsterDrop& e_monsterdrop_list(int index) const;
  inline ::proto_ff::E_MonsterDrop* mutable_e_monsterdrop_list(int index);
  inline ::proto_ff::E_MonsterDrop* add_e_monsterdrop_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDrop >&
      e_monsterdrop_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDrop >*
      mutable_e_monsterdrop_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MonsterDrop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDrop > e_monsterdrop_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MonsterDrop* default_instance_;
};
// ===================================================================


// ===================================================================

// E_MonsterMonster

// optional int64 m_monsterid = 1;
inline bool E_MonsterMonster::has_m_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MonsterMonster::set_has_m_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MonsterMonster::clear_has_m_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MonsterMonster::clear_m_monsterid() {
  m_monsterid_ = GOOGLE_LONGLONG(0);
  clear_has_m_monsterid();
}
inline ::google::protobuf::int64 E_MonsterMonster::m_monsterid() const {
  return m_monsterid_;
}
inline void E_MonsterMonster::set_m_monsterid(::google::protobuf::int64 value) {
  set_has_m_monsterid();
  m_monsterid_ = value;
}

// optional string m_monstername = 2;
inline bool E_MonsterMonster::has_m_monstername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MonsterMonster::set_has_m_monstername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MonsterMonster::clear_has_m_monstername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MonsterMonster::clear_m_monstername() {
  if (m_monstername_ != &::google::protobuf::internal::kEmptyString) {
    m_monstername_->clear();
  }
  clear_has_m_monstername();
}
inline const ::std::string& E_MonsterMonster::m_monstername() const {
  return *m_monstername_;
}
inline void E_MonsterMonster::set_m_monstername(const ::std::string& value) {
  set_has_m_monstername();
  if (m_monstername_ == &::google::protobuf::internal::kEmptyString) {
    m_monstername_ = new ::std::string;
  }
  m_monstername_->assign(value);
}
inline void E_MonsterMonster::set_m_monstername(const char* value) {
  set_has_m_monstername();
  if (m_monstername_ == &::google::protobuf::internal::kEmptyString) {
    m_monstername_ = new ::std::string;
  }
  m_monstername_->assign(value);
}
inline void E_MonsterMonster::set_m_monstername(const char* value, size_t size) {
  set_has_m_monstername();
  if (m_monstername_ == &::google::protobuf::internal::kEmptyString) {
    m_monstername_ = new ::std::string;
  }
  m_monstername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MonsterMonster::mutable_m_monstername() {
  set_has_m_monstername();
  if (m_monstername_ == &::google::protobuf::internal::kEmptyString) {
    m_monstername_ = new ::std::string;
  }
  return m_monstername_;
}
inline ::std::string* E_MonsterMonster::release_m_monstername() {
  clear_has_m_monstername();
  if (m_monstername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_monstername_;
    m_monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MonsterMonster::set_allocated_m_monstername(::std::string* m_monstername) {
  if (m_monstername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_monstername_;
  }
  if (m_monstername) {
    set_has_m_monstername();
    m_monstername_ = m_monstername;
  } else {
    clear_has_m_monstername();
    m_monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_functiontype = 3;
inline bool E_MonsterMonster::has_m_functiontype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MonsterMonster::set_has_m_functiontype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MonsterMonster::clear_has_m_functiontype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MonsterMonster::clear_m_functiontype() {
  m_functiontype_ = 0;
  clear_has_m_functiontype();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_functiontype() const {
  return m_functiontype_;
}
inline void E_MonsterMonster::set_m_functiontype(::google::protobuf::int32 value) {
  set_has_m_functiontype();
  m_functiontype_ = value;
}

// optional int64 m_functionvalue = 4;
inline bool E_MonsterMonster::has_m_functionvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MonsterMonster::set_has_m_functionvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MonsterMonster::clear_has_m_functionvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MonsterMonster::clear_m_functionvalue() {
  m_functionvalue_ = GOOGLE_LONGLONG(0);
  clear_has_m_functionvalue();
}
inline ::google::protobuf::int64 E_MonsterMonster::m_functionvalue() const {
  return m_functionvalue_;
}
inline void E_MonsterMonster::set_m_functionvalue(::google::protobuf::int64 value) {
  set_has_m_functionvalue();
  m_functionvalue_ = value;
}

// optional int32 m_profession = 5;
inline bool E_MonsterMonster::has_m_profession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MonsterMonster::set_has_m_profession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MonsterMonster::clear_has_m_profession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MonsterMonster::clear_m_profession() {
  m_profession_ = 0;
  clear_has_m_profession();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_profession() const {
  return m_profession_;
}
inline void E_MonsterMonster::set_m_profession(::google::protobuf::int32 value) {
  set_has_m_profession();
  m_profession_ = value;
}

// optional int32 m_damageaddtype = 6;
inline bool E_MonsterMonster::has_m_damageaddtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MonsterMonster::set_has_m_damageaddtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MonsterMonster::clear_has_m_damageaddtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MonsterMonster::clear_m_damageaddtype() {
  m_damageaddtype_ = 0;
  clear_has_m_damageaddtype();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_damageaddtype() const {
  return m_damageaddtype_;
}
inline void E_MonsterMonster::set_m_damageaddtype(::google::protobuf::int32 value) {
  set_has_m_damageaddtype();
  m_damageaddtype_ = value;
}

// optional int32 m_monsterlv = 7;
inline bool E_MonsterMonster::has_m_monsterlv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MonsterMonster::set_has_m_monsterlv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MonsterMonster::clear_has_m_monsterlv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MonsterMonster::clear_m_monsterlv() {
  m_monsterlv_ = 0;
  clear_has_m_monsterlv();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_monsterlv() const {
  return m_monsterlv_;
}
inline void E_MonsterMonster::set_m_monsterlv(::google::protobuf::int32 value) {
  set_has_m_monsterlv();
  m_monsterlv_ = value;
}

// optional int32 m_droplimit = 8;
inline bool E_MonsterMonster::has_m_droplimit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MonsterMonster::set_has_m_droplimit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MonsterMonster::clear_has_m_droplimit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MonsterMonster::clear_m_droplimit() {
  m_droplimit_ = 0;
  clear_has_m_droplimit();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_droplimit() const {
  return m_droplimit_;
}
inline void E_MonsterMonster::set_m_droplimit(::google::protobuf::int32 value) {
  set_has_m_droplimit();
  m_droplimit_ = value;
}

// optional int64 m_displayid = 9;
inline bool E_MonsterMonster::has_m_displayid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_MonsterMonster::set_has_m_displayid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_MonsterMonster::clear_has_m_displayid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_MonsterMonster::clear_m_displayid() {
  m_displayid_ = GOOGLE_LONGLONG(0);
  clear_has_m_displayid();
}
inline ::google::protobuf::int64 E_MonsterMonster::m_displayid() const {
  return m_displayid_;
}
inline void E_MonsterMonster::set_m_displayid(::google::protobuf::int64 value) {
  set_has_m_displayid();
  m_displayid_ = value;
}

// optional int64 m_valuetype = 10;
inline bool E_MonsterMonster::has_m_valuetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_MonsterMonster::set_has_m_valuetype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_MonsterMonster::clear_has_m_valuetype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_MonsterMonster::clear_m_valuetype() {
  m_valuetype_ = GOOGLE_LONGLONG(0);
  clear_has_m_valuetype();
}
inline ::google::protobuf::int64 E_MonsterMonster::m_valuetype() const {
  return m_valuetype_;
}
inline void E_MonsterMonster::set_m_valuetype(::google::protobuf::int64 value) {
  set_has_m_valuetype();
  m_valuetype_ = value;
}

// optional int32 m_valueparam = 11;
inline bool E_MonsterMonster::has_m_valueparam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_MonsterMonster::set_has_m_valueparam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_MonsterMonster::clear_has_m_valueparam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_MonsterMonster::clear_m_valueparam() {
  m_valueparam_ = 0;
  clear_has_m_valueparam();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_valueparam() const {
  return m_valueparam_;
}
inline void E_MonsterMonster::set_m_valueparam(::google::protobuf::int32 value) {
  set_has_m_valueparam();
  m_valueparam_ = value;
}

// optional int64 m_aiid = 12;
inline bool E_MonsterMonster::has_m_aiid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_MonsterMonster::set_has_m_aiid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_MonsterMonster::clear_has_m_aiid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_MonsterMonster::clear_m_aiid() {
  m_aiid_ = GOOGLE_LONGLONG(0);
  clear_has_m_aiid();
}
inline ::google::protobuf::int64 E_MonsterMonster::m_aiid() const {
  return m_aiid_;
}
inline void E_MonsterMonster::set_m_aiid(::google::protobuf::int64 value) {
  set_has_m_aiid();
  m_aiid_ = value;
}

// optional int32 m_hpsectionnum = 13;
inline bool E_MonsterMonster::has_m_hpsectionnum() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_MonsterMonster::set_has_m_hpsectionnum() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_MonsterMonster::clear_has_m_hpsectionnum() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_MonsterMonster::clear_m_hpsectionnum() {
  m_hpsectionnum_ = 0;
  clear_has_m_hpsectionnum();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_hpsectionnum() const {
  return m_hpsectionnum_;
}
inline void E_MonsterMonster::set_m_hpsectionnum(::google::protobuf::int32 value) {
  set_has_m_hpsectionnum();
  m_hpsectionnum_ = value;
}

// optional int32 m_breedprob = 14;
inline bool E_MonsterMonster::has_m_breedprob() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_MonsterMonster::set_has_m_breedprob() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_MonsterMonster::clear_has_m_breedprob() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_MonsterMonster::clear_m_breedprob() {
  m_breedprob_ = 0;
  clear_has_m_breedprob();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_breedprob() const {
  return m_breedprob_;
}
inline void E_MonsterMonster::set_m_breedprob(::google::protobuf::int32 value) {
  set_has_m_breedprob();
  m_breedprob_ = value;
}

// optional int64 m_breedmonid = 15;
inline bool E_MonsterMonster::has_m_breedmonid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_MonsterMonster::set_has_m_breedmonid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_MonsterMonster::clear_has_m_breedmonid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_MonsterMonster::clear_m_breedmonid() {
  m_breedmonid_ = GOOGLE_LONGLONG(0);
  clear_has_m_breedmonid();
}
inline ::google::protobuf::int64 E_MonsterMonster::m_breedmonid() const {
  return m_breedmonid_;
}
inline void E_MonsterMonster::set_m_breedmonid(::google::protobuf::int64 value) {
  set_has_m_breedmonid();
  m_breedmonid_ = value;
}

// optional int32 m_breedmonlive = 16;
inline bool E_MonsterMonster::has_m_breedmonlive() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_MonsterMonster::set_has_m_breedmonlive() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_MonsterMonster::clear_has_m_breedmonlive() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_MonsterMonster::clear_m_breedmonlive() {
  m_breedmonlive_ = 0;
  clear_has_m_breedmonlive();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_breedmonlive() const {
  return m_breedmonlive_;
}
inline void E_MonsterMonster::set_m_breedmonlive(::google::protobuf::int32 value) {
  set_has_m_breedmonlive();
  m_breedmonlive_ = value;
}

// optional string m_itemcost = 17;
inline bool E_MonsterMonster::has_m_itemcost() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_MonsterMonster::set_has_m_itemcost() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_MonsterMonster::clear_has_m_itemcost() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_MonsterMonster::clear_m_itemcost() {
  if (m_itemcost_ != &::google::protobuf::internal::kEmptyString) {
    m_itemcost_->clear();
  }
  clear_has_m_itemcost();
}
inline const ::std::string& E_MonsterMonster::m_itemcost() const {
  return *m_itemcost_;
}
inline void E_MonsterMonster::set_m_itemcost(const ::std::string& value) {
  set_has_m_itemcost();
  if (m_itemcost_ == &::google::protobuf::internal::kEmptyString) {
    m_itemcost_ = new ::std::string;
  }
  m_itemcost_->assign(value);
}
inline void E_MonsterMonster::set_m_itemcost(const char* value) {
  set_has_m_itemcost();
  if (m_itemcost_ == &::google::protobuf::internal::kEmptyString) {
    m_itemcost_ = new ::std::string;
  }
  m_itemcost_->assign(value);
}
inline void E_MonsterMonster::set_m_itemcost(const char* value, size_t size) {
  set_has_m_itemcost();
  if (m_itemcost_ == &::google::protobuf::internal::kEmptyString) {
    m_itemcost_ = new ::std::string;
  }
  m_itemcost_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MonsterMonster::mutable_m_itemcost() {
  set_has_m_itemcost();
  if (m_itemcost_ == &::google::protobuf::internal::kEmptyString) {
    m_itemcost_ = new ::std::string;
  }
  return m_itemcost_;
}
inline ::std::string* E_MonsterMonster::release_m_itemcost() {
  clear_has_m_itemcost();
  if (m_itemcost_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_itemcost_;
    m_itemcost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MonsterMonster::set_allocated_m_itemcost(::std::string* m_itemcost) {
  if (m_itemcost_ != &::google::protobuf::internal::kEmptyString) {
    delete m_itemcost_;
  }
  if (m_itemcost) {
    set_has_m_itemcost();
    m_itemcost_ = m_itemcost;
  } else {
    clear_has_m_itemcost();
    m_itemcost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_isbornactionon = 18;
inline bool E_MonsterMonster::has_m_isbornactionon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void E_MonsterMonster::set_has_m_isbornactionon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void E_MonsterMonster::clear_has_m_isbornactionon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void E_MonsterMonster::clear_m_isbornactionon() {
  m_isbornactionon_ = 0;
  clear_has_m_isbornactionon();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_isbornactionon() const {
  return m_isbornactionon_;
}
inline void E_MonsterMonster::set_m_isbornactionon(::google::protobuf::int32 value) {
  set_has_m_isbornactionon();
  m_isbornactionon_ = value;
}

// optional int32 m_belongshow = 19;
inline bool E_MonsterMonster::has_m_belongshow() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void E_MonsterMonster::set_has_m_belongshow() {
  _has_bits_[0] |= 0x00040000u;
}
inline void E_MonsterMonster::clear_has_m_belongshow() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void E_MonsterMonster::clear_m_belongshow() {
  m_belongshow_ = 0;
  clear_has_m_belongshow();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_belongshow() const {
  return m_belongshow_;
}
inline void E_MonsterMonster::set_m_belongshow(::google::protobuf::int32 value) {
  set_has_m_belongshow();
  m_belongshow_ = value;
}

// optional int32 m_dropgroupid = 20;
inline bool E_MonsterMonster::has_m_dropgroupid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void E_MonsterMonster::set_has_m_dropgroupid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void E_MonsterMonster::clear_has_m_dropgroupid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void E_MonsterMonster::clear_m_dropgroupid() {
  m_dropgroupid_ = 0;
  clear_has_m_dropgroupid();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_dropgroupid() const {
  return m_dropgroupid_;
}
inline void E_MonsterMonster::set_m_dropgroupid(::google::protobuf::int32 value) {
  set_has_m_dropgroupid();
  m_dropgroupid_ = value;
}

// optional int32 m_harmdrop_type = 21;
inline bool E_MonsterMonster::has_m_harmdrop_type() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void E_MonsterMonster::set_has_m_harmdrop_type() {
  _has_bits_[0] |= 0x00100000u;
}
inline void E_MonsterMonster::clear_has_m_harmdrop_type() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void E_MonsterMonster::clear_m_harmdrop_type() {
  m_harmdrop_type_ = 0;
  clear_has_m_harmdrop_type();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_harmdrop_type() const {
  return m_harmdrop_type_;
}
inline void E_MonsterMonster::set_m_harmdrop_type(::google::protobuf::int32 value) {
  set_has_m_harmdrop_type();
  m_harmdrop_type_ = value;
}

// optional int32 m_joninper = 22;
inline bool E_MonsterMonster::has_m_joninper() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void E_MonsterMonster::set_has_m_joninper() {
  _has_bits_[0] |= 0x00200000u;
}
inline void E_MonsterMonster::clear_has_m_joninper() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void E_MonsterMonster::clear_m_joninper() {
  m_joninper_ = 0;
  clear_has_m_joninper();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_joninper() const {
  return m_joninper_;
}
inline void E_MonsterMonster::set_m_joninper(::google::protobuf::int32 value) {
  set_has_m_joninper();
  m_joninper_ = value;
}

// optional int32 m_btnrange = 23;
inline bool E_MonsterMonster::has_m_btnrange() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void E_MonsterMonster::set_has_m_btnrange() {
  _has_bits_[0] |= 0x00400000u;
}
inline void E_MonsterMonster::clear_has_m_btnrange() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void E_MonsterMonster::clear_m_btnrange() {
  m_btnrange_ = 0;
  clear_has_m_btnrange();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_btnrange() const {
  return m_btnrange_;
}
inline void E_MonsterMonster::set_m_btnrange(::google::protobuf::int32 value) {
  set_has_m_btnrange();
  m_btnrange_ = value;
}

// optional int64 m_btnid = 24;
inline bool E_MonsterMonster::has_m_btnid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void E_MonsterMonster::set_has_m_btnid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void E_MonsterMonster::clear_has_m_btnid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void E_MonsterMonster::clear_m_btnid() {
  m_btnid_ = GOOGLE_LONGLONG(0);
  clear_has_m_btnid();
}
inline ::google::protobuf::int64 E_MonsterMonster::m_btnid() const {
  return m_btnid_;
}
inline void E_MonsterMonster::set_m_btnid(::google::protobuf::int64 value) {
  set_has_m_btnid();
  m_btnid_ = value;
}

// optional int32 m_drivepoint = 25;
inline bool E_MonsterMonster::has_m_drivepoint() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void E_MonsterMonster::set_has_m_drivepoint() {
  _has_bits_[0] |= 0x01000000u;
}
inline void E_MonsterMonster::clear_has_m_drivepoint() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void E_MonsterMonster::clear_m_drivepoint() {
  m_drivepoint_ = 0;
  clear_has_m_drivepoint();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_drivepoint() const {
  return m_drivepoint_;
}
inline void E_MonsterMonster::set_m_drivepoint(::google::protobuf::int32 value) {
  set_has_m_drivepoint();
  m_drivepoint_ = value;
}

// optional int32 m_corpseid = 26;
inline bool E_MonsterMonster::has_m_corpseid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void E_MonsterMonster::set_has_m_corpseid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void E_MonsterMonster::clear_has_m_corpseid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void E_MonsterMonster::clear_m_corpseid() {
  m_corpseid_ = 0;
  clear_has_m_corpseid();
}
inline ::google::protobuf::int32 E_MonsterMonster::m_corpseid() const {
  return m_corpseid_;
}
inline void E_MonsterMonster::set_m_corpseid(::google::protobuf::int32 value) {
  set_has_m_corpseid();
  m_corpseid_ = value;
}

// -------------------------------------------------------------------

// Sheet_MonsterMonster

// repeated .proto_ff.E_MonsterMonster E_MonsterMonster_List = 1;
inline int Sheet_MonsterMonster::e_monstermonster_list_size() const {
  return e_monstermonster_list_.size();
}
inline void Sheet_MonsterMonster::clear_e_monstermonster_list() {
  e_monstermonster_list_.Clear();
}
inline const ::proto_ff::E_MonsterMonster& Sheet_MonsterMonster::e_monstermonster_list(int index) const {
  return e_monstermonster_list_.Get(index);
}
inline ::proto_ff::E_MonsterMonster* Sheet_MonsterMonster::mutable_e_monstermonster_list(int index) {
  return e_monstermonster_list_.Mutable(index);
}
inline ::proto_ff::E_MonsterMonster* Sheet_MonsterMonster::add_e_monstermonster_list() {
  return e_monstermonster_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterMonster >&
Sheet_MonsterMonster::e_monstermonster_list() const {
  return e_monstermonster_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterMonster >*
Sheet_MonsterMonster::mutable_e_monstermonster_list() {
  return &e_monstermonster_list_;
}

// -------------------------------------------------------------------

// E_MonsterDisplaySkillDesc

// optional int64 m_id = 1;
inline bool E_MonsterDisplaySkillDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MonsterDisplaySkillDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MonsterDisplaySkillDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MonsterDisplaySkillDesc::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_MonsterDisplaySkillDesc::m_id() const {
  return m_id_;
}
inline void E_MonsterDisplaySkillDesc::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_MonsterDisplay

// optional int64 m_displayid = 1;
inline bool E_MonsterDisplay::has_m_displayid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MonsterDisplay::set_has_m_displayid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MonsterDisplay::clear_has_m_displayid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MonsterDisplay::clear_m_displayid() {
  m_displayid_ = GOOGLE_LONGLONG(0);
  clear_has_m_displayid();
}
inline ::google::protobuf::int64 E_MonsterDisplay::m_displayid() const {
  return m_displayid_;
}
inline void E_MonsterDisplay::set_m_displayid(::google::protobuf::int64 value) {
  set_has_m_displayid();
  m_displayid_ = value;
}

// optional int32 m_modeloffsetsx = 2;
inline bool E_MonsterDisplay::has_m_modeloffsetsx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MonsterDisplay::set_has_m_modeloffsetsx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MonsterDisplay::clear_has_m_modeloffsetsx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MonsterDisplay::clear_m_modeloffsetsx() {
  m_modeloffsetsx_ = 0;
  clear_has_m_modeloffsetsx();
}
inline ::google::protobuf::int32 E_MonsterDisplay::m_modeloffsetsx() const {
  return m_modeloffsetsx_;
}
inline void E_MonsterDisplay::set_m_modeloffsetsx(::google::protobuf::int32 value) {
  set_has_m_modeloffsetsx();
  m_modeloffsetsx_ = value;
}

// optional int32 m_modeloffsetsy = 3;
inline bool E_MonsterDisplay::has_m_modeloffsetsy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MonsterDisplay::set_has_m_modeloffsetsy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MonsterDisplay::clear_has_m_modeloffsetsy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MonsterDisplay::clear_m_modeloffsetsy() {
  m_modeloffsetsy_ = 0;
  clear_has_m_modeloffsetsy();
}
inline ::google::protobuf::int32 E_MonsterDisplay::m_modeloffsetsy() const {
  return m_modeloffsetsy_;
}
inline void E_MonsterDisplay::set_m_modeloffsetsy(::google::protobuf::int32 value) {
  set_has_m_modeloffsetsy();
  m_modeloffsetsy_ = value;
}

// optional int32 m_modelscale = 4;
inline bool E_MonsterDisplay::has_m_modelscale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MonsterDisplay::set_has_m_modelscale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MonsterDisplay::clear_has_m_modelscale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MonsterDisplay::clear_m_modelscale() {
  m_modelscale_ = 0;
  clear_has_m_modelscale();
}
inline ::google::protobuf::int32 E_MonsterDisplay::m_modelscale() const {
  return m_modelscale_;
}
inline void E_MonsterDisplay::set_m_modelscale(::google::protobuf::int32 value) {
  set_has_m_modelscale();
  m_modelscale_ = value;
}

// optional int32 m_modelradius = 5;
inline bool E_MonsterDisplay::has_m_modelradius() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MonsterDisplay::set_has_m_modelradius() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MonsterDisplay::clear_has_m_modelradius() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MonsterDisplay::clear_m_modelradius() {
  m_modelradius_ = 0;
  clear_has_m_modelradius();
}
inline ::google::protobuf::int32 E_MonsterDisplay::m_modelradius() const {
  return m_modelradius_;
}
inline void E_MonsterDisplay::set_m_modelradius(::google::protobuf::int32 value) {
  set_has_m_modelradius();
  m_modelradius_ = value;
}

// optional int32 m_pathradius = 6;
inline bool E_MonsterDisplay::has_m_pathradius() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MonsterDisplay::set_has_m_pathradius() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MonsterDisplay::clear_has_m_pathradius() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MonsterDisplay::clear_m_pathradius() {
  m_pathradius_ = 0;
  clear_has_m_pathradius();
}
inline ::google::protobuf::int32 E_MonsterDisplay::m_pathradius() const {
  return m_pathradius_;
}
inline void E_MonsterDisplay::set_m_pathradius(::google::protobuf::int32 value) {
  set_has_m_pathradius();
  m_pathradius_ = value;
}

// optional int32 m_collisionradius = 7;
inline bool E_MonsterDisplay::has_m_collisionradius() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MonsterDisplay::set_has_m_collisionradius() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MonsterDisplay::clear_has_m_collisionradius() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MonsterDisplay::clear_m_collisionradius() {
  m_collisionradius_ = 0;
  clear_has_m_collisionradius();
}
inline ::google::protobuf::int32 E_MonsterDisplay::m_collisionradius() const {
  return m_collisionradius_;
}
inline void E_MonsterDisplay::set_m_collisionradius(::google::protobuf::int32 value) {
  set_has_m_collisionradius();
  m_collisionradius_ = value;
}

// optional int32 m_rspeed = 8;
inline bool E_MonsterDisplay::has_m_rspeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MonsterDisplay::set_has_m_rspeed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MonsterDisplay::clear_has_m_rspeed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MonsterDisplay::clear_m_rspeed() {
  m_rspeed_ = 0;
  clear_has_m_rspeed();
}
inline ::google::protobuf::int32 E_MonsterDisplay::m_rspeed() const {
  return m_rspeed_;
}
inline void E_MonsterDisplay::set_m_rspeed(::google::protobuf::int32 value) {
  set_has_m_rspeed();
  m_rspeed_ = value;
}

// repeated .proto_ff.E_MonsterDisplaySkillDesc m_skill = 9;
inline int E_MonsterDisplay::m_skill_size() const {
  return m_skill_.size();
}
inline void E_MonsterDisplay::clear_m_skill() {
  m_skill_.Clear();
}
inline const ::proto_ff::E_MonsterDisplaySkillDesc& E_MonsterDisplay::m_skill(int index) const {
  return m_skill_.Get(index);
}
inline ::proto_ff::E_MonsterDisplaySkillDesc* E_MonsterDisplay::mutable_m_skill(int index) {
  return m_skill_.Mutable(index);
}
inline ::proto_ff::E_MonsterDisplaySkillDesc* E_MonsterDisplay::add_m_skill() {
  return m_skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDisplaySkillDesc >&
E_MonsterDisplay::m_skill() const {
  return m_skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDisplaySkillDesc >*
E_MonsterDisplay::mutable_m_skill() {
  return &m_skill_;
}

// -------------------------------------------------------------------

// Sheet_MonsterDisplay

// repeated .proto_ff.E_MonsterDisplay E_MonsterDisplay_List = 1;
inline int Sheet_MonsterDisplay::e_monsterdisplay_list_size() const {
  return e_monsterdisplay_list_.size();
}
inline void Sheet_MonsterDisplay::clear_e_monsterdisplay_list() {
  e_monsterdisplay_list_.Clear();
}
inline const ::proto_ff::E_MonsterDisplay& Sheet_MonsterDisplay::e_monsterdisplay_list(int index) const {
  return e_monsterdisplay_list_.Get(index);
}
inline ::proto_ff::E_MonsterDisplay* Sheet_MonsterDisplay::mutable_e_monsterdisplay_list(int index) {
  return e_monsterdisplay_list_.Mutable(index);
}
inline ::proto_ff::E_MonsterDisplay* Sheet_MonsterDisplay::add_e_monsterdisplay_list() {
  return e_monsterdisplay_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDisplay >&
Sheet_MonsterDisplay::e_monsterdisplay_list() const {
  return e_monsterdisplay_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDisplay >*
Sheet_MonsterDisplay::mutable_e_monsterdisplay_list() {
  return &e_monsterdisplay_list_;
}

// -------------------------------------------------------------------

// E_MonsterValue

// optional int64 m_id = 1;
inline bool E_MonsterValue::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MonsterValue::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MonsterValue::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MonsterValue::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_MonsterValue::m_id() const {
  return m_id_;
}
inline void E_MonsterValue::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_type = 2;
inline bool E_MonsterValue::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MonsterValue::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MonsterValue::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MonsterValue::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_MonsterValue::m_type() const {
  return m_type_;
}
inline void E_MonsterValue::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional int32 m_monsterlv = 3;
inline bool E_MonsterValue::has_m_monsterlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MonsterValue::set_has_m_monsterlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MonsterValue::clear_has_m_monsterlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MonsterValue::clear_m_monsterlv() {
  m_monsterlv_ = 0;
  clear_has_m_monsterlv();
}
inline ::google::protobuf::int32 E_MonsterValue::m_monsterlv() const {
  return m_monsterlv_;
}
inline void E_MonsterValue::set_m_monsterlv(::google::protobuf::int32 value) {
  set_has_m_monsterlv();
  m_monsterlv_ = value;
}

// optional int64 m_max_hp = 4;
inline bool E_MonsterValue::has_m_max_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MonsterValue::set_has_m_max_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MonsterValue::clear_has_m_max_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MonsterValue::clear_m_max_hp() {
  m_max_hp_ = GOOGLE_LONGLONG(0);
  clear_has_m_max_hp();
}
inline ::google::protobuf::int64 E_MonsterValue::m_max_hp() const {
  return m_max_hp_;
}
inline void E_MonsterValue::set_m_max_hp(::google::protobuf::int64 value) {
  set_has_m_max_hp();
  m_max_hp_ = value;
}

// optional int64 m_atk = 5;
inline bool E_MonsterValue::has_m_atk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MonsterValue::set_has_m_atk() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MonsterValue::clear_has_m_atk() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MonsterValue::clear_m_atk() {
  m_atk_ = GOOGLE_LONGLONG(0);
  clear_has_m_atk();
}
inline ::google::protobuf::int64 E_MonsterValue::m_atk() const {
  return m_atk_;
}
inline void E_MonsterValue::set_m_atk(::google::protobuf::int64 value) {
  set_has_m_atk();
  m_atk_ = value;
}

// optional int64 m_def = 6;
inline bool E_MonsterValue::has_m_def() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MonsterValue::set_has_m_def() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MonsterValue::clear_has_m_def() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MonsterValue::clear_m_def() {
  m_def_ = GOOGLE_LONGLONG(0);
  clear_has_m_def();
}
inline ::google::protobuf::int64 E_MonsterValue::m_def() const {
  return m_def_;
}
inline void E_MonsterValue::set_m_def(::google::protobuf::int64 value) {
  set_has_m_def();
  m_def_ = value;
}

// optional int64 m_brk_armor = 7;
inline bool E_MonsterValue::has_m_brk_armor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MonsterValue::set_has_m_brk_armor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MonsterValue::clear_has_m_brk_armor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MonsterValue::clear_m_brk_armor() {
  m_brk_armor_ = GOOGLE_LONGLONG(0);
  clear_has_m_brk_armor();
}
inline ::google::protobuf::int64 E_MonsterValue::m_brk_armor() const {
  return m_brk_armor_;
}
inline void E_MonsterValue::set_m_brk_armor(::google::protobuf::int64 value) {
  set_has_m_brk_armor();
  m_brk_armor_ = value;
}

// optional int64 m_five_dam = 8;
inline bool E_MonsterValue::has_m_five_dam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MonsterValue::set_has_m_five_dam() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MonsterValue::clear_has_m_five_dam() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MonsterValue::clear_m_five_dam() {
  m_five_dam_ = GOOGLE_LONGLONG(0);
  clear_has_m_five_dam();
}
inline ::google::protobuf::int64 E_MonsterValue::m_five_dam() const {
  return m_five_dam_;
}
inline void E_MonsterValue::set_m_five_dam(::google::protobuf::int64 value) {
  set_has_m_five_dam();
  m_five_dam_ = value;
}

// optional int64 m_five_armor = 9;
inline bool E_MonsterValue::has_m_five_armor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_MonsterValue::set_has_m_five_armor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_MonsterValue::clear_has_m_five_armor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_MonsterValue::clear_m_five_armor() {
  m_five_armor_ = GOOGLE_LONGLONG(0);
  clear_has_m_five_armor();
}
inline ::google::protobuf::int64 E_MonsterValue::m_five_armor() const {
  return m_five_armor_;
}
inline void E_MonsterValue::set_m_five_armor(::google::protobuf::int64 value) {
  set_has_m_five_armor();
  m_five_armor_ = value;
}

// optional int64 m_thump_rate = 10;
inline bool E_MonsterValue::has_m_thump_rate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_MonsterValue::set_has_m_thump_rate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_MonsterValue::clear_has_m_thump_rate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_MonsterValue::clear_m_thump_rate() {
  m_thump_rate_ = GOOGLE_LONGLONG(0);
  clear_has_m_thump_rate();
}
inline ::google::protobuf::int64 E_MonsterValue::m_thump_rate() const {
  return m_thump_rate_;
}
inline void E_MonsterValue::set_m_thump_rate(::google::protobuf::int64 value) {
  set_has_m_thump_rate();
  m_thump_rate_ = value;
}

// optional int64 m_thump_resist = 11;
inline bool E_MonsterValue::has_m_thump_resist() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_MonsterValue::set_has_m_thump_resist() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_MonsterValue::clear_has_m_thump_resist() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_MonsterValue::clear_m_thump_resist() {
  m_thump_resist_ = GOOGLE_LONGLONG(0);
  clear_has_m_thump_resist();
}
inline ::google::protobuf::int64 E_MonsterValue::m_thump_resist() const {
  return m_thump_resist_;
}
inline void E_MonsterValue::set_m_thump_resist(::google::protobuf::int64 value) {
  set_has_m_thump_resist();
  m_thump_resist_ = value;
}

// optional int64 m_sky = 12;
inline bool E_MonsterValue::has_m_sky() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_MonsterValue::set_has_m_sky() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_MonsterValue::clear_has_m_sky() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_MonsterValue::clear_m_sky() {
  m_sky_ = GOOGLE_LONGLONG(0);
  clear_has_m_sky();
}
inline ::google::protobuf::int64 E_MonsterValue::m_sky() const {
  return m_sky_;
}
inline void E_MonsterValue::set_m_sky(::google::protobuf::int64 value) {
  set_has_m_sky();
  m_sky_ = value;
}

// optional int64 m_sky_dam = 13;
inline bool E_MonsterValue::has_m_sky_dam() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_MonsterValue::set_has_m_sky_dam() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_MonsterValue::clear_has_m_sky_dam() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_MonsterValue::clear_m_sky_dam() {
  m_sky_dam_ = GOOGLE_LONGLONG(0);
  clear_has_m_sky_dam();
}
inline ::google::protobuf::int64 E_MonsterValue::m_sky_dam() const {
  return m_sky_dam_;
}
inline void E_MonsterValue::set_m_sky_dam(::google::protobuf::int64 value) {
  set_has_m_sky_dam();
  m_sky_dam_ = value;
}

// optional int64 m_sky_redu_resist = 14;
inline bool E_MonsterValue::has_m_sky_redu_resist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_MonsterValue::set_has_m_sky_redu_resist() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_MonsterValue::clear_has_m_sky_redu_resist() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_MonsterValue::clear_m_sky_redu_resist() {
  m_sky_redu_resist_ = GOOGLE_LONGLONG(0);
  clear_has_m_sky_redu_resist();
}
inline ::google::protobuf::int64 E_MonsterValue::m_sky_redu_resist() const {
  return m_sky_redu_resist_;
}
inline void E_MonsterValue::set_m_sky_redu_resist(::google::protobuf::int64 value) {
  set_has_m_sky_redu_resist();
  m_sky_redu_resist_ = value;
}

// optional int64 m_sky_resist = 15;
inline bool E_MonsterValue::has_m_sky_resist() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_MonsterValue::set_has_m_sky_resist() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_MonsterValue::clear_has_m_sky_resist() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_MonsterValue::clear_m_sky_resist() {
  m_sky_resist_ = GOOGLE_LONGLONG(0);
  clear_has_m_sky_resist();
}
inline ::google::protobuf::int64 E_MonsterValue::m_sky_resist() const {
  return m_sky_resist_;
}
inline void E_MonsterValue::set_m_sky_resist(::google::protobuf::int64 value) {
  set_has_m_sky_resist();
  m_sky_resist_ = value;
}

// optional int64 m_kill_god = 16;
inline bool E_MonsterValue::has_m_kill_god() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_MonsterValue::set_has_m_kill_god() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_MonsterValue::clear_has_m_kill_god() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_MonsterValue::clear_m_kill_god() {
  m_kill_god_ = GOOGLE_LONGLONG(0);
  clear_has_m_kill_god();
}
inline ::google::protobuf::int64 E_MonsterValue::m_kill_god() const {
  return m_kill_god_;
}
inline void E_MonsterValue::set_m_kill_god(::google::protobuf::int64 value) {
  set_has_m_kill_god();
  m_kill_god_ = value;
}

// optional int64 m_god_body = 17;
inline bool E_MonsterValue::has_m_god_body() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_MonsterValue::set_has_m_god_body() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_MonsterValue::clear_has_m_god_body() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_MonsterValue::clear_m_god_body() {
  m_god_body_ = GOOGLE_LONGLONG(0);
  clear_has_m_god_body();
}
inline ::google::protobuf::int64 E_MonsterValue::m_god_body() const {
  return m_god_body_;
}
inline void E_MonsterValue::set_m_god_body(::google::protobuf::int64 value) {
  set_has_m_god_body();
  m_god_body_ = value;
}

// optional int64 m_mortal_rate = 18;
inline bool E_MonsterValue::has_m_mortal_rate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void E_MonsterValue::set_has_m_mortal_rate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void E_MonsterValue::clear_has_m_mortal_rate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void E_MonsterValue::clear_m_mortal_rate() {
  m_mortal_rate_ = GOOGLE_LONGLONG(0);
  clear_has_m_mortal_rate();
}
inline ::google::protobuf::int64 E_MonsterValue::m_mortal_rate() const {
  return m_mortal_rate_;
}
inline void E_MonsterValue::set_m_mortal_rate(::google::protobuf::int64 value) {
  set_has_m_mortal_rate();
  m_mortal_rate_ = value;
}

// optional int64 m_mortal_resist = 19;
inline bool E_MonsterValue::has_m_mortal_resist() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void E_MonsterValue::set_has_m_mortal_resist() {
  _has_bits_[0] |= 0x00040000u;
}
inline void E_MonsterValue::clear_has_m_mortal_resist() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void E_MonsterValue::clear_m_mortal_resist() {
  m_mortal_resist_ = GOOGLE_LONGLONG(0);
  clear_has_m_mortal_resist();
}
inline ::google::protobuf::int64 E_MonsterValue::m_mortal_resist() const {
  return m_mortal_resist_;
}
inline void E_MonsterValue::set_m_mortal_resist(::google::protobuf::int64 value) {
  set_has_m_mortal_resist();
  m_mortal_resist_ = value;
}

// optional int64 m_fairy_rate = 20;
inline bool E_MonsterValue::has_m_fairy_rate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void E_MonsterValue::set_has_m_fairy_rate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void E_MonsterValue::clear_has_m_fairy_rate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void E_MonsterValue::clear_m_fairy_rate() {
  m_fairy_rate_ = GOOGLE_LONGLONG(0);
  clear_has_m_fairy_rate();
}
inline ::google::protobuf::int64 E_MonsterValue::m_fairy_rate() const {
  return m_fairy_rate_;
}
inline void E_MonsterValue::set_m_fairy_rate(::google::protobuf::int64 value) {
  set_has_m_fairy_rate();
  m_fairy_rate_ = value;
}

// optional int64 m_fairy_resist = 21;
inline bool E_MonsterValue::has_m_fairy_resist() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void E_MonsterValue::set_has_m_fairy_resist() {
  _has_bits_[0] |= 0x00100000u;
}
inline void E_MonsterValue::clear_has_m_fairy_resist() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void E_MonsterValue::clear_m_fairy_resist() {
  m_fairy_resist_ = GOOGLE_LONGLONG(0);
  clear_has_m_fairy_resist();
}
inline ::google::protobuf::int64 E_MonsterValue::m_fairy_resist() const {
  return m_fairy_resist_;
}
inline void E_MonsterValue::set_m_fairy_resist(::google::protobuf::int64 value) {
  set_has_m_fairy_resist();
  m_fairy_resist_ = value;
}

// optional int64 m_god_rate = 22;
inline bool E_MonsterValue::has_m_god_rate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void E_MonsterValue::set_has_m_god_rate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void E_MonsterValue::clear_has_m_god_rate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void E_MonsterValue::clear_m_god_rate() {
  m_god_rate_ = GOOGLE_LONGLONG(0);
  clear_has_m_god_rate();
}
inline ::google::protobuf::int64 E_MonsterValue::m_god_rate() const {
  return m_god_rate_;
}
inline void E_MonsterValue::set_m_god_rate(::google::protobuf::int64 value) {
  set_has_m_god_rate();
  m_god_rate_ = value;
}

// optional int64 m_god_resist = 23;
inline bool E_MonsterValue::has_m_god_resist() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void E_MonsterValue::set_has_m_god_resist() {
  _has_bits_[0] |= 0x00400000u;
}
inline void E_MonsterValue::clear_has_m_god_resist() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void E_MonsterValue::clear_m_god_resist() {
  m_god_resist_ = GOOGLE_LONGLONG(0);
  clear_has_m_god_resist();
}
inline ::google::protobuf::int64 E_MonsterValue::m_god_resist() const {
  return m_god_resist_;
}
inline void E_MonsterValue::set_m_god_resist(::google::protobuf::int64 value) {
  set_has_m_god_resist();
  m_god_resist_ = value;
}

// optional int64 m_crit_rate = 24;
inline bool E_MonsterValue::has_m_crit_rate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void E_MonsterValue::set_has_m_crit_rate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void E_MonsterValue::clear_has_m_crit_rate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void E_MonsterValue::clear_m_crit_rate() {
  m_crit_rate_ = GOOGLE_LONGLONG(0);
  clear_has_m_crit_rate();
}
inline ::google::protobuf::int64 E_MonsterValue::m_crit_rate() const {
  return m_crit_rate_;
}
inline void E_MonsterValue::set_m_crit_rate(::google::protobuf::int64 value) {
  set_has_m_crit_rate();
  m_crit_rate_ = value;
}

// optional int64 m_crit_resit_rate = 25;
inline bool E_MonsterValue::has_m_crit_resit_rate() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void E_MonsterValue::set_has_m_crit_resit_rate() {
  _has_bits_[0] |= 0x01000000u;
}
inline void E_MonsterValue::clear_has_m_crit_resit_rate() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void E_MonsterValue::clear_m_crit_resit_rate() {
  m_crit_resit_rate_ = GOOGLE_LONGLONG(0);
  clear_has_m_crit_resit_rate();
}
inline ::google::protobuf::int64 E_MonsterValue::m_crit_resit_rate() const {
  return m_crit_resit_rate_;
}
inline void E_MonsterValue::set_m_crit_resit_rate(::google::protobuf::int64 value) {
  set_has_m_crit_resit_rate();
  m_crit_resit_rate_ = value;
}

// optional int64 m_crit_dam = 26;
inline bool E_MonsterValue::has_m_crit_dam() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void E_MonsterValue::set_has_m_crit_dam() {
  _has_bits_[0] |= 0x02000000u;
}
inline void E_MonsterValue::clear_has_m_crit_dam() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void E_MonsterValue::clear_m_crit_dam() {
  m_crit_dam_ = GOOGLE_LONGLONG(0);
  clear_has_m_crit_dam();
}
inline ::google::protobuf::int64 E_MonsterValue::m_crit_dam() const {
  return m_crit_dam_;
}
inline void E_MonsterValue::set_m_crit_dam(::google::protobuf::int64 value) {
  set_has_m_crit_dam();
  m_crit_dam_ = value;
}

// optional int64 m_crit_redu = 27;
inline bool E_MonsterValue::has_m_crit_redu() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void E_MonsterValue::set_has_m_crit_redu() {
  _has_bits_[0] |= 0x04000000u;
}
inline void E_MonsterValue::clear_has_m_crit_redu() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void E_MonsterValue::clear_m_crit_redu() {
  m_crit_redu_ = GOOGLE_LONGLONG(0);
  clear_has_m_crit_redu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_crit_redu() const {
  return m_crit_redu_;
}
inline void E_MonsterValue::set_m_crit_redu(::google::protobuf::int64 value) {
  set_has_m_crit_redu();
  m_crit_redu_ = value;
}

// optional int64 m_batter_rate = 28;
inline bool E_MonsterValue::has_m_batter_rate() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void E_MonsterValue::set_has_m_batter_rate() {
  _has_bits_[0] |= 0x08000000u;
}
inline void E_MonsterValue::clear_has_m_batter_rate() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void E_MonsterValue::clear_m_batter_rate() {
  m_batter_rate_ = GOOGLE_LONGLONG(0);
  clear_has_m_batter_rate();
}
inline ::google::protobuf::int64 E_MonsterValue::m_batter_rate() const {
  return m_batter_rate_;
}
inline void E_MonsterValue::set_m_batter_rate(::google::protobuf::int64 value) {
  set_has_m_batter_rate();
  m_batter_rate_ = value;
}

// optional int64 m_batter_resist = 29;
inline bool E_MonsterValue::has_m_batter_resist() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void E_MonsterValue::set_has_m_batter_resist() {
  _has_bits_[0] |= 0x10000000u;
}
inline void E_MonsterValue::clear_has_m_batter_resist() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void E_MonsterValue::clear_m_batter_resist() {
  m_batter_resist_ = GOOGLE_LONGLONG(0);
  clear_has_m_batter_resist();
}
inline ::google::protobuf::int64 E_MonsterValue::m_batter_resist() const {
  return m_batter_resist_;
}
inline void E_MonsterValue::set_m_batter_resist(::google::protobuf::int64 value) {
  set_has_m_batter_resist();
  m_batter_resist_ = value;
}

// optional int64 m_batter_dam = 30;
inline bool E_MonsterValue::has_m_batter_dam() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void E_MonsterValue::set_has_m_batter_dam() {
  _has_bits_[0] |= 0x20000000u;
}
inline void E_MonsterValue::clear_has_m_batter_dam() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void E_MonsterValue::clear_m_batter_dam() {
  m_batter_dam_ = GOOGLE_LONGLONG(0);
  clear_has_m_batter_dam();
}
inline ::google::protobuf::int64 E_MonsterValue::m_batter_dam() const {
  return m_batter_dam_;
}
inline void E_MonsterValue::set_m_batter_dam(::google::protobuf::int64 value) {
  set_has_m_batter_dam();
  m_batter_dam_ = value;
}

// optional int64 m_batter_redu = 31;
inline bool E_MonsterValue::has_m_batter_redu() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void E_MonsterValue::set_has_m_batter_redu() {
  _has_bits_[0] |= 0x40000000u;
}
inline void E_MonsterValue::clear_has_m_batter_redu() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void E_MonsterValue::clear_m_batter_redu() {
  m_batter_redu_ = GOOGLE_LONGLONG(0);
  clear_has_m_batter_redu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_batter_redu() const {
  return m_batter_redu_;
}
inline void E_MonsterValue::set_m_batter_redu(::google::protobuf::int64 value) {
  set_has_m_batter_redu();
  m_batter_redu_ = value;
}

// optional int64 m_brkdown_rate = 32;
inline bool E_MonsterValue::has_m_brkdown_rate() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void E_MonsterValue::set_has_m_brkdown_rate() {
  _has_bits_[0] |= 0x80000000u;
}
inline void E_MonsterValue::clear_has_m_brkdown_rate() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void E_MonsterValue::clear_m_brkdown_rate() {
  m_brkdown_rate_ = GOOGLE_LONGLONG(0);
  clear_has_m_brkdown_rate();
}
inline ::google::protobuf::int64 E_MonsterValue::m_brkdown_rate() const {
  return m_brkdown_rate_;
}
inline void E_MonsterValue::set_m_brkdown_rate(::google::protobuf::int64 value) {
  set_has_m_brkdown_rate();
  m_brkdown_rate_ = value;
}

// optional int64 m_brkdown_resist = 33;
inline bool E_MonsterValue::has_m_brkdown_resist() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void E_MonsterValue::set_has_m_brkdown_resist() {
  _has_bits_[1] |= 0x00000001u;
}
inline void E_MonsterValue::clear_has_m_brkdown_resist() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void E_MonsterValue::clear_m_brkdown_resist() {
  m_brkdown_resist_ = GOOGLE_LONGLONG(0);
  clear_has_m_brkdown_resist();
}
inline ::google::protobuf::int64 E_MonsterValue::m_brkdown_resist() const {
  return m_brkdown_resist_;
}
inline void E_MonsterValue::set_m_brkdown_resist(::google::protobuf::int64 value) {
  set_has_m_brkdown_resist();
  m_brkdown_resist_ = value;
}

// optional int64 m_dam_add = 34;
inline bool E_MonsterValue::has_m_dam_add() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void E_MonsterValue::set_has_m_dam_add() {
  _has_bits_[1] |= 0x00000002u;
}
inline void E_MonsterValue::clear_has_m_dam_add() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void E_MonsterValue::clear_m_dam_add() {
  m_dam_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_dam_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_dam_add() const {
  return m_dam_add_;
}
inline void E_MonsterValue::set_m_dam_add(::google::protobuf::int64 value) {
  set_has_m_dam_add();
  m_dam_add_ = value;
}

// optional int64 m_dam_redu = 35;
inline bool E_MonsterValue::has_m_dam_redu() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void E_MonsterValue::set_has_m_dam_redu() {
  _has_bits_[1] |= 0x00000004u;
}
inline void E_MonsterValue::clear_has_m_dam_redu() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void E_MonsterValue::clear_m_dam_redu() {
  m_dam_redu_ = GOOGLE_LONGLONG(0);
  clear_has_m_dam_redu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_dam_redu() const {
  return m_dam_redu_;
}
inline void E_MonsterValue::set_m_dam_redu(::google::protobuf::int64 value) {
  set_has_m_dam_redu();
  m_dam_redu_ = value;
}

// optional int64 m_all_add = 36;
inline bool E_MonsterValue::has_m_all_add() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void E_MonsterValue::set_has_m_all_add() {
  _has_bits_[1] |= 0x00000008u;
}
inline void E_MonsterValue::clear_has_m_all_add() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void E_MonsterValue::clear_m_all_add() {
  m_all_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_all_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_all_add() const {
  return m_all_add_;
}
inline void E_MonsterValue::set_m_all_add(::google::protobuf::int64 value) {
  set_has_m_all_add();
  m_all_add_ = value;
}

// optional int64 m_all_redu = 37;
inline bool E_MonsterValue::has_m_all_redu() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void E_MonsterValue::set_has_m_all_redu() {
  _has_bits_[1] |= 0x00000010u;
}
inline void E_MonsterValue::clear_has_m_all_redu() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void E_MonsterValue::clear_m_all_redu() {
  m_all_redu_ = GOOGLE_LONGLONG(0);
  clear_has_m_all_redu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_all_redu() const {
  return m_all_redu_;
}
inline void E_MonsterValue::set_m_all_redu(::google::protobuf::int64 value) {
  set_has_m_all_redu();
  m_all_redu_ = value;
}

// optional int64 m_skill_add = 38;
inline bool E_MonsterValue::has_m_skill_add() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void E_MonsterValue::set_has_m_skill_add() {
  _has_bits_[1] |= 0x00000020u;
}
inline void E_MonsterValue::clear_has_m_skill_add() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void E_MonsterValue::clear_m_skill_add() {
  m_skill_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_skill_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_skill_add() const {
  return m_skill_add_;
}
inline void E_MonsterValue::set_m_skill_add(::google::protobuf::int64 value) {
  set_has_m_skill_add();
  m_skill_add_ = value;
}

// optional int64 m_skill_redu = 39;
inline bool E_MonsterValue::has_m_skill_redu() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void E_MonsterValue::set_has_m_skill_redu() {
  _has_bits_[1] |= 0x00000040u;
}
inline void E_MonsterValue::clear_has_m_skill_redu() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void E_MonsterValue::clear_m_skill_redu() {
  m_skill_redu_ = GOOGLE_LONGLONG(0);
  clear_has_m_skill_redu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_skill_redu() const {
  return m_skill_redu_;
}
inline void E_MonsterValue::set_m_skill_redu(::google::protobuf::int64 value) {
  set_has_m_skill_redu();
  m_skill_redu_ = value;
}

// optional int64 m_rebound_dam = 40;
inline bool E_MonsterValue::has_m_rebound_dam() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void E_MonsterValue::set_has_m_rebound_dam() {
  _has_bits_[1] |= 0x00000080u;
}
inline void E_MonsterValue::clear_has_m_rebound_dam() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void E_MonsterValue::clear_m_rebound_dam() {
  m_rebound_dam_ = GOOGLE_LONGLONG(0);
  clear_has_m_rebound_dam();
}
inline ::google::protobuf::int64 E_MonsterValue::m_rebound_dam() const {
  return m_rebound_dam_;
}
inline void E_MonsterValue::set_m_rebound_dam(::google::protobuf::int64 value) {
  set_has_m_rebound_dam();
  m_rebound_dam_ = value;
}

// optional int64 m_hp_steal = 41;
inline bool E_MonsterValue::has_m_hp_steal() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void E_MonsterValue::set_has_m_hp_steal() {
  _has_bits_[1] |= 0x00000100u;
}
inline void E_MonsterValue::clear_has_m_hp_steal() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void E_MonsterValue::clear_m_hp_steal() {
  m_hp_steal_ = GOOGLE_LONGLONG(0);
  clear_has_m_hp_steal();
}
inline ::google::protobuf::int64 E_MonsterValue::m_hp_steal() const {
  return m_hp_steal_;
}
inline void E_MonsterValue::set_m_hp_steal(::google::protobuf::int64 value) {
  set_has_m_hp_steal();
  m_hp_steal_ = value;
}

// optional int64 m_dodge_rate = 42;
inline bool E_MonsterValue::has_m_dodge_rate() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void E_MonsterValue::set_has_m_dodge_rate() {
  _has_bits_[1] |= 0x00000200u;
}
inline void E_MonsterValue::clear_has_m_dodge_rate() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void E_MonsterValue::clear_m_dodge_rate() {
  m_dodge_rate_ = GOOGLE_LONGLONG(0);
  clear_has_m_dodge_rate();
}
inline ::google::protobuf::int64 E_MonsterValue::m_dodge_rate() const {
  return m_dodge_rate_;
}
inline void E_MonsterValue::set_m_dodge_rate(::google::protobuf::int64 value) {
  set_has_m_dodge_rate();
  m_dodge_rate_ = value;
}

// optional int64 m_hit_rate = 43;
inline bool E_MonsterValue::has_m_hit_rate() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void E_MonsterValue::set_has_m_hit_rate() {
  _has_bits_[1] |= 0x00000400u;
}
inline void E_MonsterValue::clear_has_m_hit_rate() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void E_MonsterValue::clear_m_hit_rate() {
  m_hit_rate_ = GOOGLE_LONGLONG(0);
  clear_has_m_hit_rate();
}
inline ::google::protobuf::int64 E_MonsterValue::m_hit_rate() const {
  return m_hit_rate_;
}
inline void E_MonsterValue::set_m_hit_rate(::google::protobuf::int64 value) {
  set_has_m_hit_rate();
  m_hit_rate_ = value;
}

// optional int64 m_blk_rate = 44;
inline bool E_MonsterValue::has_m_blk_rate() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void E_MonsterValue::set_has_m_blk_rate() {
  _has_bits_[1] |= 0x00000800u;
}
inline void E_MonsterValue::clear_has_m_blk_rate() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void E_MonsterValue::clear_m_blk_rate() {
  m_blk_rate_ = GOOGLE_LONGLONG(0);
  clear_has_m_blk_rate();
}
inline ::google::protobuf::int64 E_MonsterValue::m_blk_rate() const {
  return m_blk_rate_;
}
inline void E_MonsterValue::set_m_blk_rate(::google::protobuf::int64 value) {
  set_has_m_blk_rate();
  m_blk_rate_ = value;
}

// optional int64 m_brk_blk_rate = 45;
inline bool E_MonsterValue::has_m_brk_blk_rate() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void E_MonsterValue::set_has_m_brk_blk_rate() {
  _has_bits_[1] |= 0x00001000u;
}
inline void E_MonsterValue::clear_has_m_brk_blk_rate() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void E_MonsterValue::clear_m_brk_blk_rate() {
  m_brk_blk_rate_ = GOOGLE_LONGLONG(0);
  clear_has_m_brk_blk_rate();
}
inline ::google::protobuf::int64 E_MonsterValue::m_brk_blk_rate() const {
  return m_brk_blk_rate_;
}
inline void E_MonsterValue::set_m_brk_blk_rate(::google::protobuf::int64 value) {
  set_has_m_brk_blk_rate();
  m_brk_blk_rate_ = value;
}

// optional int64 m_blk_free = 46;
inline bool E_MonsterValue::has_m_blk_free() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void E_MonsterValue::set_has_m_blk_free() {
  _has_bits_[1] |= 0x00002000u;
}
inline void E_MonsterValue::clear_has_m_blk_free() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void E_MonsterValue::clear_m_blk_free() {
  m_blk_free_ = GOOGLE_LONGLONG(0);
  clear_has_m_blk_free();
}
inline ::google::protobuf::int64 E_MonsterValue::m_blk_free() const {
  return m_blk_free_;
}
inline void E_MonsterValue::set_m_blk_free(::google::protobuf::int64 value) {
  set_has_m_blk_free();
  m_blk_free_ = value;
}

// optional int64 m_blk_pierce = 47;
inline bool E_MonsterValue::has_m_blk_pierce() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void E_MonsterValue::set_has_m_blk_pierce() {
  _has_bits_[1] |= 0x00004000u;
}
inline void E_MonsterValue::clear_has_m_blk_pierce() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void E_MonsterValue::clear_m_blk_pierce() {
  m_blk_pierce_ = GOOGLE_LONGLONG(0);
  clear_has_m_blk_pierce();
}
inline ::google::protobuf::int64 E_MonsterValue::m_blk_pierce() const {
  return m_blk_pierce_;
}
inline void E_MonsterValue::set_m_blk_pierce(::google::protobuf::int64 value) {
  set_has_m_blk_pierce();
  m_blk_pierce_ = value;
}

// optional int64 m_rel_armor = 48;
inline bool E_MonsterValue::has_m_rel_armor() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void E_MonsterValue::set_has_m_rel_armor() {
  _has_bits_[1] |= 0x00008000u;
}
inline void E_MonsterValue::clear_has_m_rel_armor() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void E_MonsterValue::clear_m_rel_armor() {
  m_rel_armor_ = GOOGLE_LONGLONG(0);
  clear_has_m_rel_armor();
}
inline ::google::protobuf::int64 E_MonsterValue::m_rel_armor() const {
  return m_rel_armor_;
}
inline void E_MonsterValue::set_m_rel_armor(::google::protobuf::int64 value) {
  set_has_m_rel_armor();
  m_rel_armor_ = value;
}

// optional int64 m_rel_dam = 49;
inline bool E_MonsterValue::has_m_rel_dam() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void E_MonsterValue::set_has_m_rel_dam() {
  _has_bits_[1] |= 0x00010000u;
}
inline void E_MonsterValue::clear_has_m_rel_dam() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void E_MonsterValue::clear_m_rel_dam() {
  m_rel_dam_ = GOOGLE_LONGLONG(0);
  clear_has_m_rel_dam();
}
inline ::google::protobuf::int64 E_MonsterValue::m_rel_dam() const {
  return m_rel_dam_;
}
inline void E_MonsterValue::set_m_rel_dam(::google::protobuf::int64 value) {
  set_has_m_rel_dam();
  m_rel_dam_ = value;
}

// optional int64 m_five_resist = 50;
inline bool E_MonsterValue::has_m_five_resist() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void E_MonsterValue::set_has_m_five_resist() {
  _has_bits_[1] |= 0x00020000u;
}
inline void E_MonsterValue::clear_has_m_five_resist() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void E_MonsterValue::clear_m_five_resist() {
  m_five_resist_ = GOOGLE_LONGLONG(0);
  clear_has_m_five_resist();
}
inline ::google::protobuf::int64 E_MonsterValue::m_five_resist() const {
  return m_five_resist_;
}
inline void E_MonsterValue::set_m_five_resist(::google::protobuf::int64 value) {
  set_has_m_five_resist();
  m_five_resist_ = value;
}

// optional int64 m_five_resist_redu = 51;
inline bool E_MonsterValue::has_m_five_resist_redu() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void E_MonsterValue::set_has_m_five_resist_redu() {
  _has_bits_[1] |= 0x00040000u;
}
inline void E_MonsterValue::clear_has_m_five_resist_redu() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void E_MonsterValue::clear_m_five_resist_redu() {
  m_five_resist_redu_ = GOOGLE_LONGLONG(0);
  clear_has_m_five_resist_redu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_five_resist_redu() const {
  return m_five_resist_redu_;
}
inline void E_MonsterValue::set_m_five_resist_redu(::google::protobuf::int64 value) {
  set_has_m_five_resist_redu();
  m_five_resist_redu_ = value;
}

// optional int64 m_fire_add = 52;
inline bool E_MonsterValue::has_m_fire_add() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void E_MonsterValue::set_has_m_fire_add() {
  _has_bits_[1] |= 0x00080000u;
}
inline void E_MonsterValue::clear_has_m_fire_add() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void E_MonsterValue::clear_m_fire_add() {
  m_fire_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_fire_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_fire_add() const {
  return m_fire_add_;
}
inline void E_MonsterValue::set_m_fire_add(::google::protobuf::int64 value) {
  set_has_m_fire_add();
  m_fire_add_ = value;
}

// optional int64 m_fire_redu = 53;
inline bool E_MonsterValue::has_m_fire_redu() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void E_MonsterValue::set_has_m_fire_redu() {
  _has_bits_[1] |= 0x00100000u;
}
inline void E_MonsterValue::clear_has_m_fire_redu() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void E_MonsterValue::clear_m_fire_redu() {
  m_fire_redu_ = GOOGLE_LONGLONG(0);
  clear_has_m_fire_redu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_fire_redu() const {
  return m_fire_redu_;
}
inline void E_MonsterValue::set_m_fire_redu(::google::protobuf::int64 value) {
  set_has_m_fire_redu();
  m_fire_redu_ = value;
}

// optional int64 m_ice_add = 54;
inline bool E_MonsterValue::has_m_ice_add() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void E_MonsterValue::set_has_m_ice_add() {
  _has_bits_[1] |= 0x00200000u;
}
inline void E_MonsterValue::clear_has_m_ice_add() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void E_MonsterValue::clear_m_ice_add() {
  m_ice_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_ice_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_ice_add() const {
  return m_ice_add_;
}
inline void E_MonsterValue::set_m_ice_add(::google::protobuf::int64 value) {
  set_has_m_ice_add();
  m_ice_add_ = value;
}

// optional int64 m_ice_redu = 55;
inline bool E_MonsterValue::has_m_ice_redu() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void E_MonsterValue::set_has_m_ice_redu() {
  _has_bits_[1] |= 0x00400000u;
}
inline void E_MonsterValue::clear_has_m_ice_redu() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void E_MonsterValue::clear_m_ice_redu() {
  m_ice_redu_ = GOOGLE_LONGLONG(0);
  clear_has_m_ice_redu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_ice_redu() const {
  return m_ice_redu_;
}
inline void E_MonsterValue::set_m_ice_redu(::google::protobuf::int64 value) {
  set_has_m_ice_redu();
  m_ice_redu_ = value;
}

// optional int64 m_thunder_add = 56;
inline bool E_MonsterValue::has_m_thunder_add() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void E_MonsterValue::set_has_m_thunder_add() {
  _has_bits_[1] |= 0x00800000u;
}
inline void E_MonsterValue::clear_has_m_thunder_add() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void E_MonsterValue::clear_m_thunder_add() {
  m_thunder_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_thunder_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_thunder_add() const {
  return m_thunder_add_;
}
inline void E_MonsterValue::set_m_thunder_add(::google::protobuf::int64 value) {
  set_has_m_thunder_add();
  m_thunder_add_ = value;
}

// optional int64 m_thunder_rdu = 57;
inline bool E_MonsterValue::has_m_thunder_rdu() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void E_MonsterValue::set_has_m_thunder_rdu() {
  _has_bits_[1] |= 0x01000000u;
}
inline void E_MonsterValue::clear_has_m_thunder_rdu() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void E_MonsterValue::clear_m_thunder_rdu() {
  m_thunder_rdu_ = GOOGLE_LONGLONG(0);
  clear_has_m_thunder_rdu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_thunder_rdu() const {
  return m_thunder_rdu_;
}
inline void E_MonsterValue::set_m_thunder_rdu(::google::protobuf::int64 value) {
  set_has_m_thunder_rdu();
  m_thunder_rdu_ = value;
}

// optional int64 m_player_add = 58;
inline bool E_MonsterValue::has_m_player_add() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void E_MonsterValue::set_has_m_player_add() {
  _has_bits_[1] |= 0x02000000u;
}
inline void E_MonsterValue::clear_has_m_player_add() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void E_MonsterValue::clear_m_player_add() {
  m_player_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_player_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_player_add() const {
  return m_player_add_;
}
inline void E_MonsterValue::set_m_player_add(::google::protobuf::int64 value) {
  set_has_m_player_add();
  m_player_add_ = value;
}

// optional int64 m_player_redu = 59;
inline bool E_MonsterValue::has_m_player_redu() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void E_MonsterValue::set_has_m_player_redu() {
  _has_bits_[1] |= 0x04000000u;
}
inline void E_MonsterValue::clear_has_m_player_redu() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void E_MonsterValue::clear_m_player_redu() {
  m_player_redu_ = GOOGLE_LONGLONG(0);
  clear_has_m_player_redu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_player_redu() const {
  return m_player_redu_;
}
inline void E_MonsterValue::set_m_player_redu(::google::protobuf::int64 value) {
  set_has_m_player_redu();
  m_player_redu_ = value;
}

// optional int64 m_leader_add = 60;
inline bool E_MonsterValue::has_m_leader_add() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void E_MonsterValue::set_has_m_leader_add() {
  _has_bits_[1] |= 0x08000000u;
}
inline void E_MonsterValue::clear_has_m_leader_add() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void E_MonsterValue::clear_m_leader_add() {
  m_leader_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_leader_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_leader_add() const {
  return m_leader_add_;
}
inline void E_MonsterValue::set_m_leader_add(::google::protobuf::int64 value) {
  set_has_m_leader_add();
  m_leader_add_ = value;
}

// optional int64 m_leader_redu = 61;
inline bool E_MonsterValue::has_m_leader_redu() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void E_MonsterValue::set_has_m_leader_redu() {
  _has_bits_[1] |= 0x10000000u;
}
inline void E_MonsterValue::clear_has_m_leader_redu() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void E_MonsterValue::clear_m_leader_redu() {
  m_leader_redu_ = GOOGLE_LONGLONG(0);
  clear_has_m_leader_redu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_leader_redu() const {
  return m_leader_redu_;
}
inline void E_MonsterValue::set_m_leader_redu(::google::protobuf::int64 value) {
  set_has_m_leader_redu();
  m_leader_redu_ = value;
}

// optional int64 m_mon_add = 62;
inline bool E_MonsterValue::has_m_mon_add() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void E_MonsterValue::set_has_m_mon_add() {
  _has_bits_[1] |= 0x20000000u;
}
inline void E_MonsterValue::clear_has_m_mon_add() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void E_MonsterValue::clear_m_mon_add() {
  m_mon_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_mon_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_mon_add() const {
  return m_mon_add_;
}
inline void E_MonsterValue::set_m_mon_add(::google::protobuf::int64 value) {
  set_has_m_mon_add();
  m_mon_add_ = value;
}

// optional int64 m_mon_redu = 63;
inline bool E_MonsterValue::has_m_mon_redu() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void E_MonsterValue::set_has_m_mon_redu() {
  _has_bits_[1] |= 0x40000000u;
}
inline void E_MonsterValue::clear_has_m_mon_redu() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void E_MonsterValue::clear_m_mon_redu() {
  m_mon_redu_ = GOOGLE_LONGLONG(0);
  clear_has_m_mon_redu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_mon_redu() const {
  return m_mon_redu_;
}
inline void E_MonsterValue::set_m_mon_redu(::google::protobuf::int64 value) {
  set_has_m_mon_redu();
  m_mon_redu_ = value;
}

// optional int64 m_var_redu = 64;
inline bool E_MonsterValue::has_m_var_redu() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void E_MonsterValue::set_has_m_var_redu() {
  _has_bits_[1] |= 0x80000000u;
}
inline void E_MonsterValue::clear_has_m_var_redu() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void E_MonsterValue::clear_m_var_redu() {
  m_var_redu_ = GOOGLE_LONGLONG(0);
  clear_has_m_var_redu();
}
inline ::google::protobuf::int64 E_MonsterValue::m_var_redu() const {
  return m_var_redu_;
}
inline void E_MonsterValue::set_m_var_redu(::google::protobuf::int64 value) {
  set_has_m_var_redu();
  m_var_redu_ = value;
}

// optional int64 m_var_add = 65;
inline bool E_MonsterValue::has_m_var_add() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void E_MonsterValue::set_has_m_var_add() {
  _has_bits_[2] |= 0x00000001u;
}
inline void E_MonsterValue::clear_has_m_var_add() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void E_MonsterValue::clear_m_var_add() {
  m_var_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_var_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_var_add() const {
  return m_var_add_;
}
inline void E_MonsterValue::set_m_var_add(::google::protobuf::int64 value) {
  set_has_m_var_add();
  m_var_add_ = value;
}

// optional int64 m_unusual_resist = 66;
inline bool E_MonsterValue::has_m_unusual_resist() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void E_MonsterValue::set_has_m_unusual_resist() {
  _has_bits_[2] |= 0x00000002u;
}
inline void E_MonsterValue::clear_has_m_unusual_resist() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void E_MonsterValue::clear_m_unusual_resist() {
  m_unusual_resist_ = GOOGLE_LONGLONG(0);
  clear_has_m_unusual_resist();
}
inline ::google::protobuf::int64 E_MonsterValue::m_unusual_resist() const {
  return m_unusual_resist_;
}
inline void E_MonsterValue::set_m_unusual_resist(::google::protobuf::int64 value) {
  set_has_m_unusual_resist();
  m_unusual_resist_ = value;
}

// optional int64 m_unusual_hit = 67;
inline bool E_MonsterValue::has_m_unusual_hit() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void E_MonsterValue::set_has_m_unusual_hit() {
  _has_bits_[2] |= 0x00000004u;
}
inline void E_MonsterValue::clear_has_m_unusual_hit() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void E_MonsterValue::clear_m_unusual_hit() {
  m_unusual_hit_ = GOOGLE_LONGLONG(0);
  clear_has_m_unusual_hit();
}
inline ::google::protobuf::int64 E_MonsterValue::m_unusual_hit() const {
  return m_unusual_hit_;
}
inline void E_MonsterValue::set_m_unusual_hit(::google::protobuf::int64 value) {
  set_has_m_unusual_hit();
  m_unusual_hit_ = value;
}

// optional int64 m_hp_recover = 68;
inline bool E_MonsterValue::has_m_hp_recover() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void E_MonsterValue::set_has_m_hp_recover() {
  _has_bits_[2] |= 0x00000008u;
}
inline void E_MonsterValue::clear_has_m_hp_recover() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void E_MonsterValue::clear_m_hp_recover() {
  m_hp_recover_ = GOOGLE_LONGLONG(0);
  clear_has_m_hp_recover();
}
inline ::google::protobuf::int64 E_MonsterValue::m_hp_recover() const {
  return m_hp_recover_;
}
inline void E_MonsterValue::set_m_hp_recover(::google::protobuf::int64 value) {
  set_has_m_hp_recover();
  m_hp_recover_ = value;
}

// optional int64 m_unusual_add = 69;
inline bool E_MonsterValue::has_m_unusual_add() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void E_MonsterValue::set_has_m_unusual_add() {
  _has_bits_[2] |= 0x00000010u;
}
inline void E_MonsterValue::clear_has_m_unusual_add() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void E_MonsterValue::clear_m_unusual_add() {
  m_unusual_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_unusual_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_unusual_add() const {
  return m_unusual_add_;
}
inline void E_MonsterValue::set_m_unusual_add(::google::protobuf::int64 value) {
  set_has_m_unusual_add();
  m_unusual_add_ = value;
}

// optional int64 m_fix_recover = 70;
inline bool E_MonsterValue::has_m_fix_recover() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void E_MonsterValue::set_has_m_fix_recover() {
  _has_bits_[2] |= 0x00000020u;
}
inline void E_MonsterValue::clear_has_m_fix_recover() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void E_MonsterValue::clear_m_fix_recover() {
  m_fix_recover_ = GOOGLE_LONGLONG(0);
  clear_has_m_fix_recover();
}
inline ::google::protobuf::int64 E_MonsterValue::m_fix_recover() const {
  return m_fix_recover_;
}
inline void E_MonsterValue::set_m_fix_recover(::google::protobuf::int64 value) {
  set_has_m_fix_recover();
  m_fix_recover_ = value;
}

// optional int64 m_high_hp_add = 71;
inline bool E_MonsterValue::has_m_high_hp_add() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void E_MonsterValue::set_has_m_high_hp_add() {
  _has_bits_[2] |= 0x00000040u;
}
inline void E_MonsterValue::clear_has_m_high_hp_add() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void E_MonsterValue::clear_m_high_hp_add() {
  m_high_hp_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_high_hp_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_high_hp_add() const {
  return m_high_hp_add_;
}
inline void E_MonsterValue::set_m_high_hp_add(::google::protobuf::int64 value) {
  set_has_m_high_hp_add();
  m_high_hp_add_ = value;
}

// optional int64 m_recover_hp_add = 72;
inline bool E_MonsterValue::has_m_recover_hp_add() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void E_MonsterValue::set_has_m_recover_hp_add() {
  _has_bits_[2] |= 0x00000080u;
}
inline void E_MonsterValue::clear_has_m_recover_hp_add() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void E_MonsterValue::clear_m_recover_hp_add() {
  m_recover_hp_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_recover_hp_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_recover_hp_add() const {
  return m_recover_hp_add_;
}
inline void E_MonsterValue::set_m_recover_hp_add(::google::protobuf::int64 value) {
  set_has_m_recover_hp_add();
  m_recover_hp_add_ = value;
}

// optional int64 m_week_add = 73;
inline bool E_MonsterValue::has_m_week_add() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void E_MonsterValue::set_has_m_week_add() {
  _has_bits_[2] |= 0x00000100u;
}
inline void E_MonsterValue::clear_has_m_week_add() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void E_MonsterValue::clear_m_week_add() {
  m_week_add_ = GOOGLE_LONGLONG(0);
  clear_has_m_week_add();
}
inline ::google::protobuf::int64 E_MonsterValue::m_week_add() const {
  return m_week_add_;
}
inline void E_MonsterValue::set_m_week_add(::google::protobuf::int64 value) {
  set_has_m_week_add();
  m_week_add_ = value;
}

// optional int64 m_shield = 74;
inline bool E_MonsterValue::has_m_shield() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void E_MonsterValue::set_has_m_shield() {
  _has_bits_[2] |= 0x00000200u;
}
inline void E_MonsterValue::clear_has_m_shield() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void E_MonsterValue::clear_m_shield() {
  m_shield_ = GOOGLE_LONGLONG(0);
  clear_has_m_shield();
}
inline ::google::protobuf::int64 E_MonsterValue::m_shield() const {
  return m_shield_;
}
inline void E_MonsterValue::set_m_shield(::google::protobuf::int64 value) {
  set_has_m_shield();
  m_shield_ = value;
}

// -------------------------------------------------------------------

// Sheet_MonsterValue

// repeated .proto_ff.E_MonsterValue E_MonsterValue_List = 1;
inline int Sheet_MonsterValue::e_monstervalue_list_size() const {
  return e_monstervalue_list_.size();
}
inline void Sheet_MonsterValue::clear_e_monstervalue_list() {
  e_monstervalue_list_.Clear();
}
inline const ::proto_ff::E_MonsterValue& Sheet_MonsterValue::e_monstervalue_list(int index) const {
  return e_monstervalue_list_.Get(index);
}
inline ::proto_ff::E_MonsterValue* Sheet_MonsterValue::mutable_e_monstervalue_list(int index) {
  return e_monstervalue_list_.Mutable(index);
}
inline ::proto_ff::E_MonsterValue* Sheet_MonsterValue::add_e_monstervalue_list() {
  return e_monstervalue_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterValue >&
Sheet_MonsterValue::e_monstervalue_list() const {
  return e_monstervalue_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterValue >*
Sheet_MonsterValue::mutable_e_monstervalue_list() {
  return &e_monstervalue_list_;
}

// -------------------------------------------------------------------

// E_MonsterValueparam

// optional int32 m_id = 1;
inline bool E_MonsterValueparam::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MonsterValueparam::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MonsterValueparam::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MonsterValueparam::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_id() const {
  return m_id_;
}
inline void E_MonsterValueparam::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_p_max_hp = 2;
inline bool E_MonsterValueparam::has_m_p_max_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_max_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MonsterValueparam::clear_has_m_p_max_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MonsterValueparam::clear_m_p_max_hp() {
  m_p_max_hp_ = 0;
  clear_has_m_p_max_hp();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_max_hp() const {
  return m_p_max_hp_;
}
inline void E_MonsterValueparam::set_m_p_max_hp(::google::protobuf::int32 value) {
  set_has_m_p_max_hp();
  m_p_max_hp_ = value;
}

// optional int32 m_p_atk = 3;
inline bool E_MonsterValueparam::has_m_p_atk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_atk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MonsterValueparam::clear_has_m_p_atk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MonsterValueparam::clear_m_p_atk() {
  m_p_atk_ = 0;
  clear_has_m_p_atk();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_atk() const {
  return m_p_atk_;
}
inline void E_MonsterValueparam::set_m_p_atk(::google::protobuf::int32 value) {
  set_has_m_p_atk();
  m_p_atk_ = value;
}

// optional int32 m_p_def = 4;
inline bool E_MonsterValueparam::has_m_p_def() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_def() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MonsterValueparam::clear_has_m_p_def() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MonsterValueparam::clear_m_p_def() {
  m_p_def_ = 0;
  clear_has_m_p_def();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_def() const {
  return m_p_def_;
}
inline void E_MonsterValueparam::set_m_p_def(::google::protobuf::int32 value) {
  set_has_m_p_def();
  m_p_def_ = value;
}

// optional int32 m_p_brk_armor = 5;
inline bool E_MonsterValueparam::has_m_p_brk_armor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_brk_armor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MonsterValueparam::clear_has_m_p_brk_armor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MonsterValueparam::clear_m_p_brk_armor() {
  m_p_brk_armor_ = 0;
  clear_has_m_p_brk_armor();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_brk_armor() const {
  return m_p_brk_armor_;
}
inline void E_MonsterValueparam::set_m_p_brk_armor(::google::protobuf::int32 value) {
  set_has_m_p_brk_armor();
  m_p_brk_armor_ = value;
}

// optional int32 m_p_five_dam = 6;
inline bool E_MonsterValueparam::has_m_p_five_dam() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_five_dam() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MonsterValueparam::clear_has_m_p_five_dam() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MonsterValueparam::clear_m_p_five_dam() {
  m_p_five_dam_ = 0;
  clear_has_m_p_five_dam();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_five_dam() const {
  return m_p_five_dam_;
}
inline void E_MonsterValueparam::set_m_p_five_dam(::google::protobuf::int32 value) {
  set_has_m_p_five_dam();
  m_p_five_dam_ = value;
}

// optional int32 m_p_five_armor = 7;
inline bool E_MonsterValueparam::has_m_p_five_armor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_five_armor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MonsterValueparam::clear_has_m_p_five_armor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MonsterValueparam::clear_m_p_five_armor() {
  m_p_five_armor_ = 0;
  clear_has_m_p_five_armor();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_five_armor() const {
  return m_p_five_armor_;
}
inline void E_MonsterValueparam::set_m_p_five_armor(::google::protobuf::int32 value) {
  set_has_m_p_five_armor();
  m_p_five_armor_ = value;
}

// optional int32 m_p_thump_rate = 8;
inline bool E_MonsterValueparam::has_m_p_thump_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_thump_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MonsterValueparam::clear_has_m_p_thump_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MonsterValueparam::clear_m_p_thump_rate() {
  m_p_thump_rate_ = 0;
  clear_has_m_p_thump_rate();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_thump_rate() const {
  return m_p_thump_rate_;
}
inline void E_MonsterValueparam::set_m_p_thump_rate(::google::protobuf::int32 value) {
  set_has_m_p_thump_rate();
  m_p_thump_rate_ = value;
}

// optional int32 m_p_thump_resist = 9;
inline bool E_MonsterValueparam::has_m_p_thump_resist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_thump_resist() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_MonsterValueparam::clear_has_m_p_thump_resist() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_MonsterValueparam::clear_m_p_thump_resist() {
  m_p_thump_resist_ = 0;
  clear_has_m_p_thump_resist();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_thump_resist() const {
  return m_p_thump_resist_;
}
inline void E_MonsterValueparam::set_m_p_thump_resist(::google::protobuf::int32 value) {
  set_has_m_p_thump_resist();
  m_p_thump_resist_ = value;
}

// optional int32 m_p_sky = 10;
inline bool E_MonsterValueparam::has_m_p_sky() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_sky() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_MonsterValueparam::clear_has_m_p_sky() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_MonsterValueparam::clear_m_p_sky() {
  m_p_sky_ = 0;
  clear_has_m_p_sky();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_sky() const {
  return m_p_sky_;
}
inline void E_MonsterValueparam::set_m_p_sky(::google::protobuf::int32 value) {
  set_has_m_p_sky();
  m_p_sky_ = value;
}

// optional int32 m_p_sky_dam = 11;
inline bool E_MonsterValueparam::has_m_p_sky_dam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_sky_dam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_MonsterValueparam::clear_has_m_p_sky_dam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_MonsterValueparam::clear_m_p_sky_dam() {
  m_p_sky_dam_ = 0;
  clear_has_m_p_sky_dam();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_sky_dam() const {
  return m_p_sky_dam_;
}
inline void E_MonsterValueparam::set_m_p_sky_dam(::google::protobuf::int32 value) {
  set_has_m_p_sky_dam();
  m_p_sky_dam_ = value;
}

// optional int32 m_p_sky_redu_resist = 12;
inline bool E_MonsterValueparam::has_m_p_sky_redu_resist() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_sky_redu_resist() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_MonsterValueparam::clear_has_m_p_sky_redu_resist() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_MonsterValueparam::clear_m_p_sky_redu_resist() {
  m_p_sky_redu_resist_ = 0;
  clear_has_m_p_sky_redu_resist();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_sky_redu_resist() const {
  return m_p_sky_redu_resist_;
}
inline void E_MonsterValueparam::set_m_p_sky_redu_resist(::google::protobuf::int32 value) {
  set_has_m_p_sky_redu_resist();
  m_p_sky_redu_resist_ = value;
}

// optional int32 m_p_sky_resist = 13;
inline bool E_MonsterValueparam::has_m_p_sky_resist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_sky_resist() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_MonsterValueparam::clear_has_m_p_sky_resist() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_MonsterValueparam::clear_m_p_sky_resist() {
  m_p_sky_resist_ = 0;
  clear_has_m_p_sky_resist();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_sky_resist() const {
  return m_p_sky_resist_;
}
inline void E_MonsterValueparam::set_m_p_sky_resist(::google::protobuf::int32 value) {
  set_has_m_p_sky_resist();
  m_p_sky_resist_ = value;
}

// optional int32 m_p_kill_god = 14;
inline bool E_MonsterValueparam::has_m_p_kill_god() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_kill_god() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_MonsterValueparam::clear_has_m_p_kill_god() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_MonsterValueparam::clear_m_p_kill_god() {
  m_p_kill_god_ = 0;
  clear_has_m_p_kill_god();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_kill_god() const {
  return m_p_kill_god_;
}
inline void E_MonsterValueparam::set_m_p_kill_god(::google::protobuf::int32 value) {
  set_has_m_p_kill_god();
  m_p_kill_god_ = value;
}

// optional int32 m_p_god_body = 15;
inline bool E_MonsterValueparam::has_m_p_god_body() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_god_body() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_MonsterValueparam::clear_has_m_p_god_body() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_MonsterValueparam::clear_m_p_god_body() {
  m_p_god_body_ = 0;
  clear_has_m_p_god_body();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_god_body() const {
  return m_p_god_body_;
}
inline void E_MonsterValueparam::set_m_p_god_body(::google::protobuf::int32 value) {
  set_has_m_p_god_body();
  m_p_god_body_ = value;
}

// optional int32 m_p_mortal_rate = 16;
inline bool E_MonsterValueparam::has_m_p_mortal_rate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_mortal_rate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_MonsterValueparam::clear_has_m_p_mortal_rate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_MonsterValueparam::clear_m_p_mortal_rate() {
  m_p_mortal_rate_ = 0;
  clear_has_m_p_mortal_rate();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_mortal_rate() const {
  return m_p_mortal_rate_;
}
inline void E_MonsterValueparam::set_m_p_mortal_rate(::google::protobuf::int32 value) {
  set_has_m_p_mortal_rate();
  m_p_mortal_rate_ = value;
}

// optional int32 m_p_mortal_resist = 17;
inline bool E_MonsterValueparam::has_m_p_mortal_resist() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_mortal_resist() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_MonsterValueparam::clear_has_m_p_mortal_resist() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_MonsterValueparam::clear_m_p_mortal_resist() {
  m_p_mortal_resist_ = 0;
  clear_has_m_p_mortal_resist();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_mortal_resist() const {
  return m_p_mortal_resist_;
}
inline void E_MonsterValueparam::set_m_p_mortal_resist(::google::protobuf::int32 value) {
  set_has_m_p_mortal_resist();
  m_p_mortal_resist_ = value;
}

// optional int32 m_p_fairy_rate = 18;
inline bool E_MonsterValueparam::has_m_p_fairy_rate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_fairy_rate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void E_MonsterValueparam::clear_has_m_p_fairy_rate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void E_MonsterValueparam::clear_m_p_fairy_rate() {
  m_p_fairy_rate_ = 0;
  clear_has_m_p_fairy_rate();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_fairy_rate() const {
  return m_p_fairy_rate_;
}
inline void E_MonsterValueparam::set_m_p_fairy_rate(::google::protobuf::int32 value) {
  set_has_m_p_fairy_rate();
  m_p_fairy_rate_ = value;
}

// optional int32 m_p_fairy_resist = 19;
inline bool E_MonsterValueparam::has_m_p_fairy_resist() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_fairy_resist() {
  _has_bits_[0] |= 0x00040000u;
}
inline void E_MonsterValueparam::clear_has_m_p_fairy_resist() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void E_MonsterValueparam::clear_m_p_fairy_resist() {
  m_p_fairy_resist_ = 0;
  clear_has_m_p_fairy_resist();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_fairy_resist() const {
  return m_p_fairy_resist_;
}
inline void E_MonsterValueparam::set_m_p_fairy_resist(::google::protobuf::int32 value) {
  set_has_m_p_fairy_resist();
  m_p_fairy_resist_ = value;
}

// optional int32 m_p_god_rate = 20;
inline bool E_MonsterValueparam::has_m_p_god_rate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_god_rate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void E_MonsterValueparam::clear_has_m_p_god_rate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void E_MonsterValueparam::clear_m_p_god_rate() {
  m_p_god_rate_ = 0;
  clear_has_m_p_god_rate();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_god_rate() const {
  return m_p_god_rate_;
}
inline void E_MonsterValueparam::set_m_p_god_rate(::google::protobuf::int32 value) {
  set_has_m_p_god_rate();
  m_p_god_rate_ = value;
}

// optional int32 m_p_god_resist = 21;
inline bool E_MonsterValueparam::has_m_p_god_resist() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_god_resist() {
  _has_bits_[0] |= 0x00100000u;
}
inline void E_MonsterValueparam::clear_has_m_p_god_resist() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void E_MonsterValueparam::clear_m_p_god_resist() {
  m_p_god_resist_ = 0;
  clear_has_m_p_god_resist();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_god_resist() const {
  return m_p_god_resist_;
}
inline void E_MonsterValueparam::set_m_p_god_resist(::google::protobuf::int32 value) {
  set_has_m_p_god_resist();
  m_p_god_resist_ = value;
}

// optional int32 m_p_crit_rate = 22;
inline bool E_MonsterValueparam::has_m_p_crit_rate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_crit_rate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void E_MonsterValueparam::clear_has_m_p_crit_rate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void E_MonsterValueparam::clear_m_p_crit_rate() {
  m_p_crit_rate_ = 0;
  clear_has_m_p_crit_rate();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_crit_rate() const {
  return m_p_crit_rate_;
}
inline void E_MonsterValueparam::set_m_p_crit_rate(::google::protobuf::int32 value) {
  set_has_m_p_crit_rate();
  m_p_crit_rate_ = value;
}

// optional int32 m_p_crit_resit_rate = 23;
inline bool E_MonsterValueparam::has_m_p_crit_resit_rate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_crit_resit_rate() {
  _has_bits_[0] |= 0x00400000u;
}
inline void E_MonsterValueparam::clear_has_m_p_crit_resit_rate() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void E_MonsterValueparam::clear_m_p_crit_resit_rate() {
  m_p_crit_resit_rate_ = 0;
  clear_has_m_p_crit_resit_rate();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_crit_resit_rate() const {
  return m_p_crit_resit_rate_;
}
inline void E_MonsterValueparam::set_m_p_crit_resit_rate(::google::protobuf::int32 value) {
  set_has_m_p_crit_resit_rate();
  m_p_crit_resit_rate_ = value;
}

// optional int32 m_p_crit_dam = 24;
inline bool E_MonsterValueparam::has_m_p_crit_dam() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_crit_dam() {
  _has_bits_[0] |= 0x00800000u;
}
inline void E_MonsterValueparam::clear_has_m_p_crit_dam() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void E_MonsterValueparam::clear_m_p_crit_dam() {
  m_p_crit_dam_ = 0;
  clear_has_m_p_crit_dam();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_crit_dam() const {
  return m_p_crit_dam_;
}
inline void E_MonsterValueparam::set_m_p_crit_dam(::google::protobuf::int32 value) {
  set_has_m_p_crit_dam();
  m_p_crit_dam_ = value;
}

// optional int32 m_p_crit_redu = 25;
inline bool E_MonsterValueparam::has_m_p_crit_redu() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_crit_redu() {
  _has_bits_[0] |= 0x01000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_crit_redu() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void E_MonsterValueparam::clear_m_p_crit_redu() {
  m_p_crit_redu_ = 0;
  clear_has_m_p_crit_redu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_crit_redu() const {
  return m_p_crit_redu_;
}
inline void E_MonsterValueparam::set_m_p_crit_redu(::google::protobuf::int32 value) {
  set_has_m_p_crit_redu();
  m_p_crit_redu_ = value;
}

// optional int32 m_p_batter_rate = 26;
inline bool E_MonsterValueparam::has_m_p_batter_rate() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_batter_rate() {
  _has_bits_[0] |= 0x02000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_batter_rate() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void E_MonsterValueparam::clear_m_p_batter_rate() {
  m_p_batter_rate_ = 0;
  clear_has_m_p_batter_rate();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_batter_rate() const {
  return m_p_batter_rate_;
}
inline void E_MonsterValueparam::set_m_p_batter_rate(::google::protobuf::int32 value) {
  set_has_m_p_batter_rate();
  m_p_batter_rate_ = value;
}

// optional int32 m_p_batter_resist = 27;
inline bool E_MonsterValueparam::has_m_p_batter_resist() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_batter_resist() {
  _has_bits_[0] |= 0x04000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_batter_resist() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void E_MonsterValueparam::clear_m_p_batter_resist() {
  m_p_batter_resist_ = 0;
  clear_has_m_p_batter_resist();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_batter_resist() const {
  return m_p_batter_resist_;
}
inline void E_MonsterValueparam::set_m_p_batter_resist(::google::protobuf::int32 value) {
  set_has_m_p_batter_resist();
  m_p_batter_resist_ = value;
}

// optional int32 m_p_batter_dam = 28;
inline bool E_MonsterValueparam::has_m_p_batter_dam() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_batter_dam() {
  _has_bits_[0] |= 0x08000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_batter_dam() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void E_MonsterValueparam::clear_m_p_batter_dam() {
  m_p_batter_dam_ = 0;
  clear_has_m_p_batter_dam();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_batter_dam() const {
  return m_p_batter_dam_;
}
inline void E_MonsterValueparam::set_m_p_batter_dam(::google::protobuf::int32 value) {
  set_has_m_p_batter_dam();
  m_p_batter_dam_ = value;
}

// optional int32 m_p_batter_redu = 29;
inline bool E_MonsterValueparam::has_m_p_batter_redu() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_batter_redu() {
  _has_bits_[0] |= 0x10000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_batter_redu() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void E_MonsterValueparam::clear_m_p_batter_redu() {
  m_p_batter_redu_ = 0;
  clear_has_m_p_batter_redu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_batter_redu() const {
  return m_p_batter_redu_;
}
inline void E_MonsterValueparam::set_m_p_batter_redu(::google::protobuf::int32 value) {
  set_has_m_p_batter_redu();
  m_p_batter_redu_ = value;
}

// optional int32 m_p_brkdown_rate = 30;
inline bool E_MonsterValueparam::has_m_p_brkdown_rate() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_brkdown_rate() {
  _has_bits_[0] |= 0x20000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_brkdown_rate() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void E_MonsterValueparam::clear_m_p_brkdown_rate() {
  m_p_brkdown_rate_ = 0;
  clear_has_m_p_brkdown_rate();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_brkdown_rate() const {
  return m_p_brkdown_rate_;
}
inline void E_MonsterValueparam::set_m_p_brkdown_rate(::google::protobuf::int32 value) {
  set_has_m_p_brkdown_rate();
  m_p_brkdown_rate_ = value;
}

// optional int32 m_p_brkdown_resist = 31;
inline bool E_MonsterValueparam::has_m_p_brkdown_resist() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_brkdown_resist() {
  _has_bits_[0] |= 0x40000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_brkdown_resist() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void E_MonsterValueparam::clear_m_p_brkdown_resist() {
  m_p_brkdown_resist_ = 0;
  clear_has_m_p_brkdown_resist();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_brkdown_resist() const {
  return m_p_brkdown_resist_;
}
inline void E_MonsterValueparam::set_m_p_brkdown_resist(::google::protobuf::int32 value) {
  set_has_m_p_brkdown_resist();
  m_p_brkdown_resist_ = value;
}

// optional int32 m_p_dam_add = 32;
inline bool E_MonsterValueparam::has_m_p_dam_add() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_dam_add() {
  _has_bits_[0] |= 0x80000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_dam_add() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void E_MonsterValueparam::clear_m_p_dam_add() {
  m_p_dam_add_ = 0;
  clear_has_m_p_dam_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_dam_add() const {
  return m_p_dam_add_;
}
inline void E_MonsterValueparam::set_m_p_dam_add(::google::protobuf::int32 value) {
  set_has_m_p_dam_add();
  m_p_dam_add_ = value;
}

// optional int32 m_p_dam_redu = 33;
inline bool E_MonsterValueparam::has_m_p_dam_redu() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_dam_redu() {
  _has_bits_[1] |= 0x00000001u;
}
inline void E_MonsterValueparam::clear_has_m_p_dam_redu() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void E_MonsterValueparam::clear_m_p_dam_redu() {
  m_p_dam_redu_ = 0;
  clear_has_m_p_dam_redu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_dam_redu() const {
  return m_p_dam_redu_;
}
inline void E_MonsterValueparam::set_m_p_dam_redu(::google::protobuf::int32 value) {
  set_has_m_p_dam_redu();
  m_p_dam_redu_ = value;
}

// optional int32 m_p_all_add = 34;
inline bool E_MonsterValueparam::has_m_p_all_add() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_all_add() {
  _has_bits_[1] |= 0x00000002u;
}
inline void E_MonsterValueparam::clear_has_m_p_all_add() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void E_MonsterValueparam::clear_m_p_all_add() {
  m_p_all_add_ = 0;
  clear_has_m_p_all_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_all_add() const {
  return m_p_all_add_;
}
inline void E_MonsterValueparam::set_m_p_all_add(::google::protobuf::int32 value) {
  set_has_m_p_all_add();
  m_p_all_add_ = value;
}

// optional int32 m_p_all_redu = 35;
inline bool E_MonsterValueparam::has_m_p_all_redu() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_all_redu() {
  _has_bits_[1] |= 0x00000004u;
}
inline void E_MonsterValueparam::clear_has_m_p_all_redu() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void E_MonsterValueparam::clear_m_p_all_redu() {
  m_p_all_redu_ = 0;
  clear_has_m_p_all_redu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_all_redu() const {
  return m_p_all_redu_;
}
inline void E_MonsterValueparam::set_m_p_all_redu(::google::protobuf::int32 value) {
  set_has_m_p_all_redu();
  m_p_all_redu_ = value;
}

// optional int32 m_p_skill_add = 36;
inline bool E_MonsterValueparam::has_m_p_skill_add() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_skill_add() {
  _has_bits_[1] |= 0x00000008u;
}
inline void E_MonsterValueparam::clear_has_m_p_skill_add() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void E_MonsterValueparam::clear_m_p_skill_add() {
  m_p_skill_add_ = 0;
  clear_has_m_p_skill_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_skill_add() const {
  return m_p_skill_add_;
}
inline void E_MonsterValueparam::set_m_p_skill_add(::google::protobuf::int32 value) {
  set_has_m_p_skill_add();
  m_p_skill_add_ = value;
}

// optional int32 m_p_skill_redu = 37;
inline bool E_MonsterValueparam::has_m_p_skill_redu() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_skill_redu() {
  _has_bits_[1] |= 0x00000010u;
}
inline void E_MonsterValueparam::clear_has_m_p_skill_redu() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void E_MonsterValueparam::clear_m_p_skill_redu() {
  m_p_skill_redu_ = 0;
  clear_has_m_p_skill_redu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_skill_redu() const {
  return m_p_skill_redu_;
}
inline void E_MonsterValueparam::set_m_p_skill_redu(::google::protobuf::int32 value) {
  set_has_m_p_skill_redu();
  m_p_skill_redu_ = value;
}

// optional int32 m_p_rebound_dam = 38;
inline bool E_MonsterValueparam::has_m_p_rebound_dam() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_rebound_dam() {
  _has_bits_[1] |= 0x00000020u;
}
inline void E_MonsterValueparam::clear_has_m_p_rebound_dam() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void E_MonsterValueparam::clear_m_p_rebound_dam() {
  m_p_rebound_dam_ = 0;
  clear_has_m_p_rebound_dam();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_rebound_dam() const {
  return m_p_rebound_dam_;
}
inline void E_MonsterValueparam::set_m_p_rebound_dam(::google::protobuf::int32 value) {
  set_has_m_p_rebound_dam();
  m_p_rebound_dam_ = value;
}

// optional int32 m_p_hp_steal = 39;
inline bool E_MonsterValueparam::has_m_p_hp_steal() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_hp_steal() {
  _has_bits_[1] |= 0x00000040u;
}
inline void E_MonsterValueparam::clear_has_m_p_hp_steal() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void E_MonsterValueparam::clear_m_p_hp_steal() {
  m_p_hp_steal_ = 0;
  clear_has_m_p_hp_steal();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_hp_steal() const {
  return m_p_hp_steal_;
}
inline void E_MonsterValueparam::set_m_p_hp_steal(::google::protobuf::int32 value) {
  set_has_m_p_hp_steal();
  m_p_hp_steal_ = value;
}

// optional int32 m_p_dodge_rate = 40;
inline bool E_MonsterValueparam::has_m_p_dodge_rate() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_dodge_rate() {
  _has_bits_[1] |= 0x00000080u;
}
inline void E_MonsterValueparam::clear_has_m_p_dodge_rate() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void E_MonsterValueparam::clear_m_p_dodge_rate() {
  m_p_dodge_rate_ = 0;
  clear_has_m_p_dodge_rate();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_dodge_rate() const {
  return m_p_dodge_rate_;
}
inline void E_MonsterValueparam::set_m_p_dodge_rate(::google::protobuf::int32 value) {
  set_has_m_p_dodge_rate();
  m_p_dodge_rate_ = value;
}

// optional int32 m_p_hit_rate = 41;
inline bool E_MonsterValueparam::has_m_p_hit_rate() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_hit_rate() {
  _has_bits_[1] |= 0x00000100u;
}
inline void E_MonsterValueparam::clear_has_m_p_hit_rate() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void E_MonsterValueparam::clear_m_p_hit_rate() {
  m_p_hit_rate_ = 0;
  clear_has_m_p_hit_rate();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_hit_rate() const {
  return m_p_hit_rate_;
}
inline void E_MonsterValueparam::set_m_p_hit_rate(::google::protobuf::int32 value) {
  set_has_m_p_hit_rate();
  m_p_hit_rate_ = value;
}

// optional int32 m_p_blk_rate = 42;
inline bool E_MonsterValueparam::has_m_p_blk_rate() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_blk_rate() {
  _has_bits_[1] |= 0x00000200u;
}
inline void E_MonsterValueparam::clear_has_m_p_blk_rate() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void E_MonsterValueparam::clear_m_p_blk_rate() {
  m_p_blk_rate_ = 0;
  clear_has_m_p_blk_rate();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_blk_rate() const {
  return m_p_blk_rate_;
}
inline void E_MonsterValueparam::set_m_p_blk_rate(::google::protobuf::int32 value) {
  set_has_m_p_blk_rate();
  m_p_blk_rate_ = value;
}

// optional int32 m_p_brk_blk_rate = 43;
inline bool E_MonsterValueparam::has_m_p_brk_blk_rate() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_brk_blk_rate() {
  _has_bits_[1] |= 0x00000400u;
}
inline void E_MonsterValueparam::clear_has_m_p_brk_blk_rate() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void E_MonsterValueparam::clear_m_p_brk_blk_rate() {
  m_p_brk_blk_rate_ = 0;
  clear_has_m_p_brk_blk_rate();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_brk_blk_rate() const {
  return m_p_brk_blk_rate_;
}
inline void E_MonsterValueparam::set_m_p_brk_blk_rate(::google::protobuf::int32 value) {
  set_has_m_p_brk_blk_rate();
  m_p_brk_blk_rate_ = value;
}

// optional int32 m_p_blk_free = 44;
inline bool E_MonsterValueparam::has_m_p_blk_free() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_blk_free() {
  _has_bits_[1] |= 0x00000800u;
}
inline void E_MonsterValueparam::clear_has_m_p_blk_free() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void E_MonsterValueparam::clear_m_p_blk_free() {
  m_p_blk_free_ = 0;
  clear_has_m_p_blk_free();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_blk_free() const {
  return m_p_blk_free_;
}
inline void E_MonsterValueparam::set_m_p_blk_free(::google::protobuf::int32 value) {
  set_has_m_p_blk_free();
  m_p_blk_free_ = value;
}

// optional int32 m_p_blk_pierce = 45;
inline bool E_MonsterValueparam::has_m_p_blk_pierce() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_blk_pierce() {
  _has_bits_[1] |= 0x00001000u;
}
inline void E_MonsterValueparam::clear_has_m_p_blk_pierce() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void E_MonsterValueparam::clear_m_p_blk_pierce() {
  m_p_blk_pierce_ = 0;
  clear_has_m_p_blk_pierce();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_blk_pierce() const {
  return m_p_blk_pierce_;
}
inline void E_MonsterValueparam::set_m_p_blk_pierce(::google::protobuf::int32 value) {
  set_has_m_p_blk_pierce();
  m_p_blk_pierce_ = value;
}

// optional int32 m_p_rel_armor = 46;
inline bool E_MonsterValueparam::has_m_p_rel_armor() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_rel_armor() {
  _has_bits_[1] |= 0x00002000u;
}
inline void E_MonsterValueparam::clear_has_m_p_rel_armor() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void E_MonsterValueparam::clear_m_p_rel_armor() {
  m_p_rel_armor_ = 0;
  clear_has_m_p_rel_armor();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_rel_armor() const {
  return m_p_rel_armor_;
}
inline void E_MonsterValueparam::set_m_p_rel_armor(::google::protobuf::int32 value) {
  set_has_m_p_rel_armor();
  m_p_rel_armor_ = value;
}

// optional int32 m_p_rel_dam = 47;
inline bool E_MonsterValueparam::has_m_p_rel_dam() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_rel_dam() {
  _has_bits_[1] |= 0x00004000u;
}
inline void E_MonsterValueparam::clear_has_m_p_rel_dam() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void E_MonsterValueparam::clear_m_p_rel_dam() {
  m_p_rel_dam_ = 0;
  clear_has_m_p_rel_dam();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_rel_dam() const {
  return m_p_rel_dam_;
}
inline void E_MonsterValueparam::set_m_p_rel_dam(::google::protobuf::int32 value) {
  set_has_m_p_rel_dam();
  m_p_rel_dam_ = value;
}

// optional int32 m_p_five_resist = 48;
inline bool E_MonsterValueparam::has_m_p_five_resist() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_five_resist() {
  _has_bits_[1] |= 0x00008000u;
}
inline void E_MonsterValueparam::clear_has_m_p_five_resist() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void E_MonsterValueparam::clear_m_p_five_resist() {
  m_p_five_resist_ = 0;
  clear_has_m_p_five_resist();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_five_resist() const {
  return m_p_five_resist_;
}
inline void E_MonsterValueparam::set_m_p_five_resist(::google::protobuf::int32 value) {
  set_has_m_p_five_resist();
  m_p_five_resist_ = value;
}

// optional int32 m_p_five_resist_redu = 49;
inline bool E_MonsterValueparam::has_m_p_five_resist_redu() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_five_resist_redu() {
  _has_bits_[1] |= 0x00010000u;
}
inline void E_MonsterValueparam::clear_has_m_p_five_resist_redu() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void E_MonsterValueparam::clear_m_p_five_resist_redu() {
  m_p_five_resist_redu_ = 0;
  clear_has_m_p_five_resist_redu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_five_resist_redu() const {
  return m_p_five_resist_redu_;
}
inline void E_MonsterValueparam::set_m_p_five_resist_redu(::google::protobuf::int32 value) {
  set_has_m_p_five_resist_redu();
  m_p_five_resist_redu_ = value;
}

// optional int32 m_p_fire_add = 50;
inline bool E_MonsterValueparam::has_m_p_fire_add() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_fire_add() {
  _has_bits_[1] |= 0x00020000u;
}
inline void E_MonsterValueparam::clear_has_m_p_fire_add() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void E_MonsterValueparam::clear_m_p_fire_add() {
  m_p_fire_add_ = 0;
  clear_has_m_p_fire_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_fire_add() const {
  return m_p_fire_add_;
}
inline void E_MonsterValueparam::set_m_p_fire_add(::google::protobuf::int32 value) {
  set_has_m_p_fire_add();
  m_p_fire_add_ = value;
}

// optional int32 m_p_fire_redu = 51;
inline bool E_MonsterValueparam::has_m_p_fire_redu() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_fire_redu() {
  _has_bits_[1] |= 0x00040000u;
}
inline void E_MonsterValueparam::clear_has_m_p_fire_redu() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void E_MonsterValueparam::clear_m_p_fire_redu() {
  m_p_fire_redu_ = 0;
  clear_has_m_p_fire_redu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_fire_redu() const {
  return m_p_fire_redu_;
}
inline void E_MonsterValueparam::set_m_p_fire_redu(::google::protobuf::int32 value) {
  set_has_m_p_fire_redu();
  m_p_fire_redu_ = value;
}

// optional int32 m_p_ice_add = 52;
inline bool E_MonsterValueparam::has_m_p_ice_add() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_ice_add() {
  _has_bits_[1] |= 0x00080000u;
}
inline void E_MonsterValueparam::clear_has_m_p_ice_add() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void E_MonsterValueparam::clear_m_p_ice_add() {
  m_p_ice_add_ = 0;
  clear_has_m_p_ice_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_ice_add() const {
  return m_p_ice_add_;
}
inline void E_MonsterValueparam::set_m_p_ice_add(::google::protobuf::int32 value) {
  set_has_m_p_ice_add();
  m_p_ice_add_ = value;
}

// optional int32 m_p_ice_redu = 53;
inline bool E_MonsterValueparam::has_m_p_ice_redu() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_ice_redu() {
  _has_bits_[1] |= 0x00100000u;
}
inline void E_MonsterValueparam::clear_has_m_p_ice_redu() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void E_MonsterValueparam::clear_m_p_ice_redu() {
  m_p_ice_redu_ = 0;
  clear_has_m_p_ice_redu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_ice_redu() const {
  return m_p_ice_redu_;
}
inline void E_MonsterValueparam::set_m_p_ice_redu(::google::protobuf::int32 value) {
  set_has_m_p_ice_redu();
  m_p_ice_redu_ = value;
}

// optional int32 m_p_thunder_add = 54;
inline bool E_MonsterValueparam::has_m_p_thunder_add() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_thunder_add() {
  _has_bits_[1] |= 0x00200000u;
}
inline void E_MonsterValueparam::clear_has_m_p_thunder_add() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void E_MonsterValueparam::clear_m_p_thunder_add() {
  m_p_thunder_add_ = 0;
  clear_has_m_p_thunder_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_thunder_add() const {
  return m_p_thunder_add_;
}
inline void E_MonsterValueparam::set_m_p_thunder_add(::google::protobuf::int32 value) {
  set_has_m_p_thunder_add();
  m_p_thunder_add_ = value;
}

// optional int32 m_p_thunder_rdu = 55;
inline bool E_MonsterValueparam::has_m_p_thunder_rdu() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_thunder_rdu() {
  _has_bits_[1] |= 0x00400000u;
}
inline void E_MonsterValueparam::clear_has_m_p_thunder_rdu() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void E_MonsterValueparam::clear_m_p_thunder_rdu() {
  m_p_thunder_rdu_ = 0;
  clear_has_m_p_thunder_rdu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_thunder_rdu() const {
  return m_p_thunder_rdu_;
}
inline void E_MonsterValueparam::set_m_p_thunder_rdu(::google::protobuf::int32 value) {
  set_has_m_p_thunder_rdu();
  m_p_thunder_rdu_ = value;
}

// optional int32 m_p_player_add = 56;
inline bool E_MonsterValueparam::has_m_p_player_add() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_player_add() {
  _has_bits_[1] |= 0x00800000u;
}
inline void E_MonsterValueparam::clear_has_m_p_player_add() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void E_MonsterValueparam::clear_m_p_player_add() {
  m_p_player_add_ = 0;
  clear_has_m_p_player_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_player_add() const {
  return m_p_player_add_;
}
inline void E_MonsterValueparam::set_m_p_player_add(::google::protobuf::int32 value) {
  set_has_m_p_player_add();
  m_p_player_add_ = value;
}

// optional int32 m_p_player_redu = 57;
inline bool E_MonsterValueparam::has_m_p_player_redu() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_player_redu() {
  _has_bits_[1] |= 0x01000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_player_redu() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void E_MonsterValueparam::clear_m_p_player_redu() {
  m_p_player_redu_ = 0;
  clear_has_m_p_player_redu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_player_redu() const {
  return m_p_player_redu_;
}
inline void E_MonsterValueparam::set_m_p_player_redu(::google::protobuf::int32 value) {
  set_has_m_p_player_redu();
  m_p_player_redu_ = value;
}

// optional int32 m_p_leader_add = 58;
inline bool E_MonsterValueparam::has_m_p_leader_add() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_leader_add() {
  _has_bits_[1] |= 0x02000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_leader_add() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void E_MonsterValueparam::clear_m_p_leader_add() {
  m_p_leader_add_ = 0;
  clear_has_m_p_leader_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_leader_add() const {
  return m_p_leader_add_;
}
inline void E_MonsterValueparam::set_m_p_leader_add(::google::protobuf::int32 value) {
  set_has_m_p_leader_add();
  m_p_leader_add_ = value;
}

// optional int32 m_p_leader_redu = 59;
inline bool E_MonsterValueparam::has_m_p_leader_redu() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_leader_redu() {
  _has_bits_[1] |= 0x04000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_leader_redu() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void E_MonsterValueparam::clear_m_p_leader_redu() {
  m_p_leader_redu_ = 0;
  clear_has_m_p_leader_redu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_leader_redu() const {
  return m_p_leader_redu_;
}
inline void E_MonsterValueparam::set_m_p_leader_redu(::google::protobuf::int32 value) {
  set_has_m_p_leader_redu();
  m_p_leader_redu_ = value;
}

// optional int32 m_p_mon_add = 60;
inline bool E_MonsterValueparam::has_m_p_mon_add() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_mon_add() {
  _has_bits_[1] |= 0x08000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_mon_add() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void E_MonsterValueparam::clear_m_p_mon_add() {
  m_p_mon_add_ = 0;
  clear_has_m_p_mon_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_mon_add() const {
  return m_p_mon_add_;
}
inline void E_MonsterValueparam::set_m_p_mon_add(::google::protobuf::int32 value) {
  set_has_m_p_mon_add();
  m_p_mon_add_ = value;
}

// optional int32 m_p_mon_redu = 61;
inline bool E_MonsterValueparam::has_m_p_mon_redu() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_mon_redu() {
  _has_bits_[1] |= 0x10000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_mon_redu() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void E_MonsterValueparam::clear_m_p_mon_redu() {
  m_p_mon_redu_ = 0;
  clear_has_m_p_mon_redu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_mon_redu() const {
  return m_p_mon_redu_;
}
inline void E_MonsterValueparam::set_m_p_mon_redu(::google::protobuf::int32 value) {
  set_has_m_p_mon_redu();
  m_p_mon_redu_ = value;
}

// optional int32 m_p_var_redu = 62;
inline bool E_MonsterValueparam::has_m_p_var_redu() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_var_redu() {
  _has_bits_[1] |= 0x20000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_var_redu() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void E_MonsterValueparam::clear_m_p_var_redu() {
  m_p_var_redu_ = 0;
  clear_has_m_p_var_redu();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_var_redu() const {
  return m_p_var_redu_;
}
inline void E_MonsterValueparam::set_m_p_var_redu(::google::protobuf::int32 value) {
  set_has_m_p_var_redu();
  m_p_var_redu_ = value;
}

// optional int32 m_p_var_add = 63;
inline bool E_MonsterValueparam::has_m_p_var_add() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_var_add() {
  _has_bits_[1] |= 0x40000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_var_add() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void E_MonsterValueparam::clear_m_p_var_add() {
  m_p_var_add_ = 0;
  clear_has_m_p_var_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_var_add() const {
  return m_p_var_add_;
}
inline void E_MonsterValueparam::set_m_p_var_add(::google::protobuf::int32 value) {
  set_has_m_p_var_add();
  m_p_var_add_ = value;
}

// optional int32 m_p_unusual_resist = 64;
inline bool E_MonsterValueparam::has_m_p_unusual_resist() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_unusual_resist() {
  _has_bits_[1] |= 0x80000000u;
}
inline void E_MonsterValueparam::clear_has_m_p_unusual_resist() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void E_MonsterValueparam::clear_m_p_unusual_resist() {
  m_p_unusual_resist_ = 0;
  clear_has_m_p_unusual_resist();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_unusual_resist() const {
  return m_p_unusual_resist_;
}
inline void E_MonsterValueparam::set_m_p_unusual_resist(::google::protobuf::int32 value) {
  set_has_m_p_unusual_resist();
  m_p_unusual_resist_ = value;
}

// optional int32 m_p_unusual_hit = 65;
inline bool E_MonsterValueparam::has_m_p_unusual_hit() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_unusual_hit() {
  _has_bits_[2] |= 0x00000001u;
}
inline void E_MonsterValueparam::clear_has_m_p_unusual_hit() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void E_MonsterValueparam::clear_m_p_unusual_hit() {
  m_p_unusual_hit_ = 0;
  clear_has_m_p_unusual_hit();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_unusual_hit() const {
  return m_p_unusual_hit_;
}
inline void E_MonsterValueparam::set_m_p_unusual_hit(::google::protobuf::int32 value) {
  set_has_m_p_unusual_hit();
  m_p_unusual_hit_ = value;
}

// optional int32 m_p_hp_recover = 66;
inline bool E_MonsterValueparam::has_m_p_hp_recover() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_hp_recover() {
  _has_bits_[2] |= 0x00000002u;
}
inline void E_MonsterValueparam::clear_has_m_p_hp_recover() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void E_MonsterValueparam::clear_m_p_hp_recover() {
  m_p_hp_recover_ = 0;
  clear_has_m_p_hp_recover();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_hp_recover() const {
  return m_p_hp_recover_;
}
inline void E_MonsterValueparam::set_m_p_hp_recover(::google::protobuf::int32 value) {
  set_has_m_p_hp_recover();
  m_p_hp_recover_ = value;
}

// optional int32 m_p_unusual_add = 67;
inline bool E_MonsterValueparam::has_m_p_unusual_add() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_unusual_add() {
  _has_bits_[2] |= 0x00000004u;
}
inline void E_MonsterValueparam::clear_has_m_p_unusual_add() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void E_MonsterValueparam::clear_m_p_unusual_add() {
  m_p_unusual_add_ = 0;
  clear_has_m_p_unusual_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_unusual_add() const {
  return m_p_unusual_add_;
}
inline void E_MonsterValueparam::set_m_p_unusual_add(::google::protobuf::int32 value) {
  set_has_m_p_unusual_add();
  m_p_unusual_add_ = value;
}

// optional int32 m_p_fix_recover = 68;
inline bool E_MonsterValueparam::has_m_p_fix_recover() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_fix_recover() {
  _has_bits_[2] |= 0x00000008u;
}
inline void E_MonsterValueparam::clear_has_m_p_fix_recover() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void E_MonsterValueparam::clear_m_p_fix_recover() {
  m_p_fix_recover_ = 0;
  clear_has_m_p_fix_recover();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_fix_recover() const {
  return m_p_fix_recover_;
}
inline void E_MonsterValueparam::set_m_p_fix_recover(::google::protobuf::int32 value) {
  set_has_m_p_fix_recover();
  m_p_fix_recover_ = value;
}

// optional int32 m_p_high_hp_add = 69;
inline bool E_MonsterValueparam::has_m_p_high_hp_add() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_high_hp_add() {
  _has_bits_[2] |= 0x00000010u;
}
inline void E_MonsterValueparam::clear_has_m_p_high_hp_add() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void E_MonsterValueparam::clear_m_p_high_hp_add() {
  m_p_high_hp_add_ = 0;
  clear_has_m_p_high_hp_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_high_hp_add() const {
  return m_p_high_hp_add_;
}
inline void E_MonsterValueparam::set_m_p_high_hp_add(::google::protobuf::int32 value) {
  set_has_m_p_high_hp_add();
  m_p_high_hp_add_ = value;
}

// optional int32 m_p_recover_hp_add = 70;
inline bool E_MonsterValueparam::has_m_p_recover_hp_add() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_recover_hp_add() {
  _has_bits_[2] |= 0x00000020u;
}
inline void E_MonsterValueparam::clear_has_m_p_recover_hp_add() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void E_MonsterValueparam::clear_m_p_recover_hp_add() {
  m_p_recover_hp_add_ = 0;
  clear_has_m_p_recover_hp_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_recover_hp_add() const {
  return m_p_recover_hp_add_;
}
inline void E_MonsterValueparam::set_m_p_recover_hp_add(::google::protobuf::int32 value) {
  set_has_m_p_recover_hp_add();
  m_p_recover_hp_add_ = value;
}

// optional int32 m_p_week_add = 71;
inline bool E_MonsterValueparam::has_m_p_week_add() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void E_MonsterValueparam::set_has_m_p_week_add() {
  _has_bits_[2] |= 0x00000040u;
}
inline void E_MonsterValueparam::clear_has_m_p_week_add() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void E_MonsterValueparam::clear_m_p_week_add() {
  m_p_week_add_ = 0;
  clear_has_m_p_week_add();
}
inline ::google::protobuf::int32 E_MonsterValueparam::m_p_week_add() const {
  return m_p_week_add_;
}
inline void E_MonsterValueparam::set_m_p_week_add(::google::protobuf::int32 value) {
  set_has_m_p_week_add();
  m_p_week_add_ = value;
}

// optional int64 m_shield = 72;
inline bool E_MonsterValueparam::has_m_shield() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void E_MonsterValueparam::set_has_m_shield() {
  _has_bits_[2] |= 0x00000080u;
}
inline void E_MonsterValueparam::clear_has_m_shield() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void E_MonsterValueparam::clear_m_shield() {
  m_shield_ = GOOGLE_LONGLONG(0);
  clear_has_m_shield();
}
inline ::google::protobuf::int64 E_MonsterValueparam::m_shield() const {
  return m_shield_;
}
inline void E_MonsterValueparam::set_m_shield(::google::protobuf::int64 value) {
  set_has_m_shield();
  m_shield_ = value;
}

// -------------------------------------------------------------------

// Sheet_MonsterValueparam

// repeated .proto_ff.E_MonsterValueparam E_MonsterValueparam_List = 1;
inline int Sheet_MonsterValueparam::e_monstervalueparam_list_size() const {
  return e_monstervalueparam_list_.size();
}
inline void Sheet_MonsterValueparam::clear_e_monstervalueparam_list() {
  e_monstervalueparam_list_.Clear();
}
inline const ::proto_ff::E_MonsterValueparam& Sheet_MonsterValueparam::e_monstervalueparam_list(int index) const {
  return e_monstervalueparam_list_.Get(index);
}
inline ::proto_ff::E_MonsterValueparam* Sheet_MonsterValueparam::mutable_e_monstervalueparam_list(int index) {
  return e_monstervalueparam_list_.Mutable(index);
}
inline ::proto_ff::E_MonsterValueparam* Sheet_MonsterValueparam::add_e_monstervalueparam_list() {
  return e_monstervalueparam_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterValueparam >&
Sheet_MonsterValueparam::e_monstervalueparam_list() const {
  return e_monstervalueparam_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterValueparam >*
Sheet_MonsterValueparam::mutable_e_monstervalueparam_list() {
  return &e_monstervalueparam_list_;
}

// -------------------------------------------------------------------

// E_MonsterDrop

// optional int32 m_id = 1;
inline bool E_MonsterDrop::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MonsterDrop::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MonsterDrop::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MonsterDrop::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MonsterDrop::m_id() const {
  return m_id_;
}
inline void E_MonsterDrop::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_group = 2;
inline bool E_MonsterDrop::has_m_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MonsterDrop::set_has_m_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MonsterDrop::clear_has_m_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MonsterDrop::clear_m_group() {
  m_group_ = 0;
  clear_has_m_group();
}
inline ::google::protobuf::int32 E_MonsterDrop::m_group() const {
  return m_group_;
}
inline void E_MonsterDrop::set_m_group(::google::protobuf::int32 value) {
  set_has_m_group();
  m_group_ = value;
}

// optional int32 m_own = 3;
inline bool E_MonsterDrop::has_m_own() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MonsterDrop::set_has_m_own() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MonsterDrop::clear_has_m_own() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MonsterDrop::clear_m_own() {
  m_own_ = 0;
  clear_has_m_own();
}
inline ::google::protobuf::int32 E_MonsterDrop::m_own() const {
  return m_own_;
}
inline void E_MonsterDrop::set_m_own(::google::protobuf::int32 value) {
  set_has_m_own();
  m_own_ = value;
}

// optional int32 m_type = 4;
inline bool E_MonsterDrop::has_m_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MonsterDrop::set_has_m_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MonsterDrop::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MonsterDrop::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_MonsterDrop::m_type() const {
  return m_type_;
}
inline void E_MonsterDrop::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// repeated int64 m_boxid = 5;
inline int E_MonsterDrop::m_boxid_size() const {
  return m_boxid_.size();
}
inline void E_MonsterDrop::clear_m_boxid() {
  m_boxid_.Clear();
}
inline ::google::protobuf::int64 E_MonsterDrop::m_boxid(int index) const {
  return m_boxid_.Get(index);
}
inline void E_MonsterDrop::set_m_boxid(int index, ::google::protobuf::int64 value) {
  m_boxid_.Set(index, value);
}
inline void E_MonsterDrop::add_m_boxid(::google::protobuf::int64 value) {
  m_boxid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
E_MonsterDrop::m_boxid() const {
  return m_boxid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
E_MonsterDrop::mutable_m_boxid() {
  return &m_boxid_;
}

// -------------------------------------------------------------------

// Sheet_MonsterDrop

// repeated .proto_ff.E_MonsterDrop E_MonsterDrop_List = 1;
inline int Sheet_MonsterDrop::e_monsterdrop_list_size() const {
  return e_monsterdrop_list_.size();
}
inline void Sheet_MonsterDrop::clear_e_monsterdrop_list() {
  e_monsterdrop_list_.Clear();
}
inline const ::proto_ff::E_MonsterDrop& Sheet_MonsterDrop::e_monsterdrop_list(int index) const {
  return e_monsterdrop_list_.Get(index);
}
inline ::proto_ff::E_MonsterDrop* Sheet_MonsterDrop::mutable_e_monsterdrop_list(int index) {
  return e_monsterdrop_list_.Mutable(index);
}
inline ::proto_ff::E_MonsterDrop* Sheet_MonsterDrop::add_e_monsterdrop_list() {
  return e_monsterdrop_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDrop >&
Sheet_MonsterDrop::e_monsterdrop_list() const {
  return e_monsterdrop_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MonsterDrop >*
Sheet_MonsterDrop::mutable_e_monsterdrop_list() {
  return &e_monsterdrop_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_monster_2eproto__INCLUDED
