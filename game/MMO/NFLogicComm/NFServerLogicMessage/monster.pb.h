// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monster.proto

#ifndef PROTOBUF_monster_2eproto__INCLUDED
#define PROTOBUF_monster_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_monster_2eproto();
void protobuf_AssignDesc_monster_2eproto();
void protobuf_ShutdownFile_monster_2eproto();

class monstermonster;
class Sheet_monstermonster;
class monsterdisplayskillDesc;
class monsterdisplay;
class Sheet_monsterdisplay;
class monstervalue;
class Sheet_monstervalue;

// ===================================================================

class monstermonster : public ::google::protobuf::Message {
 public:
  monstermonster();
  virtual ~monstermonster();

  monstermonster(const monstermonster& from);

  inline monstermonster& operator=(const monstermonster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const monstermonster& default_instance();

  void Swap(monstermonster* other);

  // implements Message ----------------------------------------------

  monstermonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const monstermonster& from);
  void MergeFrom(const monstermonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 monsterID = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIDFieldNumber = 1;
  inline ::google::protobuf::int64 monsterid() const;
  inline void set_monsterid(::google::protobuf::int64 value);

  // optional string monsterName = 2;
  inline bool has_monstername() const;
  inline void clear_monstername();
  static const int kMonsterNameFieldNumber = 2;
  inline const ::std::string& monstername() const;
  inline void set_monstername(const ::std::string& value);
  inline void set_monstername(const char* value);
  inline void set_monstername(const char* value, size_t size);
  inline ::std::string* mutable_monstername();
  inline ::std::string* release_monstername();
  inline void set_allocated_monstername(::std::string* monstername);

  // optional int32 functionType = 3;
  inline bool has_functiontype() const;
  inline void clear_functiontype();
  static const int kFunctionTypeFieldNumber = 3;
  inline ::google::protobuf::int32 functiontype() const;
  inline void set_functiontype(::google::protobuf::int32 value);

  // optional int64 functionValue = 4;
  inline bool has_functionvalue() const;
  inline void clear_functionvalue();
  static const int kFunctionValueFieldNumber = 4;
  inline ::google::protobuf::int64 functionvalue() const;
  inline void set_functionvalue(::google::protobuf::int64 value);

  // optional int32 profession = 5;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 5;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 damageAddType = 6;
  inline bool has_damageaddtype() const;
  inline void clear_damageaddtype();
  static const int kDamageAddTypeFieldNumber = 6;
  inline ::google::protobuf::int32 damageaddtype() const;
  inline void set_damageaddtype(::google::protobuf::int32 value);

  // optional int32 monsterLV = 7;
  inline bool has_monsterlv() const;
  inline void clear_monsterlv();
  static const int kMonsterLVFieldNumber = 7;
  inline ::google::protobuf::int32 monsterlv() const;
  inline void set_monsterlv(::google::protobuf::int32 value);

  // optional int32 droplimit = 8;
  inline bool has_droplimit() const;
  inline void clear_droplimit();
  static const int kDroplimitFieldNumber = 8;
  inline ::google::protobuf::int32 droplimit() const;
  inline void set_droplimit(::google::protobuf::int32 value);

  // optional int64 displayID = 9;
  inline bool has_displayid() const;
  inline void clear_displayid();
  static const int kDisplayIDFieldNumber = 9;
  inline ::google::protobuf::int64 displayid() const;
  inline void set_displayid(::google::protobuf::int64 value);

  // optional int64 valuetype = 10;
  inline bool has_valuetype() const;
  inline void clear_valuetype();
  static const int kValuetypeFieldNumber = 10;
  inline ::google::protobuf::int64 valuetype() const;
  inline void set_valuetype(::google::protobuf::int64 value);

  // optional int64 aiId = 11;
  inline bool has_aiid() const;
  inline void clear_aiid();
  static const int kAiIdFieldNumber = 11;
  inline ::google::protobuf::int64 aiid() const;
  inline void set_aiid(::google::protobuf::int64 value);

  // optional int32 hpSectionNum = 12;
  inline bool has_hpsectionnum() const;
  inline void clear_hpsectionnum();
  static const int kHpSectionNumFieldNumber = 12;
  inline ::google::protobuf::int32 hpsectionnum() const;
  inline void set_hpsectionnum(::google::protobuf::int32 value);

  // optional int32 showGuild = 13;
  inline bool has_showguild() const;
  inline void clear_showguild();
  static const int kShowGuildFieldNumber = 13;
  inline ::google::protobuf::int32 showguild() const;
  inline void set_showguild(::google::protobuf::int32 value);

  // optional int32 breedProb = 14;
  inline bool has_breedprob() const;
  inline void clear_breedprob();
  static const int kBreedProbFieldNumber = 14;
  inline ::google::protobuf::int32 breedprob() const;
  inline void set_breedprob(::google::protobuf::int32 value);

  // optional int64 breedMonID = 15;
  inline bool has_breedmonid() const;
  inline void clear_breedmonid();
  static const int kBreedMonIDFieldNumber = 15;
  inline ::google::protobuf::int64 breedmonid() const;
  inline void set_breedmonid(::google::protobuf::int64 value);

  // optional int32 breedMonLive = 16;
  inline bool has_breedmonlive() const;
  inline void clear_breedmonlive();
  static const int kBreedMonLiveFieldNumber = 16;
  inline ::google::protobuf::int32 breedmonlive() const;
  inline void set_breedmonlive(::google::protobuf::int32 value);

  // optional string itemCost = 17;
  inline bool has_itemcost() const;
  inline void clear_itemcost();
  static const int kItemCostFieldNumber = 17;
  inline const ::std::string& itemcost() const;
  inline void set_itemcost(const ::std::string& value);
  inline void set_itemcost(const char* value);
  inline void set_itemcost(const char* value, size_t size);
  inline ::std::string* mutable_itemcost();
  inline ::std::string* release_itemcost();
  inline void set_allocated_itemcost(::std::string* itemcost);

  // optional int32 isBornActionOn = 18;
  inline bool has_isbornactionon() const;
  inline void clear_isbornactionon();
  static const int kIsBornActionOnFieldNumber = 18;
  inline ::google::protobuf::int32 isbornactionon() const;
  inline void set_isbornactionon(::google::protobuf::int32 value);

  // optional int64 exp = 19;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 19;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional int32 dropType = 20;
  inline bool has_droptype() const;
  inline void clear_droptype();
  static const int kDropTypeFieldNumber = 20;
  inline ::google::protobuf::int32 droptype() const;
  inline void set_droptype(::google::protobuf::int32 value);

  // optional int32 isBelongToPlayer = 21;
  inline bool has_isbelongtoplayer() const;
  inline void clear_isbelongtoplayer();
  static const int kIsBelongToPlayerFieldNumber = 21;
  inline ::google::protobuf::int32 isbelongtoplayer() const;
  inline void set_isbelongtoplayer(::google::protobuf::int32 value);

  // optional int64 dropDefault = 22;
  inline bool has_dropdefault() const;
  inline void clear_dropdefault();
  static const int kDropDefaultFieldNumber = 22;
  inline ::google::protobuf::int64 dropdefault() const;
  inline void set_dropdefault(::google::protobuf::int64 value);

  // optional int64 dropBoxID = 23;
  inline bool has_dropboxid() const;
  inline void clear_dropboxid();
  static const int kDropBoxIDFieldNumber = 23;
  inline ::google::protobuf::int64 dropboxid() const;
  inline void set_dropboxid(::google::protobuf::int64 value);

  // optional int32 ifMultiple = 24;
  inline bool has_ifmultiple() const;
  inline void clear_ifmultiple();
  static const int kIfMultipleFieldNumber = 24;
  inline ::google::protobuf::int32 ifmultiple() const;
  inline void set_ifmultiple(::google::protobuf::int32 value);

  // optional int64 dropRool = 25;
  inline bool has_droprool() const;
  inline void clear_droprool();
  static const int kDropRoolFieldNumber = 25;
  inline ::google::protobuf::int64 droprool() const;
  inline void set_droprool(::google::protobuf::int64 value);

  // optional int64 lastBox = 26;
  inline bool has_lastbox() const;
  inline void clear_lastbox();
  static const int kLastBoxFieldNumber = 26;
  inline ::google::protobuf::int64 lastbox() const;
  inline void set_lastbox(::google::protobuf::int64 value);

  // optional int32 btnRange = 27;
  inline bool has_btnrange() const;
  inline void clear_btnrange();
  static const int kBtnRangeFieldNumber = 27;
  inline ::google::protobuf::int32 btnrange() const;
  inline void set_btnrange(::google::protobuf::int32 value);

  // optional int64 btnId = 28;
  inline bool has_btnid() const;
  inline void clear_btnid();
  static const int kBtnIdFieldNumber = 28;
  inline ::google::protobuf::int64 btnid() const;
  inline void set_btnid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.monstermonster)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_monstername();
  inline void clear_has_monstername();
  inline void set_has_functiontype();
  inline void clear_has_functiontype();
  inline void set_has_functionvalue();
  inline void clear_has_functionvalue();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_damageaddtype();
  inline void clear_has_damageaddtype();
  inline void set_has_monsterlv();
  inline void clear_has_monsterlv();
  inline void set_has_droplimit();
  inline void clear_has_droplimit();
  inline void set_has_displayid();
  inline void clear_has_displayid();
  inline void set_has_valuetype();
  inline void clear_has_valuetype();
  inline void set_has_aiid();
  inline void clear_has_aiid();
  inline void set_has_hpsectionnum();
  inline void clear_has_hpsectionnum();
  inline void set_has_showguild();
  inline void clear_has_showguild();
  inline void set_has_breedprob();
  inline void clear_has_breedprob();
  inline void set_has_breedmonid();
  inline void clear_has_breedmonid();
  inline void set_has_breedmonlive();
  inline void clear_has_breedmonlive();
  inline void set_has_itemcost();
  inline void clear_has_itemcost();
  inline void set_has_isbornactionon();
  inline void clear_has_isbornactionon();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_droptype();
  inline void clear_has_droptype();
  inline void set_has_isbelongtoplayer();
  inline void clear_has_isbelongtoplayer();
  inline void set_has_dropdefault();
  inline void clear_has_dropdefault();
  inline void set_has_dropboxid();
  inline void clear_has_dropboxid();
  inline void set_has_ifmultiple();
  inline void clear_has_ifmultiple();
  inline void set_has_droprool();
  inline void clear_has_droprool();
  inline void set_has_lastbox();
  inline void clear_has_lastbox();
  inline void set_has_btnrange();
  inline void clear_has_btnrange();
  inline void set_has_btnid();
  inline void clear_has_btnid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 monsterid_;
  ::std::string* monstername_;
  ::google::protobuf::int64 functionvalue_;
  ::google::protobuf::int32 functiontype_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 damageaddtype_;
  ::google::protobuf::int32 monsterlv_;
  ::google::protobuf::int64 displayid_;
  ::google::protobuf::int32 droplimit_;
  ::google::protobuf::int32 hpsectionnum_;
  ::google::protobuf::int64 valuetype_;
  ::google::protobuf::int64 aiid_;
  ::google::protobuf::int32 showguild_;
  ::google::protobuf::int32 breedprob_;
  ::google::protobuf::int64 breedmonid_;
  ::std::string* itemcost_;
  ::google::protobuf::int32 breedmonlive_;
  ::google::protobuf::int32 isbornactionon_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 droptype_;
  ::google::protobuf::int32 isbelongtoplayer_;
  ::google::protobuf::int64 dropdefault_;
  ::google::protobuf::int64 dropboxid_;
  ::google::protobuf::int64 droprool_;
  ::google::protobuf::int32 ifmultiple_;
  ::google::protobuf::int32 btnrange_;
  ::google::protobuf::int64 lastbox_;
  ::google::protobuf::int64 btnid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static monstermonster* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_monstermonster : public ::google::protobuf::Message {
 public:
  Sheet_monstermonster();
  virtual ~Sheet_monstermonster();

  Sheet_monstermonster(const Sheet_monstermonster& from);

  inline Sheet_monstermonster& operator=(const Sheet_monstermonster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_monstermonster& default_instance();

  void Swap(Sheet_monstermonster* other);

  // implements Message ----------------------------------------------

  Sheet_monstermonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_monstermonster& from);
  void MergeFrom(const Sheet_monstermonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.monstermonster monstermonster_List = 1;
  inline int monstermonster_list_size() const;
  inline void clear_monstermonster_list();
  static const int kMonstermonsterListFieldNumber = 1;
  inline const ::proto_ff::monstermonster& monstermonster_list(int index) const;
  inline ::proto_ff::monstermonster* mutable_monstermonster_list(int index);
  inline ::proto_ff::monstermonster* add_monstermonster_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::monstermonster >&
      monstermonster_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::monstermonster >*
      mutable_monstermonster_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_monstermonster)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::monstermonster > monstermonster_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static Sheet_monstermonster* default_instance_;
};
// -------------------------------------------------------------------

class monsterdisplayskillDesc : public ::google::protobuf::Message {
 public:
  monsterdisplayskillDesc();
  virtual ~monsterdisplayskillDesc();

  monsterdisplayskillDesc(const monsterdisplayskillDesc& from);

  inline monsterdisplayskillDesc& operator=(const monsterdisplayskillDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const monsterdisplayskillDesc& default_instance();

  void Swap(monsterdisplayskillDesc* other);

  // implements Message ----------------------------------------------

  monsterdisplayskillDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const monsterdisplayskillDesc& from);
  void MergeFrom(const monsterdisplayskillDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.monsterdisplayskillDesc)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static monsterdisplayskillDesc* default_instance_;
};
// -------------------------------------------------------------------

class monsterdisplay : public ::google::protobuf::Message {
 public:
  monsterdisplay();
  virtual ~monsterdisplay();

  monsterdisplay(const monsterdisplay& from);

  inline monsterdisplay& operator=(const monsterdisplay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const monsterdisplay& default_instance();

  void Swap(monsterdisplay* other);

  // implements Message ----------------------------------------------

  monsterdisplay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const monsterdisplay& from);
  void MergeFrom(const monsterdisplay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 displayID = 1;
  inline bool has_displayid() const;
  inline void clear_displayid();
  static const int kDisplayIDFieldNumber = 1;
  inline ::google::protobuf::int64 displayid() const;
  inline void set_displayid(::google::protobuf::int64 value);

  // optional int32 modelOffsetsX = 2;
  inline bool has_modeloffsetsx() const;
  inline void clear_modeloffsetsx();
  static const int kModelOffsetsXFieldNumber = 2;
  inline ::google::protobuf::int32 modeloffsetsx() const;
  inline void set_modeloffsetsx(::google::protobuf::int32 value);

  // optional int32 modelOffsetsY = 3;
  inline bool has_modeloffsetsy() const;
  inline void clear_modeloffsetsy();
  static const int kModelOffsetsYFieldNumber = 3;
  inline ::google::protobuf::int32 modeloffsetsy() const;
  inline void set_modeloffsetsy(::google::protobuf::int32 value);

  // optional int32 modelScale = 4;
  inline bool has_modelscale() const;
  inline void clear_modelscale();
  static const int kModelScaleFieldNumber = 4;
  inline ::google::protobuf::int32 modelscale() const;
  inline void set_modelscale(::google::protobuf::int32 value);

  // optional int32 modelRadius = 5;
  inline bool has_modelradius() const;
  inline void clear_modelradius();
  static const int kModelRadiusFieldNumber = 5;
  inline ::google::protobuf::int32 modelradius() const;
  inline void set_modelradius(::google::protobuf::int32 value);

  // optional int32 pathRadius = 6;
  inline bool has_pathradius() const;
  inline void clear_pathradius();
  static const int kPathRadiusFieldNumber = 6;
  inline ::google::protobuf::int32 pathradius() const;
  inline void set_pathradius(::google::protobuf::int32 value);

  // optional int32 collisionRadius = 7;
  inline bool has_collisionradius() const;
  inline void clear_collisionradius();
  static const int kCollisionRadiusFieldNumber = 7;
  inline ::google::protobuf::int32 collisionradius() const;
  inline void set_collisionradius(::google::protobuf::int32 value);

  // optional int32 rSpeed = 8;
  inline bool has_rspeed() const;
  inline void clear_rspeed();
  static const int kRSpeedFieldNumber = 8;
  inline ::google::protobuf::int32 rspeed() const;
  inline void set_rspeed(::google::protobuf::int32 value);

  // repeated .proto_ff.monsterdisplayskillDesc skill = 9;
  inline int skill_size() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 9;
  inline const ::proto_ff::monsterdisplayskillDesc& skill(int index) const;
  inline ::proto_ff::monsterdisplayskillDesc* mutable_skill(int index);
  inline ::proto_ff::monsterdisplayskillDesc* add_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::monsterdisplayskillDesc >&
      skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::monsterdisplayskillDesc >*
      mutable_skill();

  // @@protoc_insertion_point(class_scope:proto_ff.monsterdisplay)
 private:
  inline void set_has_displayid();
  inline void clear_has_displayid();
  inline void set_has_modeloffsetsx();
  inline void clear_has_modeloffsetsx();
  inline void set_has_modeloffsetsy();
  inline void clear_has_modeloffsetsy();
  inline void set_has_modelscale();
  inline void clear_has_modelscale();
  inline void set_has_modelradius();
  inline void clear_has_modelradius();
  inline void set_has_pathradius();
  inline void clear_has_pathradius();
  inline void set_has_collisionradius();
  inline void clear_has_collisionradius();
  inline void set_has_rspeed();
  inline void clear_has_rspeed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 displayid_;
  ::google::protobuf::int32 modeloffsetsx_;
  ::google::protobuf::int32 modeloffsetsy_;
  ::google::protobuf::int32 modelscale_;
  ::google::protobuf::int32 modelradius_;
  ::google::protobuf::int32 pathradius_;
  ::google::protobuf::int32 collisionradius_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::monsterdisplayskillDesc > skill_;
  ::google::protobuf::int32 rspeed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static monsterdisplay* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_monsterdisplay : public ::google::protobuf::Message {
 public:
  Sheet_monsterdisplay();
  virtual ~Sheet_monsterdisplay();

  Sheet_monsterdisplay(const Sheet_monsterdisplay& from);

  inline Sheet_monsterdisplay& operator=(const Sheet_monsterdisplay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_monsterdisplay& default_instance();

  void Swap(Sheet_monsterdisplay* other);

  // implements Message ----------------------------------------------

  Sheet_monsterdisplay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_monsterdisplay& from);
  void MergeFrom(const Sheet_monsterdisplay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.monsterdisplay monsterdisplay_List = 1;
  inline int monsterdisplay_list_size() const;
  inline void clear_monsterdisplay_list();
  static const int kMonsterdisplayListFieldNumber = 1;
  inline const ::proto_ff::monsterdisplay& monsterdisplay_list(int index) const;
  inline ::proto_ff::monsterdisplay* mutable_monsterdisplay_list(int index);
  inline ::proto_ff::monsterdisplay* add_monsterdisplay_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::monsterdisplay >&
      monsterdisplay_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::monsterdisplay >*
      mutable_monsterdisplay_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_monsterdisplay)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::monsterdisplay > monsterdisplay_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static Sheet_monsterdisplay* default_instance_;
};
// -------------------------------------------------------------------

class monstervalue : public ::google::protobuf::Message {
 public:
  monstervalue();
  virtual ~monstervalue();

  monstervalue(const monstervalue& from);

  inline monstervalue& operator=(const monstervalue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const monstervalue& default_instance();

  void Swap(monstervalue* other);

  // implements Message ----------------------------------------------

  monstervalue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const monstervalue& from);
  void MergeFrom(const monstervalue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 monsterLV = 3;
  inline bool has_monsterlv() const;
  inline void clear_monsterlv();
  static const int kMonsterLVFieldNumber = 3;
  inline ::google::protobuf::int32 monsterlv() const;
  inline void set_monsterlv(::google::protobuf::int32 value);

  // optional int64 maxHp = 4;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 4;
  inline ::google::protobuf::int64 maxhp() const;
  inline void set_maxhp(::google::protobuf::int64 value);

  // optional int64 attack = 5;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 5;
  inline ::google::protobuf::int64 attack() const;
  inline void set_attack(::google::protobuf::int64 value);

  // optional int64 defense = 6;
  inline bool has_defense() const;
  inline void clear_defense();
  static const int kDefenseFieldNumber = 6;
  inline ::google::protobuf::int64 defense() const;
  inline void set_defense(::google::protobuf::int64 value);

  // optional int64 pierce = 7;
  inline bool has_pierce() const;
  inline void clear_pierce();
  static const int kPierceFieldNumber = 7;
  inline ::google::protobuf::int64 pierce() const;
  inline void set_pierce(::google::protobuf::int64 value);

  // optional int64 divineAtt = 8;
  inline bool has_divineatt() const;
  inline void clear_divineatt();
  static const int kDivineAttFieldNumber = 8;
  inline ::google::protobuf::int64 divineatt() const;
  inline void set_divineatt(::google::protobuf::int64 value);

  // optional int64 divineDef = 9;
  inline bool has_divinedef() const;
  inline void clear_divinedef();
  static const int kDivineDefFieldNumber = 9;
  inline ::google::protobuf::int64 divinedef() const;
  inline void set_divinedef(::google::protobuf::int64 value);

  // optional int64 hitRate = 10;
  inline bool has_hitrate() const;
  inline void clear_hitrate();
  static const int kHitRateFieldNumber = 10;
  inline ::google::protobuf::int64 hitrate() const;
  inline void set_hitrate(::google::protobuf::int64 value);

  // optional int64 dodgeRate = 11;
  inline bool has_dodgerate() const;
  inline void clear_dodgerate();
  static const int kDodgeRateFieldNumber = 11;
  inline ::google::protobuf::int64 dodgerate() const;
  inline void set_dodgerate(::google::protobuf::int64 value);

  // optional int64 critRate = 12;
  inline bool has_critrate() const;
  inline void clear_critrate();
  static const int kCritRateFieldNumber = 12;
  inline ::google::protobuf::int64 critrate() const;
  inline void set_critrate(::google::protobuf::int64 value);

  // optional int64 toughRate = 13;
  inline bool has_toughrate() const;
  inline void clear_toughrate();
  static const int kToughRateFieldNumber = 13;
  inline ::google::protobuf::int64 toughrate() const;
  inline void set_toughrate(::google::protobuf::int64 value);

  // optional int64 killRate = 14;
  inline bool has_killrate() const;
  inline void clear_killrate();
  static const int kKillRateFieldNumber = 14;
  inline ::google::protobuf::int64 killrate() const;
  inline void set_killrate(::google::protobuf::int64 value);

  // optional int64 parryRate = 15;
  inline bool has_parryrate() const;
  inline void clear_parryrate();
  static const int kParryRateFieldNumber = 15;
  inline ::google::protobuf::int64 parryrate() const;
  inline void set_parryrate(::google::protobuf::int64 value);

  // optional int64 critDam = 16;
  inline bool has_critdam() const;
  inline void clear_critdam();
  static const int kCritDamFieldNumber = 16;
  inline ::google::protobuf::int64 critdam() const;
  inline void set_critdam(::google::protobuf::int64 value);

  // optional int64 critRedu = 17;
  inline bool has_critredu() const;
  inline void clear_critredu();
  static const int kCritReduFieldNumber = 17;
  inline ::google::protobuf::int64 critredu() const;
  inline void set_critredu(::google::protobuf::int64 value);

  // optional int64 killDam = 18;
  inline bool has_killdam() const;
  inline void clear_killdam();
  static const int kKillDamFieldNumber = 18;
  inline ::google::protobuf::int64 killdam() const;
  inline void set_killdam(::google::protobuf::int64 value);

  // optional int64 killRedu = 19;
  inline bool has_killredu() const;
  inline void clear_killredu();
  static const int kKillReduFieldNumber = 19;
  inline ::google::protobuf::int64 killredu() const;
  inline void set_killredu(::google::protobuf::int64 value);

  // optional int64 attDam = 20;
  inline bool has_attdam() const;
  inline void clear_attdam();
  static const int kAttDamFieldNumber = 20;
  inline ::google::protobuf::int64 attdam() const;
  inline void set_attdam(::google::protobuf::int64 value);

  // optional int64 attRedu = 21;
  inline bool has_attredu() const;
  inline void clear_attredu();
  static const int kAttReduFieldNumber = 21;
  inline ::google::protobuf::int64 attredu() const;
  inline void set_attredu(::google::protobuf::int64 value);

  // optional int64 fightingCapacity = 22;
  inline bool has_fightingcapacity() const;
  inline void clear_fightingcapacity();
  static const int kFightingCapacityFieldNumber = 22;
  inline ::google::protobuf::int64 fightingcapacity() const;
  inline void set_fightingcapacity(::google::protobuf::int64 value);

  // optional int32 isFightPress = 23;
  inline bool has_isfightpress() const;
  inline void clear_isfightpress();
  static const int kIsFightPressFieldNumber = 23;
  inline ::google::protobuf::int32 isfightpress() const;
  inline void set_isfightpress(::google::protobuf::int32 value);

  // optional int64 exp = 24;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 24;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.monstervalue)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_monsterlv();
  inline void clear_has_monsterlv();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_defense();
  inline void clear_has_defense();
  inline void set_has_pierce();
  inline void clear_has_pierce();
  inline void set_has_divineatt();
  inline void clear_has_divineatt();
  inline void set_has_divinedef();
  inline void clear_has_divinedef();
  inline void set_has_hitrate();
  inline void clear_has_hitrate();
  inline void set_has_dodgerate();
  inline void clear_has_dodgerate();
  inline void set_has_critrate();
  inline void clear_has_critrate();
  inline void set_has_toughrate();
  inline void clear_has_toughrate();
  inline void set_has_killrate();
  inline void clear_has_killrate();
  inline void set_has_parryrate();
  inline void clear_has_parryrate();
  inline void set_has_critdam();
  inline void clear_has_critdam();
  inline void set_has_critredu();
  inline void clear_has_critredu();
  inline void set_has_killdam();
  inline void clear_has_killdam();
  inline void set_has_killredu();
  inline void clear_has_killredu();
  inline void set_has_attdam();
  inline void clear_has_attdam();
  inline void set_has_attredu();
  inline void clear_has_attredu();
  inline void set_has_fightingcapacity();
  inline void clear_has_fightingcapacity();
  inline void set_has_isfightpress();
  inline void clear_has_isfightpress();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 monsterlv_;
  ::google::protobuf::int64 maxhp_;
  ::google::protobuf::int64 attack_;
  ::google::protobuf::int64 defense_;
  ::google::protobuf::int64 pierce_;
  ::google::protobuf::int64 divineatt_;
  ::google::protobuf::int64 divinedef_;
  ::google::protobuf::int64 hitrate_;
  ::google::protobuf::int64 dodgerate_;
  ::google::protobuf::int64 critrate_;
  ::google::protobuf::int64 toughrate_;
  ::google::protobuf::int64 killrate_;
  ::google::protobuf::int64 parryrate_;
  ::google::protobuf::int64 critdam_;
  ::google::protobuf::int64 critredu_;
  ::google::protobuf::int64 killdam_;
  ::google::protobuf::int64 killredu_;
  ::google::protobuf::int64 attdam_;
  ::google::protobuf::int64 attredu_;
  ::google::protobuf::int64 fightingcapacity_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 isfightpress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static monstervalue* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_monstervalue : public ::google::protobuf::Message {
 public:
  Sheet_monstervalue();
  virtual ~Sheet_monstervalue();

  Sheet_monstervalue(const Sheet_monstervalue& from);

  inline Sheet_monstervalue& operator=(const Sheet_monstervalue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_monstervalue& default_instance();

  void Swap(Sheet_monstervalue* other);

  // implements Message ----------------------------------------------

  Sheet_monstervalue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_monstervalue& from);
  void MergeFrom(const Sheet_monstervalue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.monstervalue monstervalue_List = 1;
  inline int monstervalue_list_size() const;
  inline void clear_monstervalue_list();
  static const int kMonstervalueListFieldNumber = 1;
  inline const ::proto_ff::monstervalue& monstervalue_list(int index) const;
  inline ::proto_ff::monstervalue* mutable_monstervalue_list(int index);
  inline ::proto_ff::monstervalue* add_monstervalue_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::monstervalue >&
      monstervalue_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::monstervalue >*
      mutable_monstervalue_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_monstervalue)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::monstervalue > monstervalue_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_monster_2eproto();
  friend void protobuf_AssignDesc_monster_2eproto();
  friend void protobuf_ShutdownFile_monster_2eproto();

  void InitAsDefaultInstance();
  static Sheet_monstervalue* default_instance_;
};
// ===================================================================


// ===================================================================

// monstermonster

// optional int64 monsterID = 1;
inline bool monstermonster::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void monstermonster::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void monstermonster::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void monstermonster::clear_monsterid() {
  monsterid_ = GOOGLE_LONGLONG(0);
  clear_has_monsterid();
}
inline ::google::protobuf::int64 monstermonster::monsterid() const {
  return monsterid_;
}
inline void monstermonster::set_monsterid(::google::protobuf::int64 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional string monsterName = 2;
inline bool monstermonster::has_monstername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void monstermonster::set_has_monstername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void monstermonster::clear_has_monstername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void monstermonster::clear_monstername() {
  if (monstername_ != &::google::protobuf::internal::kEmptyString) {
    monstername_->clear();
  }
  clear_has_monstername();
}
inline const ::std::string& monstermonster::monstername() const {
  return *monstername_;
}
inline void monstermonster::set_monstername(const ::std::string& value) {
  set_has_monstername();
  if (monstername_ == &::google::protobuf::internal::kEmptyString) {
    monstername_ = new ::std::string;
  }
  monstername_->assign(value);
}
inline void monstermonster::set_monstername(const char* value) {
  set_has_monstername();
  if (monstername_ == &::google::protobuf::internal::kEmptyString) {
    monstername_ = new ::std::string;
  }
  monstername_->assign(value);
}
inline void monstermonster::set_monstername(const char* value, size_t size) {
  set_has_monstername();
  if (monstername_ == &::google::protobuf::internal::kEmptyString) {
    monstername_ = new ::std::string;
  }
  monstername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* monstermonster::mutable_monstername() {
  set_has_monstername();
  if (monstername_ == &::google::protobuf::internal::kEmptyString) {
    monstername_ = new ::std::string;
  }
  return monstername_;
}
inline ::std::string* monstermonster::release_monstername() {
  clear_has_monstername();
  if (monstername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = monstername_;
    monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void monstermonster::set_allocated_monstername(::std::string* monstername) {
  if (monstername_ != &::google::protobuf::internal::kEmptyString) {
    delete monstername_;
  }
  if (monstername) {
    set_has_monstername();
    monstername_ = monstername;
  } else {
    clear_has_monstername();
    monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 functionType = 3;
inline bool monstermonster::has_functiontype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void monstermonster::set_has_functiontype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void monstermonster::clear_has_functiontype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void monstermonster::clear_functiontype() {
  functiontype_ = 0;
  clear_has_functiontype();
}
inline ::google::protobuf::int32 monstermonster::functiontype() const {
  return functiontype_;
}
inline void monstermonster::set_functiontype(::google::protobuf::int32 value) {
  set_has_functiontype();
  functiontype_ = value;
}

// optional int64 functionValue = 4;
inline bool monstermonster::has_functionvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void monstermonster::set_has_functionvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void monstermonster::clear_has_functionvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void monstermonster::clear_functionvalue() {
  functionvalue_ = GOOGLE_LONGLONG(0);
  clear_has_functionvalue();
}
inline ::google::protobuf::int64 monstermonster::functionvalue() const {
  return functionvalue_;
}
inline void monstermonster::set_functionvalue(::google::protobuf::int64 value) {
  set_has_functionvalue();
  functionvalue_ = value;
}

// optional int32 profession = 5;
inline bool monstermonster::has_profession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void monstermonster::set_has_profession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void monstermonster::clear_has_profession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void monstermonster::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 monstermonster::profession() const {
  return profession_;
}
inline void monstermonster::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 damageAddType = 6;
inline bool monstermonster::has_damageaddtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void monstermonster::set_has_damageaddtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void monstermonster::clear_has_damageaddtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void monstermonster::clear_damageaddtype() {
  damageaddtype_ = 0;
  clear_has_damageaddtype();
}
inline ::google::protobuf::int32 monstermonster::damageaddtype() const {
  return damageaddtype_;
}
inline void monstermonster::set_damageaddtype(::google::protobuf::int32 value) {
  set_has_damageaddtype();
  damageaddtype_ = value;
}

// optional int32 monsterLV = 7;
inline bool monstermonster::has_monsterlv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void monstermonster::set_has_monsterlv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void monstermonster::clear_has_monsterlv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void monstermonster::clear_monsterlv() {
  monsterlv_ = 0;
  clear_has_monsterlv();
}
inline ::google::protobuf::int32 monstermonster::monsterlv() const {
  return monsterlv_;
}
inline void monstermonster::set_monsterlv(::google::protobuf::int32 value) {
  set_has_monsterlv();
  monsterlv_ = value;
}

// optional int32 droplimit = 8;
inline bool monstermonster::has_droplimit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void monstermonster::set_has_droplimit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void monstermonster::clear_has_droplimit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void monstermonster::clear_droplimit() {
  droplimit_ = 0;
  clear_has_droplimit();
}
inline ::google::protobuf::int32 monstermonster::droplimit() const {
  return droplimit_;
}
inline void monstermonster::set_droplimit(::google::protobuf::int32 value) {
  set_has_droplimit();
  droplimit_ = value;
}

// optional int64 displayID = 9;
inline bool monstermonster::has_displayid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void monstermonster::set_has_displayid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void monstermonster::clear_has_displayid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void monstermonster::clear_displayid() {
  displayid_ = GOOGLE_LONGLONG(0);
  clear_has_displayid();
}
inline ::google::protobuf::int64 monstermonster::displayid() const {
  return displayid_;
}
inline void monstermonster::set_displayid(::google::protobuf::int64 value) {
  set_has_displayid();
  displayid_ = value;
}

// optional int64 valuetype = 10;
inline bool monstermonster::has_valuetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void monstermonster::set_has_valuetype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void monstermonster::clear_has_valuetype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void monstermonster::clear_valuetype() {
  valuetype_ = GOOGLE_LONGLONG(0);
  clear_has_valuetype();
}
inline ::google::protobuf::int64 monstermonster::valuetype() const {
  return valuetype_;
}
inline void monstermonster::set_valuetype(::google::protobuf::int64 value) {
  set_has_valuetype();
  valuetype_ = value;
}

// optional int64 aiId = 11;
inline bool monstermonster::has_aiid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void monstermonster::set_has_aiid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void monstermonster::clear_has_aiid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void monstermonster::clear_aiid() {
  aiid_ = GOOGLE_LONGLONG(0);
  clear_has_aiid();
}
inline ::google::protobuf::int64 monstermonster::aiid() const {
  return aiid_;
}
inline void monstermonster::set_aiid(::google::protobuf::int64 value) {
  set_has_aiid();
  aiid_ = value;
}

// optional int32 hpSectionNum = 12;
inline bool monstermonster::has_hpsectionnum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void monstermonster::set_has_hpsectionnum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void monstermonster::clear_has_hpsectionnum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void monstermonster::clear_hpsectionnum() {
  hpsectionnum_ = 0;
  clear_has_hpsectionnum();
}
inline ::google::protobuf::int32 monstermonster::hpsectionnum() const {
  return hpsectionnum_;
}
inline void monstermonster::set_hpsectionnum(::google::protobuf::int32 value) {
  set_has_hpsectionnum();
  hpsectionnum_ = value;
}

// optional int32 showGuild = 13;
inline bool monstermonster::has_showguild() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void monstermonster::set_has_showguild() {
  _has_bits_[0] |= 0x00001000u;
}
inline void monstermonster::clear_has_showguild() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void monstermonster::clear_showguild() {
  showguild_ = 0;
  clear_has_showguild();
}
inline ::google::protobuf::int32 monstermonster::showguild() const {
  return showguild_;
}
inline void monstermonster::set_showguild(::google::protobuf::int32 value) {
  set_has_showguild();
  showguild_ = value;
}

// optional int32 breedProb = 14;
inline bool monstermonster::has_breedprob() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void monstermonster::set_has_breedprob() {
  _has_bits_[0] |= 0x00002000u;
}
inline void monstermonster::clear_has_breedprob() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void monstermonster::clear_breedprob() {
  breedprob_ = 0;
  clear_has_breedprob();
}
inline ::google::protobuf::int32 monstermonster::breedprob() const {
  return breedprob_;
}
inline void monstermonster::set_breedprob(::google::protobuf::int32 value) {
  set_has_breedprob();
  breedprob_ = value;
}

// optional int64 breedMonID = 15;
inline bool monstermonster::has_breedmonid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void monstermonster::set_has_breedmonid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void monstermonster::clear_has_breedmonid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void monstermonster::clear_breedmonid() {
  breedmonid_ = GOOGLE_LONGLONG(0);
  clear_has_breedmonid();
}
inline ::google::protobuf::int64 monstermonster::breedmonid() const {
  return breedmonid_;
}
inline void monstermonster::set_breedmonid(::google::protobuf::int64 value) {
  set_has_breedmonid();
  breedmonid_ = value;
}

// optional int32 breedMonLive = 16;
inline bool monstermonster::has_breedmonlive() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void monstermonster::set_has_breedmonlive() {
  _has_bits_[0] |= 0x00008000u;
}
inline void monstermonster::clear_has_breedmonlive() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void monstermonster::clear_breedmonlive() {
  breedmonlive_ = 0;
  clear_has_breedmonlive();
}
inline ::google::protobuf::int32 monstermonster::breedmonlive() const {
  return breedmonlive_;
}
inline void monstermonster::set_breedmonlive(::google::protobuf::int32 value) {
  set_has_breedmonlive();
  breedmonlive_ = value;
}

// optional string itemCost = 17;
inline bool monstermonster::has_itemcost() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void monstermonster::set_has_itemcost() {
  _has_bits_[0] |= 0x00010000u;
}
inline void monstermonster::clear_has_itemcost() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void monstermonster::clear_itemcost() {
  if (itemcost_ != &::google::protobuf::internal::kEmptyString) {
    itemcost_->clear();
  }
  clear_has_itemcost();
}
inline const ::std::string& monstermonster::itemcost() const {
  return *itemcost_;
}
inline void monstermonster::set_itemcost(const ::std::string& value) {
  set_has_itemcost();
  if (itemcost_ == &::google::protobuf::internal::kEmptyString) {
    itemcost_ = new ::std::string;
  }
  itemcost_->assign(value);
}
inline void monstermonster::set_itemcost(const char* value) {
  set_has_itemcost();
  if (itemcost_ == &::google::protobuf::internal::kEmptyString) {
    itemcost_ = new ::std::string;
  }
  itemcost_->assign(value);
}
inline void monstermonster::set_itemcost(const char* value, size_t size) {
  set_has_itemcost();
  if (itemcost_ == &::google::protobuf::internal::kEmptyString) {
    itemcost_ = new ::std::string;
  }
  itemcost_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* monstermonster::mutable_itemcost() {
  set_has_itemcost();
  if (itemcost_ == &::google::protobuf::internal::kEmptyString) {
    itemcost_ = new ::std::string;
  }
  return itemcost_;
}
inline ::std::string* monstermonster::release_itemcost() {
  clear_has_itemcost();
  if (itemcost_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemcost_;
    itemcost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void monstermonster::set_allocated_itemcost(::std::string* itemcost) {
  if (itemcost_ != &::google::protobuf::internal::kEmptyString) {
    delete itemcost_;
  }
  if (itemcost) {
    set_has_itemcost();
    itemcost_ = itemcost;
  } else {
    clear_has_itemcost();
    itemcost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isBornActionOn = 18;
inline bool monstermonster::has_isbornactionon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void monstermonster::set_has_isbornactionon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void monstermonster::clear_has_isbornactionon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void monstermonster::clear_isbornactionon() {
  isbornactionon_ = 0;
  clear_has_isbornactionon();
}
inline ::google::protobuf::int32 monstermonster::isbornactionon() const {
  return isbornactionon_;
}
inline void monstermonster::set_isbornactionon(::google::protobuf::int32 value) {
  set_has_isbornactionon();
  isbornactionon_ = value;
}

// optional int64 exp = 19;
inline bool monstermonster::has_exp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void monstermonster::set_has_exp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void monstermonster::clear_has_exp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void monstermonster::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 monstermonster::exp() const {
  return exp_;
}
inline void monstermonster::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 dropType = 20;
inline bool monstermonster::has_droptype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void monstermonster::set_has_droptype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void monstermonster::clear_has_droptype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void monstermonster::clear_droptype() {
  droptype_ = 0;
  clear_has_droptype();
}
inline ::google::protobuf::int32 monstermonster::droptype() const {
  return droptype_;
}
inline void monstermonster::set_droptype(::google::protobuf::int32 value) {
  set_has_droptype();
  droptype_ = value;
}

// optional int32 isBelongToPlayer = 21;
inline bool monstermonster::has_isbelongtoplayer() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void monstermonster::set_has_isbelongtoplayer() {
  _has_bits_[0] |= 0x00100000u;
}
inline void monstermonster::clear_has_isbelongtoplayer() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void monstermonster::clear_isbelongtoplayer() {
  isbelongtoplayer_ = 0;
  clear_has_isbelongtoplayer();
}
inline ::google::protobuf::int32 monstermonster::isbelongtoplayer() const {
  return isbelongtoplayer_;
}
inline void monstermonster::set_isbelongtoplayer(::google::protobuf::int32 value) {
  set_has_isbelongtoplayer();
  isbelongtoplayer_ = value;
}

// optional int64 dropDefault = 22;
inline bool monstermonster::has_dropdefault() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void monstermonster::set_has_dropdefault() {
  _has_bits_[0] |= 0x00200000u;
}
inline void monstermonster::clear_has_dropdefault() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void monstermonster::clear_dropdefault() {
  dropdefault_ = GOOGLE_LONGLONG(0);
  clear_has_dropdefault();
}
inline ::google::protobuf::int64 monstermonster::dropdefault() const {
  return dropdefault_;
}
inline void monstermonster::set_dropdefault(::google::protobuf::int64 value) {
  set_has_dropdefault();
  dropdefault_ = value;
}

// optional int64 dropBoxID = 23;
inline bool monstermonster::has_dropboxid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void monstermonster::set_has_dropboxid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void monstermonster::clear_has_dropboxid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void monstermonster::clear_dropboxid() {
  dropboxid_ = GOOGLE_LONGLONG(0);
  clear_has_dropboxid();
}
inline ::google::protobuf::int64 monstermonster::dropboxid() const {
  return dropboxid_;
}
inline void monstermonster::set_dropboxid(::google::protobuf::int64 value) {
  set_has_dropboxid();
  dropboxid_ = value;
}

// optional int32 ifMultiple = 24;
inline bool monstermonster::has_ifmultiple() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void monstermonster::set_has_ifmultiple() {
  _has_bits_[0] |= 0x00800000u;
}
inline void monstermonster::clear_has_ifmultiple() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void monstermonster::clear_ifmultiple() {
  ifmultiple_ = 0;
  clear_has_ifmultiple();
}
inline ::google::protobuf::int32 monstermonster::ifmultiple() const {
  return ifmultiple_;
}
inline void monstermonster::set_ifmultiple(::google::protobuf::int32 value) {
  set_has_ifmultiple();
  ifmultiple_ = value;
}

// optional int64 dropRool = 25;
inline bool monstermonster::has_droprool() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void monstermonster::set_has_droprool() {
  _has_bits_[0] |= 0x01000000u;
}
inline void monstermonster::clear_has_droprool() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void monstermonster::clear_droprool() {
  droprool_ = GOOGLE_LONGLONG(0);
  clear_has_droprool();
}
inline ::google::protobuf::int64 monstermonster::droprool() const {
  return droprool_;
}
inline void monstermonster::set_droprool(::google::protobuf::int64 value) {
  set_has_droprool();
  droprool_ = value;
}

// optional int64 lastBox = 26;
inline bool monstermonster::has_lastbox() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void monstermonster::set_has_lastbox() {
  _has_bits_[0] |= 0x02000000u;
}
inline void monstermonster::clear_has_lastbox() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void monstermonster::clear_lastbox() {
  lastbox_ = GOOGLE_LONGLONG(0);
  clear_has_lastbox();
}
inline ::google::protobuf::int64 monstermonster::lastbox() const {
  return lastbox_;
}
inline void monstermonster::set_lastbox(::google::protobuf::int64 value) {
  set_has_lastbox();
  lastbox_ = value;
}

// optional int32 btnRange = 27;
inline bool monstermonster::has_btnrange() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void monstermonster::set_has_btnrange() {
  _has_bits_[0] |= 0x04000000u;
}
inline void monstermonster::clear_has_btnrange() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void monstermonster::clear_btnrange() {
  btnrange_ = 0;
  clear_has_btnrange();
}
inline ::google::protobuf::int32 monstermonster::btnrange() const {
  return btnrange_;
}
inline void monstermonster::set_btnrange(::google::protobuf::int32 value) {
  set_has_btnrange();
  btnrange_ = value;
}

// optional int64 btnId = 28;
inline bool monstermonster::has_btnid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void monstermonster::set_has_btnid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void monstermonster::clear_has_btnid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void monstermonster::clear_btnid() {
  btnid_ = GOOGLE_LONGLONG(0);
  clear_has_btnid();
}
inline ::google::protobuf::int64 monstermonster::btnid() const {
  return btnid_;
}
inline void monstermonster::set_btnid(::google::protobuf::int64 value) {
  set_has_btnid();
  btnid_ = value;
}

// -------------------------------------------------------------------

// Sheet_monstermonster

// repeated .proto_ff.monstermonster monstermonster_List = 1;
inline int Sheet_monstermonster::monstermonster_list_size() const {
  return monstermonster_list_.size();
}
inline void Sheet_monstermonster::clear_monstermonster_list() {
  monstermonster_list_.Clear();
}
inline const ::proto_ff::monstermonster& Sheet_monstermonster::monstermonster_list(int index) const {
  return monstermonster_list_.Get(index);
}
inline ::proto_ff::monstermonster* Sheet_monstermonster::mutable_monstermonster_list(int index) {
  return monstermonster_list_.Mutable(index);
}
inline ::proto_ff::monstermonster* Sheet_monstermonster::add_monstermonster_list() {
  return monstermonster_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::monstermonster >&
Sheet_monstermonster::monstermonster_list() const {
  return monstermonster_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::monstermonster >*
Sheet_monstermonster::mutable_monstermonster_list() {
  return &monstermonster_list_;
}

// -------------------------------------------------------------------

// monsterdisplayskillDesc

// optional int64 id = 1;
inline bool monsterdisplayskillDesc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void monsterdisplayskillDesc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void monsterdisplayskillDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void monsterdisplayskillDesc::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 monsterdisplayskillDesc::id() const {
  return id_;
}
inline void monsterdisplayskillDesc::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// monsterdisplay

// optional int64 displayID = 1;
inline bool monsterdisplay::has_displayid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void monsterdisplay::set_has_displayid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void monsterdisplay::clear_has_displayid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void monsterdisplay::clear_displayid() {
  displayid_ = GOOGLE_LONGLONG(0);
  clear_has_displayid();
}
inline ::google::protobuf::int64 monsterdisplay::displayid() const {
  return displayid_;
}
inline void monsterdisplay::set_displayid(::google::protobuf::int64 value) {
  set_has_displayid();
  displayid_ = value;
}

// optional int32 modelOffsetsX = 2;
inline bool monsterdisplay::has_modeloffsetsx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void monsterdisplay::set_has_modeloffsetsx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void monsterdisplay::clear_has_modeloffsetsx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void monsterdisplay::clear_modeloffsetsx() {
  modeloffsetsx_ = 0;
  clear_has_modeloffsetsx();
}
inline ::google::protobuf::int32 monsterdisplay::modeloffsetsx() const {
  return modeloffsetsx_;
}
inline void monsterdisplay::set_modeloffsetsx(::google::protobuf::int32 value) {
  set_has_modeloffsetsx();
  modeloffsetsx_ = value;
}

// optional int32 modelOffsetsY = 3;
inline bool monsterdisplay::has_modeloffsetsy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void monsterdisplay::set_has_modeloffsetsy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void monsterdisplay::clear_has_modeloffsetsy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void monsterdisplay::clear_modeloffsetsy() {
  modeloffsetsy_ = 0;
  clear_has_modeloffsetsy();
}
inline ::google::protobuf::int32 monsterdisplay::modeloffsetsy() const {
  return modeloffsetsy_;
}
inline void monsterdisplay::set_modeloffsetsy(::google::protobuf::int32 value) {
  set_has_modeloffsetsy();
  modeloffsetsy_ = value;
}

// optional int32 modelScale = 4;
inline bool monsterdisplay::has_modelscale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void monsterdisplay::set_has_modelscale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void monsterdisplay::clear_has_modelscale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void monsterdisplay::clear_modelscale() {
  modelscale_ = 0;
  clear_has_modelscale();
}
inline ::google::protobuf::int32 monsterdisplay::modelscale() const {
  return modelscale_;
}
inline void monsterdisplay::set_modelscale(::google::protobuf::int32 value) {
  set_has_modelscale();
  modelscale_ = value;
}

// optional int32 modelRadius = 5;
inline bool monsterdisplay::has_modelradius() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void monsterdisplay::set_has_modelradius() {
  _has_bits_[0] |= 0x00000010u;
}
inline void monsterdisplay::clear_has_modelradius() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void monsterdisplay::clear_modelradius() {
  modelradius_ = 0;
  clear_has_modelradius();
}
inline ::google::protobuf::int32 monsterdisplay::modelradius() const {
  return modelradius_;
}
inline void monsterdisplay::set_modelradius(::google::protobuf::int32 value) {
  set_has_modelradius();
  modelradius_ = value;
}

// optional int32 pathRadius = 6;
inline bool monsterdisplay::has_pathradius() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void monsterdisplay::set_has_pathradius() {
  _has_bits_[0] |= 0x00000020u;
}
inline void monsterdisplay::clear_has_pathradius() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void monsterdisplay::clear_pathradius() {
  pathradius_ = 0;
  clear_has_pathradius();
}
inline ::google::protobuf::int32 monsterdisplay::pathradius() const {
  return pathradius_;
}
inline void monsterdisplay::set_pathradius(::google::protobuf::int32 value) {
  set_has_pathradius();
  pathradius_ = value;
}

// optional int32 collisionRadius = 7;
inline bool monsterdisplay::has_collisionradius() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void monsterdisplay::set_has_collisionradius() {
  _has_bits_[0] |= 0x00000040u;
}
inline void monsterdisplay::clear_has_collisionradius() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void monsterdisplay::clear_collisionradius() {
  collisionradius_ = 0;
  clear_has_collisionradius();
}
inline ::google::protobuf::int32 monsterdisplay::collisionradius() const {
  return collisionradius_;
}
inline void monsterdisplay::set_collisionradius(::google::protobuf::int32 value) {
  set_has_collisionradius();
  collisionradius_ = value;
}

// optional int32 rSpeed = 8;
inline bool monsterdisplay::has_rspeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void monsterdisplay::set_has_rspeed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void monsterdisplay::clear_has_rspeed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void monsterdisplay::clear_rspeed() {
  rspeed_ = 0;
  clear_has_rspeed();
}
inline ::google::protobuf::int32 monsterdisplay::rspeed() const {
  return rspeed_;
}
inline void monsterdisplay::set_rspeed(::google::protobuf::int32 value) {
  set_has_rspeed();
  rspeed_ = value;
}

// repeated .proto_ff.monsterdisplayskillDesc skill = 9;
inline int monsterdisplay::skill_size() const {
  return skill_.size();
}
inline void monsterdisplay::clear_skill() {
  skill_.Clear();
}
inline const ::proto_ff::monsterdisplayskillDesc& monsterdisplay::skill(int index) const {
  return skill_.Get(index);
}
inline ::proto_ff::monsterdisplayskillDesc* monsterdisplay::mutable_skill(int index) {
  return skill_.Mutable(index);
}
inline ::proto_ff::monsterdisplayskillDesc* monsterdisplay::add_skill() {
  return skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::monsterdisplayskillDesc >&
monsterdisplay::skill() const {
  return skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::monsterdisplayskillDesc >*
monsterdisplay::mutable_skill() {
  return &skill_;
}

// -------------------------------------------------------------------

// Sheet_monsterdisplay

// repeated .proto_ff.monsterdisplay monsterdisplay_List = 1;
inline int Sheet_monsterdisplay::monsterdisplay_list_size() const {
  return monsterdisplay_list_.size();
}
inline void Sheet_monsterdisplay::clear_monsterdisplay_list() {
  monsterdisplay_list_.Clear();
}
inline const ::proto_ff::monsterdisplay& Sheet_monsterdisplay::monsterdisplay_list(int index) const {
  return monsterdisplay_list_.Get(index);
}
inline ::proto_ff::monsterdisplay* Sheet_monsterdisplay::mutable_monsterdisplay_list(int index) {
  return monsterdisplay_list_.Mutable(index);
}
inline ::proto_ff::monsterdisplay* Sheet_monsterdisplay::add_monsterdisplay_list() {
  return monsterdisplay_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::monsterdisplay >&
Sheet_monsterdisplay::monsterdisplay_list() const {
  return monsterdisplay_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::monsterdisplay >*
Sheet_monsterdisplay::mutable_monsterdisplay_list() {
  return &monsterdisplay_list_;
}

// -------------------------------------------------------------------

// monstervalue

// optional int64 ID = 1;
inline bool monstervalue::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void monstervalue::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void monstervalue::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void monstervalue::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 monstervalue::id() const {
  return id_;
}
inline void monstervalue::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool monstervalue::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void monstervalue::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void monstervalue::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void monstervalue::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 monstervalue::type() const {
  return type_;
}
inline void monstervalue::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 monsterLV = 3;
inline bool monstervalue::has_monsterlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void monstervalue::set_has_monsterlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void monstervalue::clear_has_monsterlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void monstervalue::clear_monsterlv() {
  monsterlv_ = 0;
  clear_has_monsterlv();
}
inline ::google::protobuf::int32 monstervalue::monsterlv() const {
  return monsterlv_;
}
inline void monstervalue::set_monsterlv(::google::protobuf::int32 value) {
  set_has_monsterlv();
  monsterlv_ = value;
}

// optional int64 maxHp = 4;
inline bool monstervalue::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void monstervalue::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void monstervalue::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void monstervalue::clear_maxhp() {
  maxhp_ = GOOGLE_LONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::int64 monstervalue::maxhp() const {
  return maxhp_;
}
inline void monstervalue::set_maxhp(::google::protobuf::int64 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional int64 attack = 5;
inline bool monstervalue::has_attack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void monstervalue::set_has_attack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void monstervalue::clear_has_attack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void monstervalue::clear_attack() {
  attack_ = GOOGLE_LONGLONG(0);
  clear_has_attack();
}
inline ::google::protobuf::int64 monstervalue::attack() const {
  return attack_;
}
inline void monstervalue::set_attack(::google::protobuf::int64 value) {
  set_has_attack();
  attack_ = value;
}

// optional int64 defense = 6;
inline bool monstervalue::has_defense() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void monstervalue::set_has_defense() {
  _has_bits_[0] |= 0x00000020u;
}
inline void monstervalue::clear_has_defense() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void monstervalue::clear_defense() {
  defense_ = GOOGLE_LONGLONG(0);
  clear_has_defense();
}
inline ::google::protobuf::int64 monstervalue::defense() const {
  return defense_;
}
inline void monstervalue::set_defense(::google::protobuf::int64 value) {
  set_has_defense();
  defense_ = value;
}

// optional int64 pierce = 7;
inline bool monstervalue::has_pierce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void monstervalue::set_has_pierce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void monstervalue::clear_has_pierce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void monstervalue::clear_pierce() {
  pierce_ = GOOGLE_LONGLONG(0);
  clear_has_pierce();
}
inline ::google::protobuf::int64 monstervalue::pierce() const {
  return pierce_;
}
inline void monstervalue::set_pierce(::google::protobuf::int64 value) {
  set_has_pierce();
  pierce_ = value;
}

// optional int64 divineAtt = 8;
inline bool monstervalue::has_divineatt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void monstervalue::set_has_divineatt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void monstervalue::clear_has_divineatt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void monstervalue::clear_divineatt() {
  divineatt_ = GOOGLE_LONGLONG(0);
  clear_has_divineatt();
}
inline ::google::protobuf::int64 monstervalue::divineatt() const {
  return divineatt_;
}
inline void monstervalue::set_divineatt(::google::protobuf::int64 value) {
  set_has_divineatt();
  divineatt_ = value;
}

// optional int64 divineDef = 9;
inline bool monstervalue::has_divinedef() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void monstervalue::set_has_divinedef() {
  _has_bits_[0] |= 0x00000100u;
}
inline void monstervalue::clear_has_divinedef() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void monstervalue::clear_divinedef() {
  divinedef_ = GOOGLE_LONGLONG(0);
  clear_has_divinedef();
}
inline ::google::protobuf::int64 monstervalue::divinedef() const {
  return divinedef_;
}
inline void monstervalue::set_divinedef(::google::protobuf::int64 value) {
  set_has_divinedef();
  divinedef_ = value;
}

// optional int64 hitRate = 10;
inline bool monstervalue::has_hitrate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void monstervalue::set_has_hitrate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void monstervalue::clear_has_hitrate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void monstervalue::clear_hitrate() {
  hitrate_ = GOOGLE_LONGLONG(0);
  clear_has_hitrate();
}
inline ::google::protobuf::int64 monstervalue::hitrate() const {
  return hitrate_;
}
inline void monstervalue::set_hitrate(::google::protobuf::int64 value) {
  set_has_hitrate();
  hitrate_ = value;
}

// optional int64 dodgeRate = 11;
inline bool monstervalue::has_dodgerate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void monstervalue::set_has_dodgerate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void monstervalue::clear_has_dodgerate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void monstervalue::clear_dodgerate() {
  dodgerate_ = GOOGLE_LONGLONG(0);
  clear_has_dodgerate();
}
inline ::google::protobuf::int64 monstervalue::dodgerate() const {
  return dodgerate_;
}
inline void monstervalue::set_dodgerate(::google::protobuf::int64 value) {
  set_has_dodgerate();
  dodgerate_ = value;
}

// optional int64 critRate = 12;
inline bool monstervalue::has_critrate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void monstervalue::set_has_critrate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void monstervalue::clear_has_critrate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void monstervalue::clear_critrate() {
  critrate_ = GOOGLE_LONGLONG(0);
  clear_has_critrate();
}
inline ::google::protobuf::int64 monstervalue::critrate() const {
  return critrate_;
}
inline void monstervalue::set_critrate(::google::protobuf::int64 value) {
  set_has_critrate();
  critrate_ = value;
}

// optional int64 toughRate = 13;
inline bool monstervalue::has_toughrate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void monstervalue::set_has_toughrate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void monstervalue::clear_has_toughrate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void monstervalue::clear_toughrate() {
  toughrate_ = GOOGLE_LONGLONG(0);
  clear_has_toughrate();
}
inline ::google::protobuf::int64 monstervalue::toughrate() const {
  return toughrate_;
}
inline void monstervalue::set_toughrate(::google::protobuf::int64 value) {
  set_has_toughrate();
  toughrate_ = value;
}

// optional int64 killRate = 14;
inline bool monstervalue::has_killrate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void monstervalue::set_has_killrate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void monstervalue::clear_has_killrate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void monstervalue::clear_killrate() {
  killrate_ = GOOGLE_LONGLONG(0);
  clear_has_killrate();
}
inline ::google::protobuf::int64 monstervalue::killrate() const {
  return killrate_;
}
inline void monstervalue::set_killrate(::google::protobuf::int64 value) {
  set_has_killrate();
  killrate_ = value;
}

// optional int64 parryRate = 15;
inline bool monstervalue::has_parryrate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void monstervalue::set_has_parryrate() {
  _has_bits_[0] |= 0x00004000u;
}
inline void monstervalue::clear_has_parryrate() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void monstervalue::clear_parryrate() {
  parryrate_ = GOOGLE_LONGLONG(0);
  clear_has_parryrate();
}
inline ::google::protobuf::int64 monstervalue::parryrate() const {
  return parryrate_;
}
inline void monstervalue::set_parryrate(::google::protobuf::int64 value) {
  set_has_parryrate();
  parryrate_ = value;
}

// optional int64 critDam = 16;
inline bool monstervalue::has_critdam() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void monstervalue::set_has_critdam() {
  _has_bits_[0] |= 0x00008000u;
}
inline void monstervalue::clear_has_critdam() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void monstervalue::clear_critdam() {
  critdam_ = GOOGLE_LONGLONG(0);
  clear_has_critdam();
}
inline ::google::protobuf::int64 monstervalue::critdam() const {
  return critdam_;
}
inline void monstervalue::set_critdam(::google::protobuf::int64 value) {
  set_has_critdam();
  critdam_ = value;
}

// optional int64 critRedu = 17;
inline bool monstervalue::has_critredu() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void monstervalue::set_has_critredu() {
  _has_bits_[0] |= 0x00010000u;
}
inline void monstervalue::clear_has_critredu() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void monstervalue::clear_critredu() {
  critredu_ = GOOGLE_LONGLONG(0);
  clear_has_critredu();
}
inline ::google::protobuf::int64 monstervalue::critredu() const {
  return critredu_;
}
inline void monstervalue::set_critredu(::google::protobuf::int64 value) {
  set_has_critredu();
  critredu_ = value;
}

// optional int64 killDam = 18;
inline bool monstervalue::has_killdam() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void monstervalue::set_has_killdam() {
  _has_bits_[0] |= 0x00020000u;
}
inline void monstervalue::clear_has_killdam() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void monstervalue::clear_killdam() {
  killdam_ = GOOGLE_LONGLONG(0);
  clear_has_killdam();
}
inline ::google::protobuf::int64 monstervalue::killdam() const {
  return killdam_;
}
inline void monstervalue::set_killdam(::google::protobuf::int64 value) {
  set_has_killdam();
  killdam_ = value;
}

// optional int64 killRedu = 19;
inline bool monstervalue::has_killredu() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void monstervalue::set_has_killredu() {
  _has_bits_[0] |= 0x00040000u;
}
inline void monstervalue::clear_has_killredu() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void monstervalue::clear_killredu() {
  killredu_ = GOOGLE_LONGLONG(0);
  clear_has_killredu();
}
inline ::google::protobuf::int64 monstervalue::killredu() const {
  return killredu_;
}
inline void monstervalue::set_killredu(::google::protobuf::int64 value) {
  set_has_killredu();
  killredu_ = value;
}

// optional int64 attDam = 20;
inline bool monstervalue::has_attdam() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void monstervalue::set_has_attdam() {
  _has_bits_[0] |= 0x00080000u;
}
inline void monstervalue::clear_has_attdam() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void monstervalue::clear_attdam() {
  attdam_ = GOOGLE_LONGLONG(0);
  clear_has_attdam();
}
inline ::google::protobuf::int64 monstervalue::attdam() const {
  return attdam_;
}
inline void monstervalue::set_attdam(::google::protobuf::int64 value) {
  set_has_attdam();
  attdam_ = value;
}

// optional int64 attRedu = 21;
inline bool monstervalue::has_attredu() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void monstervalue::set_has_attredu() {
  _has_bits_[0] |= 0x00100000u;
}
inline void monstervalue::clear_has_attredu() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void monstervalue::clear_attredu() {
  attredu_ = GOOGLE_LONGLONG(0);
  clear_has_attredu();
}
inline ::google::protobuf::int64 monstervalue::attredu() const {
  return attredu_;
}
inline void monstervalue::set_attredu(::google::protobuf::int64 value) {
  set_has_attredu();
  attredu_ = value;
}

// optional int64 fightingCapacity = 22;
inline bool monstervalue::has_fightingcapacity() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void monstervalue::set_has_fightingcapacity() {
  _has_bits_[0] |= 0x00200000u;
}
inline void monstervalue::clear_has_fightingcapacity() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void monstervalue::clear_fightingcapacity() {
  fightingcapacity_ = GOOGLE_LONGLONG(0);
  clear_has_fightingcapacity();
}
inline ::google::protobuf::int64 monstervalue::fightingcapacity() const {
  return fightingcapacity_;
}
inline void monstervalue::set_fightingcapacity(::google::protobuf::int64 value) {
  set_has_fightingcapacity();
  fightingcapacity_ = value;
}

// optional int32 isFightPress = 23;
inline bool monstervalue::has_isfightpress() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void monstervalue::set_has_isfightpress() {
  _has_bits_[0] |= 0x00400000u;
}
inline void monstervalue::clear_has_isfightpress() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void monstervalue::clear_isfightpress() {
  isfightpress_ = 0;
  clear_has_isfightpress();
}
inline ::google::protobuf::int32 monstervalue::isfightpress() const {
  return isfightpress_;
}
inline void monstervalue::set_isfightpress(::google::protobuf::int32 value) {
  set_has_isfightpress();
  isfightpress_ = value;
}

// optional int64 exp = 24;
inline bool monstervalue::has_exp() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void monstervalue::set_has_exp() {
  _has_bits_[0] |= 0x00800000u;
}
inline void monstervalue::clear_has_exp() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void monstervalue::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 monstervalue::exp() const {
  return exp_;
}
inline void monstervalue::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// Sheet_monstervalue

// repeated .proto_ff.monstervalue monstervalue_List = 1;
inline int Sheet_monstervalue::monstervalue_list_size() const {
  return monstervalue_list_.size();
}
inline void Sheet_monstervalue::clear_monstervalue_list() {
  monstervalue_list_.Clear();
}
inline const ::proto_ff::monstervalue& Sheet_monstervalue::monstervalue_list(int index) const {
  return monstervalue_list_.Get(index);
}
inline ::proto_ff::monstervalue* Sheet_monstervalue::mutable_monstervalue_list(int index) {
  return monstervalue_list_.Mutable(index);
}
inline ::proto_ff::monstervalue* Sheet_monstervalue::add_monstervalue_list() {
  return monstervalue_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::monstervalue >&
Sheet_monstervalue::monstervalue_list() const {
  return monstervalue_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::monstervalue >*
Sheet_monstervalue::mutable_monstervalue_list() {
  return &monstervalue_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_monster_2eproto__INCLUDED
