// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: godRelics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "godRelics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* godRelicsgodRelics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  godRelicsgodRelics_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_godRelicsgodRelics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_godRelicsgodRelics_reflection_ = NULL;
const ::google::protobuf::Descriptor* godRelicscondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  godRelicscondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_godRelicscondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_godRelicscondition_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_godRelics_2eproto() {
  protobuf_AddDesc_godRelics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "godRelics.proto");
  GOOGLE_CHECK(file != NULL);
  godRelicsgodRelics_descriptor_ = file->message_type(0);
  static const int godRelicsgodRelics_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicsgodRelics, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicsgodRelics, functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicsgodRelics, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicsgodRelics, skillid_),
  };
  godRelicsgodRelics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      godRelicsgodRelics_descriptor_,
      godRelicsgodRelics::default_instance_,
      godRelicsgodRelics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicsgodRelics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicsgodRelics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(godRelicsgodRelics));
  Sheet_godRelicsgodRelics_descriptor_ = file->message_type(1);
  static const int Sheet_godRelicsgodRelics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godRelicsgodRelics, godrelicsgodrelics_list_),
  };
  Sheet_godRelicsgodRelics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_godRelicsgodRelics_descriptor_,
      Sheet_godRelicsgodRelics::default_instance_,
      Sheet_godRelicsgodRelics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godRelicsgodRelics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godRelicsgodRelics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_godRelicsgodRelics));
  godRelicscondition_descriptor_ = file->message_type(2);
  static const int godRelicscondition_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicscondition, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicscondition, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicscondition, conditon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicscondition, parama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicscondition, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicscondition, rewarditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicscondition, rewardnumber_),
  };
  godRelicscondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      godRelicscondition_descriptor_,
      godRelicscondition::default_instance_,
      godRelicscondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicscondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godRelicscondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(godRelicscondition));
  Sheet_godRelicscondition_descriptor_ = file->message_type(3);
  static const int Sheet_godRelicscondition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godRelicscondition, godrelicscondition_list_),
  };
  Sheet_godRelicscondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_godRelicscondition_descriptor_,
      Sheet_godRelicscondition::default_instance_,
      Sheet_godRelicscondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godRelicscondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godRelicscondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_godRelicscondition));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_godRelics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    godRelicsgodRelics_descriptor_, &godRelicsgodRelics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_godRelicsgodRelics_descriptor_, &Sheet_godRelicsgodRelics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    godRelicscondition_descriptor_, &godRelicscondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_godRelicscondition_descriptor_, &Sheet_godRelicscondition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_godRelics_2eproto() {
  delete godRelicsgodRelics::default_instance_;
  delete godRelicsgodRelics_reflection_;
  delete Sheet_godRelicsgodRelics::default_instance_;
  delete Sheet_godRelicsgodRelics_reflection_;
  delete godRelicscondition::default_instance_;
  delete godRelicscondition_reflection_;
  delete Sheet_godRelicscondition::default_instance_;
  delete Sheet_godRelicscondition_reflection_;
}

void protobuf_AddDesc_godRelics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017godRelics.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\"\223\001\n\022godRelicsgodRelics\022\022\n\002id\030"
    "\001 \001(\005B\006\302\377\024\002id\022&\n\nfunctionId\030\002 \001(\005B\022\302\377\024\016\345"
    "\212\237\350\203\275\345\274\200\346\224\276id\022\036\n\005group\030\003 \001(\005B\017\302\377\024\013\346\235\241\344\273\266"
    "\347\273\204ID\022!\n\007skillID\030\004 \001(\005B\020\302\377\024\014\346\277\200\346\264\273\346\212\200\350\203\275"
    "\"_\n\030Sheet_godRelicsgodRelics\022C\n\027godRelic"
    "sgodRelics_List\030\001 \003(\0132\034.proto_ff.godReli"
    "csgodRelicsB\004\210\301\024\024\"\207\002\n\022godRelicscondition"
    "\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\036\n\005group\030\002 \001(\005B\017\302\377\024"
    "\013\346\235\241\344\273\266\347\273\204id\022\"\n\010conditon\030\003 \001(\005B\020\302\377\024\014\346\235\241\344"
    "\273\266\347\261\273\345\236\213\022$\n\006parama\030\004 \001(\tB\024\302\377\024\014\346\235\241\344\273\266\345\217\202\346"
    "\225\260\220\301\024<\022\037\n\005count\030\005 \001(\005B\020\302\377\024\014\345\256\214\346\210\220\346\254\241\346\225\260\022"
    "$\n\nrewardItem\030\006 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\351\201\223\345\205\267\022,\n"
    "\014rewardNumber\030\007 \001(\005B\026\302\377\024\022\345\245\226\345\212\261\351\201\223\345\205\267\346\225\260"
    "\351\207\217\"_\n\030Sheet_godRelicscondition\022C\n\027godRe"
    "licscondition_List\030\001 \003(\0132\034.proto_ff.godR"
    "elicsconditionB\004\210\301\024\024", 660);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "godRelics.proto", &protobuf_RegisterTypes);
  godRelicsgodRelics::default_instance_ = new godRelicsgodRelics();
  Sheet_godRelicsgodRelics::default_instance_ = new Sheet_godRelicsgodRelics();
  godRelicscondition::default_instance_ = new godRelicscondition();
  Sheet_godRelicscondition::default_instance_ = new Sheet_godRelicscondition();
  godRelicsgodRelics::default_instance_->InitAsDefaultInstance();
  Sheet_godRelicsgodRelics::default_instance_->InitAsDefaultInstance();
  godRelicscondition::default_instance_->InitAsDefaultInstance();
  Sheet_godRelicscondition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_godRelics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_godRelics_2eproto {
  StaticDescriptorInitializer_godRelics_2eproto() {
    protobuf_AddDesc_godRelics_2eproto();
  }
} static_descriptor_initializer_godRelics_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int godRelicsgodRelics::kIdFieldNumber;
const int godRelicsgodRelics::kFunctionIdFieldNumber;
const int godRelicsgodRelics::kGroupFieldNumber;
const int godRelicsgodRelics::kSkillIDFieldNumber;
#endif  // !_MSC_VER

godRelicsgodRelics::godRelicsgodRelics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void godRelicsgodRelics::InitAsDefaultInstance() {
}

godRelicsgodRelics::godRelicsgodRelics(const godRelicsgodRelics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void godRelicsgodRelics::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  functionid_ = 0;
  group_ = 0;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

godRelicsgodRelics::~godRelicsgodRelics() {
  SharedDtor();
}

void godRelicsgodRelics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void godRelicsgodRelics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* godRelicsgodRelics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return godRelicsgodRelics_descriptor_;
}

const godRelicsgodRelics& godRelicsgodRelics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godRelics_2eproto();
  return *default_instance_;
}

godRelicsgodRelics* godRelicsgodRelics::default_instance_ = NULL;

godRelicsgodRelics* godRelicsgodRelics::New() const {
  return new godRelicsgodRelics;
}

void godRelicsgodRelics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    functionid_ = 0;
    group_ = 0;
    skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool godRelicsgodRelics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_functionId;
        break;
      }

      // optional int32 functionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functionid_)));
          set_has_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group;
        break;
      }

      // optional int32 group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillID;
        break;
      }

      // optional int32 skillID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void godRelicsgodRelics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 functionId = 2;
  if (has_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->functionid(), output);
  }

  // optional int32 group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group(), output);
  }

  // optional int32 skillID = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* godRelicsgodRelics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 functionId = 2;
  if (has_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->functionid(), target);
  }

  // optional int32 group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->group(), target);
  }

  // optional int32 skillID = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int godRelicsgodRelics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 functionId = 2;
    if (has_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functionid());
    }

    // optional int32 group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 skillID = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void godRelicsgodRelics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const godRelicsgodRelics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const godRelicsgodRelics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void godRelicsgodRelics::MergeFrom(const godRelicsgodRelics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_functionid()) {
      set_functionid(from.functionid());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void godRelicsgodRelics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void godRelicsgodRelics::CopyFrom(const godRelicsgodRelics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool godRelicsgodRelics::IsInitialized() const {

  return true;
}

void godRelicsgodRelics::Swap(godRelicsgodRelics* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(functionid_, other->functionid_);
    std::swap(group_, other->group_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata godRelicsgodRelics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = godRelicsgodRelics_descriptor_;
  metadata.reflection = godRelicsgodRelics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_godRelicsgodRelics::kGodRelicsgodRelicsListFieldNumber;
#endif  // !_MSC_VER

Sheet_godRelicsgodRelics::Sheet_godRelicsgodRelics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_godRelicsgodRelics::InitAsDefaultInstance() {
}

Sheet_godRelicsgodRelics::Sheet_godRelicsgodRelics(const Sheet_godRelicsgodRelics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_godRelicsgodRelics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_godRelicsgodRelics::~Sheet_godRelicsgodRelics() {
  SharedDtor();
}

void Sheet_godRelicsgodRelics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_godRelicsgodRelics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_godRelicsgodRelics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_godRelicsgodRelics_descriptor_;
}

const Sheet_godRelicsgodRelics& Sheet_godRelicsgodRelics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godRelics_2eproto();
  return *default_instance_;
}

Sheet_godRelicsgodRelics* Sheet_godRelicsgodRelics::default_instance_ = NULL;

Sheet_godRelicsgodRelics* Sheet_godRelicsgodRelics::New() const {
  return new Sheet_godRelicsgodRelics;
}

void Sheet_godRelicsgodRelics::Clear() {
  godrelicsgodrelics_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_godRelicsgodRelics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.godRelicsgodRelics godRelicsgodRelics_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godRelicsgodRelics_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_godrelicsgodrelics_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_godRelicsgodRelics_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_godRelicsgodRelics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.godRelicsgodRelics godRelicsgodRelics_List = 1;
  for (int i = 0; i < this->godrelicsgodrelics_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->godrelicsgodrelics_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_godRelicsgodRelics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.godRelicsgodRelics godRelicsgodRelics_List = 1;
  for (int i = 0; i < this->godrelicsgodrelics_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->godrelicsgodrelics_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_godRelicsgodRelics::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.godRelicsgodRelics godRelicsgodRelics_List = 1;
  total_size += 1 * this->godrelicsgodrelics_list_size();
  for (int i = 0; i < this->godrelicsgodrelics_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->godrelicsgodrelics_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_godRelicsgodRelics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_godRelicsgodRelics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_godRelicsgodRelics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_godRelicsgodRelics::MergeFrom(const Sheet_godRelicsgodRelics& from) {
  GOOGLE_CHECK_NE(&from, this);
  godrelicsgodrelics_list_.MergeFrom(from.godrelicsgodrelics_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_godRelicsgodRelics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_godRelicsgodRelics::CopyFrom(const Sheet_godRelicsgodRelics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_godRelicsgodRelics::IsInitialized() const {

  return true;
}

void Sheet_godRelicsgodRelics::Swap(Sheet_godRelicsgodRelics* other) {
  if (other != this) {
    godrelicsgodrelics_list_.Swap(&other->godrelicsgodrelics_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_godRelicsgodRelics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_godRelicsgodRelics_descriptor_;
  metadata.reflection = Sheet_godRelicsgodRelics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int godRelicscondition::kIdFieldNumber;
const int godRelicscondition::kGroupFieldNumber;
const int godRelicscondition::kConditonFieldNumber;
const int godRelicscondition::kParamaFieldNumber;
const int godRelicscondition::kCountFieldNumber;
const int godRelicscondition::kRewardItemFieldNumber;
const int godRelicscondition::kRewardNumberFieldNumber;
#endif  // !_MSC_VER

godRelicscondition::godRelicscondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void godRelicscondition::InitAsDefaultInstance() {
}

godRelicscondition::godRelicscondition(const godRelicscondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void godRelicscondition::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  group_ = 0;
  conditon_ = 0;
  parama_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  rewarditem_ = 0;
  rewardnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

godRelicscondition::~godRelicscondition() {
  SharedDtor();
}

void godRelicscondition::SharedDtor() {
  if (parama_ != &::google::protobuf::internal::kEmptyString) {
    delete parama_;
  }
  if (this != default_instance_) {
  }
}

void godRelicscondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* godRelicscondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return godRelicscondition_descriptor_;
}

const godRelicscondition& godRelicscondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godRelics_2eproto();
  return *default_instance_;
}

godRelicscondition* godRelicscondition::default_instance_ = NULL;

godRelicscondition* godRelicscondition::New() const {
  return new godRelicscondition;
}

void godRelicscondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    group_ = 0;
    conditon_ = 0;
    if (has_parama()) {
      if (parama_ != &::google::protobuf::internal::kEmptyString) {
        parama_->clear();
      }
    }
    count_ = 0;
    rewarditem_ = 0;
    rewardnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool godRelicscondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // optional int32 group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_conditon;
        break;
      }

      // optional int32 conditon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conditon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conditon_)));
          set_has_conditon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parama;
        break;
      }

      // optional string parama = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parama:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parama()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parama().data(), this->parama().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rewardItem;
        break;
      }

      // optional int32 rewardItem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewarditem_)));
          set_has_rewarditem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rewardNumber;
        break;
      }

      // optional int32 rewardNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardnumber_)));
          set_has_rewardnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void godRelicscondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }

  // optional int32 conditon = 3;
  if (has_conditon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->conditon(), output);
  }

  // optional string parama = 4;
  if (has_parama()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parama().data(), this->parama().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->parama(), output);
  }

  // optional int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // optional int32 rewardItem = 6;
  if (has_rewarditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rewarditem(), output);
  }

  // optional int32 rewardNumber = 7;
  if (has_rewardnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rewardnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* godRelicscondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }

  // optional int32 conditon = 3;
  if (has_conditon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->conditon(), target);
  }

  // optional string parama = 4;
  if (has_parama()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parama().data(), this->parama().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->parama(), target);
  }

  // optional int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // optional int32 rewardItem = 6;
  if (has_rewarditem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rewarditem(), target);
  }

  // optional int32 rewardNumber = 7;
  if (has_rewardnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rewardnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int godRelicscondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 conditon = 3;
    if (has_conditon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conditon());
    }

    // optional string parama = 4;
    if (has_parama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parama());
    }

    // optional int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 rewardItem = 6;
    if (has_rewarditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewarditem());
    }

    // optional int32 rewardNumber = 7;
    if (has_rewardnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void godRelicscondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const godRelicscondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const godRelicscondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void godRelicscondition::MergeFrom(const godRelicscondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_conditon()) {
      set_conditon(from.conditon());
    }
    if (from.has_parama()) {
      set_parama(from.parama());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_rewarditem()) {
      set_rewarditem(from.rewarditem());
    }
    if (from.has_rewardnumber()) {
      set_rewardnumber(from.rewardnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void godRelicscondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void godRelicscondition::CopyFrom(const godRelicscondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool godRelicscondition::IsInitialized() const {

  return true;
}

void godRelicscondition::Swap(godRelicscondition* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(group_, other->group_);
    std::swap(conditon_, other->conditon_);
    std::swap(parama_, other->parama_);
    std::swap(count_, other->count_);
    std::swap(rewarditem_, other->rewarditem_);
    std::swap(rewardnumber_, other->rewardnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata godRelicscondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = godRelicscondition_descriptor_;
  metadata.reflection = godRelicscondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_godRelicscondition::kGodRelicsconditionListFieldNumber;
#endif  // !_MSC_VER

Sheet_godRelicscondition::Sheet_godRelicscondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_godRelicscondition::InitAsDefaultInstance() {
}

Sheet_godRelicscondition::Sheet_godRelicscondition(const Sheet_godRelicscondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_godRelicscondition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_godRelicscondition::~Sheet_godRelicscondition() {
  SharedDtor();
}

void Sheet_godRelicscondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_godRelicscondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_godRelicscondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_godRelicscondition_descriptor_;
}

const Sheet_godRelicscondition& Sheet_godRelicscondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godRelics_2eproto();
  return *default_instance_;
}

Sheet_godRelicscondition* Sheet_godRelicscondition::default_instance_ = NULL;

Sheet_godRelicscondition* Sheet_godRelicscondition::New() const {
  return new Sheet_godRelicscondition;
}

void Sheet_godRelicscondition::Clear() {
  godrelicscondition_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_godRelicscondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.godRelicscondition godRelicscondition_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godRelicscondition_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_godrelicscondition_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_godRelicscondition_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_godRelicscondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.godRelicscondition godRelicscondition_List = 1;
  for (int i = 0; i < this->godrelicscondition_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->godrelicscondition_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_godRelicscondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.godRelicscondition godRelicscondition_List = 1;
  for (int i = 0; i < this->godrelicscondition_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->godrelicscondition_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_godRelicscondition::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.godRelicscondition godRelicscondition_List = 1;
  total_size += 1 * this->godrelicscondition_list_size();
  for (int i = 0; i < this->godrelicscondition_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->godrelicscondition_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_godRelicscondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_godRelicscondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_godRelicscondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_godRelicscondition::MergeFrom(const Sheet_godRelicscondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  godrelicscondition_list_.MergeFrom(from.godrelicscondition_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_godRelicscondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_godRelicscondition::CopyFrom(const Sheet_godRelicscondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_godRelicscondition::IsInitialized() const {

  return true;
}

void Sheet_godRelicscondition::Swap(Sheet_godRelicscondition* other) {
  if (other != this) {
    godrelicscondition_list_.Swap(&other->godrelicscondition_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_godRelicscondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_godRelicscondition_descriptor_;
  metadata.reflection = Sheet_godRelicscondition_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
