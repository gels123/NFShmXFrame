// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Achievement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Achievement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_AchievementAchievementItemrewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AchievementAchievementItemrewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AchievementAchievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AchievementAchievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_AchievementAchievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_AchievementAchievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AchievementTotalachievements_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AchievementTotalachievements_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_AchievementTotalachievements_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_AchievementTotalachievements_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fAchievement_2eproto() {
  protobuf_AddDesc_E_5fAchievement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Achievement.proto");
  GOOGLE_CHECK(file != NULL);
  E_AchievementAchievementItemrewardDesc_descriptor_ = file->message_type(0);
  static const int E_AchievementAchievementItemrewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievementItemrewardDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievementItemrewardDesc, m_id_),
  };
  E_AchievementAchievementItemrewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AchievementAchievementItemrewardDesc_descriptor_,
      E_AchievementAchievementItemrewardDesc::default_instance_,
      E_AchievementAchievementItemrewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievementItemrewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievementItemrewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AchievementAchievementItemrewardDesc));
  E_AchievementAchievement_descriptor_ = file->message_type(1);
  static const int E_AchievementAchievement_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, m_achievementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, m_achievementlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, m_achievementtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, m_achievementsubtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, m_subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, m_achievementobjectvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, m_typename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, m_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, m_achievementpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, m_overview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, m_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, m_itemreward_),
  };
  E_AchievementAchievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AchievementAchievement_descriptor_,
      E_AchievementAchievement::default_instance_,
      E_AchievementAchievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementAchievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AchievementAchievement));
  Sheet_AchievementAchievement_descriptor_ = file->message_type(2);
  static const int Sheet_AchievementAchievement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AchievementAchievement, e_achievementachievement_list_),
  };
  Sheet_AchievementAchievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_AchievementAchievement_descriptor_,
      Sheet_AchievementAchievement::default_instance_,
      Sheet_AchievementAchievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AchievementAchievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AchievementAchievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_AchievementAchievement));
  E_AchievementTotalachievements_descriptor_ = file->message_type(3);
  static const int E_AchievementTotalachievements_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementTotalachievements, m_totalsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementTotalachievements, m_totalachievementname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementTotalachievements, m_achievedpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementTotalachievements, m_totalitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementTotalachievements, m_rewardvalue_),
  };
  E_AchievementTotalachievements_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AchievementTotalachievements_descriptor_,
      E_AchievementTotalachievements::default_instance_,
      E_AchievementTotalachievements_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementTotalachievements, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AchievementTotalachievements, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AchievementTotalachievements));
  Sheet_AchievementTotalachievements_descriptor_ = file->message_type(4);
  static const int Sheet_AchievementTotalachievements_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AchievementTotalachievements, e_achievementtotalachievements_list_),
  };
  Sheet_AchievementTotalachievements_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_AchievementTotalachievements_descriptor_,
      Sheet_AchievementTotalachievements::default_instance_,
      Sheet_AchievementTotalachievements_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AchievementTotalachievements, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AchievementTotalachievements, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_AchievementTotalachievements));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fAchievement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AchievementAchievementItemrewardDesc_descriptor_, &E_AchievementAchievementItemrewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AchievementAchievement_descriptor_, &E_AchievementAchievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_AchievementAchievement_descriptor_, &Sheet_AchievementAchievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AchievementTotalachievements_descriptor_, &E_AchievementTotalachievements::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_AchievementTotalachievements_descriptor_, &Sheet_AchievementTotalachievements::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fAchievement_2eproto() {
  delete E_AchievementAchievementItemrewardDesc::default_instance_;
  delete E_AchievementAchievementItemrewardDesc_reflection_;
  delete E_AchievementAchievement::default_instance_;
  delete E_AchievementAchievement_reflection_;
  delete Sheet_AchievementAchievement::default_instance_;
  delete Sheet_AchievementAchievement_reflection_;
  delete E_AchievementTotalachievements::default_instance_;
  delete E_AchievementTotalachievements_reflection_;
  delete Sheet_AchievementTotalachievements::default_instance_;
  delete Sheet_AchievementTotalachievements_reflection_;
}

void protobuf_AddDesc_E_5fAchievement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023E_Achievement.proto\022\010proto_ff\032\025yd_fiel"
    "doptions.proto\"[\n&E_AchievementAchieveme"
    "ntItemrewardDesc\022\033\n\007m_value\030\001 \001(\005B\n\302\377\024\006\346"
    "\225\260\351\207\217\022\024\n\004m_id\030\002 \001(\003B\006\302\377\024\002ID\"\371\004\n\030E_Achiev"
    "ementAchievement\022%\n\017m_achievementid\030\001 \001("
    "\005B\014\302\377\024\010\346\210\220\345\260\261ID\0222\n\022m_achievementlevel\030\002 "
    "\001(\005B\026\302\377\024\022\346\210\220\345\260\261\350\247\246\345\217\221\347\255\211\347\272\247\022+\n\021m_achieve"
    "menttype\030\003 \001(\005B\020\302\377\024\014\346\210\220\345\260\261\347\261\273\345\236\213\022.\n\024m_ac"
    "hievementsubtype\030\004 \001(\005B\020\302\377\024\014\344\272\213\344\273\266\347\261\273\345\236\213"
    "\022#\n\tm_subtype\030\005 \001(\005B\020\302\377\024\014\344\272\213\344\273\266\347\273\206\345\210\206\022;\n"
    "\030m_achievementobjectvalue\030\006 \001(\005B\031\302\377\024\025\344\272\213"
    "\344\273\266\347\233\256\346\240\207\345\256\214\346\210\220\345\200\274\022(\n\nm_typename\030\007 \001(\tB\024"
    "\302\377\024\014\347\261\273\345\236\213\345\220\215\347\247\260\220\301\024@\022%\n\007m_label\030\010 \001(\tB\024\302"
    "\377\024\014\344\272\214\347\272\247\346\240\207\347\255\276\220\301\024@\0225\n\022m_achievementpoin"
    "t\030\t \001(\005B\031\302\377\024\025\350\216\267\345\217\226\346\210\220\345\260\261\347\202\271\346\225\260\351\207\217\0220\n\nm_"
    "overview\030\n \001(\005B\034\302\377\024\030\346\230\257\345\220\246\350\277\233\345\205\245\346\200\273\350\247\210\350\277"
    "\233\345\272\246\022+\n\007m_param\030\013 \003(\005B\032\302\377\024\022\344\272\213\344\273\266\345\256\214\346\210\220\345"
    "\217\202\346\225\260\210\301\024\002\022\\\n\014m_itemreward\030\014 \003(\01320.proto_"
    "ff.E_AchievementAchievementItemrewardDes"
    "cB\024\302\377\024\014\350\216\267\345\276\227\347\211\251\345\223\201\210\301\024\002\"p\n\034Sheet_Achieve"
    "mentAchievement\022P\n\035E_AchievementAchievem"
    "ent_List\030\001 \003(\0132\".proto_ff.E_AchievementA"
    "chievementB\005\210\301\024\200\002\"\212\002\n\036E_AchievementTotal"
    "achievements\022&\n\nm_totalsum\030\001 \001(\005B\022\302\377\024\016\346\200"
    "\273\351\242\235\346\210\220\345\260\261ID\0227\n\026m_totalachievementname\030\002"
    " \001(\tB\027\302\377\024\017\346\200\273\350\247\210\346\210\220\345\260\261\345\220\215\220\301\024@\022*\n\020m_achie"
    "vedpoints\030\003 \001(\005B\020\302\377\024\014\350\276\276\346\210\220\347\202\271\346\225\260\022,\n\014m_t"
    "otalitems\030\004 \001(\005B\026\302\377\024\022\346\200\273\350\247\210\345\245\226\345\212\261\347\211\251\345\223\201\022"
    "-\n\rm_rewardvalue\030\005 \001(\005B\026\302\377\024\022\345\245\226\345\212\261\347\211\251\345\223\201"
    "\346\225\260\351\207\217\"\201\001\n\"Sheet_AchievementTotalachieve"
    "ments\022[\n#E_AchievementTotalachievements_"
    "List\030\001 \003(\0132(.proto_ff.E_AchievementTotal"
    "achievementsB\004\210\301\024\020", 1298);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Achievement.proto", &protobuf_RegisterTypes);
  E_AchievementAchievementItemrewardDesc::default_instance_ = new E_AchievementAchievementItemrewardDesc();
  E_AchievementAchievement::default_instance_ = new E_AchievementAchievement();
  Sheet_AchievementAchievement::default_instance_ = new Sheet_AchievementAchievement();
  E_AchievementTotalachievements::default_instance_ = new E_AchievementTotalachievements();
  Sheet_AchievementTotalachievements::default_instance_ = new Sheet_AchievementTotalachievements();
  E_AchievementAchievementItemrewardDesc::default_instance_->InitAsDefaultInstance();
  E_AchievementAchievement::default_instance_->InitAsDefaultInstance();
  Sheet_AchievementAchievement::default_instance_->InitAsDefaultInstance();
  E_AchievementTotalachievements::default_instance_->InitAsDefaultInstance();
  Sheet_AchievementTotalachievements::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fAchievement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fAchievement_2eproto {
  StaticDescriptorInitializer_E_5fAchievement_2eproto() {
    protobuf_AddDesc_E_5fAchievement_2eproto();
  }
} static_descriptor_initializer_E_5fAchievement_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_AchievementAchievementItemrewardDesc::kMValueFieldNumber;
const int E_AchievementAchievementItemrewardDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_AchievementAchievementItemrewardDesc::E_AchievementAchievementItemrewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AchievementAchievementItemrewardDesc::InitAsDefaultInstance() {
}

E_AchievementAchievementItemrewardDesc::E_AchievementAchievementItemrewardDesc(const E_AchievementAchievementItemrewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AchievementAchievementItemrewardDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AchievementAchievementItemrewardDesc::~E_AchievementAchievementItemrewardDesc() {
  SharedDtor();
}

void E_AchievementAchievementItemrewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AchievementAchievementItemrewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AchievementAchievementItemrewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AchievementAchievementItemrewardDesc_descriptor_;
}

const E_AchievementAchievementItemrewardDesc& E_AchievementAchievementItemrewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAchievement_2eproto();
  return *default_instance_;
}

E_AchievementAchievementItemrewardDesc* E_AchievementAchievementItemrewardDesc::default_instance_ = NULL;

E_AchievementAchievementItemrewardDesc* E_AchievementAchievementItemrewardDesc::New() const {
  return new E_AchievementAchievementItemrewardDesc;
}

void E_AchievementAchievementItemrewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AchievementAchievementItemrewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int64 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AchievementAchievementItemrewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int64 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AchievementAchievementItemrewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int64 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AchievementAchievementItemrewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int64 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AchievementAchievementItemrewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AchievementAchievementItemrewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AchievementAchievementItemrewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AchievementAchievementItemrewardDesc::MergeFrom(const E_AchievementAchievementItemrewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AchievementAchievementItemrewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AchievementAchievementItemrewardDesc::CopyFrom(const E_AchievementAchievementItemrewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AchievementAchievementItemrewardDesc::IsInitialized() const {

  return true;
}

void E_AchievementAchievementItemrewardDesc::Swap(E_AchievementAchievementItemrewardDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AchievementAchievementItemrewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AchievementAchievementItemrewardDesc_descriptor_;
  metadata.reflection = E_AchievementAchievementItemrewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AchievementAchievement::kMAchievementidFieldNumber;
const int E_AchievementAchievement::kMAchievementlevelFieldNumber;
const int E_AchievementAchievement::kMAchievementtypeFieldNumber;
const int E_AchievementAchievement::kMAchievementsubtypeFieldNumber;
const int E_AchievementAchievement::kMSubtypeFieldNumber;
const int E_AchievementAchievement::kMAchievementobjectvalueFieldNumber;
const int E_AchievementAchievement::kMTypenameFieldNumber;
const int E_AchievementAchievement::kMLabelFieldNumber;
const int E_AchievementAchievement::kMAchievementpointFieldNumber;
const int E_AchievementAchievement::kMOverviewFieldNumber;
const int E_AchievementAchievement::kMParamFieldNumber;
const int E_AchievementAchievement::kMItemrewardFieldNumber;
#endif  // !_MSC_VER

E_AchievementAchievement::E_AchievementAchievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AchievementAchievement::InitAsDefaultInstance() {
}

E_AchievementAchievement::E_AchievementAchievement(const E_AchievementAchievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AchievementAchievement::SharedCtor() {
  _cached_size_ = 0;
  m_achievementid_ = 0;
  m_achievementlevel_ = 0;
  m_achievementtype_ = 0;
  m_achievementsubtype_ = 0;
  m_subtype_ = 0;
  m_achievementobjectvalue_ = 0;
  m_typename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_achievementpoint_ = 0;
  m_overview_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AchievementAchievement::~E_AchievementAchievement() {
  SharedDtor();
}

void E_AchievementAchievement::SharedDtor() {
  if (m_typename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_typename_;
  }
  if (m_label_ != &::google::protobuf::internal::kEmptyString) {
    delete m_label_;
  }
  if (this != default_instance_) {
  }
}

void E_AchievementAchievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AchievementAchievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AchievementAchievement_descriptor_;
}

const E_AchievementAchievement& E_AchievementAchievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAchievement_2eproto();
  return *default_instance_;
}

E_AchievementAchievement* E_AchievementAchievement::default_instance_ = NULL;

E_AchievementAchievement* E_AchievementAchievement::New() const {
  return new E_AchievementAchievement;
}

void E_AchievementAchievement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_achievementid_ = 0;
    m_achievementlevel_ = 0;
    m_achievementtype_ = 0;
    m_achievementsubtype_ = 0;
    m_subtype_ = 0;
    m_achievementobjectvalue_ = 0;
    if (has_m_typename()) {
      if (m_typename_ != &::google::protobuf::internal::kEmptyString) {
        m_typename_->clear();
      }
    }
    if (has_m_label()) {
      if (m_label_ != &::google::protobuf::internal::kEmptyString) {
        m_label_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_achievementpoint_ = 0;
    m_overview_ = 0;
  }
  m_param_.Clear();
  m_itemreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AchievementAchievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_achievementid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_achievementid_)));
          set_has_m_achievementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_achievementlevel;
        break;
      }

      // optional int32 m_achievementlevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_achievementlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_achievementlevel_)));
          set_has_m_achievementlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_achievementtype;
        break;
      }

      // optional int32 m_achievementtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_achievementtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_achievementtype_)));
          set_has_m_achievementtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_achievementsubtype;
        break;
      }

      // optional int32 m_achievementsubtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_achievementsubtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_achievementsubtype_)));
          set_has_m_achievementsubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_subtype;
        break;
      }

      // optional int32 m_subtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_subtype_)));
          set_has_m_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_achievementobjectvalue;
        break;
      }

      // optional int32 m_achievementobjectvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_achievementobjectvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_achievementobjectvalue_)));
          set_has_m_achievementobjectvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_typename;
        break;
      }

      // optional string m_typename = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_typename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_typename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_typename().data(), this->m_typename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_label;
        break;
      }

      // optional string m_label = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_label().data(), this->m_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_achievementpoint;
        break;
      }

      // optional int32 m_achievementpoint = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_achievementpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_achievementpoint_)));
          set_has_m_achievementpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_overview;
        break;
      }

      // optional int32 m_overview = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_overview:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_overview_)));
          set_has_m_overview();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_param;
        break;
      }

      // repeated int32 m_param = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_m_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_param;
        if (input->ExpectTag(98)) goto parse_m_itemreward;
        break;
      }

      // repeated .proto_ff.E_AchievementAchievementItemrewardDesc m_itemreward = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_itemreward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_itemreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_itemreward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AchievementAchievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_achievementid = 1;
  if (has_m_achievementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_achievementid(), output);
  }

  // optional int32 m_achievementlevel = 2;
  if (has_m_achievementlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_achievementlevel(), output);
  }

  // optional int32 m_achievementtype = 3;
  if (has_m_achievementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_achievementtype(), output);
  }

  // optional int32 m_achievementsubtype = 4;
  if (has_m_achievementsubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_achievementsubtype(), output);
  }

  // optional int32 m_subtype = 5;
  if (has_m_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_subtype(), output);
  }

  // optional int32 m_achievementobjectvalue = 6;
  if (has_m_achievementobjectvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_achievementobjectvalue(), output);
  }

  // optional string m_typename = 7;
  if (has_m_typename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_typename().data(), this->m_typename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_typename(), output);
  }

  // optional string m_label = 8;
  if (has_m_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_label().data(), this->m_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_label(), output);
  }

  // optional int32 m_achievementpoint = 9;
  if (has_m_achievementpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_achievementpoint(), output);
  }

  // optional int32 m_overview = 10;
  if (has_m_overview()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_overview(), output);
  }

  // repeated int32 m_param = 11;
  for (int i = 0; i < this->m_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->m_param(i), output);
  }

  // repeated .proto_ff.E_AchievementAchievementItemrewardDesc m_itemreward = 12;
  for (int i = 0; i < this->m_itemreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_itemreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AchievementAchievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_achievementid = 1;
  if (has_m_achievementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_achievementid(), target);
  }

  // optional int32 m_achievementlevel = 2;
  if (has_m_achievementlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_achievementlevel(), target);
  }

  // optional int32 m_achievementtype = 3;
  if (has_m_achievementtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_achievementtype(), target);
  }

  // optional int32 m_achievementsubtype = 4;
  if (has_m_achievementsubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_achievementsubtype(), target);
  }

  // optional int32 m_subtype = 5;
  if (has_m_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_subtype(), target);
  }

  // optional int32 m_achievementobjectvalue = 6;
  if (has_m_achievementobjectvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_achievementobjectvalue(), target);
  }

  // optional string m_typename = 7;
  if (has_m_typename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_typename().data(), this->m_typename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_typename(), target);
  }

  // optional string m_label = 8;
  if (has_m_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_label().data(), this->m_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_label(), target);
  }

  // optional int32 m_achievementpoint = 9;
  if (has_m_achievementpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_achievementpoint(), target);
  }

  // optional int32 m_overview = 10;
  if (has_m_overview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_overview(), target);
  }

  // repeated int32 m_param = 11;
  for (int i = 0; i < this->m_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->m_param(i), target);
  }

  // repeated .proto_ff.E_AchievementAchievementItemrewardDesc m_itemreward = 12;
  for (int i = 0; i < this->m_itemreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_itemreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AchievementAchievement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_achievementid = 1;
    if (has_m_achievementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_achievementid());
    }

    // optional int32 m_achievementlevel = 2;
    if (has_m_achievementlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_achievementlevel());
    }

    // optional int32 m_achievementtype = 3;
    if (has_m_achievementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_achievementtype());
    }

    // optional int32 m_achievementsubtype = 4;
    if (has_m_achievementsubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_achievementsubtype());
    }

    // optional int32 m_subtype = 5;
    if (has_m_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_subtype());
    }

    // optional int32 m_achievementobjectvalue = 6;
    if (has_m_achievementobjectvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_achievementobjectvalue());
    }

    // optional string m_typename = 7;
    if (has_m_typename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_typename());
    }

    // optional string m_label = 8;
    if (has_m_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_label());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_achievementpoint = 9;
    if (has_m_achievementpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_achievementpoint());
    }

    // optional int32 m_overview = 10;
    if (has_m_overview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_overview());
    }

  }
  // repeated int32 m_param = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_param(i));
    }
    total_size += 1 * this->m_param_size() + data_size;
  }

  // repeated .proto_ff.E_AchievementAchievementItemrewardDesc m_itemreward = 12;
  total_size += 1 * this->m_itemreward_size();
  for (int i = 0; i < this->m_itemreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_itemreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AchievementAchievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AchievementAchievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AchievementAchievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AchievementAchievement::MergeFrom(const E_AchievementAchievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_param_.MergeFrom(from.m_param_);
  m_itemreward_.MergeFrom(from.m_itemreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_achievementid()) {
      set_m_achievementid(from.m_achievementid());
    }
    if (from.has_m_achievementlevel()) {
      set_m_achievementlevel(from.m_achievementlevel());
    }
    if (from.has_m_achievementtype()) {
      set_m_achievementtype(from.m_achievementtype());
    }
    if (from.has_m_achievementsubtype()) {
      set_m_achievementsubtype(from.m_achievementsubtype());
    }
    if (from.has_m_subtype()) {
      set_m_subtype(from.m_subtype());
    }
    if (from.has_m_achievementobjectvalue()) {
      set_m_achievementobjectvalue(from.m_achievementobjectvalue());
    }
    if (from.has_m_typename()) {
      set_m_typename(from.m_typename());
    }
    if (from.has_m_label()) {
      set_m_label(from.m_label());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_achievementpoint()) {
      set_m_achievementpoint(from.m_achievementpoint());
    }
    if (from.has_m_overview()) {
      set_m_overview(from.m_overview());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AchievementAchievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AchievementAchievement::CopyFrom(const E_AchievementAchievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AchievementAchievement::IsInitialized() const {

  return true;
}

void E_AchievementAchievement::Swap(E_AchievementAchievement* other) {
  if (other != this) {
    std::swap(m_achievementid_, other->m_achievementid_);
    std::swap(m_achievementlevel_, other->m_achievementlevel_);
    std::swap(m_achievementtype_, other->m_achievementtype_);
    std::swap(m_achievementsubtype_, other->m_achievementsubtype_);
    std::swap(m_subtype_, other->m_subtype_);
    std::swap(m_achievementobjectvalue_, other->m_achievementobjectvalue_);
    std::swap(m_typename_, other->m_typename_);
    std::swap(m_label_, other->m_label_);
    std::swap(m_achievementpoint_, other->m_achievementpoint_);
    std::swap(m_overview_, other->m_overview_);
    m_param_.Swap(&other->m_param_);
    m_itemreward_.Swap(&other->m_itemreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AchievementAchievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AchievementAchievement_descriptor_;
  metadata.reflection = E_AchievementAchievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_AchievementAchievement::kEAchievementAchievementListFieldNumber;
#endif  // !_MSC_VER

Sheet_AchievementAchievement::Sheet_AchievementAchievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_AchievementAchievement::InitAsDefaultInstance() {
}

Sheet_AchievementAchievement::Sheet_AchievementAchievement(const Sheet_AchievementAchievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_AchievementAchievement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_AchievementAchievement::~Sheet_AchievementAchievement() {
  SharedDtor();
}

void Sheet_AchievementAchievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_AchievementAchievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_AchievementAchievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_AchievementAchievement_descriptor_;
}

const Sheet_AchievementAchievement& Sheet_AchievementAchievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAchievement_2eproto();
  return *default_instance_;
}

Sheet_AchievementAchievement* Sheet_AchievementAchievement::default_instance_ = NULL;

Sheet_AchievementAchievement* Sheet_AchievementAchievement::New() const {
  return new Sheet_AchievementAchievement;
}

void Sheet_AchievementAchievement::Clear() {
  e_achievementachievement_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_AchievementAchievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_AchievementAchievement E_AchievementAchievement_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_AchievementAchievement_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_achievementachievement_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_AchievementAchievement_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_AchievementAchievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_AchievementAchievement E_AchievementAchievement_List = 1;
  for (int i = 0; i < this->e_achievementachievement_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_achievementachievement_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_AchievementAchievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_AchievementAchievement E_AchievementAchievement_List = 1;
  for (int i = 0; i < this->e_achievementachievement_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_achievementachievement_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_AchievementAchievement::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_AchievementAchievement E_AchievementAchievement_List = 1;
  total_size += 1 * this->e_achievementachievement_list_size();
  for (int i = 0; i < this->e_achievementachievement_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_achievementachievement_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_AchievementAchievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_AchievementAchievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_AchievementAchievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_AchievementAchievement::MergeFrom(const Sheet_AchievementAchievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_achievementachievement_list_.MergeFrom(from.e_achievementachievement_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_AchievementAchievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_AchievementAchievement::CopyFrom(const Sheet_AchievementAchievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_AchievementAchievement::IsInitialized() const {

  return true;
}

void Sheet_AchievementAchievement::Swap(Sheet_AchievementAchievement* other) {
  if (other != this) {
    e_achievementachievement_list_.Swap(&other->e_achievementachievement_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_AchievementAchievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_AchievementAchievement_descriptor_;
  metadata.reflection = Sheet_AchievementAchievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AchievementTotalachievements::kMTotalsumFieldNumber;
const int E_AchievementTotalachievements::kMTotalachievementnameFieldNumber;
const int E_AchievementTotalachievements::kMAchievedpointsFieldNumber;
const int E_AchievementTotalachievements::kMTotalitemsFieldNumber;
const int E_AchievementTotalachievements::kMRewardvalueFieldNumber;
#endif  // !_MSC_VER

E_AchievementTotalachievements::E_AchievementTotalachievements()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AchievementTotalachievements::InitAsDefaultInstance() {
}

E_AchievementTotalachievements::E_AchievementTotalachievements(const E_AchievementTotalachievements& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AchievementTotalachievements::SharedCtor() {
  _cached_size_ = 0;
  m_totalsum_ = 0;
  m_totalachievementname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_achievedpoints_ = 0;
  m_totalitems_ = 0;
  m_rewardvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AchievementTotalachievements::~E_AchievementTotalachievements() {
  SharedDtor();
}

void E_AchievementTotalachievements::SharedDtor() {
  if (m_totalachievementname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_totalachievementname_;
  }
  if (this != default_instance_) {
  }
}

void E_AchievementTotalachievements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AchievementTotalachievements::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AchievementTotalachievements_descriptor_;
}

const E_AchievementTotalachievements& E_AchievementTotalachievements::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAchievement_2eproto();
  return *default_instance_;
}

E_AchievementTotalachievements* E_AchievementTotalachievements::default_instance_ = NULL;

E_AchievementTotalachievements* E_AchievementTotalachievements::New() const {
  return new E_AchievementTotalachievements;
}

void E_AchievementTotalachievements::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_totalsum_ = 0;
    if (has_m_totalachievementname()) {
      if (m_totalachievementname_ != &::google::protobuf::internal::kEmptyString) {
        m_totalachievementname_->clear();
      }
    }
    m_achievedpoints_ = 0;
    m_totalitems_ = 0;
    m_rewardvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AchievementTotalachievements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_totalsum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalsum_)));
          set_has_m_totalsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_totalachievementname;
        break;
      }

      // optional string m_totalachievementname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_totalachievementname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_totalachievementname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_totalachievementname().data(), this->m_totalachievementname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_achievedpoints;
        break;
      }

      // optional int32 m_achievedpoints = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_achievedpoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_achievedpoints_)));
          set_has_m_achievedpoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_totalitems;
        break;
      }

      // optional int32 m_totalitems = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_totalitems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalitems_)));
          set_has_m_totalitems();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rewardvalue;
        break;
      }

      // optional int32 m_rewardvalue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardvalue_)));
          set_has_m_rewardvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AchievementTotalachievements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_totalsum = 1;
  if (has_m_totalsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_totalsum(), output);
  }

  // optional string m_totalachievementname = 2;
  if (has_m_totalachievementname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_totalachievementname().data(), this->m_totalachievementname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_totalachievementname(), output);
  }

  // optional int32 m_achievedpoints = 3;
  if (has_m_achievedpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_achievedpoints(), output);
  }

  // optional int32 m_totalitems = 4;
  if (has_m_totalitems()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_totalitems(), output);
  }

  // optional int32 m_rewardvalue = 5;
  if (has_m_rewardvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_rewardvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AchievementTotalachievements::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_totalsum = 1;
  if (has_m_totalsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_totalsum(), target);
  }

  // optional string m_totalachievementname = 2;
  if (has_m_totalachievementname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_totalachievementname().data(), this->m_totalachievementname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_totalachievementname(), target);
  }

  // optional int32 m_achievedpoints = 3;
  if (has_m_achievedpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_achievedpoints(), target);
  }

  // optional int32 m_totalitems = 4;
  if (has_m_totalitems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_totalitems(), target);
  }

  // optional int32 m_rewardvalue = 5;
  if (has_m_rewardvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_rewardvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AchievementTotalachievements::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_totalsum = 1;
    if (has_m_totalsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalsum());
    }

    // optional string m_totalachievementname = 2;
    if (has_m_totalachievementname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_totalachievementname());
    }

    // optional int32 m_achievedpoints = 3;
    if (has_m_achievedpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_achievedpoints());
    }

    // optional int32 m_totalitems = 4;
    if (has_m_totalitems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalitems());
    }

    // optional int32 m_rewardvalue = 5;
    if (has_m_rewardvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AchievementTotalachievements::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AchievementTotalachievements* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AchievementTotalachievements*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AchievementTotalachievements::MergeFrom(const E_AchievementTotalachievements& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_totalsum()) {
      set_m_totalsum(from.m_totalsum());
    }
    if (from.has_m_totalachievementname()) {
      set_m_totalachievementname(from.m_totalachievementname());
    }
    if (from.has_m_achievedpoints()) {
      set_m_achievedpoints(from.m_achievedpoints());
    }
    if (from.has_m_totalitems()) {
      set_m_totalitems(from.m_totalitems());
    }
    if (from.has_m_rewardvalue()) {
      set_m_rewardvalue(from.m_rewardvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AchievementTotalachievements::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AchievementTotalachievements::CopyFrom(const E_AchievementTotalachievements& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AchievementTotalachievements::IsInitialized() const {

  return true;
}

void E_AchievementTotalachievements::Swap(E_AchievementTotalachievements* other) {
  if (other != this) {
    std::swap(m_totalsum_, other->m_totalsum_);
    std::swap(m_totalachievementname_, other->m_totalachievementname_);
    std::swap(m_achievedpoints_, other->m_achievedpoints_);
    std::swap(m_totalitems_, other->m_totalitems_);
    std::swap(m_rewardvalue_, other->m_rewardvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AchievementTotalachievements::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AchievementTotalachievements_descriptor_;
  metadata.reflection = E_AchievementTotalachievements_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_AchievementTotalachievements::kEAchievementTotalachievementsListFieldNumber;
#endif  // !_MSC_VER

Sheet_AchievementTotalachievements::Sheet_AchievementTotalachievements()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_AchievementTotalachievements::InitAsDefaultInstance() {
}

Sheet_AchievementTotalachievements::Sheet_AchievementTotalachievements(const Sheet_AchievementTotalachievements& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_AchievementTotalachievements::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_AchievementTotalachievements::~Sheet_AchievementTotalachievements() {
  SharedDtor();
}

void Sheet_AchievementTotalachievements::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_AchievementTotalachievements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_AchievementTotalachievements::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_AchievementTotalachievements_descriptor_;
}

const Sheet_AchievementTotalachievements& Sheet_AchievementTotalachievements::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAchievement_2eproto();
  return *default_instance_;
}

Sheet_AchievementTotalachievements* Sheet_AchievementTotalachievements::default_instance_ = NULL;

Sheet_AchievementTotalachievements* Sheet_AchievementTotalachievements::New() const {
  return new Sheet_AchievementTotalachievements;
}

void Sheet_AchievementTotalachievements::Clear() {
  e_achievementtotalachievements_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_AchievementTotalachievements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_AchievementTotalachievements E_AchievementTotalachievements_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_AchievementTotalachievements_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_achievementtotalachievements_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_AchievementTotalachievements_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_AchievementTotalachievements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_AchievementTotalachievements E_AchievementTotalachievements_List = 1;
  for (int i = 0; i < this->e_achievementtotalachievements_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_achievementtotalachievements_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_AchievementTotalachievements::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_AchievementTotalachievements E_AchievementTotalachievements_List = 1;
  for (int i = 0; i < this->e_achievementtotalachievements_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_achievementtotalachievements_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_AchievementTotalachievements::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_AchievementTotalachievements E_AchievementTotalachievements_List = 1;
  total_size += 1 * this->e_achievementtotalachievements_list_size();
  for (int i = 0; i < this->e_achievementtotalachievements_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_achievementtotalachievements_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_AchievementTotalachievements::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_AchievementTotalachievements* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_AchievementTotalachievements*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_AchievementTotalachievements::MergeFrom(const Sheet_AchievementTotalachievements& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_achievementtotalachievements_list_.MergeFrom(from.e_achievementtotalachievements_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_AchievementTotalachievements::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_AchievementTotalachievements::CopyFrom(const Sheet_AchievementTotalachievements& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_AchievementTotalachievements::IsInitialized() const {

  return true;
}

void Sheet_AchievementTotalachievements::Swap(Sheet_AchievementTotalachievements* other) {
  if (other != this) {
    e_achievementtotalachievements_list_.Swap(&other->e_achievementtotalachievements_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_AchievementTotalachievements::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_AchievementTotalachievements_descriptor_;
  metadata.reflection = Sheet_AchievementTotalachievements_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
