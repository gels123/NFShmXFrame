// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: teleport.proto

#ifndef PROTOBUF_teleport_2eproto__INCLUDED
#define PROTOBUF_teleport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_teleport_2eproto();
void protobuf_AssignDesc_teleport_2eproto();
void protobuf_ShutdownFile_teleport_2eproto();

class teleportborn;
class Sheet_teleportborn;
class teleportteleport;
class Sheet_teleportteleport;

// ===================================================================

class teleportborn : public ::google::protobuf::Message {
 public:
  teleportborn();
  virtual ~teleportborn();

  teleportborn(const teleportborn& from);

  inline teleportborn& operator=(const teleportborn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const teleportborn& default_instance();

  void Swap(teleportborn* other);

  // implements Message ----------------------------------------------

  teleportborn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const teleportborn& from);
  void MergeFrom(const teleportborn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 scene = 3;
  inline bool has_scene() const;
  inline void clear_scene();
  static const int kSceneFieldNumber = 3;
  inline ::google::protobuf::int64 scene() const;
  inline void set_scene(::google::protobuf::int64 value);

  // optional int32 roleBornRange = 4;
  inline bool has_rolebornrange() const;
  inline void clear_rolebornrange();
  static const int kRoleBornRangeFieldNumber = 4;
  inline ::google::protobuf::int32 rolebornrange() const;
  inline void set_rolebornrange(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.teleportborn)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_scene();
  inline void clear_has_scene();
  inline void set_has_rolebornrange();
  inline void clear_has_rolebornrange();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 scene_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 rolebornrange_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_teleport_2eproto();
  friend void protobuf_AssignDesc_teleport_2eproto();
  friend void protobuf_ShutdownFile_teleport_2eproto();

  void InitAsDefaultInstance();
  static teleportborn* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_teleportborn : public ::google::protobuf::Message {
 public:
  Sheet_teleportborn();
  virtual ~Sheet_teleportborn();

  Sheet_teleportborn(const Sheet_teleportborn& from);

  inline Sheet_teleportborn& operator=(const Sheet_teleportborn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_teleportborn& default_instance();

  void Swap(Sheet_teleportborn* other);

  // implements Message ----------------------------------------------

  Sheet_teleportborn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_teleportborn& from);
  void MergeFrom(const Sheet_teleportborn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.teleportborn teleportborn_List = 1;
  inline int teleportborn_list_size() const;
  inline void clear_teleportborn_list();
  static const int kTeleportbornListFieldNumber = 1;
  inline const ::proto_ff::teleportborn& teleportborn_list(int index) const;
  inline ::proto_ff::teleportborn* mutable_teleportborn_list(int index);
  inline ::proto_ff::teleportborn* add_teleportborn_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::teleportborn >&
      teleportborn_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::teleportborn >*
      mutable_teleportborn_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_teleportborn)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::teleportborn > teleportborn_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_teleport_2eproto();
  friend void protobuf_AssignDesc_teleport_2eproto();
  friend void protobuf_ShutdownFile_teleport_2eproto();

  void InitAsDefaultInstance();
  static Sheet_teleportborn* default_instance_;
};
// -------------------------------------------------------------------

class teleportteleport : public ::google::protobuf::Message {
 public:
  teleportteleport();
  virtual ~teleportteleport();

  teleportteleport(const teleportteleport& from);

  inline teleportteleport& operator=(const teleportteleport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const teleportteleport& default_instance();

  void Swap(teleportteleport* other);

  // implements Message ----------------------------------------------

  teleportteleport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const teleportteleport& from);
  void MergeFrom(const teleportteleport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 teleportID = 1;
  inline bool has_teleportid() const;
  inline void clear_teleportid();
  static const int kTeleportIDFieldNumber = 1;
  inline ::google::protobuf::int64 teleportid() const;
  inline void set_teleportid(::google::protobuf::int64 value);

  // optional int32 teleportType = 2;
  inline bool has_teleporttype() const;
  inline void clear_teleporttype();
  static const int kTeleportTypeFieldNumber = 2;
  inline ::google::protobuf::int32 teleporttype() const;
  inline void set_teleporttype(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 monsterId = 4;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 4;
  inline ::google::protobuf::int64 monsterid() const;
  inline void set_monsterid(::google::protobuf::int64 value);

  // optional int32 showCondition = 5;
  inline bool has_showcondition() const;
  inline void clear_showcondition();
  static const int kShowConditionFieldNumber = 5;
  inline ::google::protobuf::int32 showcondition() const;
  inline void set_showcondition(::google::protobuf::int32 value);

  // optional string conditionValue = 6;
  inline bool has_conditionvalue() const;
  inline void clear_conditionvalue();
  static const int kConditionValueFieldNumber = 6;
  inline const ::std::string& conditionvalue() const;
  inline void set_conditionvalue(const ::std::string& value);
  inline void set_conditionvalue(const char* value);
  inline void set_conditionvalue(const char* value, size_t size);
  inline ::std::string* mutable_conditionvalue();
  inline ::std::string* release_conditionvalue();
  inline void set_allocated_conditionvalue(::std::string* conditionvalue);

  // optional int32 canEnter = 7;
  inline bool has_canenter() const;
  inline void clear_canenter();
  static const int kCanEnterFieldNumber = 7;
  inline ::google::protobuf::int32 canenter() const;
  inline void set_canenter(::google::protobuf::int32 value);

  // optional int64 showPathID = 8;
  inline bool has_showpathid() const;
  inline void clear_showpathid();
  static const int kShowPathIDFieldNumber = 8;
  inline ::google::protobuf::int64 showpathid() const;
  inline void set_showpathid(::google::protobuf::int64 value);

  // optional int64 toPathID = 9;
  inline bool has_topathid() const;
  inline void clear_topathid();
  static const int kToPathIDFieldNumber = 9;
  inline ::google::protobuf::int64 topathid() const;
  inline void set_topathid(::google::protobuf::int64 value);

  // optional int64 toDuplicateId = 10;
  inline bool has_toduplicateid() const;
  inline void clear_toduplicateid();
  static const int kToDuplicateIdFieldNumber = 10;
  inline ::google::protobuf::int64 toduplicateid() const;
  inline void set_toduplicateid(::google::protobuf::int64 value);

  // optional string enterCost = 11;
  inline bool has_entercost() const;
  inline void clear_entercost();
  static const int kEnterCostFieldNumber = 11;
  inline const ::std::string& entercost() const;
  inline void set_entercost(const ::std::string& value);
  inline void set_entercost(const char* value);
  inline void set_entercost(const char* value, size_t size);
  inline ::std::string* mutable_entercost();
  inline ::std::string* release_entercost();
  inline void set_allocated_entercost(::std::string* entercost);

  // optional int32 trigRange = 12;
  inline bool has_trigrange() const;
  inline void clear_trigrange();
  static const int kTrigRangeFieldNumber = 12;
  inline ::google::protobuf::int32 trigrange() const;
  inline void set_trigrange(::google::protobuf::int32 value);

  // optional int32 livingTime = 13;
  inline bool has_livingtime() const;
  inline void clear_livingtime();
  static const int kLivingTimeFieldNumber = 13;
  inline ::google::protobuf::int32 livingtime() const;
  inline void set_livingtime(::google::protobuf::int32 value);

  // optional int64 openChatId = 14;
  inline bool has_openchatid() const;
  inline void clear_openchatid();
  static const int kOpenChatIdFieldNumber = 14;
  inline ::google::protobuf::int64 openchatid() const;
  inline void set_openchatid(::google::protobuf::int64 value);

  // optional int64 progressChatId = 15;
  inline bool has_progresschatid() const;
  inline void clear_progresschatid();
  static const int kProgressChatIdFieldNumber = 15;
  inline ::google::protobuf::int64 progresschatid() const;
  inline void set_progresschatid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.teleportteleport)
 private:
  inline void set_has_teleportid();
  inline void clear_has_teleportid();
  inline void set_has_teleporttype();
  inline void clear_has_teleporttype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_showcondition();
  inline void clear_has_showcondition();
  inline void set_has_conditionvalue();
  inline void clear_has_conditionvalue();
  inline void set_has_canenter();
  inline void clear_has_canenter();
  inline void set_has_showpathid();
  inline void clear_has_showpathid();
  inline void set_has_topathid();
  inline void clear_has_topathid();
  inline void set_has_toduplicateid();
  inline void clear_has_toduplicateid();
  inline void set_has_entercost();
  inline void clear_has_entercost();
  inline void set_has_trigrange();
  inline void clear_has_trigrange();
  inline void set_has_livingtime();
  inline void clear_has_livingtime();
  inline void set_has_openchatid();
  inline void clear_has_openchatid();
  inline void set_has_progresschatid();
  inline void clear_has_progresschatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 teleportid_;
  ::std::string* name_;
  ::google::protobuf::int32 teleporttype_;
  ::google::protobuf::int32 showcondition_;
  ::google::protobuf::int64 monsterid_;
  ::std::string* conditionvalue_;
  ::google::protobuf::int64 showpathid_;
  ::google::protobuf::int64 topathid_;
  ::google::protobuf::int32 canenter_;
  ::google::protobuf::int32 trigrange_;
  ::google::protobuf::int64 toduplicateid_;
  ::std::string* entercost_;
  ::google::protobuf::int64 openchatid_;
  ::google::protobuf::int64 progresschatid_;
  ::google::protobuf::int32 livingtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_teleport_2eproto();
  friend void protobuf_AssignDesc_teleport_2eproto();
  friend void protobuf_ShutdownFile_teleport_2eproto();

  void InitAsDefaultInstance();
  static teleportteleport* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_teleportteleport : public ::google::protobuf::Message {
 public:
  Sheet_teleportteleport();
  virtual ~Sheet_teleportteleport();

  Sheet_teleportteleport(const Sheet_teleportteleport& from);

  inline Sheet_teleportteleport& operator=(const Sheet_teleportteleport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_teleportteleport& default_instance();

  void Swap(Sheet_teleportteleport* other);

  // implements Message ----------------------------------------------

  Sheet_teleportteleport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_teleportteleport& from);
  void MergeFrom(const Sheet_teleportteleport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.teleportteleport teleportteleport_List = 1;
  inline int teleportteleport_list_size() const;
  inline void clear_teleportteleport_list();
  static const int kTeleportteleportListFieldNumber = 1;
  inline const ::proto_ff::teleportteleport& teleportteleport_list(int index) const;
  inline ::proto_ff::teleportteleport* mutable_teleportteleport_list(int index);
  inline ::proto_ff::teleportteleport* add_teleportteleport_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::teleportteleport >&
      teleportteleport_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::teleportteleport >*
      mutable_teleportteleport_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_teleportteleport)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::teleportteleport > teleportteleport_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_teleport_2eproto();
  friend void protobuf_AssignDesc_teleport_2eproto();
  friend void protobuf_ShutdownFile_teleport_2eproto();

  void InitAsDefaultInstance();
  static Sheet_teleportteleport* default_instance_;
};
// ===================================================================


// ===================================================================

// teleportborn

// optional int64 id = 1;
inline bool teleportborn::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void teleportborn::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void teleportborn::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void teleportborn::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 teleportborn::id() const {
  return id_;
}
inline void teleportborn::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool teleportborn::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void teleportborn::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void teleportborn::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void teleportborn::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 teleportborn::type() const {
  return type_;
}
inline void teleportborn::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 scene = 3;
inline bool teleportborn::has_scene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void teleportborn::set_has_scene() {
  _has_bits_[0] |= 0x00000004u;
}
inline void teleportborn::clear_has_scene() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void teleportborn::clear_scene() {
  scene_ = GOOGLE_LONGLONG(0);
  clear_has_scene();
}
inline ::google::protobuf::int64 teleportborn::scene() const {
  return scene_;
}
inline void teleportborn::set_scene(::google::protobuf::int64 value) {
  set_has_scene();
  scene_ = value;
}

// optional int32 roleBornRange = 4;
inline bool teleportborn::has_rolebornrange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void teleportborn::set_has_rolebornrange() {
  _has_bits_[0] |= 0x00000008u;
}
inline void teleportborn::clear_has_rolebornrange() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void teleportborn::clear_rolebornrange() {
  rolebornrange_ = 0;
  clear_has_rolebornrange();
}
inline ::google::protobuf::int32 teleportborn::rolebornrange() const {
  return rolebornrange_;
}
inline void teleportborn::set_rolebornrange(::google::protobuf::int32 value) {
  set_has_rolebornrange();
  rolebornrange_ = value;
}

// -------------------------------------------------------------------

// Sheet_teleportborn

// repeated .proto_ff.teleportborn teleportborn_List = 1;
inline int Sheet_teleportborn::teleportborn_list_size() const {
  return teleportborn_list_.size();
}
inline void Sheet_teleportborn::clear_teleportborn_list() {
  teleportborn_list_.Clear();
}
inline const ::proto_ff::teleportborn& Sheet_teleportborn::teleportborn_list(int index) const {
  return teleportborn_list_.Get(index);
}
inline ::proto_ff::teleportborn* Sheet_teleportborn::mutable_teleportborn_list(int index) {
  return teleportborn_list_.Mutable(index);
}
inline ::proto_ff::teleportborn* Sheet_teleportborn::add_teleportborn_list() {
  return teleportborn_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::teleportborn >&
Sheet_teleportborn::teleportborn_list() const {
  return teleportborn_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::teleportborn >*
Sheet_teleportborn::mutable_teleportborn_list() {
  return &teleportborn_list_;
}

// -------------------------------------------------------------------

// teleportteleport

// optional int64 teleportID = 1;
inline bool teleportteleport::has_teleportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void teleportteleport::set_has_teleportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void teleportteleport::clear_has_teleportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void teleportteleport::clear_teleportid() {
  teleportid_ = GOOGLE_LONGLONG(0);
  clear_has_teleportid();
}
inline ::google::protobuf::int64 teleportteleport::teleportid() const {
  return teleportid_;
}
inline void teleportteleport::set_teleportid(::google::protobuf::int64 value) {
  set_has_teleportid();
  teleportid_ = value;
}

// optional int32 teleportType = 2;
inline bool teleportteleport::has_teleporttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void teleportteleport::set_has_teleporttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void teleportteleport::clear_has_teleporttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void teleportteleport::clear_teleporttype() {
  teleporttype_ = 0;
  clear_has_teleporttype();
}
inline ::google::protobuf::int32 teleportteleport::teleporttype() const {
  return teleporttype_;
}
inline void teleportteleport::set_teleporttype(::google::protobuf::int32 value) {
  set_has_teleporttype();
  teleporttype_ = value;
}

// optional string name = 3;
inline bool teleportteleport::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void teleportteleport::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void teleportteleport::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void teleportteleport::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& teleportteleport::name() const {
  return *name_;
}
inline void teleportteleport::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void teleportteleport::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void teleportteleport::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* teleportteleport::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* teleportteleport::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void teleportteleport::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 monsterId = 4;
inline bool teleportteleport::has_monsterid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void teleportteleport::set_has_monsterid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void teleportteleport::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void teleportteleport::clear_monsterid() {
  monsterid_ = GOOGLE_LONGLONG(0);
  clear_has_monsterid();
}
inline ::google::protobuf::int64 teleportteleport::monsterid() const {
  return monsterid_;
}
inline void teleportteleport::set_monsterid(::google::protobuf::int64 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional int32 showCondition = 5;
inline bool teleportteleport::has_showcondition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void teleportteleport::set_has_showcondition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void teleportteleport::clear_has_showcondition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void teleportteleport::clear_showcondition() {
  showcondition_ = 0;
  clear_has_showcondition();
}
inline ::google::protobuf::int32 teleportteleport::showcondition() const {
  return showcondition_;
}
inline void teleportteleport::set_showcondition(::google::protobuf::int32 value) {
  set_has_showcondition();
  showcondition_ = value;
}

// optional string conditionValue = 6;
inline bool teleportteleport::has_conditionvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void teleportteleport::set_has_conditionvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void teleportteleport::clear_has_conditionvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void teleportteleport::clear_conditionvalue() {
  if (conditionvalue_ != &::google::protobuf::internal::kEmptyString) {
    conditionvalue_->clear();
  }
  clear_has_conditionvalue();
}
inline const ::std::string& teleportteleport::conditionvalue() const {
  return *conditionvalue_;
}
inline void teleportteleport::set_conditionvalue(const ::std::string& value) {
  set_has_conditionvalue();
  if (conditionvalue_ == &::google::protobuf::internal::kEmptyString) {
    conditionvalue_ = new ::std::string;
  }
  conditionvalue_->assign(value);
}
inline void teleportteleport::set_conditionvalue(const char* value) {
  set_has_conditionvalue();
  if (conditionvalue_ == &::google::protobuf::internal::kEmptyString) {
    conditionvalue_ = new ::std::string;
  }
  conditionvalue_->assign(value);
}
inline void teleportteleport::set_conditionvalue(const char* value, size_t size) {
  set_has_conditionvalue();
  if (conditionvalue_ == &::google::protobuf::internal::kEmptyString) {
    conditionvalue_ = new ::std::string;
  }
  conditionvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* teleportteleport::mutable_conditionvalue() {
  set_has_conditionvalue();
  if (conditionvalue_ == &::google::protobuf::internal::kEmptyString) {
    conditionvalue_ = new ::std::string;
  }
  return conditionvalue_;
}
inline ::std::string* teleportteleport::release_conditionvalue() {
  clear_has_conditionvalue();
  if (conditionvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = conditionvalue_;
    conditionvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void teleportteleport::set_allocated_conditionvalue(::std::string* conditionvalue) {
  if (conditionvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete conditionvalue_;
  }
  if (conditionvalue) {
    set_has_conditionvalue();
    conditionvalue_ = conditionvalue;
  } else {
    clear_has_conditionvalue();
    conditionvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 canEnter = 7;
inline bool teleportteleport::has_canenter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void teleportteleport::set_has_canenter() {
  _has_bits_[0] |= 0x00000040u;
}
inline void teleportteleport::clear_has_canenter() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void teleportteleport::clear_canenter() {
  canenter_ = 0;
  clear_has_canenter();
}
inline ::google::protobuf::int32 teleportteleport::canenter() const {
  return canenter_;
}
inline void teleportteleport::set_canenter(::google::protobuf::int32 value) {
  set_has_canenter();
  canenter_ = value;
}

// optional int64 showPathID = 8;
inline bool teleportteleport::has_showpathid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void teleportteleport::set_has_showpathid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void teleportteleport::clear_has_showpathid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void teleportteleport::clear_showpathid() {
  showpathid_ = GOOGLE_LONGLONG(0);
  clear_has_showpathid();
}
inline ::google::protobuf::int64 teleportteleport::showpathid() const {
  return showpathid_;
}
inline void teleportteleport::set_showpathid(::google::protobuf::int64 value) {
  set_has_showpathid();
  showpathid_ = value;
}

// optional int64 toPathID = 9;
inline bool teleportteleport::has_topathid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void teleportteleport::set_has_topathid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void teleportteleport::clear_has_topathid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void teleportteleport::clear_topathid() {
  topathid_ = GOOGLE_LONGLONG(0);
  clear_has_topathid();
}
inline ::google::protobuf::int64 teleportteleport::topathid() const {
  return topathid_;
}
inline void teleportteleport::set_topathid(::google::protobuf::int64 value) {
  set_has_topathid();
  topathid_ = value;
}

// optional int64 toDuplicateId = 10;
inline bool teleportteleport::has_toduplicateid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void teleportteleport::set_has_toduplicateid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void teleportteleport::clear_has_toduplicateid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void teleportteleport::clear_toduplicateid() {
  toduplicateid_ = GOOGLE_LONGLONG(0);
  clear_has_toduplicateid();
}
inline ::google::protobuf::int64 teleportteleport::toduplicateid() const {
  return toduplicateid_;
}
inline void teleportteleport::set_toduplicateid(::google::protobuf::int64 value) {
  set_has_toduplicateid();
  toduplicateid_ = value;
}

// optional string enterCost = 11;
inline bool teleportteleport::has_entercost() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void teleportteleport::set_has_entercost() {
  _has_bits_[0] |= 0x00000400u;
}
inline void teleportteleport::clear_has_entercost() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void teleportteleport::clear_entercost() {
  if (entercost_ != &::google::protobuf::internal::kEmptyString) {
    entercost_->clear();
  }
  clear_has_entercost();
}
inline const ::std::string& teleportteleport::entercost() const {
  return *entercost_;
}
inline void teleportteleport::set_entercost(const ::std::string& value) {
  set_has_entercost();
  if (entercost_ == &::google::protobuf::internal::kEmptyString) {
    entercost_ = new ::std::string;
  }
  entercost_->assign(value);
}
inline void teleportteleport::set_entercost(const char* value) {
  set_has_entercost();
  if (entercost_ == &::google::protobuf::internal::kEmptyString) {
    entercost_ = new ::std::string;
  }
  entercost_->assign(value);
}
inline void teleportteleport::set_entercost(const char* value, size_t size) {
  set_has_entercost();
  if (entercost_ == &::google::protobuf::internal::kEmptyString) {
    entercost_ = new ::std::string;
  }
  entercost_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* teleportteleport::mutable_entercost() {
  set_has_entercost();
  if (entercost_ == &::google::protobuf::internal::kEmptyString) {
    entercost_ = new ::std::string;
  }
  return entercost_;
}
inline ::std::string* teleportteleport::release_entercost() {
  clear_has_entercost();
  if (entercost_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entercost_;
    entercost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void teleportteleport::set_allocated_entercost(::std::string* entercost) {
  if (entercost_ != &::google::protobuf::internal::kEmptyString) {
    delete entercost_;
  }
  if (entercost) {
    set_has_entercost();
    entercost_ = entercost;
  } else {
    clear_has_entercost();
    entercost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 trigRange = 12;
inline bool teleportteleport::has_trigrange() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void teleportteleport::set_has_trigrange() {
  _has_bits_[0] |= 0x00000800u;
}
inline void teleportteleport::clear_has_trigrange() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void teleportteleport::clear_trigrange() {
  trigrange_ = 0;
  clear_has_trigrange();
}
inline ::google::protobuf::int32 teleportteleport::trigrange() const {
  return trigrange_;
}
inline void teleportteleport::set_trigrange(::google::protobuf::int32 value) {
  set_has_trigrange();
  trigrange_ = value;
}

// optional int32 livingTime = 13;
inline bool teleportteleport::has_livingtime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void teleportteleport::set_has_livingtime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void teleportteleport::clear_has_livingtime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void teleportteleport::clear_livingtime() {
  livingtime_ = 0;
  clear_has_livingtime();
}
inline ::google::protobuf::int32 teleportteleport::livingtime() const {
  return livingtime_;
}
inline void teleportteleport::set_livingtime(::google::protobuf::int32 value) {
  set_has_livingtime();
  livingtime_ = value;
}

// optional int64 openChatId = 14;
inline bool teleportteleport::has_openchatid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void teleportteleport::set_has_openchatid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void teleportteleport::clear_has_openchatid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void teleportteleport::clear_openchatid() {
  openchatid_ = GOOGLE_LONGLONG(0);
  clear_has_openchatid();
}
inline ::google::protobuf::int64 teleportteleport::openchatid() const {
  return openchatid_;
}
inline void teleportteleport::set_openchatid(::google::protobuf::int64 value) {
  set_has_openchatid();
  openchatid_ = value;
}

// optional int64 progressChatId = 15;
inline bool teleportteleport::has_progresschatid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void teleportteleport::set_has_progresschatid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void teleportteleport::clear_has_progresschatid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void teleportteleport::clear_progresschatid() {
  progresschatid_ = GOOGLE_LONGLONG(0);
  clear_has_progresschatid();
}
inline ::google::protobuf::int64 teleportteleport::progresschatid() const {
  return progresschatid_;
}
inline void teleportteleport::set_progresschatid(::google::protobuf::int64 value) {
  set_has_progresschatid();
  progresschatid_ = value;
}

// -------------------------------------------------------------------

// Sheet_teleportteleport

// repeated .proto_ff.teleportteleport teleportteleport_List = 1;
inline int Sheet_teleportteleport::teleportteleport_list_size() const {
  return teleportteleport_list_.size();
}
inline void Sheet_teleportteleport::clear_teleportteleport_list() {
  teleportteleport_list_.Clear();
}
inline const ::proto_ff::teleportteleport& Sheet_teleportteleport::teleportteleport_list(int index) const {
  return teleportteleport_list_.Get(index);
}
inline ::proto_ff::teleportteleport* Sheet_teleportteleport::mutable_teleportteleport_list(int index) {
  return teleportteleport_list_.Mutable(index);
}
inline ::proto_ff::teleportteleport* Sheet_teleportteleport::add_teleportteleport_list() {
  return teleportteleport_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::teleportteleport >&
Sheet_teleportteleport::teleportteleport_list() const {
  return teleportteleport_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::teleportteleport >*
Sheet_teleportteleport::mutable_teleportteleport_list() {
  return &teleportteleport_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_teleport_2eproto__INCLUDED
