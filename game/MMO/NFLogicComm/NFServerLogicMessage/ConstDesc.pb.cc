// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConstDesc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConstDesc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* ConstDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ConstDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ConstDesc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enConstType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConstDesc_2eproto() {
  protobuf_AddDesc_ConstDesc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConstDesc.proto");
  GOOGLE_CHECK(file != NULL);
  ConstDesc_descriptor_ = file->message_type(0);
  static const int ConstDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstDesc, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstDesc, type_name_),
  };
  ConstDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConstDesc_descriptor_,
      ConstDesc::default_instance_,
      ConstDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConstDesc));
  Sheet_ConstDesc_descriptor_ = file->message_type(1);
  static const int Sheet_ConstDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConstDesc, constdesc_list_),
  };
  Sheet_ConstDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ConstDesc_descriptor_,
      Sheet_ConstDesc::default_instance_,
      Sheet_ConstDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConstDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConstDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ConstDesc));
  enConstType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConstDesc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConstDesc_descriptor_, &ConstDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ConstDesc_descriptor_, &Sheet_ConstDesc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConstDesc_2eproto() {
  delete ConstDesc::default_instance_;
  delete ConstDesc_reflection_;
  delete Sheet_ConstDesc::default_instance_;
  delete Sheet_ConstDesc_reflection_;
}

void protobuf_AddDesc_ConstDesc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ConstDesc.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\032\022proto_common.proto\"\254\001\n\tConst"
    "Desc\022,\n\002id\030\001 \001(\005B \302\377\024\006\347\274\226\345\217\267\272\304\023\006\347\274\226\345\217\267\300\202"
    "\024\002\230\304\023\001\250\304\023\001\0223\n\005value\030\002 \001(\tB$\302\377\024\t\345\270\270\351\207\217\345\200\274"
    "\272\304\023\t\345\270\270\351\207\217\345\200\274\220\301\024\200\001\310\202\024\200\001\022<\n\ttype_name\030\003 \001"
    "(\tB)\302\377\024\014\347\261\273\345\236\213\345\220\215\347\247\260\272\304\023\014\347\261\273\345\236\213\345\220\215\347\247\260\230\301\024\001"
    "\310\202\024\200\001\"D\n\017Sheet_ConstDesc\0221\n\016ConstDesc_Li"
    "st\030\001 \003(\0132\023.proto_ff.ConstDescB\004\210\301\024d*\314\003\n\013"
    "enConstType\022\021\n\rEN_CONST_NONE\020\000\022:\n\031EN_CON"
    "ST_USER_INIT_JETTON\020\001\032\033\202}\030\347\216\251\345\256\266\345\210\235\345\247\213\350\265"
    "\240\351\200\201\351\207\221\345\270\201\0222\n\027EN_CONST_USER_INIT_FACE\020\002\032"
    "\025\202}\022\347\216\251\345\256\266\345\210\235\345\247\213\345\244\264\345\203\217\022\?\n\036EN_CONST_USER_"
    "INIT_BANK_JETTON\020\003\032\033\202}\030\347\216\251\345\256\266\345\210\235\345\247\213\351\223\266\350\241"
    "\214\345\257\206\347\240\201\022Q\n\032EN_CONST_USER_ACH_WITH_FEE\020\004\032"
    "1\202}.=0 \346\212\275\346\260\264\347\256\227\344\270\252\346\265\201\346\260\264\357\274\214 =1 \346\212\275\346\260\264\344\270"
    "\215\347\256\227\346\265\201\346\260\264\022b\n\033EN_CONST_USER_FEE_WITH_POU"
    "R\020\005\032A\202}>=0\346\227\266\344\270\272\344\270\215\345\212\240\346\234\254\351\207\221\347\232\204\346\212\275\346\260\264\357\274\214"
    " =1\346\227\266\344\270\272\345\212\240\344\270\212\346\234\254\351\207\221\347\232\204\346\212\275\346\260\264\022B\n\033EN_CON"
    "ST_USER_MIN_BANK_DRAW\020\006\032!\202}\036\351\235\236VIP\350\275\254VIP"
    "\346\234\200\345\260\217\350\275\254\350\264\246\351\242\235\345\272\246", 778);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConstDesc.proto", &protobuf_RegisterTypes);
  ConstDesc::default_instance_ = new ConstDesc();
  Sheet_ConstDesc::default_instance_ = new Sheet_ConstDesc();
  ConstDesc::default_instance_->InitAsDefaultInstance();
  Sheet_ConstDesc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConstDesc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConstDesc_2eproto {
  StaticDescriptorInitializer_ConstDesc_2eproto() {
    protobuf_AddDesc_ConstDesc_2eproto();
  }
} static_descriptor_initializer_ConstDesc_2eproto_;
const ::google::protobuf::EnumDescriptor* enConstType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enConstType_descriptor_;
}
bool enConstType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ConstDesc::kIdFieldNumber;
const int ConstDesc::kValueFieldNumber;
const int ConstDesc::kTypeNameFieldNumber;
#endif  // !_MSC_VER

ConstDesc::ConstDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConstDesc::InitAsDefaultInstance() {
}

ConstDesc::ConstDesc(const ConstDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConstDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConstDesc::~ConstDesc() {
  SharedDtor();
}

void ConstDesc::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (type_name_ != &::google::protobuf::internal::kEmptyString) {
    delete type_name_;
  }
  if (this != default_instance_) {
  }
}

void ConstDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstDesc_descriptor_;
}

const ConstDesc& ConstDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConstDesc_2eproto();
  return *default_instance_;
}

ConstDesc* ConstDesc::default_instance_ = NULL;

ConstDesc* ConstDesc::New() const {
  return new ConstDesc;
}

void ConstDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_type_name()) {
      if (type_name_ != &::google::protobuf::internal::kEmptyString) {
        type_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConstDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type_name;
        break;
      }

      // optional string type_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConstDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  // optional string type_name = 3;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConstDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string type_name = 3;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConstDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string type_name = 3;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConstDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConstDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConstDesc::MergeFrom(const ConstDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type_name()) {
      set_type_name(from.type_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConstDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstDesc::CopyFrom(const ConstDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstDesc::IsInitialized() const {

  return true;
}

void ConstDesc::Swap(ConstDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(type_name_, other->type_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConstDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstDesc_descriptor_;
  metadata.reflection = ConstDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ConstDesc::kConstDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_ConstDesc::Sheet_ConstDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ConstDesc::InitAsDefaultInstance() {
}

Sheet_ConstDesc::Sheet_ConstDesc(const Sheet_ConstDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ConstDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ConstDesc::~Sheet_ConstDesc() {
  SharedDtor();
}

void Sheet_ConstDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ConstDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ConstDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ConstDesc_descriptor_;
}

const Sheet_ConstDesc& Sheet_ConstDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConstDesc_2eproto();
  return *default_instance_;
}

Sheet_ConstDesc* Sheet_ConstDesc::default_instance_ = NULL;

Sheet_ConstDesc* Sheet_ConstDesc::New() const {
  return new Sheet_ConstDesc;
}

void Sheet_ConstDesc::Clear() {
  constdesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ConstDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ConstDesc ConstDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConstDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constdesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ConstDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ConstDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ConstDesc ConstDesc_List = 1;
  for (int i = 0; i < this->constdesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->constdesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ConstDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ConstDesc ConstDesc_List = 1;
  for (int i = 0; i < this->constdesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->constdesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ConstDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ConstDesc ConstDesc_List = 1;
  total_size += 1 * this->constdesc_list_size();
  for (int i = 0; i < this->constdesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constdesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ConstDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ConstDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ConstDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ConstDesc::MergeFrom(const Sheet_ConstDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  constdesc_list_.MergeFrom(from.constdesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ConstDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ConstDesc::CopyFrom(const Sheet_ConstDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ConstDesc::IsInitialized() const {

  return true;
}

void Sheet_ConstDesc::Swap(Sheet_ConstDesc* other) {
  if (other != this) {
    constdesc_list_.Swap(&other->constdesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ConstDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ConstDesc_descriptor_;
  metadata.reflection = Sheet_ConstDesc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
