// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NameDesc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NameDesc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NameDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_NameDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_NameDesc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NameDesc_2eproto() {
  protobuf_AddDesc_NameDesc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NameDesc.proto");
  GOOGLE_CHECK(file != NULL);
  NameDesc_descriptor_ = file->message_type(0);
  static const int NameDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameDesc, name_),
  };
  NameDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameDesc_descriptor_,
      NameDesc::default_instance_,
      NameDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameDesc));
  Sheet_NameDesc_descriptor_ = file->message_type(1);
  static const int Sheet_NameDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NameDesc, namedesc_list_),
  };
  Sheet_NameDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_NameDesc_descriptor_,
      Sheet_NameDesc::default_instance_,
      Sheet_NameDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NameDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NameDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_NameDesc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NameDesc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameDesc_descriptor_, &NameDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_NameDesc_descriptor_, &Sheet_NameDesc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NameDesc_2eproto() {
  delete NameDesc::default_instance_;
  delete NameDesc_reflection_;
  delete Sheet_NameDesc::default_instance_;
  delete Sheet_NameDesc_reflection_;
}

void protobuf_AddDesc_NameDesc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016NameDesc.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\032\022proto_common.proto\"h\n\010NameDes"
    "c\022,\n\002id\030\001 \001(\004B \302\377\024\006\347\274\226\345\217\267\272\304\023\006\347\274\226\345\217\267\300\202\024\002\230"
    "\304\023\001\250\304\023\001\022.\n\004name\030\002 \001(\tB \302\377\024\006\345\220\215\345\255\227\272\304\023\006\345\220\215"
    "\345\255\227\300\202\024\003\220\301\024@\310\202\024@\"A\n\016Sheet_NameDesc\022/\n\rNam"
    "eDesc_List\030\001 \003(\0132\022.proto_ff.NameDescB\004\210\301"
    "\024d", 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NameDesc.proto", &protobuf_RegisterTypes);
  NameDesc::default_instance_ = new NameDesc();
  Sheet_NameDesc::default_instance_ = new Sheet_NameDesc();
  NameDesc::default_instance_->InitAsDefaultInstance();
  Sheet_NameDesc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NameDesc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NameDesc_2eproto {
  StaticDescriptorInitializer_NameDesc_2eproto() {
    protobuf_AddDesc_NameDesc_2eproto();
  }
} static_descriptor_initializer_NameDesc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NameDesc::kIdFieldNumber;
const int NameDesc::kNameFieldNumber;
#endif  // !_MSC_VER

NameDesc::NameDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameDesc::InitAsDefaultInstance() {
}

NameDesc::NameDesc(const NameDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameDesc::~NameDesc() {
  SharedDtor();
}

void NameDesc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NameDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameDesc_descriptor_;
}

const NameDesc& NameDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NameDesc_2eproto();
  return *default_instance_;
}

NameDesc* NameDesc::default_instance_ = NULL;

NameDesc* NameDesc::New() const {
  return new NameDesc;
}

void NameDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameDesc::MergeFrom(const NameDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameDesc::CopyFrom(const NameDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameDesc::IsInitialized() const {

  return true;
}

void NameDesc::Swap(NameDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameDesc_descriptor_;
  metadata.reflection = NameDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_NameDesc::kNameDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_NameDesc::Sheet_NameDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_NameDesc::InitAsDefaultInstance() {
}

Sheet_NameDesc::Sheet_NameDesc(const Sheet_NameDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_NameDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_NameDesc::~Sheet_NameDesc() {
  SharedDtor();
}

void Sheet_NameDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_NameDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_NameDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_NameDesc_descriptor_;
}

const Sheet_NameDesc& Sheet_NameDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NameDesc_2eproto();
  return *default_instance_;
}

Sheet_NameDesc* Sheet_NameDesc::default_instance_ = NULL;

Sheet_NameDesc* Sheet_NameDesc::New() const {
  return new Sheet_NameDesc;
}

void Sheet_NameDesc::Clear() {
  namedesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_NameDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.NameDesc NameDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NameDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_namedesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_NameDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_NameDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.NameDesc NameDesc_List = 1;
  for (int i = 0; i < this->namedesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->namedesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_NameDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.NameDesc NameDesc_List = 1;
  for (int i = 0; i < this->namedesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->namedesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_NameDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.NameDesc NameDesc_List = 1;
  total_size += 1 * this->namedesc_list_size();
  for (int i = 0; i < this->namedesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->namedesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_NameDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_NameDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_NameDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_NameDesc::MergeFrom(const Sheet_NameDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  namedesc_list_.MergeFrom(from.namedesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_NameDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_NameDesc::CopyFrom(const Sheet_NameDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_NameDesc::IsInitialized() const {

  return true;
}

void Sheet_NameDesc::Swap(Sheet_NameDesc* other) {
  if (other != this) {
    namedesc_list_.Swap(&other->namedesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_NameDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_NameDesc_descriptor_;
  metadata.reflection = Sheet_NameDesc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
