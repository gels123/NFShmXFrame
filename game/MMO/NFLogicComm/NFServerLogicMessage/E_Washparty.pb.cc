// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Washparty.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Washparty.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_WashpartyWashparty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WashpartyWashparty_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WashpartyWashparty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WashpartyWashparty_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WashpartyExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WashpartyExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WashpartyExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WashpartyExp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fWashparty_2eproto() {
  protobuf_AddDesc_E_5fWashparty_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Washparty.proto");
  GOOGLE_CHECK(file != NULL);
  E_WashpartyWashparty_descriptor_ = file->message_type(0);
  static const int E_WashpartyWashparty_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_collectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_collectnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_collectposid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_collectgeninterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_collectmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_splashnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_splashreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_massagenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_massagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_massagereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_pairexpaddition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_expaddinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_splashsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_birthareaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, m_actid_),
  };
  E_WashpartyWashparty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WashpartyWashparty_descriptor_,
      E_WashpartyWashparty::default_instance_,
      E_WashpartyWashparty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyWashparty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WashpartyWashparty));
  Sheet_WashpartyWashparty_descriptor_ = file->message_type(1);
  static const int Sheet_WashpartyWashparty_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WashpartyWashparty, e_washpartywashparty_list_),
  };
  Sheet_WashpartyWashparty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WashpartyWashparty_descriptor_,
      Sheet_WashpartyWashparty::default_instance_,
      Sheet_WashpartyWashparty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WashpartyWashparty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WashpartyWashparty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WashpartyWashparty));
  E_WashpartyExp_descriptor_ = file->message_type(2);
  static const int E_WashpartyExp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyExp, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyExp, m_washexp_),
  };
  E_WashpartyExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WashpartyExp_descriptor_,
      E_WashpartyExp::default_instance_,
      E_WashpartyExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WashpartyExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WashpartyExp));
  Sheet_WashpartyExp_descriptor_ = file->message_type(3);
  static const int Sheet_WashpartyExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WashpartyExp, e_washpartyexp_list_),
  };
  Sheet_WashpartyExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WashpartyExp_descriptor_,
      Sheet_WashpartyExp::default_instance_,
      Sheet_WashpartyExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WashpartyExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WashpartyExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WashpartyExp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fWashparty_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WashpartyWashparty_descriptor_, &E_WashpartyWashparty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WashpartyWashparty_descriptor_, &Sheet_WashpartyWashparty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WashpartyExp_descriptor_, &E_WashpartyExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WashpartyExp_descriptor_, &Sheet_WashpartyExp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fWashparty_2eproto() {
  delete E_WashpartyWashparty::default_instance_;
  delete E_WashpartyWashparty_reflection_;
  delete Sheet_WashpartyWashparty::default_instance_;
  delete Sheet_WashpartyWashparty_reflection_;
  delete E_WashpartyExp::default_instance_;
  delete E_WashpartyExp_reflection_;
  delete Sheet_WashpartyExp::default_instance_;
  delete Sheet_WashpartyExp_reflection_;
}

void protobuf_AddDesc_E_5fWashparty_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021E_Washparty.proto\022\010proto_ff\032\025yd_fieldo"
    "ptions.proto\"\226\006\n\024E_WashpartyWashparty\022\024\n"
    "\004m_id\030\001 \001(\005B\006\302\377\024\002id\022$\n\013m_collectId\030\002 \001(\005"
    "B\017\302\377\024\013\351\207\207\351\233\206\347\211\251id\022&\n\014m_collectNum\030\003 \001(\005B"
    "\020\302\377\024\014\351\207\207\351\233\206\346\254\241\346\225\260\022-\n\016m_collectPosId\030\004 \001("
    "\005B\025\302\377\024\021\351\207\207\351\233\206\347\211\251\344\275\215\347\275\256id\022=\n\024m_collectGen"
    "Interval\030\005 \001(\005B\037\302\377\024\033\351\207\207\351\233\206\347\211\251\345\210\267\346\226\260\346\227\266\351\227"
    "\264\351\227\264\351\232\224\022/\n\014m_collectMax\030\006 \001(\005B\031\302\377\024\025\351\207\207\351\233"
    "\206\347\211\251\346\234\200\345\244\247\346\225\260\351\207\217\022%\n\013m_splashNum\030\007 \001(\005B\020\302"
    "\377\024\014\346\263\274\346\260\264\346\254\241\346\225\260\022*\n\016m_splashReward\030\010 \001(\005B"
    "\022\302\377\024\016\346\263\274\346\260\264\345\245\226\345\212\261id\022&\n\014m_massageNum\030\t \001("
    "\005B\020\302\377\024\014\346\214\211\346\221\251\346\254\241\346\225\260\022\'\n\rm_massageTime\030\n \001"
    "(\005B\020\302\377\024\014\346\214\211\346\221\251\346\227\266\351\225\277\022+\n\017m_massageReward\030"
    "\013 \001(\005B\022\302\377\024\016\346\214\211\346\221\251\345\245\226\345\212\261id\0224\n\021m_pairExpAd"
    "dition\030\014 \001(\005B\031\302\377\024\025\345\217\214\344\277\256\346\227\266\347\273\217\351\252\214\345\212\240\346\210\220\022"
    "#\n\007m_mapId\030\r \001(\005B\022\302\377\024\016\346\211\200\345\234\250\345\234\260\345\233\276id\022$\n\n"
    "m_duration\030\016 \001(\005B\020\302\377\024\014\346\214\201\347\273\255\346\227\266\351\227\264\0229\n\020m_"
    "expAddInterval\030\017 \001(\005B\037\302\377\024\033\345\244\232\345\260\221\347\247\222\350\216\267\345\276"
    "\227\344\270\200\346\254\241\347\273\217\351\252\214\022&\n\nm_splashSI\030\020 \001(\005B\022\302\377\024\016\346"
    "\263\274\346\260\264\346\212\200\350\203\275ID\022\'\n\rm_birthAreaId\030\021 \001(\005B\020\302\377"
    "\024\014\345\207\272\347\224\237\345\214\272\345\237\237\022\035\n\007m_actId\030\022 \001(\005B\014\302\377\024\010\346\264\273"
    "\345\212\250ID\"c\n\030Sheet_WashpartyWashparty\022G\n\031E_W"
    "ashpartyWashparty_List\030\001 \003(\0132\036.proto_ff."
    "E_WashpartyWashpartyB\004\210\301\024\020\"O\n\016E_Washpart"
    "yExp\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022#\n\tm_wash"
    "Exp\030\002 \001(\003B\020\302\377\024\014\346\263\241\346\276\241\347\273\217\351\252\214\"R\n\022Sheet_Was"
    "hpartyExp\022<\n\023E_WashpartyExp_List\030\001 \003(\0132\030"
    ".proto_ff.E_WashpartyExpB\005\210\301\024\200\020", 1111);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Washparty.proto", &protobuf_RegisterTypes);
  E_WashpartyWashparty::default_instance_ = new E_WashpartyWashparty();
  Sheet_WashpartyWashparty::default_instance_ = new Sheet_WashpartyWashparty();
  E_WashpartyExp::default_instance_ = new E_WashpartyExp();
  Sheet_WashpartyExp::default_instance_ = new Sheet_WashpartyExp();
  E_WashpartyWashparty::default_instance_->InitAsDefaultInstance();
  Sheet_WashpartyWashparty::default_instance_->InitAsDefaultInstance();
  E_WashpartyExp::default_instance_->InitAsDefaultInstance();
  Sheet_WashpartyExp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fWashparty_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fWashparty_2eproto {
  StaticDescriptorInitializer_E_5fWashparty_2eproto() {
    protobuf_AddDesc_E_5fWashparty_2eproto();
  }
} static_descriptor_initializer_E_5fWashparty_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_WashpartyWashparty::kMIdFieldNumber;
const int E_WashpartyWashparty::kMCollectIdFieldNumber;
const int E_WashpartyWashparty::kMCollectNumFieldNumber;
const int E_WashpartyWashparty::kMCollectPosIdFieldNumber;
const int E_WashpartyWashparty::kMCollectGenIntervalFieldNumber;
const int E_WashpartyWashparty::kMCollectMaxFieldNumber;
const int E_WashpartyWashparty::kMSplashNumFieldNumber;
const int E_WashpartyWashparty::kMSplashRewardFieldNumber;
const int E_WashpartyWashparty::kMMassageNumFieldNumber;
const int E_WashpartyWashparty::kMMassageTimeFieldNumber;
const int E_WashpartyWashparty::kMMassageRewardFieldNumber;
const int E_WashpartyWashparty::kMPairExpAdditionFieldNumber;
const int E_WashpartyWashparty::kMMapIdFieldNumber;
const int E_WashpartyWashparty::kMDurationFieldNumber;
const int E_WashpartyWashparty::kMExpAddIntervalFieldNumber;
const int E_WashpartyWashparty::kMSplashSIFieldNumber;
const int E_WashpartyWashparty::kMBirthAreaIdFieldNumber;
const int E_WashpartyWashparty::kMActIdFieldNumber;
#endif  // !_MSC_VER

E_WashpartyWashparty::E_WashpartyWashparty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WashpartyWashparty::InitAsDefaultInstance() {
}

E_WashpartyWashparty::E_WashpartyWashparty(const E_WashpartyWashparty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WashpartyWashparty::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_collectid_ = 0;
  m_collectnum_ = 0;
  m_collectposid_ = 0;
  m_collectgeninterval_ = 0;
  m_collectmax_ = 0;
  m_splashnum_ = 0;
  m_splashreward_ = 0;
  m_massagenum_ = 0;
  m_massagetime_ = 0;
  m_massagereward_ = 0;
  m_pairexpaddition_ = 0;
  m_mapid_ = 0;
  m_duration_ = 0;
  m_expaddinterval_ = 0;
  m_splashsi_ = 0;
  m_birthareaid_ = 0;
  m_actid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WashpartyWashparty::~E_WashpartyWashparty() {
  SharedDtor();
}

void E_WashpartyWashparty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WashpartyWashparty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WashpartyWashparty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WashpartyWashparty_descriptor_;
}

const E_WashpartyWashparty& E_WashpartyWashparty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWashparty_2eproto();
  return *default_instance_;
}

E_WashpartyWashparty* E_WashpartyWashparty::default_instance_ = NULL;

E_WashpartyWashparty* E_WashpartyWashparty::New() const {
  return new E_WashpartyWashparty;
}

void E_WashpartyWashparty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_collectid_ = 0;
    m_collectnum_ = 0;
    m_collectposid_ = 0;
    m_collectgeninterval_ = 0;
    m_collectmax_ = 0;
    m_splashnum_ = 0;
    m_splashreward_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_massagenum_ = 0;
    m_massagetime_ = 0;
    m_massagereward_ = 0;
    m_pairexpaddition_ = 0;
    m_mapid_ = 0;
    m_duration_ = 0;
    m_expaddinterval_ = 0;
    m_splashsi_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_birthareaid_ = 0;
    m_actid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WashpartyWashparty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_collectId;
        break;
      }

      // optional int32 m_collectId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_collectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_collectid_)));
          set_has_m_collectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_collectNum;
        break;
      }

      // optional int32 m_collectNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_collectNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_collectnum_)));
          set_has_m_collectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_collectPosId;
        break;
      }

      // optional int32 m_collectPosId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_collectPosId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_collectposid_)));
          set_has_m_collectposid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_collectGenInterval;
        break;
      }

      // optional int32 m_collectGenInterval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_collectGenInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_collectgeninterval_)));
          set_has_m_collectgeninterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_collectMax;
        break;
      }

      // optional int32 m_collectMax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_collectMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_collectmax_)));
          set_has_m_collectmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_splashNum;
        break;
      }

      // optional int32 m_splashNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_splashNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_splashnum_)));
          set_has_m_splashnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_splashReward;
        break;
      }

      // optional int32 m_splashReward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_splashReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_splashreward_)));
          set_has_m_splashreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_massageNum;
        break;
      }

      // optional int32 m_massageNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_massageNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_massagenum_)));
          set_has_m_massagenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_massageTime;
        break;
      }

      // optional int32 m_massageTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_massageTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_massagetime_)));
          set_has_m_massagetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_massageReward;
        break;
      }

      // optional int32 m_massageReward = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_massageReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_massagereward_)));
          set_has_m_massagereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_pairExpAddition;
        break;
      }

      // optional int32 m_pairExpAddition = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pairExpAddition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pairexpaddition_)));
          set_has_m_pairexpaddition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_mapId;
        break;
      }

      // optional int32 m_mapId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mapid_)));
          set_has_m_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_duration;
        break;
      }

      // optional int32 m_duration = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_duration_)));
          set_has_m_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_expAddInterval;
        break;
      }

      // optional int32 m_expAddInterval = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expAddInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_expaddinterval_)));
          set_has_m_expaddinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_splashSI;
        break;
      }

      // optional int32 m_splashSI = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_splashSI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_splashsi_)));
          set_has_m_splashsi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_birthAreaId;
        break;
      }

      // optional int32 m_birthAreaId = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_birthAreaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_birthareaid_)));
          set_has_m_birthareaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_actId;
        break;
      }

      // optional int32 m_actId = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_actId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_actid_)));
          set_has_m_actid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WashpartyWashparty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_collectId = 2;
  if (has_m_collectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_collectid(), output);
  }

  // optional int32 m_collectNum = 3;
  if (has_m_collectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_collectnum(), output);
  }

  // optional int32 m_collectPosId = 4;
  if (has_m_collectposid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_collectposid(), output);
  }

  // optional int32 m_collectGenInterval = 5;
  if (has_m_collectgeninterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_collectgeninterval(), output);
  }

  // optional int32 m_collectMax = 6;
  if (has_m_collectmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_collectmax(), output);
  }

  // optional int32 m_splashNum = 7;
  if (has_m_splashnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_splashnum(), output);
  }

  // optional int32 m_splashReward = 8;
  if (has_m_splashreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_splashreward(), output);
  }

  // optional int32 m_massageNum = 9;
  if (has_m_massagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_massagenum(), output);
  }

  // optional int32 m_massageTime = 10;
  if (has_m_massagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_massagetime(), output);
  }

  // optional int32 m_massageReward = 11;
  if (has_m_massagereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_massagereward(), output);
  }

  // optional int32 m_pairExpAddition = 12;
  if (has_m_pairexpaddition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_pairexpaddition(), output);
  }

  // optional int32 m_mapId = 13;
  if (has_m_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_mapid(), output);
  }

  // optional int32 m_duration = 14;
  if (has_m_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_duration(), output);
  }

  // optional int32 m_expAddInterval = 15;
  if (has_m_expaddinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_expaddinterval(), output);
  }

  // optional int32 m_splashSI = 16;
  if (has_m_splashsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_splashsi(), output);
  }

  // optional int32 m_birthAreaId = 17;
  if (has_m_birthareaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_birthareaid(), output);
  }

  // optional int32 m_actId = 18;
  if (has_m_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_actid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WashpartyWashparty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_collectId = 2;
  if (has_m_collectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_collectid(), target);
  }

  // optional int32 m_collectNum = 3;
  if (has_m_collectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_collectnum(), target);
  }

  // optional int32 m_collectPosId = 4;
  if (has_m_collectposid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_collectposid(), target);
  }

  // optional int32 m_collectGenInterval = 5;
  if (has_m_collectgeninterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_collectgeninterval(), target);
  }

  // optional int32 m_collectMax = 6;
  if (has_m_collectmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_collectmax(), target);
  }

  // optional int32 m_splashNum = 7;
  if (has_m_splashnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_splashnum(), target);
  }

  // optional int32 m_splashReward = 8;
  if (has_m_splashreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_splashreward(), target);
  }

  // optional int32 m_massageNum = 9;
  if (has_m_massagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_massagenum(), target);
  }

  // optional int32 m_massageTime = 10;
  if (has_m_massagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_massagetime(), target);
  }

  // optional int32 m_massageReward = 11;
  if (has_m_massagereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_massagereward(), target);
  }

  // optional int32 m_pairExpAddition = 12;
  if (has_m_pairexpaddition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_pairexpaddition(), target);
  }

  // optional int32 m_mapId = 13;
  if (has_m_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_mapid(), target);
  }

  // optional int32 m_duration = 14;
  if (has_m_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_duration(), target);
  }

  // optional int32 m_expAddInterval = 15;
  if (has_m_expaddinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_expaddinterval(), target);
  }

  // optional int32 m_splashSI = 16;
  if (has_m_splashsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_splashsi(), target);
  }

  // optional int32 m_birthAreaId = 17;
  if (has_m_birthareaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_birthareaid(), target);
  }

  // optional int32 m_actId = 18;
  if (has_m_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_actid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WashpartyWashparty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_collectId = 2;
    if (has_m_collectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_collectid());
    }

    // optional int32 m_collectNum = 3;
    if (has_m_collectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_collectnum());
    }

    // optional int32 m_collectPosId = 4;
    if (has_m_collectposid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_collectposid());
    }

    // optional int32 m_collectGenInterval = 5;
    if (has_m_collectgeninterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_collectgeninterval());
    }

    // optional int32 m_collectMax = 6;
    if (has_m_collectmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_collectmax());
    }

    // optional int32 m_splashNum = 7;
    if (has_m_splashnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_splashnum());
    }

    // optional int32 m_splashReward = 8;
    if (has_m_splashreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_splashreward());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_massageNum = 9;
    if (has_m_massagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_massagenum());
    }

    // optional int32 m_massageTime = 10;
    if (has_m_massagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_massagetime());
    }

    // optional int32 m_massageReward = 11;
    if (has_m_massagereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_massagereward());
    }

    // optional int32 m_pairExpAddition = 12;
    if (has_m_pairexpaddition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pairexpaddition());
    }

    // optional int32 m_mapId = 13;
    if (has_m_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mapid());
    }

    // optional int32 m_duration = 14;
    if (has_m_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_duration());
    }

    // optional int32 m_expAddInterval = 15;
    if (has_m_expaddinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_expaddinterval());
    }

    // optional int32 m_splashSI = 16;
    if (has_m_splashsi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_splashsi());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_birthAreaId = 17;
    if (has_m_birthareaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_birthareaid());
    }

    // optional int32 m_actId = 18;
    if (has_m_actid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_actid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WashpartyWashparty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WashpartyWashparty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WashpartyWashparty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WashpartyWashparty::MergeFrom(const E_WashpartyWashparty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_collectid()) {
      set_m_collectid(from.m_collectid());
    }
    if (from.has_m_collectnum()) {
      set_m_collectnum(from.m_collectnum());
    }
    if (from.has_m_collectposid()) {
      set_m_collectposid(from.m_collectposid());
    }
    if (from.has_m_collectgeninterval()) {
      set_m_collectgeninterval(from.m_collectgeninterval());
    }
    if (from.has_m_collectmax()) {
      set_m_collectmax(from.m_collectmax());
    }
    if (from.has_m_splashnum()) {
      set_m_splashnum(from.m_splashnum());
    }
    if (from.has_m_splashreward()) {
      set_m_splashreward(from.m_splashreward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_massagenum()) {
      set_m_massagenum(from.m_massagenum());
    }
    if (from.has_m_massagetime()) {
      set_m_massagetime(from.m_massagetime());
    }
    if (from.has_m_massagereward()) {
      set_m_massagereward(from.m_massagereward());
    }
    if (from.has_m_pairexpaddition()) {
      set_m_pairexpaddition(from.m_pairexpaddition());
    }
    if (from.has_m_mapid()) {
      set_m_mapid(from.m_mapid());
    }
    if (from.has_m_duration()) {
      set_m_duration(from.m_duration());
    }
    if (from.has_m_expaddinterval()) {
      set_m_expaddinterval(from.m_expaddinterval());
    }
    if (from.has_m_splashsi()) {
      set_m_splashsi(from.m_splashsi());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_birthareaid()) {
      set_m_birthareaid(from.m_birthareaid());
    }
    if (from.has_m_actid()) {
      set_m_actid(from.m_actid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WashpartyWashparty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WashpartyWashparty::CopyFrom(const E_WashpartyWashparty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WashpartyWashparty::IsInitialized() const {

  return true;
}

void E_WashpartyWashparty::Swap(E_WashpartyWashparty* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_collectid_, other->m_collectid_);
    std::swap(m_collectnum_, other->m_collectnum_);
    std::swap(m_collectposid_, other->m_collectposid_);
    std::swap(m_collectgeninterval_, other->m_collectgeninterval_);
    std::swap(m_collectmax_, other->m_collectmax_);
    std::swap(m_splashnum_, other->m_splashnum_);
    std::swap(m_splashreward_, other->m_splashreward_);
    std::swap(m_massagenum_, other->m_massagenum_);
    std::swap(m_massagetime_, other->m_massagetime_);
    std::swap(m_massagereward_, other->m_massagereward_);
    std::swap(m_pairexpaddition_, other->m_pairexpaddition_);
    std::swap(m_mapid_, other->m_mapid_);
    std::swap(m_duration_, other->m_duration_);
    std::swap(m_expaddinterval_, other->m_expaddinterval_);
    std::swap(m_splashsi_, other->m_splashsi_);
    std::swap(m_birthareaid_, other->m_birthareaid_);
    std::swap(m_actid_, other->m_actid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WashpartyWashparty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WashpartyWashparty_descriptor_;
  metadata.reflection = E_WashpartyWashparty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WashpartyWashparty::kEWashpartyWashpartyListFieldNumber;
#endif  // !_MSC_VER

Sheet_WashpartyWashparty::Sheet_WashpartyWashparty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WashpartyWashparty::InitAsDefaultInstance() {
}

Sheet_WashpartyWashparty::Sheet_WashpartyWashparty(const Sheet_WashpartyWashparty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WashpartyWashparty::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WashpartyWashparty::~Sheet_WashpartyWashparty() {
  SharedDtor();
}

void Sheet_WashpartyWashparty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WashpartyWashparty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WashpartyWashparty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WashpartyWashparty_descriptor_;
}

const Sheet_WashpartyWashparty& Sheet_WashpartyWashparty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWashparty_2eproto();
  return *default_instance_;
}

Sheet_WashpartyWashparty* Sheet_WashpartyWashparty::default_instance_ = NULL;

Sheet_WashpartyWashparty* Sheet_WashpartyWashparty::New() const {
  return new Sheet_WashpartyWashparty;
}

void Sheet_WashpartyWashparty::Clear() {
  e_washpartywashparty_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WashpartyWashparty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WashpartyWashparty E_WashpartyWashparty_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WashpartyWashparty_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_washpartywashparty_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WashpartyWashparty_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WashpartyWashparty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WashpartyWashparty E_WashpartyWashparty_List = 1;
  for (int i = 0; i < this->e_washpartywashparty_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_washpartywashparty_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WashpartyWashparty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WashpartyWashparty E_WashpartyWashparty_List = 1;
  for (int i = 0; i < this->e_washpartywashparty_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_washpartywashparty_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WashpartyWashparty::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WashpartyWashparty E_WashpartyWashparty_List = 1;
  total_size += 1 * this->e_washpartywashparty_list_size();
  for (int i = 0; i < this->e_washpartywashparty_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_washpartywashparty_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WashpartyWashparty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WashpartyWashparty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WashpartyWashparty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WashpartyWashparty::MergeFrom(const Sheet_WashpartyWashparty& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_washpartywashparty_list_.MergeFrom(from.e_washpartywashparty_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WashpartyWashparty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WashpartyWashparty::CopyFrom(const Sheet_WashpartyWashparty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WashpartyWashparty::IsInitialized() const {

  return true;
}

void Sheet_WashpartyWashparty::Swap(Sheet_WashpartyWashparty* other) {
  if (other != this) {
    e_washpartywashparty_list_.Swap(&other->e_washpartywashparty_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WashpartyWashparty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WashpartyWashparty_descriptor_;
  metadata.reflection = Sheet_WashpartyWashparty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WashpartyExp::kMLvFieldNumber;
const int E_WashpartyExp::kMWashExpFieldNumber;
#endif  // !_MSC_VER

E_WashpartyExp::E_WashpartyExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WashpartyExp::InitAsDefaultInstance() {
}

E_WashpartyExp::E_WashpartyExp(const E_WashpartyExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WashpartyExp::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_washexp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WashpartyExp::~E_WashpartyExp() {
  SharedDtor();
}

void E_WashpartyExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WashpartyExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WashpartyExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WashpartyExp_descriptor_;
}

const E_WashpartyExp& E_WashpartyExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWashparty_2eproto();
  return *default_instance_;
}

E_WashpartyExp* E_WashpartyExp::default_instance_ = NULL;

E_WashpartyExp* E_WashpartyExp::New() const {
  return new E_WashpartyExp;
}

void E_WashpartyExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_washexp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WashpartyExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_washExp;
        break;
      }

      // optional int64 m_washExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_washExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_washexp_)));
          set_has_m_washexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WashpartyExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int64 m_washExp = 2;
  if (has_m_washexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_washexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WashpartyExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int64 m_washExp = 2;
  if (has_m_washexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_washexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WashpartyExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int64 m_washExp = 2;
    if (has_m_washexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_washexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WashpartyExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WashpartyExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WashpartyExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WashpartyExp::MergeFrom(const E_WashpartyExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_washexp()) {
      set_m_washexp(from.m_washexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WashpartyExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WashpartyExp::CopyFrom(const E_WashpartyExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WashpartyExp::IsInitialized() const {

  return true;
}

void E_WashpartyExp::Swap(E_WashpartyExp* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_washexp_, other->m_washexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WashpartyExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WashpartyExp_descriptor_;
  metadata.reflection = E_WashpartyExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WashpartyExp::kEWashpartyExpListFieldNumber;
#endif  // !_MSC_VER

Sheet_WashpartyExp::Sheet_WashpartyExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WashpartyExp::InitAsDefaultInstance() {
}

Sheet_WashpartyExp::Sheet_WashpartyExp(const Sheet_WashpartyExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WashpartyExp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WashpartyExp::~Sheet_WashpartyExp() {
  SharedDtor();
}

void Sheet_WashpartyExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WashpartyExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WashpartyExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WashpartyExp_descriptor_;
}

const Sheet_WashpartyExp& Sheet_WashpartyExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWashparty_2eproto();
  return *default_instance_;
}

Sheet_WashpartyExp* Sheet_WashpartyExp::default_instance_ = NULL;

Sheet_WashpartyExp* Sheet_WashpartyExp::New() const {
  return new Sheet_WashpartyExp;
}

void Sheet_WashpartyExp::Clear() {
  e_washpartyexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WashpartyExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WashpartyExp E_WashpartyExp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WashpartyExp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_washpartyexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WashpartyExp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WashpartyExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WashpartyExp E_WashpartyExp_List = 1;
  for (int i = 0; i < this->e_washpartyexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_washpartyexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WashpartyExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WashpartyExp E_WashpartyExp_List = 1;
  for (int i = 0; i < this->e_washpartyexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_washpartyexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WashpartyExp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WashpartyExp E_WashpartyExp_List = 1;
  total_size += 1 * this->e_washpartyexp_list_size();
  for (int i = 0; i < this->e_washpartyexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_washpartyexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WashpartyExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WashpartyExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WashpartyExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WashpartyExp::MergeFrom(const Sheet_WashpartyExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_washpartyexp_list_.MergeFrom(from.e_washpartyexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WashpartyExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WashpartyExp::CopyFrom(const Sheet_WashpartyExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WashpartyExp::IsInitialized() const {

  return true;
}

void Sheet_WashpartyExp::Swap(Sheet_WashpartyExp* other) {
  if (other != this) {
    e_washpartyexp_list_.Swap(&other->e_washpartyexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WashpartyExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WashpartyExp_descriptor_;
  metadata.reflection = Sheet_WashpartyExp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
